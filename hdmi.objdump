
hdmi.elf:     file format elf32-littlenios2
hdmi.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080244

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0001c790 memsz 0x0001c790 flags r-x
    LOAD off    0x0001d7b0 vaddr 0x0009c7b0 paddr 0x0009edac align 2**12
         filesz 0x000025fc memsz 0x000025fc flags rw-
    LOAD off    0x000203a8 vaddr 0x000a13a8 paddr 0x000a13a8 align 2**12
         filesz 0x00000000 memsz 0x0000052c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b5dc  00080244  00080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000f90  0009b820  0009b820  0001c820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000025fc  0009c7b0  0009edac  0001d7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000052c  000a13a8  000a13a8  000203a8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000a18d4  000a18d4  0001fdac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001fdac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010f8  00000000  00000000  0001fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002dcb5  00000000  00000000  00020ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b1b8  00000000  00000000  0004eb7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000f2cf  00000000  00000000  00059d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000384c  00000000  00000000  00069004  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000057fd  00000000  00000000  0006c850  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001cb01  00000000  00000000  0007204d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0008eb50  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001b10  00000000  00000000  0008eba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00095182  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00095185  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00095188  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00095189  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009518a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009518e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00095192  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00095196  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0009519f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000951a8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  000951b1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  000951b5  2**0
                  CONTENTS, READONLY
 29 .jdi          00003985  00000000  00000000  000951d8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00065e03  00000000  00000000  00098b5d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080244 l    d  .text	00000000 .text
0009b820 l    d  .rodata	00000000 .rodata
0009c7b0 l    d  .rwdata	00000000 .rwdata
000a13a8 l    d  .bss	00000000 .bss
000a18d4 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test7_bsp//obj/HAL/src/crt0.o
0008027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 EDID.c
00080280 l     F .text	0000007c EDIDCheckSum
00000000 l    df *ABS*	00000000 HDMI_TX.c
000a13ac l     O .bss	00000001 PreHPD.4474
000a13ad l     O .bss	00000001 PreHPDChange.4473
00000000 l    df *ABS*	00000000 dss_sha.c
00000000 l    df *ABS*	00000000 it6613_drv.c
0009ed5c l     O .rwdata	00000003 bCSCOffset_16_235
0009ed5f l     O .rwdata	00000003 bCSCOffset_0_255
0009c7c0 l     O .rwdata	00000012 bCSCMtx_RGB2YUV_ITU601_16_235
0009c7d2 l     O .rwdata	00000012 bCSCMtx_RGB2YUV_ITU601_0_255
0009c7e4 l     O .rwdata	00000012 bCSCMtx_RGB2YUV_ITU709_16_235
0009c7f6 l     O .rwdata	00000012 bCSCMtx_RGB2YUV_ITU709_0_255
00081488 l     F .text	000000fc InitIT6613_HDCPROM
00086494 l     F .text	00000034 DISABLE_NULL_PKT
000864c8 l     F .text	00000034 DISABLE_ACP_PKT
000864fc l     F .text	00000034 DISABLE_ISRC1_PKT
00086530 l     F .text	00000034 DISABLE_ISRC2_PKT
00086564 l     F .text	00000034 DISABLE_AVI_INFOFRM_PKT
00086598 l     F .text	00000034 DISABLE_AUD_INFOFRM_PKT
000865cc l     F .text	00000034 DISABLE_SPD_INFOFRM_PKT
00086600 l     F .text	00000034 DISABLE_MPG_INFOFRM_PKT
00082730 l     F .text	0000014c SetInputMode
0008287c l     F .text	00000538 SetCSCScale
00082db4 l     F .text	000000e8 SetupAFE
00082e9c l     F .text	00000094 FireAFE
00083688 l     F .text	00000438 SetNCTS
00082f30 l     F .text	0000032c SetAudioFormat
00083c74 l     F .text	000002e0 ReadEDID
00084488 l     F .text	00000354 HDCP_Authenticate
00083fb8 l     F .text	00000070 HDCP_ResetAuth
00083ac0 l     F .text	00000040 ClearDDCFIFO
00083b40 l     F .text	00000134 AbortDDC
000862b0 l     F .text	00000044 HDCP_ResumeAuthentication
0008355c l     F .text	0000012c SetupAudioChannel
00086634 l     F .text	00000208 SetAVIInfoFrame
0008683c l     F .text	00000118 SetAudioInfoFrame
0009c850 l     O .rwdata	00000520 DeGen_Table
0009cd70 l     O .rwdata	00000280 SyncEmbTable
0008325c l     F .text	00000300 AutoAdjustAudio
000a13b6 l     O .bss	00000001 bEnableAudioChannel.4617
00083b00 l     F .text	00000040 GenerateDDCSCLK
00083f54 l     F .text	00000064 HDCP_ClearAuthInterrupt
00084028 l     F .text	0000003c HDCP_EnableEncryption
00084064 l     F .text	00000040 HDCP_Auth_Fire
000840a4 l     F .text	0000003c HDCP_StartAnCipher
000840e0 l     F .text	00000034 HDCP_StopAnCipher
00084114 l     F .text	0000005c HDCP_GenerateAn
00084170 l     F .text	00000124 HDCP_GetBCaps
00084294 l     F .text	00000114 HDCP_GetBKSV
000843a8 l     F .text	0000006c countbit
00084414 l     F .text	00000074 HDCP_Reset
00085e50 l     F .text	00000460 HDCP_Authenticate_Repeater
000847dc l     F .text	0000007c HDCP_VerifyIntegration
000a1428 l     O .bss	00000020 KSVList
000a1448 l     O .bss	00000014 Vr
000a13ae l     O .bss	00000008 M0
00084858 l     F .text	00000054 HDCP_CancelRepeaterAuthenticate
000848ac l     F .text	00000040 HDCP_ResumeRepeaterAuthenticate
000848ec l     F .text	000001ac HDCP_GetKSVList
00084a98 l     F .text	0000028c HDCP_GetVr
00084d24 l     F .text	0000017c HDCP_GetM0
000a145c l     O .bss	00000040 SHABuff
000a149c l     O .bss	00000014 V
000a14b0 l     O .bss	00000140 w
000a15f0 l     O .bss	00000014 sha
00084ea0 l     F .text	0000089c SHATransform
00085b50 l     F .text	00000300 HDCP_CheckSHA
000862f4 l     F .text	00000034 ENABLE_NULL_PKT
00086328 l     F .text	00000034 ENABLE_ACP_PKT
0008635c l     F .text	00000034 ENABLE_ISRC1_PKT
00086390 l     F .text	00000034 ENABLE_ISRC2_PKT
000863c4 l     F .text	00000034 ENABLE_AVI_INFOFRM_PKT
000863f8 l     F .text	00000034 ENABLE_AUD_INFOFRM_PKT
0008642c l     F .text	00000034 ENABLE_SPD_INFOFRM_PKT
00086460 l     F .text	00000034 ENABLE_MPG_INFOFRM_PKT
00086954 l     F .text	000000e4 SetSPDInfoFrame
00086a38 l     F .text	00000154 SetMPEGInfoFrame
00000000 l    df *ABS*	00000000 it6613_sys.c
000a1604 l     O .bss	00000080 EDID_Buf
00000000 l    df *ABS*	00000000 mcu.c
000a13dc l     O .bss	00000004 bEnableErrorF
000a13e0 l     O .bss	00000004 BootTime.4239
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 impure.c
0009d2b0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0009c4c2 l     O .rodata	00000010 zeroes.4389
0009c4d2 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
0009c4e2 l     O .rodata	00000010 zeroes.4404
0008d638 l     F .text	000000bc __sbprintf
0009c4f2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfprintf_1.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0008d970 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0008f4a0 l     F .text	00000008 __fp_unlock
0008f4b4 l     F .text	0000019c __sinit.part.1
0008f650 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0009d6f4 l     O .rwdata	00000020 lc_ctype_charset
0009d6d4 l     O .rwdata	00000020 lc_message_charset
0009d714 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0009c520 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0009c654 l     O .rodata	00000010 blanks.4332
0009c644 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
00093e78 l     F .text	000000fc __sprint_r.part.0
0009c674 l     O .rodata	00000010 blanks.4348
0009c664 l     O .rodata	00000010 zeroes.4349
00095404 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00098f0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00099018 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00099044 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00099130 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00099210 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000992fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000994d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0009ed9c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000998f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00099a24 l     F .text	00000034 alt_dev_reg
0009dcfc l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00099d1c l     F .text	0000020c altera_avalon_jtag_uart_irq
00099f28 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0009a560 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0009a8f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0009ad6c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0009aeac l     F .text	0000003c alt_get_errno
0009aee8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000a1424 g     O .bss	00000004 alt_instruction_exception_handler
00089004 g     F .text	00000018 putchar
00091f48 g     F .text	00000074 _mprec_log10
000884fc g     F .text	0000010c I2C_Read
00092034 g     F .text	0000008c __any_on
00095af8 g     F .text	00000054 _isatty_r
0009c52c g     O .rodata	00000028 __mprec_tinytens
0009940c g     F .text	0000007c alt_main
0008901c g     F .text	000000c0 _puts_r
000a17d4 g     O .bss	00000100 alt_irq
00095b4c g     F .text	00000060 _lseek_r
00080f70 g     F .text	0000002c HDMITX_DisableVideoOutput
0009edac g       *ABS*	00000000 __flash_rwdata_start
00097a38 g     F .text	00000088 .hidden __eqdf2
00081e44 g     F .text	00000048 DisableIT6613
000a16bc g     O .bss	0000000d AudioInfo
000a13a8 g     O .bss	00000004 TX_HDP
000a18d4 g       *ABS*	00000000 __alt_heap_start
000878bc g     F .text	0000007c HDMITX_Reset
00087ea0 g     F .text	00000130 FindVIC
00088fc0 g     F .text	0000003c printf
00095c0c g     F .text	0000009c _wcrtomb_r
0008117c g     F .text	0000007c HDMITX_IsSinkSupportColorDepth30
0009292c g     F .text	0000005c __sseek
0008f7f0 g     F .text	00000010 __sinit
000954c0 g     F .text	00000140 __swbuf_r
000902b8 g     F .text	0000007c _setlocale_r
0008f658 g     F .text	00000068 __sfmoreglue
00087718 g     F .text	00000020 OS_TicksPerSecond
000994ac g     F .text	00000024 __malloc_unlock
00080f9c g     F .text	0000002c HDMITX_EnableVideoOutput
00081430 g     F .text	00000058 HDMITX_InitInstance
00087cb8 g     F .text	00000058 I2C_Write_Byte
00090e40 g     F .text	0000015c memmove
0008f7d8 g     F .text	00000018 _cleanup
000824b4 g     F .text	0000027c ProgramSyncEmbeddedVideoMode
000910c4 g     F .text	000000a8 _Balloc
00081f28 g     F .text	0000005c EnableAVIInfoFrame
00097ac0 g     F .text	000000dc .hidden __gtdf2
0009b100 g     F .text	00000024 altera_nios2_gen2_irq_init
00081100 g     F .text	0000007c HDMITX_IsSinkSupportColorDepth36
0008885c g     F .text	00000130 i2c_write
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00095a9c g     F .text	0000005c _fstat_r
000a1408 g     O .bss	00000004 errno
000928a8 g     F .text	00000008 __seofread
00092c3c g     F .text	0000123c ___svfiprintf_internal_r
000a1410 g     O .bss	00000004 alt_argv
00082140 g     F .text	000000e8 Get6613Reg
000a6d5c g       *ABS*	00000000 _gp
000998c0 g     F .text	00000030 usleep
0009db7c g     O .rwdata	00000180 alt_fd_list
00088ffc g     F .text	00000008 _putchar_r
0009b124 g     F .text	00000090 alt_find_dev
00088e48 g     F .text	00000148 memcpy
0008f4a8 g     F .text	0000000c _cleanup_r
000802fc g     F .text	000000fc ParseVESAEDID
00098d24 g     F .text	000000dc .hidden __floatsidf
00087fd0 g     F .text	00000050 SetupTxVIC
0009ae30 g     F .text	0000007c alt_io_redirect
00097b9c g     F .text	000000f4 .hidden __ltdf2
0009b820 g       *ABS*	00000000 __DTOR_END__
00087d10 g     F .text	000000cc I2C_Read_ByteN
000816ac g     F .text	00000038 SetupVideoInputSignal
000890dc g     F .text	00000014 puts
00081f84 g     F .text	0000005c EnableAudioInfoFrame
0009b3f0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0009c83e g     O .rwdata	00000012 bCSCMtx_YUV2RGB_ITU709_0_255
0009278c g     F .text	00000074 __fpclassifyd
00088020 g     F .text	00000104 VPG_Config
000a13c0 g     O .bss	00000004 VideoPixelClock
00091ea4 g     F .text	000000a4 __ratio
000953e8 g     F .text	0000001c __vfiprintf_internal
0009a120 g     F .text	0000021c altera_avalon_jtag_uart_read
000816e4 g     F .text	00000194 EnableVideoOutput
00088f90 g     F .text	00000030 _printf_r
00088d8c g     F .text	00000064 .hidden __udivsi3
0009916c g     F .text	000000a4 isatty
0009c81a g     O .rwdata	00000012 bCSCMtx_YUV2RGB_ITU601_0_255
0009c57c g     O .rodata	000000c8 __mprec_tens
00090334 g     F .text	0000000c __locale_charset
0008d7e8 g     F .text	00000034 vsnprintf
0009b360 g     F .text	00000090 alt_icache_flush
00088608 g     F .text	00000150 I2C_MultipleRead
000a1404 g     O .bss	00000004 __malloc_top_pad
0009ed74 g     O .rwdata	00000004 __mb_cur_max
00090364 g     F .text	0000000c _localeconv_r
000914d0 g     F .text	0000003c __i2b
0008fc74 g     F .text	000004bc __sfvwrite_r
00092800 g     F .text	00000054 _sbrk_r
00080ce8 g     F .text	00000188 HDMITX_SetAVIInfoFrame
00095bac g     F .text	00000060 _read_r
00080e70 g     F .text	00000080 HDMITX_ChangeVideoTiming
0009ed94 g     O .rwdata	00000004 alt_max_fd
000a13c4 g     O .bss	00000004 aspec
00095790 g     F .text	000000f0 _fclose_r
0008f470 g     F .text	00000030 fflush
000a1400 g     O .bss	00000004 __malloc_max_sbrked_mem
000803f8 g     F .text	00000728 ParseCEAEDID
000968a4 g     F .text	000008ac .hidden __adddf3
00081080 g     F .text	00000080 HDMITX_IsSinkSupportYUV422
00088378 g     F .text	00000058 I2C_Open
00091c4c g     F .text	0000010c __b2d
0009636c g     F .text	00000538 .hidden __umoddi3
00099338 g     F .text	000000d4 lseek
0009ed6c g     O .rwdata	00000004 _global_impure_ptr
00092228 g     F .text	00000564 _realloc_r
000a18d4 g       *ABS*	00000000 __bss_end
0009ac7c g     F .text	000000f0 alt_iic_isr_register
0009cff0 g     O .rwdata	000002c0 gszVicText
000997b8 g     F .text	00000108 alt_tick
00095df4 g     F .text	00000578 .hidden __udivdi3
000959f8 g     F .text	00000024 _fputwc_r
0009c554 g     O .rodata	00000028 __mprec_bigtens
000912b4 g     F .text	00000104 __s2b
0008573c g     F .text	00000414 SHA_Simple
00098e00 g     F .text	000000a8 .hidden __floatunsidf
0009198c g     F .text	00000060 __mcmp
00081000 g     F .text	00000080 HDMITX_IsSinkSupportYUV444
0008f810 g     F .text	00000018 __fp_lock_all
0009ac30 g     F .text	0000004c alt_ic_irq_enabled
00088418 g     F .text	000000e4 I2C_Write
00081b44 g     F .text	00000300 CheckHDMITX
0009971c g     F .text	0000009c alt_alarm_stop
000a1420 g     O .bss	00000004 alt_irq_active
00081e8c g     F .text	00000054 DisableVideoOutput
00080000 g       *ABS*	00000000 __alt_mem_onchip_mem
000800fc g     F .exceptions	000000d4 alt_irq_handler
0009db54 g     O .rwdata	00000028 alt_dev_null
0008717c g     F .text	000001e8 ConfigAVIInfoFrame
000a16cc g     O .bss	000000f8 RxCapability
00087af4 g     F .text	000000b4 HDMITX_ReadI2C_ByteN
00081af0 g     F .text	00000054 EnableHDCP
00088758 g     F .text	0000008c i2c_start
0009a8d8 g     F .text	00000020 alt_dcache_flush_all
000913b8 g     F .text	00000068 __hi0bits
00098ca4 g     F .text	00000080 .hidden __fixdfsi
0009edac g       *ABS*	00000000 __ram_rwdata_end
0009ed8c g     O .rwdata	00000008 alt_dev_list
0009992c g     F .text	000000f8 write
000a13e4 g     O .bss	00000004 gDemoMode
000920c0 g     F .text	000000a0 _putc_r
0009c7b0 g       *ABS*	00000000 __ram_rodata_end
00099080 g     F .text	000000b0 fstat
00087a64 g     F .text	00000044 HDMITX_ReadI2C_Byte
00097b9c g     F .text	000000f4 .hidden __ledf2
00088b28 g     F .text	0000006c myprintf
00091704 g     F .text	00000140 __pow5mult
00093f8c g     F .text	0000145c ___vfiprintf_internal_r
000a13f8 g     O .bss	00000004 __nlocale_changed
00088df0 g     F .text	00000058 .hidden __umodsi3
0008780c g     F .text	000000b0 OS_PRINTF
000a18d4 g       *ABS*	00000000 end
00099c5c g     F .text	000000c0 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0009b820 g       *ABS*	00000000 __CTOR_LIST__
000cfec0 g       *ABS*	00000000 __alt_stack_pointer
000879b4 g     F .text	000000b0 HDMITX_DumpReg
0009a5d8 g     F .text	0000007c alt_avalon_timer_sc_init
00098ea8 g     F .text	00000064 .hidden __clzsi2
0009a33c g     F .text	00000224 altera_avalon_jtag_uart_write
00081a4c g     F .text	000000a4 GetEDIDData
0008f800 g     F .text	00000004 __sfp_lock_acquire
00090d5c g     F .text	000000e4 memchr
0008b424 g     F .text	000021f8 ___vfprintf_internal_r
000890f0 g     F .text	00000058 _sprintf_r
000a13c8 g     O .bss	00000004 Colorimetry
0008f964 g     F .text	00000310 _free_r
00090340 g     F .text	00000010 __locale_mb_cur_max
0009b66c g     F .text	00000180 __call_exitprocs
000a13f4 g     O .bss	00000004 __mlocale_changed
0009ed78 g     O .rwdata	00000004 __malloc_sbrk_base
00080244 g     F .text	0000003c _start
00080cb8 g     F .text	00000030 HDMITX_HPD
000a1418 g     O .bss	00000004 _alt_tick_rate
000876f8 g     F .text	00000020 OS_GetTicks
00080fc8 g     F .text	00000038 HDMITX_SetColorSpace
00091844 g     F .text	00000148 __lshift
000a141c g     O .bss	00000004 _alt_nticks
0009950c g     F .text	000000fc read
00081878 g     F .text	000001d4 EnableAudioOutput
00099a90 g     F .text	00000068 alt_sys_init
00092a6c g     F .text	000001d0 __ssprint_r
0009b554 g     F .text	00000118 __register_exitproc
0009150c g     F .text	000001f8 __multiply
00099fc8 g     F .text	00000068 altera_avalon_jtag_uart_close
0009c7b0 g       *ABS*	00000000 __ram_rwdata_start
0009b820 g       *ABS*	00000000 __ram_rodata_start
000a1684 g     O .bss	00000028 __malloc_current_mallinfo
00091d58 g     F .text	0000014c __d2b
00080ef0 g     F .text	00000080 HDMITX_ChangeVideoTimingAndColor
000a13cc g     O .bss	00000001 pixelrep
00099af8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0009b2bc g     F .text	000000a4 alt_get_fd
0009a780 g     F .text	00000158 alt_busy_sleep
00095678 g     F .text	00000054 _close_r
0009b4d8 g     F .text	0000007c memcmp
00099bb8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000a18d4 g       *ABS*	00000000 __alt_stack_base
00099c08 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0008d81c g     F .text	00000154 __swsetup_r
00097150 g     F .text	000008e8 .hidden __divdf3
0008f6c0 g     F .text	00000118 __sfp
00091fbc g     F .text	00000078 __copybits
0009d74c g     O .rwdata	00000408 __malloc_av_
0008f80c g     F .text	00000004 __sinit_lock_release
0008d6f8 g     F .text	000000f0 _vsnprintf_r
000887e4 g     F .text	00000078 i2c_stop
00097c90 g     F .text	00000718 .hidden __muldf3
000a13bd g     O .bss	00000001 bInputSignalType
00092854 g     F .text	00000054 __sread
0009b1b4 g     F .text	00000108 alt_find_file
00082228 g     F .text	0000028c ProgramDEGenModeByID
0009a934 g     F .text	000000a4 alt_dev_llist_insert
00099488 g     F .text	00000024 __malloc_lock
0009966c g     F .text	000000b0 sbrk
0008924c g     F .text	000021d8 ___svfprintf_internal_r
00087c64 g     F .text	00000054 I2C_Read_Byte
0008f414 g     F .text	0000005c _fflush_r
000956cc g     F .text	000000c4 _calloc_r
00087aa8 g     F .text	0000004c HDMITX_WriteI2C_Byte
000a13a8 g       *ABS*	00000000 __bss_start
000877a4 g     F .text	00000068 ErrorF
00090f9c g     F .text	00000128 memset
00088248 g     F .text	00000130 main
000a1414 g     O .bss	00000004 alt_envp
000a13fc g     O .bss	00000004 __malloc_max_total_mem
00088b94 g     F .text	0000007c myprintf_hexarray
00099b58 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008898c g     F .text	00000168 i2c_read
00095600 g     F .text	00000018 __swbuf
0009c7b0 g     O .rwdata	00000010 InitInstanceData
000a13ec g     O .bss	00000004 gVpgColor
00087938 g     F .text	0000007c HDMITX_DumpAllReg
00092988 g     F .text	00000008 __sclose
000cfec0 g       *ABS*	00000000 __alt_heap_limit
00095880 g     F .text	00000014 fclose
0008db70 g     F .text	00001688 _dtoa_r
00090550 g     F .text	0000080c _malloc_r
00095d68 g     F .text	00000030 __ascii_wctomb
0009ed98 g     O .rwdata	00000004 alt_errno
00087ba8 g     F .text	000000bc HDMITX_WriteI2C_ByteN
00090130 g     F .text	000000c4 _fwalk
00080c50 g     F .text	00000068 HDMITX_Init
000811f8 g     F .text	00000040 HDMITX_SetOutputColorDepth
00092160 g     F .text	000000c8 putc
00088c94 g     F .text	00000084 .hidden __divsi3
0008f840 g     F .text	00000124 _malloc_trim_r
0009b820 g       *ABS*	00000000 __CTOR_END__
00092990 g     F .text	000000dc strcmp
0009b820 g       *ABS*	00000000 __flash_rodata_start
000a13bc g     O .bss	00000001 bInputColorMode
0009b820 g       *ABS*	00000000 __DTOR_LIST__
00081238 g     F .text	000001f8 HDMITX_DevLoopProc
00097a38 g     F .text	00000088 .hidden __nedf2
000a13b8 g     O .bss	00000004 bChangeMode
00099a58 g     F .text	00000038 alt_irq_init
00099608 g     F .text	00000064 alt_release_fd
00087778 g     F .text	0000002c EnableDebugMessage
00089148 g     F .text	0000006c sprintf
0009c684 g     O .rodata	00000100 .hidden __clz_tab
00088af4 g     F .text	00000034 debug_output
000a13f0 g     O .bss	00000004 _PathLocale
0009b48c g     F .text	00000014 atexit
00095618 g     F .text	00000060 _write_r
00090370 g     F .text	00000018 setlocale
0009ed70 g     O .rwdata	00000004 _impure_ptr
000a140c g     O .bss	00000004 alt_argc
0008f1f8 g     F .text	0000021c __sflush_r
00087ddc g     F .text	000000c4 I2C_Write_ByteN
0009aa38 g     F .text	00000060 _do_dtors
0009035c g     F .text	00000008 __locale_cjk_lang
00088c10 g     F .text	00000084 myprintf_dwordarray
000a13d0 g     O .bss	00000004 bHDMIMode
00080020 g       .exceptions	00000000 alt_irq_entry
00091be8 g     F .text	00000064 __ulp
0008f828 g     F .text	00000018 __fp_unlock_all
0009ed84 g     O .rwdata	00000008 alt_fs_list
0009ed64 g     O .rwdata	00000004 gEnableColorDepth
000a13d4 g     O .bss	00000004 bAudioEnable
00080020 g       *ABS*	00000000 __ram_exceptions_start
00090388 g     F .text	0000000c localeconv
000a13d8 g     O .bss	00000001 VIC
0009aacc g     F .text	00000050 alt_ic_isr_register
0009edac g       *ABS*	00000000 _edata
00081584 g     F .text	00000128 InitIT6613
000a18d4 g       *ABS*	00000000 _end
00081fe0 g     F .text	0000008c SetAVMute
00095894 g     F .text	00000164 __fputwc
00080244 g       *ABS*	00000000 __ram_exceptions_end
0009a030 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0009aba4 g     F .text	0000008c alt_ic_irq_disable
00086b8c g     F .text	0000012c HDMITX_SetOutput
000928b0 g     F .text	0000007c __swrite
0009ed7c g     O .rwdata	00000004 __malloc_trim_threshold
00090350 g     F .text	0000000c __locale_msgcharset
0009b4a0 g     F .text	00000038 exit
000901f4 g     F .text	000000c4 _fwalk_reent
000919ec g     F .text	000001fc __mdiff
0009c808 g     O .rwdata	00000012 bCSCMtx_YUV2RGB_ITU601_16_235
0008206c g     F .text	000000d4 SetOutputColorDepthPhase
00088d18 g     F .text	00000074 .hidden __modsi3
000cfec0 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
0008f804 g     F .text	00000004 __sfp_lock_release
0009ed68 g     O .rwdata	00000004 gbPlayTone
000876bc g     F .text	0000003c OS_DelayMS
00081ee0 g     F .text	00000048 DisableAudioOutput
0009b7ec g     F .text	00000034 _exit
0009a654 g     F .text	0000012c alt_alarm_start
00090394 g     F .text	000001bc __smakebuf_r
000883d0 g     F .text	00000048 I2C_Close
0009c82c g     O .rwdata	00000012 bCSCMtx_YUV2RGB_ITU709_16_235
000891b4 g     F .text	00000098 strlen
0009afac g     F .text	00000154 open
00086cb8 g     F .text	000004c4 HDMITX_ChangeDisplayOption
00097ac0 g     F .text	000000dc .hidden __gedf2
000a17c4 g     O .bss	00000010 AviInfo
00080b20 g     F .text	00000130 HDMITX_ChipVerify
0009ed80 g     O .rwdata	00000004 __wctomb
00093f74 g     F .text	00000018 __sprint_r
0009aa98 g     F .text	00000034 alt_icache_flush_all
000a16ac g     O .bss	00000010 Instance
0009eda8 g     O .rwdata	00000004 alt_priority_mask
00087738 g     F .text	00000040 DelayMS
0009ab1c g     F .text	00000088 alt_ic_irq_enable
0008d61c g     F .text	0000001c __vfprintf_internal
00088124 g     F .text	00000124 SetupColorSpace
00095d98 g     F .text	0000005c _wctomb_r
000983a8 g     F .text	000008fc .hidden __subdf3
000a13be g     O .bss	00000001 iVideoModeSelect
00091420 g     F .text	000000b0 __lo0bits
0009eda0 g     O .rwdata	00000008 alt_alarm_list
0009a9d8 g     F .text	00000060 _do_ctors
000a13bf g     O .bss	00000001 bOutputColorMode
00095ca8 g     F .text	000000c0 wcrtomb
00098f48 g     F .text	000000d0 close
000a13e8 g     O .bss	00000004 gVpgMode
00099278 g     F .text	00000084 alt_load
0008d6f4 g     F .text	00000004 vfprintf
00087364 g     F .text	000000c4 ConfigAudioInfoFrm
00087428 g     F .text	00000294 ParseEDID
00095a1c g     F .text	00000080 fputwc
0008f808 g     F .text	00000004 __sinit_lock_acquire
00091194 g     F .text	00000120 __multadd
0009116c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__alt_data_end+0xfffb0144>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409114 	ori	at,at,580
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	008002b4 	movhi	r2,10
   80140:	1085f504 	addi	r2,r2,6100
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	008002b4 	movhi	r2,10
   80158:	1085f504 	addi	r2,r2,6100
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <__alt_data_end+0xfffb026c>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <__alt_data_end+0xfffb0260>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e4:	000531fa 	rdctl	r2,exception
   801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801ec:	e0bffd17 	ldw	r2,-12(fp)
   801f0:	10801f0c 	andi	r2,r2,124
   801f4:	1004d0ba 	srli	r2,r2,2
   801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801fc:	0005333a 	rdctl	r2,badaddr
   80200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80204:	d0a9b217 	ldw	r2,-22840(gp)
   80208:	10000726 	beq	r2,zero,80228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   8020c:	d0a9b217 	ldw	r2,-22840(gp)
   80210:	e0fffd17 	ldw	r3,-12(fp)
   80214:	e1bffe17 	ldw	r6,-8(fp)
   80218:	e17fff17 	ldw	r5,-4(fp)
   8021c:	1809883a 	mov	r4,r3
   80220:	103ee83a 	callr	r2
   80224:	00000206 	br	80230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   8022c:	0005883a 	mov	r2,zero
}
   80230:	e037883a 	mov	sp,fp
   80234:	dfc00117 	ldw	ra,4(sp)
   80238:	df000017 	ldw	fp,0(sp)
   8023c:	dec00204 	addi	sp,sp,8
   80240:	f800283a 	ret

Disassembly of section .text:

00080244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80244:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   80248:	deffb014 	ori	sp,sp,65216
    movhi gp, %hi(_gp)
   8024c:	068002b4 	movhi	gp,10
    ori gp, gp, %lo(_gp)
   80250:	d69b5714 	ori	gp,gp,27996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80254:	008002b4 	movhi	r2,10
    ori r2, r2, %lo(__bss_start)
   80258:	1084ea14 	ori	r2,r2,5032

    movhi r3, %hi(__bss_end)
   8025c:	00c002b4 	movhi	r3,10
    ori r3, r3, %lo(__bss_end)
   80260:	18c63514 	ori	r3,r3,6356

    beq r2, r3, 1f
   80264:	10c00326 	beq	r2,r3,80274 <_start+0x30>

0:
    stw zero, (r2)
   80268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   8026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80270:	10fffd36 	bltu	r2,r3,80268 <__alt_data_end+0xfffb03a8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80274:	00992780 	call	99278 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80278:	009940c0 	call	9940c <alt_main>

0008027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   8027c:	003fff06 	br	8027c <__alt_data_end+0xfffb03bc>

00080280 <EDIDCheckSum>:
#ifdef SUPPORT_EDID
static SYS_STATUS EDIDCheckSum(BYTE *pEDID) ;

static SYS_STATUS
EDIDCheckSum(BYTE *pEDID)
{
   80280:	defffc04 	addi	sp,sp,-16
   80284:	df000315 	stw	fp,12(sp)
   80288:	df000304 	addi	fp,sp,12
   8028c:	e13fff15 	stw	r4,-4(fp)
    BYTE CheckSum ;
    int i ;

	if( !pEDID )
   80290:	e0bfff17 	ldw	r2,-4(fp)
   80294:	1000021e 	bne	r2,zero,802a0 <EDIDCheckSum+0x20>
	{
		return ER_FAIL ;
   80298:	00800044 	movi	r2,1
   8029c:	00001306 	br	802ec <EDIDCheckSum+0x6c>
	}
    for( i = 0, CheckSum = 0 ; i < 128 ; i++ )
   802a0:	e03ffe15 	stw	zero,-8(fp)
   802a4:	e03ffd05 	stb	zero,-12(fp)
   802a8:	00000a06 	br	802d4 <EDIDCheckSum+0x54>
    {
        CheckSum += pEDID[i] ; CheckSum &= 0xFF ;
   802ac:	e0bffe17 	ldw	r2,-8(fp)
   802b0:	e0ffff17 	ldw	r3,-4(fp)
   802b4:	1885883a 	add	r2,r3,r2
   802b8:	10c00003 	ldbu	r3,0(r2)
   802bc:	e0bffd03 	ldbu	r2,-12(fp)
   802c0:	1885883a 	add	r2,r3,r2
   802c4:	e0bffd05 	stb	r2,-12(fp)

	if( !pEDID )
	{
		return ER_FAIL ;
	}
    for( i = 0, CheckSum = 0 ; i < 128 ; i++ )
   802c8:	e0bffe17 	ldw	r2,-8(fp)
   802cc:	10800044 	addi	r2,r2,1
   802d0:	e0bffe15 	stw	r2,-8(fp)
   802d4:	e0bffe17 	ldw	r2,-8(fp)
   802d8:	10802010 	cmplti	r2,r2,128
   802dc:	103ff31e 	bne	r2,zero,802ac <__alt_data_end+0xfffb03ec>
    {
        CheckSum += pEDID[i] ; CheckSum &= 0xFF ;
    }
    
    return (CheckSum == 0)?ER_SUCCESS:ER_FAIL ;
   802e0:	e0bffd03 	ldbu	r2,-12(fp)
   802e4:	1004c03a 	cmpne	r2,r2,zero
   802e8:	10803fcc 	andi	r2,r2,255
}
   802ec:	e037883a 	mov	sp,fp
   802f0:	df000017 	ldw	fp,0(sp)
   802f4:	dec00104 	addi	sp,sp,4
   802f8:	f800283a 	ret

000802fc <ParseVESAEDID>:

SYS_STATUS
ParseVESAEDID(BYTE *pEDID)
{
   802fc:	defffd04 	addi	sp,sp,-12
   80300:	dfc00215 	stw	ra,8(sp)
   80304:	df000115 	stw	fp,4(sp)
   80308:	df000104 	addi	fp,sp,4
   8030c:	e13fff15 	stw	r4,-4(fp)
    if( ER_SUCCESS != EDIDCheckSum(pEDID) ) return ER_FAIL ;
   80310:	e13fff17 	ldw	r4,-4(fp)
   80314:	00802800 	call	80280 <EDIDCheckSum>
   80318:	10000226 	beq	r2,zero,80324 <ParseVESAEDID+0x28>
   8031c:	00800044 	movi	r2,1
   80320:	00003006 	br	803e4 <ParseVESAEDID+0xe8>
    
	if( pEDID[0] != 0 || 
   80324:	e0bfff17 	ldw	r2,-4(fp)
   80328:	10800003 	ldbu	r2,0(r2)
   8032c:	10803fcc 	andi	r2,r2,255
   80330:	1000291e 	bne	r2,zero,803d8 <ParseVESAEDID+0xdc>
	    pEDID[7] != 0 || 
   80334:	e0bfff17 	ldw	r2,-4(fp)
   80338:	108001c4 	addi	r2,r2,7
   8033c:	10800003 	ldbu	r2,0(r2)
SYS_STATUS
ParseVESAEDID(BYTE *pEDID)
{
    if( ER_SUCCESS != EDIDCheckSum(pEDID) ) return ER_FAIL ;
    
	if( pEDID[0] != 0 || 
   80340:	10803fcc 	andi	r2,r2,255
   80344:	1000241e 	bne	r2,zero,803d8 <ParseVESAEDID+0xdc>
	    pEDID[7] != 0 || 
	    pEDID[1] != 0xFF || 
   80348:	e0bfff17 	ldw	r2,-4(fp)
   8034c:	10800044 	addi	r2,r2,1
   80350:	10800003 	ldbu	r2,0(r2)
ParseVESAEDID(BYTE *pEDID)
{
    if( ER_SUCCESS != EDIDCheckSum(pEDID) ) return ER_FAIL ;
    
	if( pEDID[0] != 0 || 
	    pEDID[7] != 0 || 
   80354:	10803fcc 	andi	r2,r2,255
   80358:	10803fd8 	cmpnei	r2,r2,255
   8035c:	10001e1e 	bne	r2,zero,803d8 <ParseVESAEDID+0xdc>
	    pEDID[1] != 0xFF || 
	    pEDID[2] != 0xFF || 
   80360:	e0bfff17 	ldw	r2,-4(fp)
   80364:	10800084 	addi	r2,r2,2
   80368:	10800003 	ldbu	r2,0(r2)
{
    if( ER_SUCCESS != EDIDCheckSum(pEDID) ) return ER_FAIL ;
    
	if( pEDID[0] != 0 || 
	    pEDID[7] != 0 || 
	    pEDID[1] != 0xFF || 
   8036c:	10803fcc 	andi	r2,r2,255
   80370:	10803fd8 	cmpnei	r2,r2,255
   80374:	1000181e 	bne	r2,zero,803d8 <ParseVESAEDID+0xdc>
	    pEDID[2] != 0xFF || 
	    pEDID[3] != 0xFF || 
   80378:	e0bfff17 	ldw	r2,-4(fp)
   8037c:	108000c4 	addi	r2,r2,3
   80380:	10800003 	ldbu	r2,0(r2)
    if( ER_SUCCESS != EDIDCheckSum(pEDID) ) return ER_FAIL ;
    
	if( pEDID[0] != 0 || 
	    pEDID[7] != 0 || 
	    pEDID[1] != 0xFF || 
	    pEDID[2] != 0xFF || 
   80384:	10803fcc 	andi	r2,r2,255
   80388:	10803fd8 	cmpnei	r2,r2,255
   8038c:	1000121e 	bne	r2,zero,803d8 <ParseVESAEDID+0xdc>
	    pEDID[3] != 0xFF || 
	    pEDID[4] != 0xFF || 
   80390:	e0bfff17 	ldw	r2,-4(fp)
   80394:	10800104 	addi	r2,r2,4
   80398:	10800003 	ldbu	r2,0(r2)
    
	if( pEDID[0] != 0 || 
	    pEDID[7] != 0 || 
	    pEDID[1] != 0xFF || 
	    pEDID[2] != 0xFF || 
	    pEDID[3] != 0xFF || 
   8039c:	10803fcc 	andi	r2,r2,255
   803a0:	10803fd8 	cmpnei	r2,r2,255
   803a4:	10000c1e 	bne	r2,zero,803d8 <ParseVESAEDID+0xdc>
	    pEDID[4] != 0xFF || 
	    pEDID[5] != 0xFF || 
   803a8:	e0bfff17 	ldw	r2,-4(fp)
   803ac:	10800144 	addi	r2,r2,5
   803b0:	10800003 	ldbu	r2,0(r2)
	if( pEDID[0] != 0 || 
	    pEDID[7] != 0 || 
	    pEDID[1] != 0xFF || 
	    pEDID[2] != 0xFF || 
	    pEDID[3] != 0xFF || 
	    pEDID[4] != 0xFF || 
   803b4:	10803fcc 	andi	r2,r2,255
   803b8:	10803fd8 	cmpnei	r2,r2,255
   803bc:	1000061e 	bne	r2,zero,803d8 <ParseVESAEDID+0xdc>
	    pEDID[5] != 0xFF || 
	    pEDID[6] != 0xFF )
   803c0:	e0bfff17 	ldw	r2,-4(fp)
   803c4:	10800184 	addi	r2,r2,6
   803c8:	10800003 	ldbu	r2,0(r2)
	    pEDID[7] != 0 || 
	    pEDID[1] != 0xFF || 
	    pEDID[2] != 0xFF || 
	    pEDID[3] != 0xFF || 
	    pEDID[4] != 0xFF || 
	    pEDID[5] != 0xFF || 
   803cc:	10803fcc 	andi	r2,r2,255
   803d0:	10803fe0 	cmpeqi	r2,r2,255
   803d4:	1000021e 	bne	r2,zero,803e0 <ParseVESAEDID+0xe4>
	    pEDID[6] != 0xFF )
	{
		return ER_FAIL ; // not a EDID 1.3 standard block.
   803d8:	00800044 	movi	r2,1
   803dc:	00000106 	br	803e4 <ParseVESAEDID+0xe8>

	/////////////////////////////////////////////////////////
	// if need to parse EDID property , put here.
	/////////////////////////////////////////////////////////
	
    return ER_SUCCESS ;
   803e0:	0005883a 	mov	r2,zero

}
   803e4:	e037883a 	mov	sp,fp
   803e8:	dfc00117 	ldw	ra,4(sp)
   803ec:	df000017 	ldw	fp,0(sp)
   803f0:	dec00204 	addi	sp,sp,8
   803f4:	f800283a 	ret

000803f8 <ParseCEAEDID>:

SYS_STATUS
ParseCEAEDID(BYTE *pCEAEDID, RX_CAP *pRxCap)
{
   803f8:	defff704 	addi	sp,sp,-36
   803fc:	dfc00815 	stw	ra,32(sp)
   80400:	df000715 	stw	fp,28(sp)
   80404:	dc400615 	stw	r17,24(sp)
   80408:	dc000515 	stw	r16,20(sp)
   8040c:	df000704 	addi	fp,sp,28
   80410:	e13ffc15 	stw	r4,-16(fp)
   80414:	e17ffd15 	stw	r5,-12(fp)
    BYTE offset,End ;
    BYTE count ;
    BYTE tag ;
    int i ;

	if( !pCEAEDID || !pRxCap ) return ER_FAIL ;
   80418:	e0bffc17 	ldw	r2,-16(fp)
   8041c:	10000226 	beq	r2,zero,80428 <ParseCEAEDID+0x30>
   80420:	e0bffd17 	ldw	r2,-12(fp)
   80424:	1000021e 	bne	r2,zero,80430 <ParseCEAEDID+0x38>
   80428:	00800044 	movi	r2,1
   8042c:	0001b506 	br	80b04 <ParseCEAEDID+0x70c>

    pRxCap->ValidCEA = FALSE ;
   80430:	e0bffd17 	ldw	r2,-12(fp)
   80434:	11003d83 	ldbu	r4,246(r2)
   80438:	00ffff84 	movi	r3,-2
   8043c:	20c6703a 	and	r3,r4,r3
   80440:	10c03d85 	stb	r3,246(r2)
    
    if( ER_SUCCESS != EDIDCheckSum(pCEAEDID) ) return ER_FAIL ;
   80444:	e13ffc17 	ldw	r4,-16(fp)
   80448:	00802800 	call	80280 <EDIDCheckSum>
   8044c:	10000226 	beq	r2,zero,80458 <ParseCEAEDID+0x60>
   80450:	00800044 	movi	r2,1
   80454:	0001ab06 	br	80b04 <ParseCEAEDID+0x70c>

    if( pCEAEDID[0] != 0x02 || pCEAEDID[1] != 0x03 ) return ER_SUCCESS ; // not a CEA BLOCK.
   80458:	e0bffc17 	ldw	r2,-16(fp)
   8045c:	10800003 	ldbu	r2,0(r2)
   80460:	10803fcc 	andi	r2,r2,255
   80464:	10800098 	cmpnei	r2,r2,2
   80468:	1000061e 	bne	r2,zero,80484 <ParseCEAEDID+0x8c>
   8046c:	e0bffc17 	ldw	r2,-16(fp)
   80470:	10800044 	addi	r2,r2,1
   80474:	10800003 	ldbu	r2,0(r2)
   80478:	10803fcc 	andi	r2,r2,255
   8047c:	108000e0 	cmpeqi	r2,r2,3
   80480:	1000021e 	bne	r2,zero,8048c <ParseCEAEDID+0x94>
   80484:	0005883a 	mov	r2,zero
   80488:	00019e06 	br	80b04 <ParseCEAEDID+0x70c>
    End = pCEAEDID[2]  ; // CEA description.
   8048c:	e0bffc17 	ldw	r2,-16(fp)
   80490:	10800083 	ldbu	r2,2(r2)
   80494:	e0bffb05 	stb	r2,-20(fp)
    pRxCap->VideoMode = pCEAEDID[3] ;
   80498:	e0bffc17 	ldw	r2,-16(fp)
   8049c:	10c000c3 	ldbu	r3,3(r2)
   804a0:	e0bffd17 	ldw	r2,-12(fp)
   804a4:	10c00045 	stb	r3,1(r2)
    
    if (pRxCap->VideoMode & CEA_SUPPORT_YUV444)
   804a8:	e0bffd17 	ldw	r2,-12(fp)
   804ac:	10800043 	ldbu	r2,1(r2)
   804b0:	10803fcc 	andi	r2,r2,255
   804b4:	1080080c 	andi	r2,r2,32
   804b8:	10000326 	beq	r2,zero,804c8 <ParseCEAEDID+0xd0>
        OS_PRINTF("Support Color: YUV444\n");
   804bc:	010002b4 	movhi	r4,10
   804c0:	212e0804 	addi	r4,r4,-18400
   804c4:	008780c0 	call	8780c <OS_PRINTF>
    if (pRxCap->VideoMode & CEA_SUPPORT_YUV422)
   804c8:	e0bffd17 	ldw	r2,-12(fp)
   804cc:	10800043 	ldbu	r2,1(r2)
   804d0:	10803fcc 	andi	r2,r2,255
   804d4:	1080040c 	andi	r2,r2,16
   804d8:	10000326 	beq	r2,zero,804e8 <ParseCEAEDID+0xf0>
        OS_PRINTF("Support Color: YUV422\n");
   804dc:	010002b4 	movhi	r4,10
   804e0:	212e0e04 	addi	r4,r4,-18376
   804e4:	008780c0 	call	8780c <OS_PRINTF>

    for( offset = 0 ; offset < 0x80 ; offset ++ )
   804e8:	e03ff905 	stb	zero,-28(fp)
   804ec:	00002606 	br	80588 <ParseCEAEDID+0x190>
    {
        if( (offset % 0x10) == 0 )
   804f0:	e0bff903 	ldbu	r2,-28(fp)
   804f4:	108003cc 	andi	r2,r2,15
   804f8:	10803fcc 	andi	r2,r2,255
   804fc:	1000061e 	bne	r2,zero,80518 <ParseCEAEDID+0x120>
        {
            ErrorF("[%02X]", offset ) ;
   80500:	e0bff903 	ldbu	r2,-28(fp)
   80504:	100b883a 	mov	r5,r2
   80508:	010002b4 	movhi	r4,10
   8050c:	212e1404 	addi	r4,r4,-18352
   80510:	00877a40 	call	877a4 <ErrorF>
   80514:	00000806 	br	80538 <ParseCEAEDID+0x140>
        }
        else if((offset%0x10)==0x08)
   80518:	e0bff903 	ldbu	r2,-28(fp)
   8051c:	108003cc 	andi	r2,r2,15
   80520:	10803fcc 	andi	r2,r2,255
   80524:	10800218 	cmpnei	r2,r2,8
   80528:	1000031e 	bne	r2,zero,80538 <ParseCEAEDID+0x140>
        {
            ErrorF( " -" ) ;
   8052c:	010002b4 	movhi	r4,10
   80530:	212e1604 	addi	r4,r4,-18344
   80534:	00877a40 	call	877a4 <ErrorF>
        }
        ErrorF(" %02X",pCEAEDID[offset]) ;
   80538:	e0bff903 	ldbu	r2,-28(fp)
   8053c:	e0fffc17 	ldw	r3,-16(fp)
   80540:	1885883a 	add	r2,r3,r2
   80544:	10800003 	ldbu	r2,0(r2)
   80548:	10803fcc 	andi	r2,r2,255
   8054c:	100b883a 	mov	r5,r2
   80550:	010002b4 	movhi	r4,10
   80554:	212e1704 	addi	r4,r4,-18340
   80558:	00877a40 	call	877a4 <ErrorF>
        if((offset%0x10)==0x0f)
   8055c:	e0bff903 	ldbu	r2,-28(fp)
   80560:	108003cc 	andi	r2,r2,15
   80564:	10803fcc 	andi	r2,r2,255
   80568:	108003d8 	cmpnei	r2,r2,15
   8056c:	1000031e 	bne	r2,zero,8057c <ParseCEAEDID+0x184>
        {
            ErrorF("\n") ;
   80570:	010002b4 	movhi	r4,10
   80574:	212e1904 	addi	r4,r4,-18332
   80578:	00877a40 	call	877a4 <ErrorF>
    if (pRxCap->VideoMode & CEA_SUPPORT_YUV444)
        OS_PRINTF("Support Color: YUV444\n");
    if (pRxCap->VideoMode & CEA_SUPPORT_YUV422)
        OS_PRINTF("Support Color: YUV422\n");

    for( offset = 0 ; offset < 0x80 ; offset ++ )
   8057c:	e0bff903 	ldbu	r2,-28(fp)
   80580:	10800044 	addi	r2,r2,1
   80584:	e0bff905 	stb	r2,-28(fp)
   80588:	e0bff903 	ldbu	r2,-28(fp)
   8058c:	10803fcc 	andi	r2,r2,255
   80590:	1080201c 	xori	r2,r2,128
   80594:	10bfe004 	addi	r2,r2,-128
   80598:	103fd50e 	bge	r2,zero,804f0 <__alt_data_end+0xfffb0630>
        {
            ErrorF("\n") ;
        }
    }
    
	pRxCap->VDOModeCount = 0 ;
   8059c:	e0bffd17 	ldw	r2,-12(fp)
   805a0:	10000085 	stb	zero,2(r2)
    pRxCap->idxNativeVDOMode = 0xff ;
   805a4:	e0bffd17 	ldw	r2,-12(fp)
   805a8:	00ffffc4 	movi	r3,-1
   805ac:	10c000c5 	stb	r3,3(r2)
    for( offset = 4 ; offset < End ; )
   805b0:	00800104 	movi	r2,4
   805b4:	e0bff905 	stb	r2,-28(fp)
   805b8:	00014a06 	br	80ae4 <ParseCEAEDID+0x6ec>
    {
        tag = pCEAEDID[offset] >> 5 ;
   805bc:	e0bff903 	ldbu	r2,-28(fp)
   805c0:	e0fffc17 	ldw	r3,-16(fp)
   805c4:	1885883a 	add	r2,r3,r2
   805c8:	10800003 	ldbu	r2,0(r2)
   805cc:	10803fcc 	andi	r2,r2,255
   805d0:	1004d17a 	srli	r2,r2,5
   805d4:	e0bffb45 	stb	r2,-19(fp)
        count = pCEAEDID[offset] & 0x1f ;
   805d8:	e0bff903 	ldbu	r2,-28(fp)
   805dc:	e0fffc17 	ldw	r3,-16(fp)
   805e0:	1885883a 	add	r2,r3,r2
   805e4:	10800003 	ldbu	r2,0(r2)
   805e8:	108007cc 	andi	r2,r2,31
   805ec:	e0bffb85 	stb	r2,-18(fp)
        switch( tag )
   805f0:	e0bffb43 	ldbu	r2,-19(fp)
   805f4:	10c00228 	cmpgeui	r3,r2,8
   805f8:	1801351e 	bne	r3,zero,80ad0 <ParseCEAEDID+0x6d8>
   805fc:	100690ba 	slli	r3,r2,2
   80600:	00800234 	movhi	r2,8
   80604:	10818504 	addi	r2,r2,1556
   80608:	1885883a 	add	r2,r3,r2
   8060c:	10800017 	ldw	r2,0(r2)
   80610:	1000683a 	jmp	r2
   80614:	00080ad0 	cmplti	zero,zero,8235
   80618:	00080634 	movhi	zero,8216
   8061c:	0008074c 	andi	zero,zero,8221
   80620:	00080828 	cmpgeui	zero,zero,8224
   80624:	00080a34 	movhi	zero,8232
   80628:	00080aa0 	cmpeqi	zero,zero,8234
   8062c:	00080ad0 	cmplti	zero,zero,8235
   80630:	00080ab8 	rdprs	zero,zero,8234
        {
        case 0x01: // Audio Data Block ;
            pRxCap->AUDDesCount = count/3 ;
   80634:	e0fffb83 	ldbu	r3,-18(fp)
   80638:	00aaaaf4 	movhi	r2,43691
   8063c:	10aaaac4 	addi	r2,r2,-21845
   80640:	1888383a 	mulxuu	r4,r3,r2
   80644:	1885383a 	mul	r2,r3,r2
   80648:	1021883a 	mov	r16,r2
   8064c:	2023883a 	mov	r17,r4
   80650:	8804d07a 	srli	r2,r17,1
   80654:	1007883a 	mov	r3,r2
   80658:	e0bffd17 	ldw	r2,-12(fp)
   8065c:	10c02105 	stb	r3,132(r2)
            offset++ ;
   80660:	e0bff903 	ldbu	r2,-28(fp)
   80664:	10800044 	addi	r2,r2,1
   80668:	e0bff905 	stb	r2,-28(fp)
            for( i = 0 ; i < pRxCap->AUDDesCount ; i++ )
   8066c:	e03ffa15 	stw	zero,-24(fp)
   80670:	00003006 	br	80734 <ParseCEAEDID+0x33c>
            {
                pRxCap->AUDDes[i].uc[0] = pCEAEDID[offset++] ;
   80674:	e0bff903 	ldbu	r2,-28(fp)
   80678:	10c00044 	addi	r3,r2,1
   8067c:	e0fff905 	stb	r3,-28(fp)
   80680:	10803fcc 	andi	r2,r2,255
   80684:	e0fffc17 	ldw	r3,-16(fp)
   80688:	1885883a 	add	r2,r3,r2
   8068c:	11000003 	ldbu	r4,0(r2)
   80690:	e17ffd17 	ldw	r5,-12(fp)
   80694:	e0fffa17 	ldw	r3,-24(fp)
   80698:	1805883a 	mov	r2,r3
   8069c:	1085883a 	add	r2,r2,r2
   806a0:	10c5883a 	add	r2,r2,r3
   806a4:	2885883a 	add	r2,r5,r2
   806a8:	10802144 	addi	r2,r2,133
   806ac:	11000005 	stb	r4,0(r2)
                pRxCap->AUDDes[i].uc[1] = pCEAEDID[offset++] ;
   806b0:	e0bff903 	ldbu	r2,-28(fp)
   806b4:	10c00044 	addi	r3,r2,1
   806b8:	e0fff905 	stb	r3,-28(fp)
   806bc:	10803fcc 	andi	r2,r2,255
   806c0:	e0fffc17 	ldw	r3,-16(fp)
   806c4:	1885883a 	add	r2,r3,r2
   806c8:	11000003 	ldbu	r4,0(r2)
   806cc:	e17ffd17 	ldw	r5,-12(fp)
   806d0:	e0fffa17 	ldw	r3,-24(fp)
   806d4:	1805883a 	mov	r2,r3
   806d8:	1085883a 	add	r2,r2,r2
   806dc:	10c5883a 	add	r2,r2,r3
   806e0:	2885883a 	add	r2,r5,r2
   806e4:	10802184 	addi	r2,r2,134
   806e8:	11000005 	stb	r4,0(r2)
                pRxCap->AUDDes[i].uc[2] = pCEAEDID[offset++] ;
   806ec:	e0bff903 	ldbu	r2,-28(fp)
   806f0:	10c00044 	addi	r3,r2,1
   806f4:	e0fff905 	stb	r3,-28(fp)
   806f8:	10803fcc 	andi	r2,r2,255
   806fc:	e0fffc17 	ldw	r3,-16(fp)
   80700:	1885883a 	add	r2,r3,r2
   80704:	11000003 	ldbu	r4,0(r2)
   80708:	e17ffd17 	ldw	r5,-12(fp)
   8070c:	e0fffa17 	ldw	r3,-24(fp)
   80710:	1805883a 	mov	r2,r3
   80714:	1085883a 	add	r2,r2,r2
   80718:	10c5883a 	add	r2,r2,r3
   8071c:	2885883a 	add	r2,r5,r2
   80720:	108021c4 	addi	r2,r2,135
   80724:	11000005 	stb	r4,0(r2)
        switch( tag )
        {
        case 0x01: // Audio Data Block ;
            pRxCap->AUDDesCount = count/3 ;
            offset++ ;
            for( i = 0 ; i < pRxCap->AUDDesCount ; i++ )
   80728:	e0bffa17 	ldw	r2,-24(fp)
   8072c:	10800044 	addi	r2,r2,1
   80730:	e0bffa15 	stw	r2,-24(fp)
   80734:	e0bffd17 	ldw	r2,-12(fp)
   80738:	10802103 	ldbu	r2,132(r2)
   8073c:	10803fcc 	andi	r2,r2,255
   80740:	e0fffa17 	ldw	r3,-24(fp)
   80744:	18bfcb16 	blt	r3,r2,80674 <__alt_data_end+0xfffb07b4>
                pRxCap->AUDDes[i].uc[1] = pCEAEDID[offset++] ;
                pRxCap->AUDDes[i].uc[2] = pCEAEDID[offset++] ;

            }

            break ;
   80748:	0000e606 	br	80ae4 <ParseCEAEDID+0x6ec>

        case 0x02: // Video Data Block ;
            //pRxCap->VDOModeCount = 0 ;
            offset ++ ;
   8074c:	e0bff903 	ldbu	r2,-28(fp)
   80750:	10800044 	addi	r2,r2,1
   80754:	e0bff905 	stb	r2,-28(fp)
            for( i = 0,pRxCap->idxNativeVDOMode = 0xff ; i < count ; i++, offset++ )
   80758:	e03ffa15 	stw	zero,-24(fp)
   8075c:	e0bffd17 	ldw	r2,-12(fp)
   80760:	00ffffc4 	movi	r3,-1
   80764:	10c000c5 	stb	r3,3(r2)
   80768:	00002b06 	br	80818 <ParseCEAEDID+0x420>
            {
            	BYTE VIC ;
            	VIC = pCEAEDID[offset] & (~0x80) ;
   8076c:	e0bff903 	ldbu	r2,-28(fp)
   80770:	e0fffc17 	ldw	r3,-16(fp)
   80774:	1885883a 	add	r2,r3,r2
   80778:	10800003 	ldbu	r2,0(r2)
   8077c:	10801fcc 	andi	r2,r2,127
   80780:	e0bffbc5 	stb	r2,-17(fp)
            	OS_PRINTF("HDMI Sink VIC(Video Identify Code)=%d\n", VIC);
   80784:	e0bffbc3 	ldbu	r2,-17(fp)
   80788:	100b883a 	mov	r5,r2
   8078c:	010002b4 	movhi	r4,10
   80790:	212e1a04 	addi	r4,r4,-18328
   80794:	008780c0 	call	8780c <OS_PRINTF>
            	// if( FindModeTableEntryByVIC(VIC) != -1 )
            	{
	                pRxCap->VDOMode[pRxCap->VDOModeCount] = VIC ;
   80798:	e0bffd17 	ldw	r2,-12(fp)
   8079c:	10800083 	ldbu	r2,2(r2)
   807a0:	10803fcc 	andi	r2,r2,255
   807a4:	e0fffd17 	ldw	r3,-12(fp)
   807a8:	1885883a 	add	r2,r3,r2
   807ac:	10800104 	addi	r2,r2,4
   807b0:	e0fffbc3 	ldbu	r3,-17(fp)
   807b4:	10c00005 	stb	r3,0(r2)
	                if( pCEAEDID[offset] & 0x80 )
   807b8:	e0bff903 	ldbu	r2,-28(fp)
   807bc:	e0fffc17 	ldw	r3,-16(fp)
   807c0:	1885883a 	add	r2,r3,r2
   807c4:	10800003 	ldbu	r2,0(r2)
   807c8:	10803fcc 	andi	r2,r2,255
   807cc:	1080201c 	xori	r2,r2,128
   807d0:	10bfe004 	addi	r2,r2,-128
   807d4:	1000040e 	bge	r2,zero,807e8 <ParseCEAEDID+0x3f0>
	                {
	                    pRxCap->idxNativeVDOMode = (BYTE)pRxCap->VDOModeCount ;
   807d8:	e0bffd17 	ldw	r2,-12(fp)
   807dc:	10c00083 	ldbu	r3,2(r2)
   807e0:	e0bffd17 	ldw	r2,-12(fp)
   807e4:	10c000c5 	stb	r3,3(r2)
	                    // iVideoModeSelect = pRxCap->VDOModeCount ;
	                }

	                pRxCap->VDOModeCount++ ;
   807e8:	e0bffd17 	ldw	r2,-12(fp)
   807ec:	10800083 	ldbu	r2,2(r2)
   807f0:	10800044 	addi	r2,r2,1
   807f4:	1007883a 	mov	r3,r2
   807f8:	e0bffd17 	ldw	r2,-12(fp)
   807fc:	10c00085 	stb	r3,2(r2)
            break ;

        case 0x02: // Video Data Block ;
            //pRxCap->VDOModeCount = 0 ;
            offset ++ ;
            for( i = 0,pRxCap->idxNativeVDOMode = 0xff ; i < count ; i++, offset++ )
   80800:	e0bffa17 	ldw	r2,-24(fp)
   80804:	10800044 	addi	r2,r2,1
   80808:	e0bffa15 	stw	r2,-24(fp)
   8080c:	e0bff903 	ldbu	r2,-28(fp)
   80810:	10800044 	addi	r2,r2,1
   80814:	e0bff905 	stb	r2,-28(fp)
   80818:	e0bffb83 	ldbu	r2,-18(fp)
   8081c:	e0fffa17 	ldw	r3,-24(fp)
   80820:	18bfd216 	blt	r3,r2,8076c <__alt_data_end+0xfffb08ac>
	                }

	                pRxCap->VDOModeCount++ ;
            	}
            }
            break ;
   80824:	0000af06 	br	80ae4 <ParseCEAEDID+0x6ec>
        case 0x03: // Vendor Specific Data Block ;
            offset ++ ;
   80828:	e0bff903 	ldbu	r2,-28(fp)
   8082c:	10800044 	addi	r2,r2,1
   80830:	e0bff905 	stb	r2,-28(fp)
            pRxCap->IEEEOUI = (ULONG)pCEAEDID[offset+2] ;
   80834:	e0bff903 	ldbu	r2,-28(fp)
   80838:	10800084 	addi	r2,r2,2
   8083c:	e0fffc17 	ldw	r3,-16(fp)
   80840:	1885883a 	add	r2,r3,r2
   80844:	10800003 	ldbu	r2,0(r2)
   80848:	10c03fcc 	andi	r3,r2,255
   8084c:	e0bffd17 	ldw	r2,-12(fp)
   80850:	10c03a15 	stw	r3,232(r2)
            pRxCap->IEEEOUI <<= 8 ;
   80854:	e0bffd17 	ldw	r2,-12(fp)
   80858:	10803a17 	ldw	r2,232(r2)
   8085c:	1006923a 	slli	r3,r2,8
   80860:	e0bffd17 	ldw	r2,-12(fp)
   80864:	10c03a15 	stw	r3,232(r2)
            pRxCap->IEEEOUI += (ULONG)pCEAEDID[offset+1] ;
   80868:	e0bffd17 	ldw	r2,-12(fp)
   8086c:	10c03a17 	ldw	r3,232(r2)
   80870:	e0bff903 	ldbu	r2,-28(fp)
   80874:	10800044 	addi	r2,r2,1
   80878:	e13ffc17 	ldw	r4,-16(fp)
   8087c:	2085883a 	add	r2,r4,r2
   80880:	10800003 	ldbu	r2,0(r2)
   80884:	10803fcc 	andi	r2,r2,255
   80888:	1887883a 	add	r3,r3,r2
   8088c:	e0bffd17 	ldw	r2,-12(fp)
   80890:	10c03a15 	stw	r3,232(r2)
            pRxCap->IEEEOUI <<= 8 ;
   80894:	e0bffd17 	ldw	r2,-12(fp)
   80898:	10803a17 	ldw	r2,232(r2)
   8089c:	1006923a 	slli	r3,r2,8
   808a0:	e0bffd17 	ldw	r2,-12(fp)
   808a4:	10c03a15 	stw	r3,232(r2)
            pRxCap->IEEEOUI += (ULONG)pCEAEDID[offset] ;
   808a8:	e0bffd17 	ldw	r2,-12(fp)
   808ac:	10c03a17 	ldw	r3,232(r2)
   808b0:	e0bff903 	ldbu	r2,-28(fp)
   808b4:	e13ffc17 	ldw	r4,-16(fp)
   808b8:	2085883a 	add	r2,r4,r2
   808bc:	10800003 	ldbu	r2,0(r2)
   808c0:	10803fcc 	andi	r2,r2,255
   808c4:	1887883a 	add	r3,r3,r2
   808c8:	e0bffd17 	ldw	r2,-12(fp)
   808cc:	10c03a15 	stw	r3,232(r2)

            ///////////////////////////////////////////////////////////
            // For HDMI 1.3 extension handling.
            ///////////////////////////////////////////////////////////
            
            pRxCap->dc.uc = 0 ;
   808d0:	e0bffd17 	ldw	r2,-12(fp)
   808d4:	10003b05 	stb	zero,236(r2)
            pRxCap->MaxTMDSClock = 0  ;
   808d8:	e0bffd17 	ldw	r2,-12(fp)
   808dc:	10003b45 	stb	zero,237(r2)
            pRxCap->lsupport.uc = 0 ;
   808e0:	e0bffd17 	ldw	r2,-12(fp)
   808e4:	10003b85 	stb	zero,238(r2)
            pRxCap->ValidHDMI = (pRxCap->IEEEOUI==HDMI_IEEEOUI)? TRUE:FALSE ;
   808e8:	e0bffd17 	ldw	r2,-12(fp)
   808ec:	10803a17 	ldw	r2,232(r2)
   808f0:	108300e0 	cmpeqi	r2,r2,3075
   808f4:	1007883a 	mov	r3,r2
   808f8:	e0bffd17 	ldw	r2,-12(fp)
   808fc:	18c0004c 	andi	r3,r3,1
   80900:	18cb883a 	add	r5,r3,r3
   80904:	11003d83 	ldbu	r4,246(r2)
   80908:	00ffff44 	movi	r3,-3
   8090c:	20c6703a 	and	r3,r4,r3
   80910:	1809883a 	mov	r4,r3
   80914:	2807883a 	mov	r3,r5
   80918:	20c6b03a 	or	r3,r4,r3
   8091c:	10c03d85 	stb	r3,246(r2)
            if( (pRxCap->ValidHDMI) && (count > 5 ))
   80920:	e0bffd17 	ldw	r2,-12(fp)
   80924:	10803d17 	ldw	r2,244(r2)
   80928:	108000ac 	andhi	r2,r2,2
   8092c:	10003c26 	beq	r2,zero,80a20 <ParseCEAEDID+0x628>
   80930:	e0bffb83 	ldbu	r2,-18(fp)
   80934:	108001b0 	cmpltui	r2,r2,6
   80938:	1000391e 	bne	r2,zero,80a20 <ParseCEAEDID+0x628>
            {
                // HDMI 1.3 extension
                pRxCap->dc.uc = pCEAEDID[offset+5] ;
   8093c:	e0bff903 	ldbu	r2,-28(fp)
   80940:	10800144 	addi	r2,r2,5
   80944:	e0fffc17 	ldw	r3,-16(fp)
   80948:	1885883a 	add	r2,r3,r2
   8094c:	10c00003 	ldbu	r3,0(r2)
   80950:	e0bffd17 	ldw	r2,-12(fp)
   80954:	10c03b05 	stb	r3,236(r2)
                pRxCap->MaxTMDSClock = pCEAEDID[offset+6] ;
   80958:	e0bff903 	ldbu	r2,-28(fp)
   8095c:	10800184 	addi	r2,r2,6
   80960:	e0fffc17 	ldw	r3,-16(fp)
   80964:	1885883a 	add	r2,r3,r2
   80968:	10c00003 	ldbu	r3,0(r2)
   8096c:	e0bffd17 	ldw	r2,-12(fp)
   80970:	10c03b45 	stb	r3,237(r2)
                pRxCap->lsupport.uc = pCEAEDID[offset+7] ;
   80974:	e0bff903 	ldbu	r2,-28(fp)
   80978:	108001c4 	addi	r2,r2,7
   8097c:	e0fffc17 	ldw	r3,-16(fp)
   80980:	1885883a 	add	r2,r3,r2
   80984:	10c00003 	ldbu	r3,0(r2)
   80988:	e0bffd17 	ldw	r2,-12(fp)
   8098c:	10c03b85 	stb	r3,238(r2)
                
                if(pRxCap->lsupport.info.Latency_Present)
   80990:	e0bffd17 	ldw	r2,-12(fp)
   80994:	10803b17 	ldw	r2,236(r2)
   80998:	1080202c 	andhi	r2,r2,128
   8099c:	10000e26 	beq	r2,zero,809d8 <ParseCEAEDID+0x5e0>
                {
                    pRxCap->V_Latency = pCEAEDID[offset+9] ;
   809a0:	e0bff903 	ldbu	r2,-28(fp)
   809a4:	10800244 	addi	r2,r2,9
   809a8:	e0fffc17 	ldw	r3,-16(fp)
   809ac:	1885883a 	add	r2,r3,r2
   809b0:	10c00003 	ldbu	r3,0(r2)
   809b4:	e0bffd17 	ldw	r2,-12(fp)
   809b8:	10c03bc5 	stb	r3,239(r2)
                    pRxCap->A_Latency = pCEAEDID[offset+10] ;
   809bc:	e0bff903 	ldbu	r2,-28(fp)
   809c0:	10800284 	addi	r2,r2,10
   809c4:	e0fffc17 	ldw	r3,-16(fp)
   809c8:	1885883a 	add	r2,r3,r2
   809cc:	10c00003 	ldbu	r3,0(r2)
   809d0:	e0bffd17 	ldw	r2,-12(fp)
   809d4:	10c03c05 	stb	r3,240(r2)
                }
                
                if(pRxCap->lsupport.info.I_Latency_Present)
   809d8:	e0bffd17 	ldw	r2,-12(fp)
   809dc:	10803b17 	ldw	r2,236(r2)
   809e0:	1080102c 	andhi	r2,r2,64
   809e4:	10000e26 	beq	r2,zero,80a20 <ParseCEAEDID+0x628>
                {
                    pRxCap->V_I_Latency = pCEAEDID[offset+11] ;
   809e8:	e0bff903 	ldbu	r2,-28(fp)
   809ec:	108002c4 	addi	r2,r2,11
   809f0:	e0fffc17 	ldw	r3,-16(fp)
   809f4:	1885883a 	add	r2,r3,r2
   809f8:	10c00003 	ldbu	r3,0(r2)
   809fc:	e0bffd17 	ldw	r2,-12(fp)
   80a00:	10c03c45 	stb	r3,241(r2)
                    pRxCap->A_I_Latency = pCEAEDID[offset+12] ;
   80a04:	e0bff903 	ldbu	r2,-28(fp)
   80a08:	10800304 	addi	r2,r2,12
   80a0c:	e0fffc17 	ldw	r3,-16(fp)
   80a10:	1885883a 	add	r2,r3,r2
   80a14:	10c00003 	ldbu	r3,0(r2)
   80a18:	e0bffd17 	ldw	r2,-12(fp)
   80a1c:	10c03c85 	stb	r3,242(r2)
                }
                
            }
            
            offset += count ; // ignore the remaind.
   80a20:	e0fff903 	ldbu	r3,-28(fp)
   80a24:	e0bffb83 	ldbu	r2,-18(fp)
   80a28:	1885883a 	add	r2,r3,r2
   80a2c:	e0bff905 	stb	r2,-28(fp)
            break ;
   80a30:	00002c06 	br	80ae4 <ParseCEAEDID+0x6ec>

        case 0x04: // Speaker Data Block ;
            offset ++ ;
   80a34:	e0bff903 	ldbu	r2,-28(fp)
   80a38:	10800044 	addi	r2,r2,1
   80a3c:	e0bff905 	stb	r2,-28(fp)
            pRxCap->SpeakerAllocBlk.uc[0] = pCEAEDID[offset] ;
   80a40:	e0bff903 	ldbu	r2,-28(fp)
   80a44:	e0fffc17 	ldw	r3,-16(fp)
   80a48:	1885883a 	add	r2,r3,r2
   80a4c:	10c00003 	ldbu	r3,0(r2)
   80a50:	e0bffd17 	ldw	r2,-12(fp)
   80a54:	10c03cc5 	stb	r3,243(r2)
            pRxCap->SpeakerAllocBlk.uc[1] = pCEAEDID[offset+1] ;
   80a58:	e0bff903 	ldbu	r2,-28(fp)
   80a5c:	10800044 	addi	r2,r2,1
   80a60:	e0fffc17 	ldw	r3,-16(fp)
   80a64:	1885883a 	add	r2,r3,r2
   80a68:	10c00003 	ldbu	r3,0(r2)
   80a6c:	e0bffd17 	ldw	r2,-12(fp)
   80a70:	10c03d05 	stb	r3,244(r2)
            pRxCap->SpeakerAllocBlk.uc[2] = pCEAEDID[offset+2] ;
   80a74:	e0bff903 	ldbu	r2,-28(fp)
   80a78:	10800084 	addi	r2,r2,2
   80a7c:	e0fffc17 	ldw	r3,-16(fp)
   80a80:	1885883a 	add	r2,r3,r2
   80a84:	10c00003 	ldbu	r3,0(r2)
   80a88:	e0bffd17 	ldw	r2,-12(fp)
   80a8c:	10c03d45 	stb	r3,245(r2)
            offset += 3 ;
   80a90:	e0bff903 	ldbu	r2,-28(fp)
   80a94:	108000c4 	addi	r2,r2,3
   80a98:	e0bff905 	stb	r2,-28(fp)
            break ;
   80a9c:	00001106 	br	80ae4 <ParseCEAEDID+0x6ec>
        case 0x05: // VESA Data Block ;
            offset += count+1 ;
   80aa0:	e0fffb83 	ldbu	r3,-18(fp)
   80aa4:	e0bff903 	ldbu	r2,-28(fp)
   80aa8:	1885883a 	add	r2,r3,r2
   80aac:	10800044 	addi	r2,r2,1
   80ab0:	e0bff905 	stb	r2,-28(fp)
            break ;
   80ab4:	00000b06 	br	80ae4 <ParseCEAEDID+0x6ec>
        case 0x07: // Extended Data Block ;
            offset += count+1 ; //ignore
   80ab8:	e0fffb83 	ldbu	r3,-18(fp)
   80abc:	e0bff903 	ldbu	r2,-28(fp)
   80ac0:	1885883a 	add	r2,r3,r2
   80ac4:	10800044 	addi	r2,r2,1
   80ac8:	e0bff905 	stb	r2,-28(fp)
            break ;
   80acc:	00000506 	br	80ae4 <ParseCEAEDID+0x6ec>
        default:
            offset += count+1 ; // ignore
   80ad0:	e0fffb83 	ldbu	r3,-18(fp)
   80ad4:	e0bff903 	ldbu	r2,-28(fp)
   80ad8:	1885883a 	add	r2,r3,r2
   80adc:	10800044 	addi	r2,r2,1
   80ae0:	e0bff905 	stb	r2,-28(fp)
        }
    }
    
	pRxCap->VDOModeCount = 0 ;
    pRxCap->idxNativeVDOMode = 0xff ;
    for( offset = 4 ; offset < End ; )
   80ae4:	e0fff903 	ldbu	r3,-28(fp)
   80ae8:	e0bffb03 	ldbu	r2,-20(fp)
   80aec:	18beb336 	bltu	r3,r2,805bc <__alt_data_end+0xfffb06fc>
        default:
            offset += count+1 ; // ignore
        }
    }

    pRxCap->ValidCEA = TRUE ;
   80af0:	e0bffd17 	ldw	r2,-12(fp)
   80af4:	10c03d83 	ldbu	r3,246(r2)
   80af8:	18c00054 	ori	r3,r3,1
   80afc:	10c03d85 	stb	r3,246(r2)
    return ER_SUCCESS ;
   80b00:	0005883a 	mov	r2,zero
}
   80b04:	e6fffe04 	addi	sp,fp,-8
   80b08:	dfc00317 	ldw	ra,12(sp)
   80b0c:	df000217 	ldw	fp,8(sp)
   80b10:	dc400117 	ldw	r17,4(sp)
   80b14:	dc000017 	ldw	r16,0(sp)
   80b18:	dec00404 	addi	sp,sp,16
   80b1c:	f800283a 	ret

00080b20 <HDMITX_ChipVerify>:
        TRUE,// bHDMIMode
        FALSE,// bIntPOL
        FALSE // bHPD
} ;

bool HDMITX_ChipVerify(void){
   80b20:	defffa04 	addi	sp,sp,-24
   80b24:	dfc00515 	stw	ra,20(sp)
   80b28:	df000415 	stw	fp,16(sp)
   80b2c:	df000404 	addi	fp,sp,16
    bool bPass = FALSE;
   80b30:	e03ffd15 	stw	zero,-12(fp)
    alt_u8 szID[4];
    int i;
    
    
    for(i=0;i<4;i++)
   80b34:	e03ffe15 	stw	zero,-8(fp)
   80b38:	00000c06 	br	80b6c <HDMITX_ChipVerify+0x4c>
        szID[i] = HDMITX_ReadI2C_Byte(i);
   80b3c:	e0bffe17 	ldw	r2,-8(fp)
   80b40:	10803fcc 	andi	r2,r2,255
   80b44:	1009883a 	mov	r4,r2
   80b48:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   80b4c:	1009883a 	mov	r4,r2
   80b50:	e0ffff04 	addi	r3,fp,-4
   80b54:	e0bffe17 	ldw	r2,-8(fp)
   80b58:	1885883a 	add	r2,r3,r2
   80b5c:	11000005 	stb	r4,0(r2)
    bool bPass = FALSE;
    alt_u8 szID[4];
    int i;
    
    
    for(i=0;i<4;i++)
   80b60:	e0bffe17 	ldw	r2,-8(fp)
   80b64:	10800044 	addi	r2,r2,1
   80b68:	e0bffe15 	stw	r2,-8(fp)
   80b6c:	e0bffe17 	ldw	r2,-8(fp)
   80b70:	10800110 	cmplti	r2,r2,4
   80b74:	103ff11e 	bne	r2,zero,80b3c <__alt_data_end+0xfffb0c7c>
        szID[i] = HDMITX_ReadI2C_Byte(i);
        
//    if (szID[0] == 0x00 && szID[1] == 0xCA && szID[1] == 0x13 && szID[1] == 0x06) szID[0] ???
    if ((szID[1] == 0xCA && szID[2] == 0x13 && szID[3] == 0x06) || (szID[1] == 0xCA && szID[2] == 0x13 && szID[3] == 0x16)){
   80b78:	e0bfff43 	ldbu	r2,-3(fp)
   80b7c:	10803fcc 	andi	r2,r2,255
   80b80:	10803298 	cmpnei	r2,r2,202
   80b84:	1000081e 	bne	r2,zero,80ba8 <HDMITX_ChipVerify+0x88>
   80b88:	e0bfff83 	ldbu	r2,-2(fp)
   80b8c:	10803fcc 	andi	r2,r2,255
   80b90:	108004d8 	cmpnei	r2,r2,19
   80b94:	1000041e 	bne	r2,zero,80ba8 <HDMITX_ChipVerify+0x88>
   80b98:	e0bfffc3 	ldbu	r2,-1(fp)
   80b9c:	10803fcc 	andi	r2,r2,255
   80ba0:	108001a0 	cmpeqi	r2,r2,6
   80ba4:	10000c1e 	bne	r2,zero,80bd8 <HDMITX_ChipVerify+0xb8>
   80ba8:	e0bfff43 	ldbu	r2,-3(fp)
   80bac:	10803fcc 	andi	r2,r2,255
   80bb0:	10803298 	cmpnei	r2,r2,202
   80bb4:	1000111e 	bne	r2,zero,80bfc <HDMITX_ChipVerify+0xdc>
   80bb8:	e0bfff83 	ldbu	r2,-2(fp)
   80bbc:	10803fcc 	andi	r2,r2,255
   80bc0:	108004d8 	cmpnei	r2,r2,19
   80bc4:	10000d1e 	bne	r2,zero,80bfc <HDMITX_ChipVerify+0xdc>
   80bc8:	e0bfffc3 	ldbu	r2,-1(fp)
   80bcc:	10803fcc 	andi	r2,r2,255
   80bd0:	10800598 	cmpnei	r2,r2,22
   80bd4:	1000091e 	bne	r2,zero,80bfc <HDMITX_ChipVerify+0xdc>
        bPass = TRUE;
   80bd8:	00800044 	movi	r2,1
   80bdc:	e0bffd15 	stw	r2,-12(fp)
        printf("TX Chip Revision ID: %d\n", szID[0]);     
   80be0:	e0bfff03 	ldbu	r2,-4(fp)
   80be4:	10803fcc 	andi	r2,r2,255
   80be8:	100b883a 	mov	r5,r2
   80bec:	010002b4 	movhi	r4,10
   80bf0:	212e2404 	addi	r4,r4,-18288
   80bf4:	0088fc00 	call	88fc0 <printf>
   80bf8:	00000f06 	br	80c38 <HDMITX_ChipVerify+0x118>
    }else{
        printf("NG, Read TX Chip ID:%02X%02X%02X%02Xh (expected:00CA1306h)\n", szID[0], szID[1], szID[2], szID[3]);     
   80bfc:	e0bfff03 	ldbu	r2,-4(fp)
   80c00:	10c03fcc 	andi	r3,r2,255
   80c04:	e0bfff43 	ldbu	r2,-3(fp)
   80c08:	11003fcc 	andi	r4,r2,255
   80c0c:	e0bfff83 	ldbu	r2,-2(fp)
   80c10:	11403fcc 	andi	r5,r2,255
   80c14:	e0bfffc3 	ldbu	r2,-1(fp)
   80c18:	10803fcc 	andi	r2,r2,255
   80c1c:	d8800015 	stw	r2,0(sp)
   80c20:	280f883a 	mov	r7,r5
   80c24:	200d883a 	mov	r6,r4
   80c28:	180b883a 	mov	r5,r3
   80c2c:	010002b4 	movhi	r4,10
   80c30:	212e2b04 	addi	r4,r4,-18260
   80c34:	0088fc00 	call	88fc0 <printf>
    }
                    
    return bPass;
   80c38:	e0bffd17 	ldw	r2,-12(fp)
}
   80c3c:	e037883a 	mov	sp,fp
   80c40:	dfc00117 	ldw	ra,4(sp)
   80c44:	df000017 	ldw	fp,0(sp)
   80c48:	dec00204 	addi	sp,sp,8
   80c4c:	f800283a 	ret

00080c50 <HDMITX_Init>:

bool HDMITX_Init(void){
   80c50:	defffd04 	addi	sp,sp,-12
   80c54:	dfc00215 	stw	ra,8(sp)
   80c58:	df000115 	stw	fp,4(sp)
   80c5c:	df000104 	addi	fp,sp,4
    bool bSuccess = TRUE;
   80c60:	00800044 	movi	r2,1
   80c64:	e0bfff15 	stw	r2,-4(fp)
    HDMITX_Reset();
   80c68:	00878bc0 	call	878bc <HDMITX_Reset>
    usleep(500*1000);
   80c6c:	01000234 	movhi	r4,8
   80c70:	21284804 	addi	r4,r4,-24288
   80c74:	00998c00 	call	998c0 <usleep>
    if (!HDMITX_ChipVerify()){
   80c78:	0080b200 	call	80b20 <HDMITX_ChipVerify>
   80c7c:	1000041e 	bne	r2,zero,80c90 <HDMITX_Init+0x40>
        OS_PRINTF("Failed to find IT6613 HDMI-TX Chip.\n");
   80c80:	010002b4 	movhi	r4,10
   80c84:	212e3a04 	addi	r4,r4,-18200
   80c88:	008780c0 	call	8780c <OS_PRINTF>
        bSuccess = FALSE;
   80c8c:	e03fff15 	stw	zero,-4(fp)
        //return 0;
    }    

    HDMITX_InitInstance(&InitInstanceData) ;
   80c90:	010002b4 	movhi	r4,10
   80c94:	2131ec04 	addi	r4,r4,-14416
   80c98:	00814300 	call	81430 <HDMITX_InitInstance>
    InitIT6613() ;
   80c9c:	00815840 	call	81584 <InitIT6613>
    
    
    return bSuccess;  
   80ca0:	e0bfff17 	ldw	r2,-4(fp)
}        
   80ca4:	e037883a 	mov	sp,fp
   80ca8:	dfc00117 	ldw	ra,4(sp)
   80cac:	df000017 	ldw	fp,0(sp)
   80cb0:	dec00204 	addi	sp,sp,8
   80cb4:	f800283a 	ret

00080cb8 <HDMITX_HPD>:

bool HDMITX_HPD(void){
   80cb8:	deffff04 	addi	sp,sp,-4
   80cbc:	df000015 	stw	fp,0(sp)
   80cc0:	d839883a 	mov	fp,sp
    if (TX_HDP)
   80cc4:	d0a99317 	ldw	r2,-22964(gp)
   80cc8:	10000226 	beq	r2,zero,80cd4 <HDMITX_HPD+0x1c>
        return TRUE;
   80ccc:	00800044 	movi	r2,1
   80cd0:	00000106 	br	80cd8 <HDMITX_HPD+0x20>
    return FALSE;        
   80cd4:	0005883a 	mov	r2,zero
}
   80cd8:	e037883a 	mov	sp,fp
   80cdc:	df000017 	ldw	fp,0(sp)
   80ce0:	dec00104 	addi	sp,sp,4
   80ce4:	f800283a 	ret

00080ce8 <HDMITX_SetAVIInfoFrame>:


void HDMITX_SetAVIInfoFrame(alt_u8 VIC, alt_u8 OutputColorMode, bool b16x9, bool ITU709)
{
   80ce8:	defff404 	addi	sp,sp,-48
   80cec:	dfc00b15 	stw	ra,44(sp)
   80cf0:	df000a15 	stw	fp,40(sp)
   80cf4:	df000a04 	addi	fp,sp,40
   80cf8:	2007883a 	mov	r3,r4
   80cfc:	2805883a 	mov	r2,r5
   80d00:	e1bffe15 	stw	r6,-8(fp)
   80d04:	e1ffff15 	stw	r7,-4(fp)
   80d08:	e0fffc05 	stb	r3,-16(fp)
   80d0c:	e0bffd05 	stb	r2,-12(fp)
     AVI_InfoFrame AviInfo;
    alt_u8 pixelrep = 0;
   80d10:	e03ff705 	stb	zero,-36(fp)
    
    OS_PRINTF("HDMITX_SetAVIInfoFrame, VIC=%d, ColorMode=%d, Aspect-Ratio=%s, ITU709=%s\n",
   80d14:	e13ffc03 	ldbu	r4,-16(fp)
   80d18:	e17ffd03 	ldbu	r5,-12(fp)
   80d1c:	e0bffe17 	ldw	r2,-8(fp)
   80d20:	10000326 	beq	r2,zero,80d30 <HDMITX_SetAVIInfoFrame+0x48>
   80d24:	00c002b4 	movhi	r3,10
   80d28:	18ee4404 	addi	r3,r3,-18160
   80d2c:	00000206 	br	80d38 <HDMITX_SetAVIInfoFrame+0x50>
   80d30:	00c002b4 	movhi	r3,10
   80d34:	18ee4604 	addi	r3,r3,-18152
   80d38:	e0bfff17 	ldw	r2,-4(fp)
   80d3c:	10000326 	beq	r2,zero,80d4c <HDMITX_SetAVIInfoFrame+0x64>
   80d40:	008002b4 	movhi	r2,10
   80d44:	10ae4704 	addi	r2,r2,-18148
   80d48:	00000206 	br	80d54 <HDMITX_SetAVIInfoFrame+0x6c>
   80d4c:	008002b4 	movhi	r2,10
   80d50:	10ae4804 	addi	r2,r2,-18144
   80d54:	d8800015 	stw	r2,0(sp)
   80d58:	180f883a 	mov	r7,r3
   80d5c:	280d883a 	mov	r6,r5
   80d60:	200b883a 	mov	r5,r4
   80d64:	010002b4 	movhi	r4,10
   80d68:	212e4904 	addi	r4,r4,-18140
   80d6c:	008780c0 	call	8780c <OS_PRINTF>
        VIC, OutputColorMode, b16x9?"16:9":"4:3", ITU709?"Yes":"No");

    AviInfo.pktbyte.AVI_HB[0] = AVI_INFOFRAME_TYPE|0x80 ; 
   80d70:	00bfe084 	movi	r2,-126
   80d74:	e0bff785 	stb	r2,-34(fp)
    AviInfo.pktbyte.AVI_HB[1] = AVI_INFOFRAME_VER ; 
   80d78:	00800084 	movi	r2,2
   80d7c:	e0bff7c5 	stb	r2,-33(fp)
    AviInfo.pktbyte.AVI_HB[2] = AVI_INFOFRAME_LEN ; 
   80d80:	00800344 	movi	r2,13
   80d84:	e0bff805 	stb	r2,-32(fp)
    
    switch(OutputColorMode)
   80d88:	e0bffd03 	ldbu	r2,-12(fp)
   80d8c:	10c00060 	cmpeqi	r3,r2,1
   80d90:	1800051e 	bne	r3,zero,80da8 <HDMITX_SetAVIInfoFrame+0xc0>
   80d94:	108000a0 	cmpeqi	r2,r2,2
   80d98:	10000626 	beq	r2,zero,80db4 <HDMITX_SetAVIInfoFrame+0xcc>
    {
    case F_MODE_YUV444:
        // AviInfo.info.ColorMode = 2 ;
        AviInfo.pktbyte.AVI_DB[0] = (2<<5)|(1<<4) ;
   80d9c:	00801404 	movi	r2,80
   80da0:	e0bff845 	stb	r2,-31(fp)
        break ;
   80da4:	00000606 	br	80dc0 <HDMITX_SetAVIInfoFrame+0xd8>
    case F_MODE_YUV422:
        // AviInfo.info.ColorMode = 1 ;
        AviInfo.pktbyte.AVI_DB[0] = (1<<5)|(1<<4) ;
   80da8:	00800c04 	movi	r2,48
   80dac:	e0bff845 	stb	r2,-31(fp)
        break ;
   80db0:	00000306 	br	80dc0 <HDMITX_SetAVIInfoFrame+0xd8>
    case F_MODE_RGB444:
    default:
        // AviInfo.info.ColorMode = 0 ;
        AviInfo.pktbyte.AVI_DB[0] = (0<<5)|(1<<4) ;
   80db4:	00800404 	movi	r2,16
   80db8:	e0bff845 	stb	r2,-31(fp)
        break ;
   80dbc:	0001883a 	nop
    }
    AviInfo.pktbyte.AVI_DB[1] = 8 ;
   80dc0:	00800204 	movi	r2,8
   80dc4:	e0bff885 	stb	r2,-30(fp)
    AviInfo.pktbyte.AVI_DB[1] |= (!b16x9)?(1<<4):(2<<4) ; // 4:3 or 16:9
   80dc8:	e0bff883 	ldbu	r2,-30(fp)
   80dcc:	1007883a 	mov	r3,r2
   80dd0:	e0bffe17 	ldw	r2,-8(fp)
   80dd4:	1000021e 	bne	r2,zero,80de0 <HDMITX_SetAVIInfoFrame+0xf8>
   80dd8:	00800404 	movi	r2,16
   80ddc:	00000106 	br	80de4 <HDMITX_SetAVIInfoFrame+0xfc>
   80de0:	00800804 	movi	r2,32
   80de4:	1884b03a 	or	r2,r3,r2
   80de8:	e0bff885 	stb	r2,-30(fp)
    AviInfo.pktbyte.AVI_DB[1] |= (!ITU709)?(1<<6):(2<<6) ; // 4:3 or 16:9
   80dec:	e0bff883 	ldbu	r2,-30(fp)
   80df0:	1007883a 	mov	r3,r2
   80df4:	e0bfff17 	ldw	r2,-4(fp)
   80df8:	1000021e 	bne	r2,zero,80e04 <HDMITX_SetAVIInfoFrame+0x11c>
   80dfc:	00801004 	movi	r2,64
   80e00:	00000106 	br	80e08 <HDMITX_SetAVIInfoFrame+0x120>
   80e04:	00bfe004 	movi	r2,-128
   80e08:	1884b03a 	or	r2,r3,r2
   80e0c:	e0bff885 	stb	r2,-30(fp)
    AviInfo.pktbyte.AVI_DB[2] = 0 ;
   80e10:	e03ff8c5 	stb	zero,-29(fp)
    AviInfo.pktbyte.AVI_DB[3] = VIC ;
   80e14:	e0bffc03 	ldbu	r2,-16(fp)
   80e18:	e0bff905 	stb	r2,-28(fp)
    AviInfo.pktbyte.AVI_DB[4] =  pixelrep & 3 ;
   80e1c:	e0bff703 	ldbu	r2,-36(fp)
   80e20:	108000cc 	andi	r2,r2,3
   80e24:	e0bff945 	stb	r2,-27(fp)
    AviInfo.pktbyte.AVI_DB[5] = 0 ;
   80e28:	e03ff985 	stb	zero,-26(fp)
    AviInfo.pktbyte.AVI_DB[6] = 0 ;
   80e2c:	e03ff9c5 	stb	zero,-25(fp)
    AviInfo.pktbyte.AVI_DB[7] = 0 ;
   80e30:	e03ffa05 	stb	zero,-24(fp)
    AviInfo.pktbyte.AVI_DB[8] = 0 ;
   80e34:	e03ffa45 	stb	zero,-23(fp)
    AviInfo.pktbyte.AVI_DB[9] = 0 ;
   80e38:	e03ffa85 	stb	zero,-22(fp)
    AviInfo.pktbyte.AVI_DB[10] = 0 ;
   80e3c:	e03ffac5 	stb	zero,-21(fp)
    AviInfo.pktbyte.AVI_DB[11] = 0 ;
   80e40:	e03ffb05 	stb	zero,-20(fp)
    AviInfo.pktbyte.AVI_DB[12] = 0 ;
   80e44:	e03ffb45 	stb	zero,-19(fp)

    EnableAVIInfoFrame(TRUE, (unsigned char *)&AviInfo) ;
   80e48:	e0bff784 	addi	r2,fp,-34
   80e4c:	100b883a 	mov	r5,r2
   80e50:	01000044 	movi	r4,1
   80e54:	0081f280 	call	81f28 <EnableAVIInfoFrame>
}
   80e58:	0001883a 	nop
   80e5c:	e037883a 	mov	sp,fp
   80e60:	dfc00117 	ldw	ra,4(sp)
   80e64:	df000017 	ldw	fp,0(sp)
   80e68:	dec00204 	addi	sp,sp,8
   80e6c:	f800283a 	ret

00080e70 <HDMITX_ChangeVideoTiming>:

void HDMITX_ChangeVideoTiming(int VIC){
   80e70:	defffb04 	addi	sp,sp,-20
   80e74:	dfc00415 	stw	ra,16(sp)
   80e78:	df000315 	stw	fp,12(sp)
   80e7c:	df000304 	addi	fp,sp,12
   80e80:	e13fff15 	stw	r4,-4(fp)
    int OutputVideoTiming = VIC;
   80e84:	e0bfff17 	ldw	r2,-4(fp)
   80e88:	e0bffe15 	stw	r2,-8(fp)
    int HdmiColorMode;
    
    switch(bOutputColorMode)
   80e8c:	d0a998c3 	ldbu	r2,-22941(gp)
   80e90:	10803fcc 	andi	r2,r2,255
   80e94:	10c00060 	cmpeqi	r3,r2,1
   80e98:	1800051e 	bne	r3,zero,80eb0 <HDMITX_ChangeVideoTiming+0x40>
   80e9c:	108000a0 	cmpeqi	r2,r2,2
   80ea0:	10000626 	beq	r2,zero,80ebc <HDMITX_ChangeVideoTiming+0x4c>
    {
    case F_MODE_YUV444:
        HdmiColorMode =  HDMI_YUV444;
   80ea4:	00800044 	movi	r2,1
   80ea8:	e0bffd15 	stw	r2,-12(fp)
        break ;
   80eac:	00000506 	br	80ec4 <HDMITX_ChangeVideoTiming+0x54>
    case F_MODE_YUV422:
        HdmiColorMode =  HDMI_YUV422;
   80eb0:	00800084 	movi	r2,2
   80eb4:	e0bffd15 	stw	r2,-12(fp)
        break ;
   80eb8:	00000206 	br	80ec4 <HDMITX_ChangeVideoTiming+0x54>
    case F_MODE_RGB444:
    default:
        HdmiColorMode =  HDMI_RGB444;
   80ebc:	e03ffd15 	stw	zero,-12(fp)
        break ;
   80ec0:	0001883a 	nop
    }    
    
    HDMITX_ChangeDisplayOption(OutputVideoTiming, HdmiColorMode); // just modify variable. Take effect when HDMITX_SetOutput is called in HDMITX_DevLoopProc   
   80ec4:	e0bffe17 	ldw	r2,-8(fp)
   80ec8:	e0fffd17 	ldw	r3,-12(fp)
   80ecc:	180b883a 	mov	r5,r3
   80ed0:	1009883a 	mov	r4,r2
   80ed4:	0086cb80 	call	86cb8 <HDMITX_ChangeDisplayOption>
}
   80ed8:	0001883a 	nop
   80edc:	e037883a 	mov	sp,fp
   80ee0:	dfc00117 	ldw	ra,4(sp)
   80ee4:	df000017 	ldw	fp,0(sp)
   80ee8:	dec00204 	addi	sp,sp,8
   80eec:	f800283a 	ret

00080ef0 <HDMITX_ChangeVideoTimingAndColor>:

void HDMITX_ChangeVideoTimingAndColor(int VIC, COLOR_TYPE Color){
   80ef0:	defffa04 	addi	sp,sp,-24
   80ef4:	dfc00515 	stw	ra,20(sp)
   80ef8:	df000415 	stw	fp,16(sp)
   80efc:	df000404 	addi	fp,sp,16
   80f00:	e13ffe15 	stw	r4,-8(fp)
   80f04:	e17fff15 	stw	r5,-4(fp)
    int OutputVideoTiming = VIC;
   80f08:	e0bffe17 	ldw	r2,-8(fp)
   80f0c:	e0bffd15 	stw	r2,-12(fp)
    int HdmiColorMode;
    
    switch(Color)
   80f10:	e0bfff17 	ldw	r2,-4(fp)
   80f14:	10c00060 	cmpeqi	r3,r2,1
   80f18:	1800051e 	bne	r3,zero,80f30 <HDMITX_ChangeVideoTimingAndColor+0x40>
   80f1c:	108000a0 	cmpeqi	r2,r2,2
   80f20:	10000626 	beq	r2,zero,80f3c <HDMITX_ChangeVideoTimingAndColor+0x4c>
    {
    case COLOR_YUV444:
        HdmiColorMode =  HDMI_YUV444;
   80f24:	00800044 	movi	r2,1
   80f28:	e0bffc15 	stw	r2,-16(fp)
        break ;
   80f2c:	00000506 	br	80f44 <HDMITX_ChangeVideoTimingAndColor+0x54>
    case COLOR_YUV422:
        HdmiColorMode =  HDMI_YUV422;
   80f30:	00800084 	movi	r2,2
   80f34:	e0bffc15 	stw	r2,-16(fp)
        break ;
   80f38:	00000206 	br	80f44 <HDMITX_ChangeVideoTimingAndColor+0x54>
    case COLOR_RGB444:
    default:
        HdmiColorMode =  HDMI_RGB444;
   80f3c:	e03ffc15 	stw	zero,-16(fp)
        break ;
   80f40:	0001883a 	nop
    }     
    HDMITX_ChangeDisplayOption(OutputVideoTiming, HdmiColorMode);    
   80f44:	e0bffd17 	ldw	r2,-12(fp)
   80f48:	e0fffc17 	ldw	r3,-16(fp)
   80f4c:	180b883a 	mov	r5,r3
   80f50:	1009883a 	mov	r4,r2
   80f54:	0086cb80 	call	86cb8 <HDMITX_ChangeDisplayOption>
}
   80f58:	0001883a 	nop
   80f5c:	e037883a 	mov	sp,fp
   80f60:	dfc00117 	ldw	ra,4(sp)
   80f64:	df000017 	ldw	fp,0(sp)
   80f68:	dec00204 	addi	sp,sp,8
   80f6c:	f800283a 	ret

00080f70 <HDMITX_DisableVideoOutput>:

void HDMITX_DisableVideoOutput(void){
   80f70:	defffe04 	addi	sp,sp,-8
   80f74:	dfc00115 	stw	ra,4(sp)
   80f78:	df000015 	stw	fp,0(sp)
   80f7c:	d839883a 	mov	fp,sp
    DisableVideoOutput();        
   80f80:	0081e8c0 	call	81e8c <DisableVideoOutput>
}
   80f84:	0001883a 	nop
   80f88:	e037883a 	mov	sp,fp
   80f8c:	dfc00117 	ldw	ra,4(sp)
   80f90:	df000017 	ldw	fp,0(sp)
   80f94:	dec00204 	addi	sp,sp,8
   80f98:	f800283a 	ret

00080f9c <HDMITX_EnableVideoOutput>:

void HDMITX_EnableVideoOutput(void){
   80f9c:	defffe04 	addi	sp,sp,-8
   80fa0:	dfc00115 	stw	ra,4(sp)
   80fa4:	df000015 	stw	fp,0(sp)
   80fa8:	d839883a 	mov	fp,sp
    HDMITX_SetOutput();
   80fac:	0086b8c0 	call	86b8c <HDMITX_SetOutput>
}
   80fb0:	0001883a 	nop
   80fb4:	e037883a 	mov	sp,fp
   80fb8:	dfc00117 	ldw	ra,4(sp)
   80fbc:	df000017 	ldw	fp,0(sp)
   80fc0:	dec00204 	addi	sp,sp,8
   80fc4:	f800283a 	ret

00080fc8 <HDMITX_SetColorSpace>:

void HDMITX_SetColorSpace(COLOR_TYPE InputColor, COLOR_TYPE OutputColor){
   80fc8:	defffd04 	addi	sp,sp,-12
   80fcc:	df000215 	stw	fp,8(sp)
   80fd0:	df000204 	addi	fp,sp,8
   80fd4:	e13ffe15 	stw	r4,-8(fp)
   80fd8:	e17fff15 	stw	r5,-4(fp)
   // DisableVideoOutput();
    bInputColorMode = InputColor;
   80fdc:	e0bffe17 	ldw	r2,-8(fp)
   80fe0:	d0a99805 	stb	r2,-22944(gp)
    bOutputColorMode = OutputColor;
   80fe4:	e0bfff17 	ldw	r2,-4(fp)
   80fe8:	d0a998c5 	stb	r2,-22941(gp)
   // HDMITX_SetOutput();
}
   80fec:	0001883a 	nop
   80ff0:	e037883a 	mov	sp,fp
   80ff4:	df000017 	ldw	fp,0(sp)
   80ff8:	dec00104 	addi	sp,sp,4
   80ffc:	f800283a 	ret

00081000 <HDMITX_IsSinkSupportYUV444>:

bool HDMITX_IsSinkSupportYUV444(void){
   81000:	defffe04 	addi	sp,sp,-8
   81004:	df000115 	stw	fp,4(sp)
   81008:	df000104 	addi	fp,sp,4
    bool bSupport = FALSE;
   8100c:	e03fff15 	stw	zero,-4(fp)
    if (RxCapability.Valid && RxCapability.ValidHDMI && RxCapability.ValidCEA && 
   81010:	008002b4 	movhi	r2,10
   81014:	1085b304 	addi	r2,r2,5836
   81018:	10800003 	ldbu	r2,0(r2)
   8101c:	10803fcc 	andi	r2,r2,255
   81020:	10001226 	beq	r2,zero,8106c <HDMITX_IsSinkSupportYUV444+0x6c>
   81024:	008002b4 	movhi	r2,10
   81028:	1085b304 	addi	r2,r2,5836
   8102c:	10803d17 	ldw	r2,244(r2)
   81030:	108000ac 	andhi	r2,r2,2
   81034:	10000d26 	beq	r2,zero,8106c <HDMITX_IsSinkSupportYUV444+0x6c>
   81038:	008002b4 	movhi	r2,10
   8103c:	1085b304 	addi	r2,r2,5836
   81040:	10803d17 	ldw	r2,244(r2)
   81044:	1080006c 	andhi	r2,r2,1
   81048:	10000826 	beq	r2,zero,8106c <HDMITX_IsSinkSupportYUV444+0x6c>
       (RxCapability.VideoMode & CEA_SUPPORT_YUV444))
   8104c:	008002b4 	movhi	r2,10
   81050:	1085b304 	addi	r2,r2,5836
   81054:	10800043 	ldbu	r2,1(r2)
   81058:	10803fcc 	andi	r2,r2,255
   8105c:	1080080c 	andi	r2,r2,32
   // HDMITX_SetOutput();
}

bool HDMITX_IsSinkSupportYUV444(void){
    bool bSupport = FALSE;
    if (RxCapability.Valid && RxCapability.ValidHDMI && RxCapability.ValidCEA && 
   81060:	10000226 	beq	r2,zero,8106c <HDMITX_IsSinkSupportYUV444+0x6c>
       (RxCapability.VideoMode & CEA_SUPPORT_YUV444))
        bSupport = TRUE;
   81064:	00800044 	movi	r2,1
   81068:	e0bfff15 	stw	r2,-4(fp)
    return bSupport;
   8106c:	e0bfff17 	ldw	r2,-4(fp)
}
   81070:	e037883a 	mov	sp,fp
   81074:	df000017 	ldw	fp,0(sp)
   81078:	dec00104 	addi	sp,sp,4
   8107c:	f800283a 	ret

00081080 <HDMITX_IsSinkSupportYUV422>:

bool HDMITX_IsSinkSupportYUV422(void){
   81080:	defffe04 	addi	sp,sp,-8
   81084:	df000115 	stw	fp,4(sp)
   81088:	df000104 	addi	fp,sp,4
    bool bSupport = FALSE;
   8108c:	e03fff15 	stw	zero,-4(fp)
    if (RxCapability.Valid && RxCapability.ValidHDMI && RxCapability.ValidCEA && 
   81090:	008002b4 	movhi	r2,10
   81094:	1085b304 	addi	r2,r2,5836
   81098:	10800003 	ldbu	r2,0(r2)
   8109c:	10803fcc 	andi	r2,r2,255
   810a0:	10001226 	beq	r2,zero,810ec <HDMITX_IsSinkSupportYUV422+0x6c>
   810a4:	008002b4 	movhi	r2,10
   810a8:	1085b304 	addi	r2,r2,5836
   810ac:	10803d17 	ldw	r2,244(r2)
   810b0:	108000ac 	andhi	r2,r2,2
   810b4:	10000d26 	beq	r2,zero,810ec <HDMITX_IsSinkSupportYUV422+0x6c>
   810b8:	008002b4 	movhi	r2,10
   810bc:	1085b304 	addi	r2,r2,5836
   810c0:	10803d17 	ldw	r2,244(r2)
   810c4:	1080006c 	andhi	r2,r2,1
   810c8:	10000826 	beq	r2,zero,810ec <HDMITX_IsSinkSupportYUV422+0x6c>
       (RxCapability.VideoMode & CEA_SUPPORT_YUV422))
   810cc:	008002b4 	movhi	r2,10
   810d0:	1085b304 	addi	r2,r2,5836
   810d4:	10800043 	ldbu	r2,1(r2)
   810d8:	10803fcc 	andi	r2,r2,255
   810dc:	1080040c 	andi	r2,r2,16
    return bSupport;
}

bool HDMITX_IsSinkSupportYUV422(void){
    bool bSupport = FALSE;
    if (RxCapability.Valid && RxCapability.ValidHDMI && RxCapability.ValidCEA && 
   810e0:	10000226 	beq	r2,zero,810ec <HDMITX_IsSinkSupportYUV422+0x6c>
       (RxCapability.VideoMode & CEA_SUPPORT_YUV422))
        bSupport = TRUE;
   810e4:	00800044 	movi	r2,1
   810e8:	e0bfff15 	stw	r2,-4(fp)
    return bSupport;
   810ec:	e0bfff17 	ldw	r2,-4(fp)
}
   810f0:	e037883a 	mov	sp,fp
   810f4:	df000017 	ldw	fp,0(sp)
   810f8:	dec00104 	addi	sp,sp,4
   810fc:	f800283a 	ret

00081100 <HDMITX_IsSinkSupportColorDepth36>:

bool HDMITX_IsSinkSupportColorDepth36(void){
   81100:	defffe04 	addi	sp,sp,-8
   81104:	df000115 	stw	fp,4(sp)
   81108:	df000104 	addi	fp,sp,4
    bool bSupport = FALSE;
   8110c:	e03fff15 	stw	zero,-4(fp)
    if (RxCapability.Valid && RxCapability.ValidHDMI && RxCapability.ValidCEA && 
   81110:	008002b4 	movhi	r2,10
   81114:	1085b304 	addi	r2,r2,5836
   81118:	10800003 	ldbu	r2,0(r2)
   8111c:	10803fcc 	andi	r2,r2,255
   81120:	10001126 	beq	r2,zero,81168 <HDMITX_IsSinkSupportColorDepth36+0x68>
   81124:	008002b4 	movhi	r2,10
   81128:	1085b304 	addi	r2,r2,5836
   8112c:	10803d17 	ldw	r2,244(r2)
   81130:	108000ac 	andhi	r2,r2,2
   81134:	10000c26 	beq	r2,zero,81168 <HDMITX_IsSinkSupportColorDepth36+0x68>
   81138:	008002b4 	movhi	r2,10
   8113c:	1085b304 	addi	r2,r2,5836
   81140:	10803d17 	ldw	r2,244(r2)
   81144:	1080006c 	andhi	r2,r2,1
   81148:	10000726 	beq	r2,zero,81168 <HDMITX_IsSinkSupportColorDepth36+0x68>
   8114c:	008002b4 	movhi	r2,10
   81150:	1085b304 	addi	r2,r2,5836
   81154:	10803b17 	ldw	r2,236(r2)
   81158:	1080080c 	andi	r2,r2,32
   8115c:	10000226 	beq	r2,zero,81168 <HDMITX_IsSinkSupportColorDepth36+0x68>
       RxCapability.dc.info.DC_36Bit)
        bSupport = TRUE;
   81160:	00800044 	movi	r2,1
   81164:	e0bfff15 	stw	r2,-4(fp)
    return bSupport;    
   81168:	e0bfff17 	ldw	r2,-4(fp)
}
   8116c:	e037883a 	mov	sp,fp
   81170:	df000017 	ldw	fp,0(sp)
   81174:	dec00104 	addi	sp,sp,4
   81178:	f800283a 	ret

0008117c <HDMITX_IsSinkSupportColorDepth30>:


bool HDMITX_IsSinkSupportColorDepth30(void){
   8117c:	defffe04 	addi	sp,sp,-8
   81180:	df000115 	stw	fp,4(sp)
   81184:	df000104 	addi	fp,sp,4
    bool bSupport = FALSE;
   81188:	e03fff15 	stw	zero,-4(fp)
    if (RxCapability.Valid && RxCapability.ValidHDMI && RxCapability.ValidCEA && 
   8118c:	008002b4 	movhi	r2,10
   81190:	1085b304 	addi	r2,r2,5836
   81194:	10800003 	ldbu	r2,0(r2)
   81198:	10803fcc 	andi	r2,r2,255
   8119c:	10001126 	beq	r2,zero,811e4 <HDMITX_IsSinkSupportColorDepth30+0x68>
   811a0:	008002b4 	movhi	r2,10
   811a4:	1085b304 	addi	r2,r2,5836
   811a8:	10803d17 	ldw	r2,244(r2)
   811ac:	108000ac 	andhi	r2,r2,2
   811b0:	10000c26 	beq	r2,zero,811e4 <HDMITX_IsSinkSupportColorDepth30+0x68>
   811b4:	008002b4 	movhi	r2,10
   811b8:	1085b304 	addi	r2,r2,5836
   811bc:	10803d17 	ldw	r2,244(r2)
   811c0:	1080006c 	andhi	r2,r2,1
   811c4:	10000726 	beq	r2,zero,811e4 <HDMITX_IsSinkSupportColorDepth30+0x68>
   811c8:	008002b4 	movhi	r2,10
   811cc:	1085b304 	addi	r2,r2,5836
   811d0:	10803b17 	ldw	r2,236(r2)
   811d4:	1080040c 	andi	r2,r2,16
   811d8:	10000226 	beq	r2,zero,811e4 <HDMITX_IsSinkSupportColorDepth30+0x68>
       RxCapability.dc.info.DC_30Bit)
        bSupport = TRUE;
   811dc:	00800044 	movi	r2,1
   811e0:	e0bfff15 	stw	r2,-4(fp)
    return bSupport;     
   811e4:	e0bfff17 	ldw	r2,-4(fp)
}
   811e8:	e037883a 	mov	sp,fp
   811ec:	df000017 	ldw	fp,0(sp)
   811f0:	dec00104 	addi	sp,sp,4
   811f4:	f800283a 	ret

000811f8 <HDMITX_SetOutputColorDepth>:

void HDMITX_SetOutputColorDepth(int ColorDepth){
   811f8:	defffd04 	addi	sp,sp,-12
   811fc:	dfc00215 	stw	ra,8(sp)
   81200:	df000115 	stw	fp,4(sp)
   81204:	df000104 	addi	fp,sp,4
   81208:	e13fff15 	stw	r4,-4(fp)
    SetOutputColorDepthPhase(ColorDepth, 0);
   8120c:	e0bfff17 	ldw	r2,-4(fp)
   81210:	10803fcc 	andi	r2,r2,255
   81214:	000b883a 	mov	r5,zero
   81218:	1009883a 	mov	r4,r2
   8121c:	008206c0 	call	8206c <SetOutputColorDepthPhase>
}
   81220:	0001883a 	nop
   81224:	e037883a 	mov	sp,fp
   81228:	dfc00117 	ldw	ra,4(sp)
   8122c:	df000017 	ldw	fp,0(sp)
   81230:	dec00204 	addi	sp,sp,8
   81234:	f800283a 	ret

00081238 <HDMITX_DevLoopProc>:



bool HDMITX_DevLoopProc()
{
   81238:	defffd04 	addi	sp,sp,-12
   8123c:	dfc00215 	stw	ra,8(sp)
   81240:	df000115 	stw	fp,4(sp)
   81244:	df000104 	addi	fp,sp,4
    static BYTE PreHPDChange = 0;
    static BYTE PreHPD = 0;
    BYTE HPD, HPDChange ;

    // Richard CheckHDMI(&HPD,&HPDChange) ;
    CheckHDMITX(&HPD,&HPDChange) ;
   81248:	e0bfff44 	addi	r2,fp,-3
   8124c:	100b883a 	mov	r5,r2
   81250:	e13fff04 	addi	r4,fp,-4
   81254:	0081b440 	call	81b44 <CheckHDMITX>
    
    if (HPD == PreHPD && HPDChange)  // richard add
   81258:	e0ffff03 	ldbu	r3,-4(fp)
   8125c:	d0a99403 	ldbu	r2,-22960(gp)
   81260:	18c03fcc 	andi	r3,r3,255
   81264:	10803fcc 	andi	r2,r2,255
   81268:	1880051e 	bne	r3,r2,81280 <HDMITX_DevLoopProc+0x48>
   8126c:	e0bfff43 	ldbu	r2,-3(fp)
   81270:	10803fcc 	andi	r2,r2,255
   81274:	10000226 	beq	r2,zero,81280 <HDMITX_DevLoopProc+0x48>
        return FALSE;
   81278:	0005883a 	mov	r2,zero
   8127c:	00006706 	br	8141c <HDMITX_DevLoopProc+0x1e4>
        
    TX_HDP = HPD;    
   81280:	e0bfff03 	ldbu	r2,-4(fp)
   81284:	10803fcc 	andi	r2,r2,255
   81288:	d0a99315 	stw	r2,-22964(gp)
    PreHPD = HPD;    
   8128c:	e0bfff03 	ldbu	r2,-4(fp)
   81290:	d0a99405 	stb	r2,-22960(gp)
    PreHPDChange = HPDChange;    
   81294:	e0bfff43 	ldbu	r2,-3(fp)
   81298:	d0a99445 	stb	r2,-22959(gp)
    
    if( HPDChange )
   8129c:	e0bfff43 	ldbu	r2,-3(fp)
   812a0:	10803fcc 	andi	r2,r2,255
   812a4:	10005226 	beq	r2,zero,813f0 <HDMITX_DevLoopProc+0x1b8>
    {
      
        
        OS_PRINTF("HPDChange\n");
   812a8:	010002b4 	movhi	r4,10
   812ac:	212e5c04 	addi	r4,r4,-18064
   812b0:	008780c0 	call	8780c <OS_PRINTF>
        if( HPD )
   812b4:	e0bfff03 	ldbu	r2,-4(fp)
   812b8:	10803fcc 	andi	r2,r2,255
   812bc:	10003626 	beq	r2,zero,81398 <HDMITX_DevLoopProc+0x160>
        {
            OS_PRINTF("HPD=ON\n");
   812c0:	010002b4 	movhi	r4,10
   812c4:	212e5f04 	addi	r4,r4,-18052
   812c8:	008780c0 	call	8780c <OS_PRINTF>
            RxCapability.Valid = ParseEDID() ;
   812cc:	00874280 	call	87428 <ParseEDID>
   812d0:	1007883a 	mov	r3,r2
   812d4:	008002b4 	movhi	r2,10
   812d8:	1085b304 	addi	r2,r2,5836
   812dc:	10c00005 	stb	r3,0(r2)
            //bOutputColorMode = F_MODE_YUV444; //F_MODE_RGB444; // richard node. users can change color space here according to HDMI sink 
            
            if( RxCapability.Valid && RxCapability.ValidHDMI )
   812e0:	008002b4 	movhi	r2,10
   812e4:	1085b304 	addi	r2,r2,5836
   812e8:	10800003 	ldbu	r2,0(r2)
   812ec:	10803fcc 	andi	r2,r2,255
   812f0:	10001326 	beq	r2,zero,81340 <HDMITX_DevLoopProc+0x108>
   812f4:	008002b4 	movhi	r2,10
   812f8:	1085b304 	addi	r2,r2,5836
   812fc:	10803d17 	ldw	r2,244(r2)
   81300:	108000ac 	andhi	r2,r2,2
   81304:	10000e26 	beq	r2,zero,81340 <HDMITX_DevLoopProc+0x108>
            {
                OS_PRINTF("HDMI Display found\n");
   81308:	010002b4 	movhi	r4,10
   8130c:	212e6104 	addi	r4,r4,-18044
   81310:	008780c0 	call	8780c <OS_PRINTF>
                bHDMIMode = TRUE ;
   81314:	00800044 	movi	r2,1
   81318:	d0a99d15 	stw	r2,-22924(gp)
                
                if(RxCapability.VideoMode & (1<<6))
   8131c:	008002b4 	movhi	r2,10
   81320:	1085b304 	addi	r2,r2,5836
   81324:	10800043 	ldbu	r2,1(r2)
   81328:	10803fcc 	andi	r2,r2,255
   8132c:	1080100c 	andi	r2,r2,64
   81330:	10001526 	beq	r2,zero,81388 <HDMITX_DevLoopProc+0x150>
                {
                    bAudioEnable = TRUE ;
   81334:	00800044 	movi	r2,1
   81338:	d0a99e15 	stw	r2,-22920(gp)
            if( RxCapability.Valid && RxCapability.ValidHDMI )
            {
                OS_PRINTF("HDMI Display found\n");
                bHDMIMode = TRUE ;
                
                if(RxCapability.VideoMode & (1<<6))
   8133c:	00001206 	br	81388 <HDMITX_DevLoopProc+0x150>
                    bOutputColorMode &= ~F_MODE_CLRMOD_MASK ;
                    bOutputColorMode |= F_MODE_YUV422 ;
                }
#endif           
            }
            else if (!RxCapability.Valid)
   81340:	008002b4 	movhi	r2,10
   81344:	1085b304 	addi	r2,r2,5836
   81348:	10800003 	ldbu	r2,0(r2)
   8134c:	10803fcc 	andi	r2,r2,255
   81350:	1000081e 	bne	r2,zero,81374 <HDMITX_DevLoopProc+0x13c>
            {
                OS_PRINTF("Failed to read EDID\n");
   81354:	010002b4 	movhi	r4,10
   81358:	212e6604 	addi	r4,r4,-18024
   8135c:	008780c0 	call	8780c <OS_PRINTF>
                
                // enable it when edid fail
                bHDMIMode = TRUE ;
   81360:	00800044 	movi	r2,1
   81364:	d0a99d15 	stw	r2,-22924(gp)
                bAudioEnable = TRUE ;
   81368:	00800044 	movi	r2,1
   8136c:	d0a99e15 	stw	r2,-22920(gp)
   81370:	00000506 	br	81388 <HDMITX_DevLoopProc+0x150>
            }     
            else    
            {
                OS_PRINTF("Invalid HDMI Display\n");
   81374:	010002b4 	movhi	r4,10
   81378:	212e6c04 	addi	r4,r4,-18000
   8137c:	008780c0 	call	8780c <OS_PRINTF>
                bHDMIMode = FALSE ;
   81380:	d0299d15 	stw	zero,-22924(gp)
                bAudioEnable = FALSE ;
   81384:	d0299e15 	stw	zero,-22920(gp)
            }

            OS_PRINTF("HDMITX_SetOutput\n");
   81388:	010002b4 	movhi	r4,10
   8138c:	212e7204 	addi	r4,r4,-17976
   81390:	008780c0 	call	8780c <OS_PRINTF>
   81394:	00001f06 	br	81414 <HDMITX_DevLoopProc+0x1dc>
            //HDMITX_SetOutput() ;
            
        }
        else
        {
            OS_PRINTF("HPD=OFF\n");
   81398:	010002b4 	movhi	r4,10
   8139c:	212e7704 	addi	r4,r4,-17956
   813a0:	008780c0 	call	8780c <OS_PRINTF>
            // unplug mode, ...
            OS_PRINTF("DisableVideoOutput\n");
   813a4:	010002b4 	movhi	r4,10
   813a8:	212e7a04 	addi	r4,r4,-17944
   813ac:	008780c0 	call	8780c <OS_PRINTF>
            //DisableVideoOutput() ;
            RxCapability.Valid = FALSE; // richard add
   813b0:	008002b4 	movhi	r2,10
   813b4:	1085b304 	addi	r2,r2,5836
   813b8:	10000005 	stb	zero,0(r2)
            RxCapability.ValidHDMI = FALSE; // richard add
   813bc:	008002b4 	movhi	r2,10
   813c0:	1085b304 	addi	r2,r2,5836
   813c4:	11003d83 	ldbu	r4,246(r2)
   813c8:	00ffff44 	movi	r3,-3
   813cc:	20c6703a 	and	r3,r4,r3
   813d0:	10c03d85 	stb	r3,246(r2)
            RxCapability.ValidCEA = FALSE; // richard add
   813d4:	008002b4 	movhi	r2,10
   813d8:	1085b304 	addi	r2,r2,5836
   813dc:	11003d83 	ldbu	r4,246(r2)
   813e0:	00ffff84 	movi	r3,-2
   813e4:	20c6703a 	and	r3,r4,r3
   813e8:	10c03d85 	stb	r3,246(r2)
   813ec:	00000906 	br	81414 <HDMITX_DevLoopProc+0x1dc>
        }
    }
    else // no stable but need to process mode change procedure
    {
        if(bChangeMode && HPD)
   813f0:	d0a99717 	ldw	r2,-22948(gp)
   813f4:	10000726 	beq	r2,zero,81414 <HDMITX_DevLoopProc+0x1dc>
   813f8:	e0bfff03 	ldbu	r2,-4(fp)
   813fc:	10803fcc 	andi	r2,r2,255
   81400:	10000426 	beq	r2,zero,81414 <HDMITX_DevLoopProc+0x1dc>
        {
            OS_PRINTF("HDMITX_SetOutput\n");
   81404:	010002b4 	movhi	r4,10
   81408:	212e7204 	addi	r4,r4,-17976
   8140c:	008780c0 	call	8780c <OS_PRINTF>
            HDMITX_SetOutput() ;
   81410:	0086b8c0 	call	86b8c <HDMITX_SetOutput>
        }
    }
    
    return HPDChange;
   81414:	e0bfff43 	ldbu	r2,-3(fp)
   81418:	10803fcc 	andi	r2,r2,255
}
   8141c:	e037883a 	mov	sp,fp
   81420:	dfc00117 	ldw	ra,4(sp)
   81424:	df000017 	ldw	fp,0(sp)
   81428:	dec00204 	addi	sp,sp,8
   8142c:	f800283a 	ret

00081430 <HDMITX_InitInstance>:
// external Interface                                                         //
//////////////////////////////////////////////////////////////////////

void
HDMITX_InitInstance(INSTANCE *pInstance)
{
   81430:	defffe04 	addi	sp,sp,-8
   81434:	df000115 	stw	fp,4(sp)
   81438:	df000104 	addi	fp,sp,4
   8143c:	e13fff15 	stw	r4,-4(fp)
	if(pInstance && 0 < HDMITX_INSTANCE_MAX)
   81440:	e0bfff17 	ldw	r2,-4(fp)
   81444:	10000b26 	beq	r2,zero,81474 <HDMITX_InitInstance+0x44>
	{
		Instance[0] = *pInstance ;
   81448:	008002b4 	movhi	r2,10
   8144c:	1085ab04 	addi	r2,r2,5804
   81450:	e0ffff17 	ldw	r3,-4(fp)
   81454:	19000017 	ldw	r4,0(r3)
   81458:	11000015 	stw	r4,0(r2)
   8145c:	19000117 	ldw	r4,4(r3)
   81460:	11000115 	stw	r4,4(r2)
   81464:	19000217 	ldw	r4,8(r3)
   81468:	11000215 	stw	r4,8(r2)
   8146c:	18c00317 	ldw	r3,12(r3)
   81470:	10c00315 	stw	r3,12(r2)
	}
}
   81474:	0001883a 	nop
   81478:	e037883a 	mov	sp,fp
   8147c:	df000017 	ldw	fp,0(sp)
   81480:	dec00104 	addi	sp,sp,4
   81484:	f800283a 	ret

00081488 <InitIT6613_HDCPROM>:

static BYTE InitIT6613_HDCPROM()
{
   81488:	defffc04 	addi	sp,sp,-16
   8148c:	dfc00315 	stw	ra,12(sp)
   81490:	df000215 	stw	fp,8(sp)
   81494:	df000204 	addi	fp,sp,8
    BYTE uc[5]  ;
    Switch_HDMITX_Bank(0) ;
   81498:	000b883a 	mov	r5,zero
   8149c:	010003c4 	movi	r4,15
   814a0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(0xF8,0xC3) ;	//password
   814a4:	014030c4 	movi	r5,195
   814a8:	01003e04 	movi	r4,248
   814ac:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(0xF8,0xA5) ;	// password
   814b0:	01402944 	movi	r5,165
   814b4:	01003e04 	movi	r4,248
   814b8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_LISTCTRL,0x60) ; // Richard, ????
   814bc:	01401804 	movi	r5,96
   814c0:	01000884 	movi	r4,34
   814c4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    I2C_Read_ByteN(0xE0,0x00,uc,5) ;  // richard note. internal rom is used
   814c8:	01c00144 	movi	r7,5
   814cc:	e1bffe04 	addi	r6,fp,-8
   814d0:	000b883a 	mov	r5,zero
   814d4:	01003804 	movi	r4,224
   814d8:	0087d100 	call	87d10 <I2C_Read_ByteN>
    
    if(uc[0] == 1 &&
   814dc:	e0bffe03 	ldbu	r2,-8(fp)
   814e0:	10803fcc 	andi	r2,r2,255
   814e4:	10800058 	cmpnei	r2,r2,1
   814e8:	1000171e 	bne	r2,zero,81548 <InitIT6613_HDCPROM+0xc0>
        uc[1] == 1 &&
   814ec:	e0bffe43 	ldbu	r2,-7(fp)
    HDMITX_WriteI2C_Byte(0xF8,0xC3) ;	//password
    HDMITX_WriteI2C_Byte(0xF8,0xA5) ;	// password
    HDMITX_WriteI2C_Byte(REG_TX_LISTCTRL,0x60) ; // Richard, ????
    I2C_Read_ByteN(0xE0,0x00,uc,5) ;  // richard note. internal rom is used
    
    if(uc[0] == 1 &&
   814f0:	10803fcc 	andi	r2,r2,255
   814f4:	10800058 	cmpnei	r2,r2,1
   814f8:	1000131e 	bne	r2,zero,81548 <InitIT6613_HDCPROM+0xc0>
        uc[1] == 1 &&
        uc[2] == 1 &&
   814fc:	e0bffe83 	ldbu	r2,-6(fp)
    HDMITX_WriteI2C_Byte(0xF8,0xA5) ;	// password
    HDMITX_WriteI2C_Byte(REG_TX_LISTCTRL,0x60) ; // Richard, ????
    I2C_Read_ByteN(0xE0,0x00,uc,5) ;  // richard note. internal rom is used
    
    if(uc[0] == 1 &&
        uc[1] == 1 &&
   81500:	10803fcc 	andi	r2,r2,255
   81504:	10800058 	cmpnei	r2,r2,1
   81508:	10000f1e 	bne	r2,zero,81548 <InitIT6613_HDCPROM+0xc0>
        uc[2] == 1 &&
        uc[3] == 1 &&
   8150c:	e0bffec3 	ldbu	r2,-5(fp)
    HDMITX_WriteI2C_Byte(REG_TX_LISTCTRL,0x60) ; // Richard, ????
    I2C_Read_ByteN(0xE0,0x00,uc,5) ;  // richard note. internal rom is used
    
    if(uc[0] == 1 &&
        uc[1] == 1 &&
        uc[2] == 1 &&
   81510:	10803fcc 	andi	r2,r2,255
   81514:	10800058 	cmpnei	r2,r2,1
   81518:	10000b1e 	bne	r2,zero,81548 <InitIT6613_HDCPROM+0xc0>
        uc[3] == 1 &&
        uc[4] == 1)
   8151c:	e0bfff03 	ldbu	r2,-4(fp)
    I2C_Read_ByteN(0xE0,0x00,uc,5) ;  // richard note. internal rom is used
    
    if(uc[0] == 1 &&
        uc[1] == 1 &&
        uc[2] == 1 &&
        uc[3] == 1 &&
   81520:	10803fcc 	andi	r2,r2,255
   81524:	10800058 	cmpnei	r2,r2,1
   81528:	1000071e 	bne	r2,zero,81548 <InitIT6613_HDCPROM+0xc0>
        uc[4] == 1)
    {
        // with internal eMem
        HDMITX_WriteI2C_Byte(REG_TX_ROM_HEADER,0xE0) ;
   8152c:	01403804 	movi	r5,224
   81530:	01000684 	movi	r4,26
   81534:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_LISTCTRL,0x48) ;
   81538:	01401204 	movi	r5,72
   8153c:	01000884 	movi	r4,34
   81540:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
   81544:	00000606 	br	81560 <InitIT6613_HDCPROM+0xd8>
    }
    else
    {
        // with external ROM
        HDMITX_WriteI2C_Byte(REG_TX_ROM_HEADER,0xA0) ;  // ROMHeader
   81548:	01402804 	movi	r5,160
   8154c:	01000684 	movi	r4,26
   81550:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_LISTCTRL,0x00) ; // Richard, ????
   81554:	000b883a 	mov	r5,zero
   81558:	01000884 	movi	r4,34
   8155c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    }
    HDMITX_WriteI2C_Byte(0xF8,0xFF) ;  // password
   81560:	01403fc4 	movi	r5,255
   81564:	01003e04 	movi	r4,248
   81568:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    
    // richard add
    return ER_SUCCESS;
   8156c:	0005883a 	mov	r2,zero
}
   81570:	e037883a 	mov	sp,fp
   81574:	dfc00117 	ldw	ra,4(sp)
   81578:	df000017 	ldw	fp,0(sp)
   8157c:	dec00204 	addi	sp,sp,8
   81580:	f800283a 	ret

00081584 <InitIT6613>:

void InitIT6613()
{
   81584:	defffe04 	addi	sp,sp,-8
   81588:	dfc00115 	stw	ra,4(sp)
   8158c:	df000015 	stw	fp,0(sp)
   81590:	d839883a 	mov	fp,sp
	// config interrupt
    HDMITX_WriteI2C_Byte(REG_TX_INT_CTRL,Instance[0].bIntType) ;
   81594:	008002b4 	movhi	r2,10
   81598:	1085ab04 	addi	r2,r2,5804
   8159c:	10800083 	ldbu	r2,2(r2)
   815a0:	10803fcc 	andi	r2,r2,255
   815a4:	100b883a 	mov	r5,r2
   815a8:	01000144 	movi	r4,5
   815ac:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    Instance[0].bIntPOL = (Instance[0].bIntType&B_INTPOL_ACTH)?TRUE:FALSE ;
   815b0:	008002b4 	movhi	r2,10
   815b4:	1085ab04 	addi	r2,r2,5804
   815b8:	10800083 	ldbu	r2,2(r2)
   815bc:	10803fcc 	andi	r2,r2,255
   815c0:	1004d1fa 	srli	r2,r2,7
   815c4:	1007883a 	mov	r3,r2
   815c8:	008002b4 	movhi	r2,10
   815cc:	1085ab04 	addi	r2,r2,5804
   815d0:	18c0004c 	andi	r3,r3,1
   815d4:	18c7883a 	add	r3,r3,r3
   815d8:	18cb883a 	add	r5,r3,r3
   815dc:	11000303 	ldbu	r4,12(r2)
   815e0:	00fffec4 	movi	r3,-5
   815e4:	20c6703a 	and	r3,r4,r3
   815e8:	1809883a 	mov	r4,r3
   815ec:	2807883a 	mov	r3,r5
   815f0:	20c6b03a 	or	r3,r4,r3
   815f4:	10c00305 	stb	r3,12(r2)

	// Reset 
    HDMITX_WriteI2C_Byte(REG_TX_SW_RST,B_REF_RST|B_VID_RST|B_AUD_RST|B_AREF_RST|B_HDCP_RST) ;
   815f8:	01400f44 	movi	r5,61
   815fc:	01000104 	movi	r4,4
   81600:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    DelayMS(1) ;
   81604:	01000044 	movi	r4,1
   81608:	00877380 	call	87738 <DelayMS>
    HDMITX_WriteI2C_Byte(REG_TX_SW_RST,B_VID_RST|B_AUD_RST|B_AREF_RST|B_HDCP_RST) ;
   8160c:	01400744 	movi	r5,29
   81610:	01000104 	movi	r4,4
   81614:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
//    HDMITX_WriteI2C_Byte(REG_TX_HDMI_MODE, 0x01);  // set HDMI mode    
    HDMITX_WriteI2C_Byte(REG_TX_HDMI_MODE, 0x00);  // set DVI mode    
#endif    

    // Avoid power loading in un play status.
    HDMITX_WriteI2C_Byte(REG_TX_AFE_DRV_CTRL,B_AFE_DRV_RST|B_AFE_DRV_PWD) ;
   81618:	01400c04 	movi	r5,48
   8161c:	01001844 	movi	r4,97
   81620:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    // set interrupt mask,mask value 0 is interrupt available.
// richard    HDMITX_WriteI2C_Byte(REG_TX_INT_MASK1,0xB2) ;  // enable interrupt: HPD, DDCBusHangMask, 
    HDMITX_WriteI2C_Byte(REG_TX_INT_MASK1,0xB2) ;  // enable interrupt: HPD, DDCBusHangMask, 
   81624:	01402c84 	movi	r5,178
   81628:	01000244 	movi	r4,9
   8162c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_INT_MASK2,0xF8) ;  // enable interrupt: AuthFailMask, AUthDoneMask, KSVListChkMask
   81630:	01403e04 	movi	r5,248
   81634:	01000284 	movi	r4,10
   81638:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_INT_MASK3,0x37) ; //  enable interrupt: PktAudMask, PktDBDMask, PkMpgMask, AUdCTSMask, HDCPSynDetMask
   8163c:	01400dc4 	movi	r5,55
   81640:	010002c4 	movi	r4,11
   81644:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    Switch_HDMITX_Bank(0) ;
   81648:	000b883a 	mov	r5,zero
   8164c:	010003c4 	movi	r4,15
   81650:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    DISABLE_NULL_PKT() ;
   81654:	00864940 	call	86494 <DISABLE_NULL_PKT>
    DISABLE_ACP_PKT() ;
   81658:	00864c80 	call	864c8 <DISABLE_ACP_PKT>
    DISABLE_ISRC1_PKT() ;
   8165c:	00864fc0 	call	864fc <DISABLE_ISRC1_PKT>
    DISABLE_ISRC2_PKT() ;
   81660:	00865300 	call	86530 <DISABLE_ISRC2_PKT>
    DISABLE_AVI_INFOFRM_PKT() ;
   81664:	00865640 	call	86564 <DISABLE_AVI_INFOFRM_PKT>
    DISABLE_AUD_INFOFRM_PKT() ;
   81668:	00865980 	call	86598 <DISABLE_AUD_INFOFRM_PKT>
    DISABLE_SPD_INFOFRM_PKT() ;
   8166c:	00865cc0 	call	865cc <DISABLE_SPD_INFOFRM_PKT>
    DISABLE_MPG_INFOFRM_PKT();
   81670:	00866000 	call	86600 <DISABLE_MPG_INFOFRM_PKT>
    

	//////////////////////////////////////////////////////////////////
	// Setup Output Audio format.
	//////////////////////////////////////////////////////////////////
    HDMITX_WriteI2C_Byte(REG_TX_AUDIO_CTRL1,Instance[0].bOutputAudioMode) ; // regE1 bOutputAudioMode should be loaded from ROM image.
   81674:	008002b4 	movhi	r2,10
   81678:	1085ab04 	addi	r2,r2,5804
   8167c:	10800103 	ldbu	r2,4(r2)
   81680:	10803fcc 	andi	r2,r2,255
   81684:	100b883a 	mov	r5,r2
   81688:	01003844 	movi	r4,225
   8168c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

	//////////////////////////////////////////////////////////////////
	// Setup HDCP ROM
	//////////////////////////////////////////////////////////////////
	InitIT6613_HDCPROM() ;
   81690:	00814880 	call	81488 <InitIT6613_HDCPROM>
// #pragma message("EXTERN ROM CODED") ;
// 	HDMITX_WriteI2C_Byte(REG_TX_ROM_HEADER,0xA0) ;
// #endif


}
   81694:	0001883a 	nop
   81698:	e037883a 	mov	sp,fp
   8169c:	dfc00117 	ldw	ra,4(sp)
   816a0:	df000017 	ldw	fp,0(sp)
   816a4:	dec00204 	addi	sp,sp,8
   816a8:	f800283a 	ret

000816ac <SetupVideoInputSignal>:

//////////////////////////////////////////////////////////////////////
// export this for dynamic change input signal
//////////////////////////////////////////////////////////////////////
BOOL SetupVideoInputSignal(BYTE inputSignalType)
{
   816ac:	defffe04 	addi	sp,sp,-8
   816b0:	df000115 	stw	fp,4(sp)
   816b4:	df000104 	addi	fp,sp,4
   816b8:	2005883a 	mov	r2,r4
   816bc:	e0bfff05 	stb	r2,-4(fp)
	Instance[0].bInputVideoSignalType = inputSignalType ;
   816c0:	008002b4 	movhi	r2,10
   816c4:	1085ab04 	addi	r2,r2,5804
   816c8:	e0ffff03 	ldbu	r3,-4(fp)
   816cc:	10c000c5 	stb	r3,3(r2)
    // SetInputMode(inputColorMode,Instance[0].bInputVideoSignalType) ;
    return TRUE ;
   816d0:	00800044 	movi	r2,1
}
   816d4:	e037883a 	mov	sp,fp
   816d8:	df000017 	ldw	fp,0(sp)
   816dc:	dec00104 	addi	sp,sp,4
   816e0:	f800283a 	ret

000816e4 <EnableVideoOutput>:

BOOL EnableVideoOutput(VIDEOPCLKLEVEL level,BYTE inputColorMode,BYTE outputColorMode,BYTE bHDMI)
{
   816e4:	defff904 	addi	sp,sp,-28
   816e8:	dfc00615 	stw	ra,24(sp)
   816ec:	df000515 	stw	fp,20(sp)
   816f0:	df000504 	addi	fp,sp,20
   816f4:	e13ffc15 	stw	r4,-16(fp)
   816f8:	2809883a 	mov	r4,r5
   816fc:	3007883a 	mov	r3,r6
   81700:	3805883a 	mov	r2,r7
   81704:	e13ffd05 	stb	r4,-12(fp)
   81708:	e0fffe05 	stb	r3,-8(fp)
   8170c:	e0bfff05 	stb	r2,-4(fp)
    // should be configured by initsys.c
    WORD i ;
    BYTE uc ;
    // VIDEOPCLKLEVEL level ;

    HDMITX_WriteI2C_Byte(REG_TX_SW_RST,B_VID_RST|B_AUD_RST|B_AREF_RST|B_HDCP_RST) ;
   81710:	01400744 	movi	r5,29
   81714:	01000104 	movi	r4,4
   81718:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    Instance[0].bHDMIMode = (BYTE)bHDMI ;
   8171c:	e0bfff03 	ldbu	r2,-4(fp)
   81720:	1080004c 	andi	r2,r2,1
   81724:	1007883a 	mov	r3,r2
   81728:	008002b4 	movhi	r2,10
   8172c:	1085ab04 	addi	r2,r2,5804
   81730:	18c0004c 	andi	r3,r3,1
   81734:	18cb883a 	add	r5,r3,r3
   81738:	11000303 	ldbu	r4,12(r2)
   8173c:	00ffff44 	movi	r3,-3
   81740:	20c6703a 	and	r3,r4,r3
   81744:	1809883a 	mov	r4,r3
   81748:	2807883a 	mov	r3,r5
   8174c:	20c6b03a 	or	r3,r4,r3
   81750:	10c00305 	stb	r3,12(r2)

    if(Instance[0].bHDMIMode)
   81754:	008002b4 	movhi	r2,10
   81758:	1085ab04 	addi	r2,r2,5804
   8175c:	10800317 	ldw	r2,12(r2)
   81760:	1080008c 	andi	r2,r2,2
   81764:	10000226 	beq	r2,zero,81770 <EnableVideoOutput+0x8c>
    {
        SetAVMute(TRUE) ;
   81768:	01000044 	movi	r4,1
   8176c:	0081fe00 	call	81fe0 <SetAVMute>
    }

    SetInputMode(inputColorMode,Instance[0].bInputVideoSignalType) ;
   81770:	e0fffd03 	ldbu	r3,-12(fp)
   81774:	008002b4 	movhi	r2,10
   81778:	1085ab04 	addi	r2,r2,5804
   8177c:	108000c3 	ldbu	r2,3(r2)
   81780:	10803fcc 	andi	r2,r2,255
   81784:	100b883a 	mov	r5,r2
   81788:	1809883a 	mov	r4,r3
   8178c:	00827300 	call	82730 <SetInputMode>

    SetCSCScale(inputColorMode,outputColorMode) ;
   81790:	e0bffd03 	ldbu	r2,-12(fp)
   81794:	e0fffe03 	ldbu	r3,-8(fp)
   81798:	180b883a 	mov	r5,r3
   8179c:	1009883a 	mov	r4,r2
   817a0:	008287c0 	call	8287c <SetCSCScale>

    if(Instance[0].bHDMIMode)
   817a4:	008002b4 	movhi	r2,10
   817a8:	1085ab04 	addi	r2,r2,5804
   817ac:	10800317 	ldw	r2,12(r2)
   817b0:	1080008c 	andi	r2,r2,2
   817b4:	10000426 	beq	r2,zero,817c8 <EnableVideoOutput+0xe4>
    {
        HDMITX_WriteI2C_Byte(REG_TX_HDMI_MODE,B_TX_HDMI_MODE) ;
   817b8:	01400044 	movi	r5,1
   817bc:	01003004 	movi	r4,192
   817c0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
   817c4:	00000306 	br	817d4 <EnableVideoOutput+0xf0>
    }
    else
    {
        HDMITX_WriteI2C_Byte(REG_TX_HDMI_MODE,B_TX_DVI_MODE) ;
   817c8:	000b883a 	mov	r5,zero
   817cc:	01003004 	movi	r4,192
   817d0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    uc = HDMITX_ReadI2C_Byte(REG_TX_CLK_CTRL1) ;
    uc |= B_VDO_LATCH_EDGE ;
    HDMITX_WriteI2C_Byte(REG_TX_CLK_CTRL1, uc) ;
#endif    

    HDMITX_WriteI2C_Byte(REG_TX_SW_RST,          B_AUD_RST|B_AREF_RST|B_HDCP_RST) ;
   817d4:	01400544 	movi	r5,21
   817d8:	01000104 	movi	r4,4
   817dc:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    // else
    // {
    //     level = PCLK_LOW ;
    // }

    SetupAFE(level) ; // pass if High Freq request
   817e0:	e13ffc17 	ldw	r4,-16(fp)
   817e4:	0082db40 	call	82db4 <SetupAFE>

    for(i = 0 ; i < 100 ; i++)
   817e8:	e03ffb0d 	sth	zero,-20(fp)
   817ec:	00000a06 	br	81818 <EnableVideoOutput+0x134>
    {
        if(HDMITX_ReadI2C_Byte(REG_TX_SYS_STATUS) & B_TXVIDSTABLE)
   817f0:	01000384 	movi	r4,14
   817f4:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   817f8:	10803fcc 	andi	r2,r2,255
   817fc:	1080040c 	andi	r2,r2,16
   81800:	1000091e 	bne	r2,zero,81828 <EnableVideoOutput+0x144>
        {
            break ;

        }
        DelayMS(1) ;
   81804:	01000044 	movi	r4,1
   81808:	00877380 	call	87738 <DelayMS>
    //     level = PCLK_LOW ;
    // }

    SetupAFE(level) ; // pass if High Freq request

    for(i = 0 ; i < 100 ; i++)
   8180c:	e0bffb0b 	ldhu	r2,-20(fp)
   81810:	10800044 	addi	r2,r2,1
   81814:	e0bffb0d 	sth	r2,-20(fp)
   81818:	e0bffb0b 	ldhu	r2,-20(fp)
   8181c:	10801930 	cmpltui	r2,r2,100
   81820:	103ff31e 	bne	r2,zero,817f0 <__alt_data_end+0xfffb1930>
   81824:	00000106 	br	8182c <EnableVideoOutput+0x148>
    {
        if(HDMITX_ReadI2C_Byte(REG_TX_SYS_STATUS) & B_TXVIDSTABLE)
        {
            break ;
   81828:	0001883a 	nop
        }
        DelayMS(1) ;
    }
    // Clive suggestion.
    // clear int3 video stable interrupt.
    HDMITX_WriteI2C_Byte(REG_TX_INT_CLR0,0) ;
   8182c:	000b883a 	mov	r5,zero
   81830:	01000304 	movi	r4,12
   81834:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_INT_CLR1,B_CLR_VIDSTABLE) ;
   81838:	01401004 	movi	r5,64
   8183c:	01000344 	movi	r4,13
   81840:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_SYS_STATUS,B_INTACTDONE) ;
   81844:	01400044 	movi	r5,1
   81848:	01000384 	movi	r4,14
   8184c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_SYS_STATUS,0) ;
   81850:	000b883a 	mov	r5,zero
   81854:	01000384 	movi	r4,14
   81858:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    FireAFE() ;
   8185c:	0082e9c0 	call	82e9c <FireAFE>
	return TRUE ;
   81860:	00800044 	movi	r2,1
}
   81864:	e037883a 	mov	sp,fp
   81868:	dfc00117 	ldw	ra,4(sp)
   8186c:	df000017 	ldw	fp,0(sp)
   81870:	dec00204 	addi	sp,sp,8
   81874:	f800283a 	ret

00081878 <EnableAudioOutput>:

BOOL EnableAudioOutput(ULONG VideoPixelClock,BYTE bAudioSampleFreq,BYTE ChannelNumber,BYTE bAudSWL,BYTE bSPDIF)
{
   81878:	defff504 	addi	sp,sp,-44
   8187c:	dfc00a15 	stw	ra,40(sp)
   81880:	df000915 	stw	fp,36(sp)
   81884:	df000904 	addi	fp,sp,36
   81888:	e13ffb15 	stw	r4,-20(fp)
   8188c:	3009883a 	mov	r4,r6
   81890:	3807883a 	mov	r3,r7
   81894:	e0800217 	ldw	r2,8(fp)
   81898:	e17ffc05 	stb	r5,-16(fp)
   8189c:	e13ffd05 	stb	r4,-12(fp)
   818a0:	e0fffe05 	stb	r3,-8(fp)
   818a4:	e0bfff05 	stb	r2,-4(fp)
    BYTE bAudioChannelEnable ;
  // richard   unsigned long N ;

    Instance[0].TMDSClock = VideoPixelClock ;
   818a8:	008002b4 	movhi	r2,10
   818ac:	1085ab04 	addi	r2,r2,5804
   818b0:	e0fffb17 	ldw	r3,-20(fp)
   818b4:	10c00215 	stw	r3,8(r2)
    Instance[0].bAudFs = bAudioSampleFreq ;
   818b8:	008002b4 	movhi	r2,10
   818bc:	1085ab04 	addi	r2,r2,5804
   818c0:	e0fffc03 	ldbu	r3,-16(fp)
   818c4:	10c001c5 	stb	r3,7(r2)
    
    ErrorF("EnableAudioOutput(%d,%ld,%x,%d,%d,%d);\n",0,VideoPixelClock,bAudioSampleFreq,ChannelNumber,bAudSWL,bSPDIF) ;
   818c8:	e17ffc03 	ldbu	r5,-16(fp)
   818cc:	e0bffd03 	ldbu	r2,-12(fp)
   818d0:	e0fffe03 	ldbu	r3,-8(fp)
   818d4:	e13fff03 	ldbu	r4,-4(fp)
   818d8:	d9000215 	stw	r4,8(sp)
   818dc:	d8c00115 	stw	r3,4(sp)
   818e0:	d8800015 	stw	r2,0(sp)
   818e4:	280f883a 	mov	r7,r5
   818e8:	e1bffb17 	ldw	r6,-20(fp)
   818ec:	000b883a 	mov	r5,zero
   818f0:	010002b4 	movhi	r4,10
   818f4:	212e7f04 	addi	r4,r4,-17924
   818f8:	00877a40 	call	877a4 <ErrorF>

    switch(ChannelNumber)
   818fc:	e0bffd03 	ldbu	r2,-12(fp)
   81900:	10bfff44 	addi	r2,r2,-3
   81904:	10c001a8 	cmpgeui	r3,r2,6
   81908:	1800151e 	bne	r3,zero,81960 <EnableAudioOutput+0xe8>
   8190c:	100690ba 	slli	r3,r2,2
   81910:	00800234 	movhi	r2,8
   81914:	10864904 	addi	r2,r2,6436
   81918:	1885883a 	add	r2,r3,r2
   8191c:	10800017 	ldw	r2,0(r2)
   81920:	1000683a 	jmp	r2
   81924:	00081954 	movui	zero,8293
   81928:	00081954 	movui	zero,8293
   8192c:	00081948 	cmpgei	zero,zero,8293
   81930:	00081948 	cmpgei	zero,zero,8293
   81934:	0008193c 	xorhi	zero,zero,8292
   81938:	0008193c 	xorhi	zero,zero,8292
    {
    case 7:
    case 8:
        bAudioChannelEnable = 0xF ;
   8193c:	008003c4 	movi	r2,15
   81940:	e0bffa05 	stb	r2,-24(fp)
        break ;
   81944:	00000906 	br	8196c <EnableAudioOutput+0xf4>
    case 6:
    case 5:
        bAudioChannelEnable = 0x7 ;
   81948:	008001c4 	movi	r2,7
   8194c:	e0bffa05 	stb	r2,-24(fp)
        break ;
   81950:	00000606 	br	8196c <EnableAudioOutput+0xf4>
    case 4:
    case 3:
        bAudioChannelEnable = 0x3 ;
   81954:	008000c4 	movi	r2,3
   81958:	e0bffa05 	stb	r2,-24(fp)
        break ;
   8195c:	00000306 	br	8196c <EnableAudioOutput+0xf4>
    case 2:
    case 1:
    default:
        bAudioChannelEnable = 0x1 ;
   81960:	00800044 	movi	r2,1
   81964:	e0bffa05 	stb	r2,-24(fp)
        break ;
   81968:	0001883a 	nop
    }

    if(bSPDIF) bAudioChannelEnable |= B_AUD_SPDIF ;
   8196c:	e0bfff03 	ldbu	r2,-4(fp)
   81970:	10000326 	beq	r2,zero,81980 <EnableAudioOutput+0x108>
   81974:	e0bffa03 	ldbu	r2,-24(fp)
   81978:	10800414 	ori	r2,r2,16
   8197c:	e0bffa05 	stb	r2,-24(fp)

    if( bSPDIF )
   81980:	e0bfff03 	ldbu	r2,-4(fp)
   81984:	10001c26 	beq	r2,zero,819f8 <EnableAudioOutput+0x180>
    {
        Switch_HDMITX_Bank(1) ;
   81988:	01400044 	movi	r5,1
   8198c:	010003c4 	movi	r4,15
   81990:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REGPktAudCTS0,0x50) ;
   81994:	01401404 	movi	r5,80
   81998:	01000c04 	movi	r4,48
   8199c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REGPktAudCTS1,0x73) ;
   819a0:	01401cc4 	movi	r5,115
   819a4:	01000c44 	movi	r4,49
   819a8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REGPktAudCTS2,0x00) ;
   819ac:	000b883a 	mov	r5,zero
   819b0:	01000c84 	movi	r4,50
   819b4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        
        HDMITX_WriteI2C_Byte(REGPktAudN0,0) ;
   819b8:	000b883a 	mov	r5,zero
   819bc:	01000cc4 	movi	r4,51
   819c0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REGPktAudN1,0x18) ;
   819c4:	01400604 	movi	r5,24
   819c8:	01000d04 	movi	r4,52
   819cc:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REGPktAudN2,0) ;
   819d0:	000b883a 	mov	r5,zero
   819d4:	01000d44 	movi	r4,53
   819d8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        Switch_HDMITX_Bank(0) ;
   819dc:	000b883a 	mov	r5,zero
   819e0:	010003c4 	movi	r4,15
   819e4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    
        HDMITX_WriteI2C_Byte(0xC5, 2) ; // D[1] = 0, HW auto count CTS
   819e8:	01400084 	movi	r5,2
   819ec:	01003144 	movi	r4,197
   819f0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
   819f4:	00000406 	br	81a08 <EnableAudioOutput+0x190>
    }
    else
    {
        SetNCTS(VideoPixelClock,bAudioSampleFreq) ;
   819f8:	e0bffc03 	ldbu	r2,-16(fp)
   819fc:	100b883a 	mov	r5,r2
   81a00:	e13ffb17 	ldw	r4,-20(fp)
   81a04:	00836880 	call	83688 <SetNCTS>
        HDMITX_WriteI2C_Byte(REG_TX_PKT_SINGLE_CTRL,0) ; // D[1] = 0,HW auto count CTS
    }
    */

	//HDMITX_AndREG_Byte(REG_TX_SW_RST,~(B_AUD_RST|B_AREF_RST)) ;
    SetAudioFormat(ChannelNumber,bAudioChannelEnable,bAudioSampleFreq,bAudSWL,bSPDIF) ;
   81a08:	e0fffd03 	ldbu	r3,-12(fp)
   81a0c:	e13ffa03 	ldbu	r4,-24(fp)
   81a10:	e17ffc03 	ldbu	r5,-16(fp)
   81a14:	e1bffe03 	ldbu	r6,-8(fp)
   81a18:	e0bfff03 	ldbu	r2,-4(fp)
   81a1c:	d8800015 	stw	r2,0(sp)
   81a20:	300f883a 	mov	r7,r6
   81a24:	280d883a 	mov	r6,r5
   81a28:	200b883a 	mov	r5,r4
   81a2c:	1809883a 	mov	r4,r3
   81a30:	0082f300 	call	82f30 <SetAudioFormat>

    #ifdef HDMITX_REG_DEBUG
    DumpCatHDMITXReg() ;
    #endif // HDMITX_REG_DEBUG
    return TRUE ;
   81a34:	00800044 	movi	r2,1
}
   81a38:	e037883a 	mov	sp,fp
   81a3c:	dfc00117 	ldw	ra,4(sp)
   81a40:	df000017 	ldw	fp,0(sp)
   81a44:	dec00204 	addi	sp,sp,8
   81a48:	f800283a 	ret

00081a4c <GetEDIDData>:


BOOL
GetEDIDData(int EDIDBlockID,BYTE *pEDIDData)
{
   81a4c:	defffc04 	addi	sp,sp,-16
   81a50:	dfc00315 	stw	ra,12(sp)
   81a54:	df000215 	stw	fp,8(sp)
   81a58:	df000204 	addi	fp,sp,8
   81a5c:	e13ffe15 	stw	r4,-8(fp)
   81a60:	e17fff15 	stw	r5,-4(fp)
	if(!pEDIDData)
   81a64:	e0bfff17 	ldw	r2,-4(fp)
   81a68:	1000021e 	bne	r2,zero,81a74 <GetEDIDData+0x28>
	{
		return FALSE ;
   81a6c:	0005883a 	mov	r2,zero
   81a70:	00001a06 	br	81adc <GetEDIDData+0x90>
	}

    if(ReadEDID(pEDIDData,EDIDBlockID/2,(EDIDBlockID%2)*128,128) == ER_FAIL)
   81a74:	e0bffe17 	ldw	r2,-8(fp)
   81a78:	1006d7fa 	srli	r3,r2,31
   81a7c:	1885883a 	add	r2,r3,r2
   81a80:	1005d07a 	srai	r2,r2,1
   81a84:	11003fcc 	andi	r4,r2,255
   81a88:	e0fffe17 	ldw	r3,-8(fp)
   81a8c:	00a00034 	movhi	r2,32768
   81a90:	10800044 	addi	r2,r2,1
   81a94:	1884703a 	and	r2,r3,r2
   81a98:	1000040e 	bge	r2,zero,81aac <GetEDIDData+0x60>
   81a9c:	10bfffc4 	addi	r2,r2,-1
   81aa0:	00ffff84 	movi	r3,-2
   81aa4:	10c4b03a 	or	r2,r2,r3
   81aa8:	10800044 	addi	r2,r2,1
   81aac:	10bfe024 	muli	r2,r2,-128
   81ab0:	10803fcc 	andi	r2,r2,255
   81ab4:	01c02004 	movi	r7,128
   81ab8:	100d883a 	mov	r6,r2
   81abc:	200b883a 	mov	r5,r4
   81ac0:	e13fff17 	ldw	r4,-4(fp)
   81ac4:	0083c740 	call	83c74 <ReadEDID>
   81ac8:	10800058 	cmpnei	r2,r2,1
   81acc:	1000021e 	bne	r2,zero,81ad8 <GetEDIDData+0x8c>
    {
        return FALSE ;
   81ad0:	0005883a 	mov	r2,zero
   81ad4:	00000106 	br	81adc <GetEDIDData+0x90>
    }

    return TRUE ;
   81ad8:	00800044 	movi	r2,1
}
   81adc:	e037883a 	mov	sp,fp
   81ae0:	dfc00117 	ldw	ra,4(sp)
   81ae4:	df000017 	ldw	fp,0(sp)
   81ae8:	dec00204 	addi	sp,sp,8
   81aec:	f800283a 	ret

00081af0 <EnableHDCP>:


BOOL
EnableHDCP(BYTE bEnable)
{
   81af0:	defffd04 	addi	sp,sp,-12
   81af4:	dfc00215 	stw	ra,8(sp)
   81af8:	df000115 	stw	fp,4(sp)
   81afc:	df000104 	addi	fp,sp,4
   81b00:	2005883a 	mov	r2,r4
   81b04:	e0bfff05 	stb	r2,-4(fp)
    if(bEnable)
   81b08:	e0bfff03 	ldbu	r2,-4(fp)
   81b0c:	10000626 	beq	r2,zero,81b28 <EnableHDCP+0x38>
    {
        if(ER_FAIL == HDCP_Authenticate())
   81b10:	00844880 	call	84488 <HDCP_Authenticate>
   81b14:	10800058 	cmpnei	r2,r2,1
   81b18:	1000041e 	bne	r2,zero,81b2c <EnableHDCP+0x3c>
        {
			
            HDCP_ResetAuth() ;    
   81b1c:	0083fb80 	call	83fb8 <HDCP_ResetAuth>
			return FALSE ;
   81b20:	0005883a 	mov	r2,zero
   81b24:	00000206 	br	81b30 <EnableHDCP+0x40>
        }

    }
    else
    {
        HDCP_ResetAuth() ;    
   81b28:	0083fb80 	call	83fb8 <HDCP_ResetAuth>
    }
    return TRUE ;
   81b2c:	00800044 	movi	r2,1
}
   81b30:	e037883a 	mov	sp,fp
   81b34:	dfc00117 	ldw	ra,4(sp)
   81b38:	df000017 	ldw	fp,0(sp)
   81b3c:	dec00204 	addi	sp,sp,8
   81b40:	f800283a 	ret

00081b44 <CheckHDMITX>:


BOOL
CheckHDMITX(BYTE *pHPD,BYTE *pHPDChange)
{
   81b44:	defff704 	addi	sp,sp,-36
   81b48:	dfc00815 	stw	ra,32(sp)
   81b4c:	df000715 	stw	fp,28(sp)
   81b50:	df000704 	addi	fp,sp,28
   81b54:	e13ffe15 	stw	r4,-8(fp)
   81b58:	e17fff15 	stw	r5,-4(fp)
    BYTE intdata1,intdata2,intdata3,sysstat;
    BYTE  intclr3 = 0 ;
   81b5c:	e03ff905 	stb	zero,-28(fp)
    BOOL PrevHPD = Instance[0].bHPD ;
   81b60:	008002b4 	movhi	r2,10
   81b64:	1085ab04 	addi	r2,r2,5804
   81b68:	10800317 	ldw	r2,12(r2)
   81b6c:	1004d0fa 	srli	r2,r2,3
   81b70:	1080004c 	andi	r2,r2,1
   81b74:	10803fcc 	andi	r2,r2,255
   81b78:	e0bffa15 	stw	r2,-24(fp)
    BOOL HPD ;

    sysstat = HDMITX_ReadI2C_Byte(REG_TX_SYS_STATUS) ;  // read system status register
   81b7c:	01000384 	movi	r4,14
   81b80:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   81b84:	e0bffb05 	stb	r2,-20(fp)
    
  //  OS_PRINTF("sysstat(REG[0x0E])=%02Xh\r\n", sysstat);    

    HPD = ((sysstat & (B_HPDETECT|B_RXSENDETECT)) == (B_HPDETECT|B_RXSENDETECT))?TRUE:FALSE ;
   81b88:	e0bffb03 	ldbu	r2,-20(fp)
   81b8c:	1080180c 	andi	r2,r2,96
   81b90:	10801820 	cmpeqi	r2,r2,96
   81b94:	10803fcc 	andi	r2,r2,255
   81b98:	e0bffc15 	stw	r2,-16(fp)

    // 2007/06/20 added by jj_tseng@chipadvanced.com
    if(pHPDChange)
   81b9c:	e0bfff17 	ldw	r2,-4(fp)
   81ba0:	10000226 	beq	r2,zero,81bac <CheckHDMITX+0x68>
    {
    	*pHPDChange = FALSE ;
   81ba4:	e0bfff17 	ldw	r2,-4(fp)
   81ba8:	10000005 	stb	zero,0(r2)

    }
    //~jj_tseng@chipadvanced.com 2007/06/20

    if(!HPD)
   81bac:	e0bffc17 	ldw	r2,-16(fp)
   81bb0:	1000061e 	bne	r2,zero,81bcc <CheckHDMITX+0x88>
    {
        Instance[0].bAuthenticated = FALSE ;
   81bb4:	008002b4 	movhi	r2,10
   81bb8:	1085ab04 	addi	r2,r2,5804
   81bbc:	11000303 	ldbu	r4,12(r2)
   81bc0:	00ffff84 	movi	r3,-2
   81bc4:	20c6703a 	and	r3,r4,r3
   81bc8:	10c00305 	stb	r3,12(r2)
    }

    if(sysstat & B_INT_ACTIVE)  // interrupt is activce
   81bcc:	e0bffb03 	ldbu	r2,-20(fp)
   81bd0:	10803fcc 	andi	r2,r2,255
   81bd4:	1080201c 	xori	r2,r2,128
   81bd8:	10bfe004 	addi	r2,r2,-128
   81bdc:	10006c0e 	bge	r2,zero,81d90 <CheckHDMITX+0x24c>
    {

        intdata1 = HDMITX_ReadI2C_Byte(REG_TX_INT_STAT1) ;  // reg 0x06
   81be0:	01000184 	movi	r4,6
   81be4:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   81be8:	e0bffd05 	stb	r2,-12(fp)
        //ErrorF("INT_Handler: reg%02x = %02x\n",REG_TX_INT_STAT1,intdata1) ;

		if(intdata1 & B_INT_DDCFIFO_ERR)
   81bec:	e0bffd03 	ldbu	r2,-12(fp)
   81bf0:	1080040c 	andi	r2,r2,16
   81bf4:	10000126 	beq	r2,zero,81bfc <CheckHDMITX+0xb8>
		{
		    //ErrorF("DDC FIFO Error.\n") ;
		    ClearDDCFIFO() ;
   81bf8:	0083ac00 	call	83ac0 <ClearDDCFIFO>
		}


		if(intdata1 & B_INT_DDC_BUS_HANG)
   81bfc:	e0bffd03 	ldbu	r2,-12(fp)
   81c00:	1080010c 	andi	r2,r2,4
   81c04:	10000d26 	beq	r2,zero,81c3c <CheckHDMITX+0xf8>
		{
		    ErrorF("DDC BUS HANG.\n") ;
   81c08:	010002b4 	movhi	r4,10
   81c0c:	212e8904 	addi	r4,r4,-17884
   81c10:	00877a40 	call	877a4 <ErrorF>
            AbortDDC() ;
   81c14:	0083b400 	call	83b40 <AbortDDC>

            if(Instance[0].bAuthenticated)
   81c18:	008002b4 	movhi	r2,10
   81c1c:	1085ab04 	addi	r2,r2,5804
   81c20:	10800317 	ldw	r2,12(r2)
   81c24:	1080004c 	andi	r2,r2,1
   81c28:	10000426 	beq	r2,zero,81c3c <CheckHDMITX+0xf8>
            {
                ErrorF("when DDC hang,and aborted DDC,the HDCP authentication need to restart.\n") ;
   81c2c:	010002b4 	movhi	r4,10
   81c30:	212e8d04 	addi	r4,r4,-17868
   81c34:	00877a40 	call	877a4 <ErrorF>
                HDCP_ResumeAuthentication() ;
   81c38:	00862b00 	call	862b0 <HDCP_ResumeAuthentication>
            }
		}


		if(intdata1 & (B_INT_HPD_PLUG|B_INT_RX_SENSE))
   81c3c:	e0bffd03 	ldbu	r2,-12(fp)
   81c40:	108000cc 	andi	r2,r2,3
   81c44:	10000f26 	beq	r2,zero,81c84 <CheckHDMITX+0x140>
		{

            if(pHPDChange) *pHPDChange = TRUE ;
   81c48:	e0bfff17 	ldw	r2,-4(fp)
   81c4c:	10000326 	beq	r2,zero,81c5c <CheckHDMITX+0x118>
   81c50:	e0bfff17 	ldw	r2,-4(fp)
   81c54:	00c00044 	movi	r3,1
   81c58:	10c00005 	stb	r3,0(r2)

            if(!HPD)
   81c5c:	e0bffc17 	ldw	r2,-16(fp)
   81c60:	1000081e 	bne	r2,zero,81c84 <CheckHDMITX+0x140>
            {
                // reset
                HDMITX_WriteI2C_Byte(REG_TX_SW_RST,B_AREF_RST|B_VID_RST|B_AUD_RST|B_HDCP_RST) ;
   81c64:	01400744 	movi	r5,29
   81c68:	01000104 	movi	r4,4
   81c6c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
                DelayMS(1) ;
   81c70:	01000044 	movi	r4,1
   81c74:	00877380 	call	87738 <DelayMS>
                HDMITX_WriteI2C_Byte(REG_TX_AFE_DRV_CTRL,B_AFE_DRV_RST|B_AFE_DRV_PWD) ;
   81c78:	01400c04 	movi	r5,48
   81c7c:	01001844 	movi	r4,97
   81c80:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
                // VState = TXVSTATE_Unplug ;
            }
		}


        intdata2 = HDMITX_ReadI2C_Byte(REG_TX_INT_STAT2) ;  // reg 0x07
   81c84:	010001c4 	movi	r4,7
   81c88:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   81c8c:	e0bffd45 	stb	r2,-11(fp)
        //ErrorF("INT_Handler: reg%02x = %02x\n",REG_TX_INT_STAT2,intdata2) ;



		#ifdef SUPPORT_HDCP
		if(intdata2 & B_INT_AUTH_DONE)
   81c90:	e0bffd43 	ldbu	r2,-11(fp)
   81c94:	1080008c 	andi	r2,r2,2
   81c98:	10001126 	beq	r2,zero,81ce0 <CheckHDMITX+0x19c>
		{
            ErrorF("interrupt Authenticate Done.\n") ;
   81c9c:	010002b4 	movhi	r4,10
   81ca0:	212e9f04 	addi	r4,r4,-17796
   81ca4:	00877a40 	call	877a4 <ErrorF>
            HDMITX_OrREG_Byte(REG_TX_INT_MASK2,B_T_AUTH_DONE_MASK) ;
   81ca8:	01000284 	movi	r4,10
   81cac:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   81cb0:	10800094 	ori	r2,r2,2
   81cb4:	10803fcc 	andi	r2,r2,255
   81cb8:	100b883a 	mov	r5,r2
   81cbc:	01000284 	movi	r4,10
   81cc0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
            Instance[0].bAuthenticated = TRUE ;
   81cc4:	008002b4 	movhi	r2,10
   81cc8:	1085ab04 	addi	r2,r2,5804
   81ccc:	10c00303 	ldbu	r3,12(r2)
   81cd0:	18c00054 	ori	r3,r3,1
   81cd4:	10c00305 	stb	r3,12(r2)
            SetAVMute(FALSE) ;
   81cd8:	0009883a 	mov	r4,zero
   81cdc:	0081fe00 	call	81fe0 <SetAVMute>
		}

		if(intdata2 & B_INT_AUTH_FAIL)
   81ce0:	e0bffd43 	ldbu	r2,-11(fp)
   81ce4:	1080004c 	andi	r2,r2,1
   81ce8:	10000526 	beq	r2,zero,81d00 <CheckHDMITX+0x1bc>
		{
            ErrorF("interrupt Authenticate Fail.\n") ;
   81cec:	010002b4 	movhi	r4,10
   81cf0:	212ea704 	addi	r4,r4,-17764
   81cf4:	00877a40 	call	877a4 <ErrorF>
			AbortDDC();   // @emily add
   81cf8:	0083b400 	call	83b40 <AbortDDC>
            HDCP_ResumeAuthentication() ;
   81cfc:	00862b00 	call	862b0 <HDCP_ResumeAuthentication>
        }
        #endif // SUPPORT_HDCP

		intdata3 = HDMITX_ReadI2C_Byte(REG_TX_INT_STAT3) ;  // reg 0x08
   81d00:	01000204 	movi	r4,8
   81d04:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   81d08:	e0bffd85 	stb	r2,-10(fp)
		if(intdata3 & B_INT_VIDSTABLE)
   81d0c:	e0bffd83 	ldbu	r2,-10(fp)
   81d10:	1080040c 	andi	r2,r2,16
   81d14:	10000726 	beq	r2,zero,81d34 <CheckHDMITX+0x1f0>
		{
			sysstat = HDMITX_ReadI2C_Byte(REG_TX_SYS_STATUS) ;
   81d18:	01000384 	movi	r4,14
   81d1c:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   81d20:	e0bffb05 	stb	r2,-20(fp)
			if(sysstat & B_TXVIDSTABLE)
   81d24:	e0bffb03 	ldbu	r2,-20(fp)
   81d28:	1080040c 	andi	r2,r2,16
   81d2c:	10000126 	beq	r2,zero,81d34 <CheckHDMITX+0x1f0>
			{
				FireAFE() ;
   81d30:	0082e9c0 	call	82e9c <FireAFE>
			}
		}
        HDMITX_WriteI2C_Byte(REG_TX_INT_CLR0,0xFF) ;
   81d34:	01403fc4 	movi	r5,255
   81d38:	01000304 	movi	r4,12
   81d3c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_INT_CLR1,0xFF) ;
   81d40:	01403fc4 	movi	r5,255
   81d44:	01000344 	movi	r4,13
   81d48:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        intclr3 = (HDMITX_ReadI2C_Byte(REG_TX_SYS_STATUS))|B_CLR_AUD_CTS | B_INTACTDONE ;
   81d4c:	01000384 	movi	r4,14
   81d50:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   81d54:	108000d4 	ori	r2,r2,3
   81d58:	e0bff905 	stb	r2,-28(fp)
        HDMITX_WriteI2C_Byte(REG_TX_SYS_STATUS,intclr3) ; // clear interrupt.
   81d5c:	e0bff903 	ldbu	r2,-28(fp)
   81d60:	100b883a 	mov	r5,r2
   81d64:	01000384 	movi	r4,14
   81d68:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        intclr3 &= ~(B_INTACTDONE) ;
   81d6c:	e0fff903 	ldbu	r3,-28(fp)
   81d70:	00bfff84 	movi	r2,-2
   81d74:	1884703a 	and	r2,r3,r2
   81d78:	e0bff905 	stb	r2,-28(fp)
        HDMITX_WriteI2C_Byte(REG_TX_SYS_STATUS,intclr3) ; // INTACTDONE reset to zero.
   81d7c:	e0bff903 	ldbu	r2,-28(fp)
   81d80:	100b883a 	mov	r5,r2
   81d84:	01000384 	movi	r4,14
   81d88:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
   81d8c:	00001106 	br	81dd4 <CheckHDMITX+0x290>
    }
    else
    {
        if(pHPDChange)
   81d90:	e0bfff17 	ldw	r2,-4(fp)
   81d94:	10000f26 	beq	r2,zero,81dd4 <CheckHDMITX+0x290>
        {
            *pHPDChange = (HPD != PrevHPD)?TRUE:FALSE ;
   81d98:	e0fffc17 	ldw	r3,-16(fp)
   81d9c:	e0bffa17 	ldw	r2,-24(fp)
   81da0:	1884c03a 	cmpne	r2,r3,r2
   81da4:	1007883a 	mov	r3,r2
   81da8:	e0bfff17 	ldw	r2,-4(fp)
   81dac:	10c00005 	stb	r3,0(r2)

            if(*pHPDChange &&(!HPD))
   81db0:	e0bfff17 	ldw	r2,-4(fp)
   81db4:	10800003 	ldbu	r2,0(r2)
   81db8:	10803fcc 	andi	r2,r2,255
   81dbc:	10000526 	beq	r2,zero,81dd4 <CheckHDMITX+0x290>
   81dc0:	e0bffc17 	ldw	r2,-16(fp)
   81dc4:	1000031e 	bne	r2,zero,81dd4 <CheckHDMITX+0x290>
            {
                HDMITX_WriteI2C_Byte(REG_TX_AFE_DRV_CTRL,B_AFE_DRV_RST|B_AFE_DRV_PWD) ;
   81dc8:	01400c04 	movi	r5,48
   81dcc:	01001844 	movi	r4,97
   81dd0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
            }
        }
    }

    SetupAudioChannel() ; // 2007/12/12 added by jj_tseng
   81dd4:	008355c0 	call	8355c <SetupAudioChannel>
    
    if(pHPD)
   81dd8:	e0bffe17 	ldw	r2,-8(fp)
   81ddc:	10000526 	beq	r2,zero,81df4 <CheckHDMITX+0x2b0>
    {
        *pHPD = HPD ? TRUE:FALSE ;
   81de0:	e0bffc17 	ldw	r2,-16(fp)
   81de4:	1004c03a 	cmpne	r2,r2,zero
   81de8:	1007883a 	mov	r3,r2
   81dec:	e0bffe17 	ldw	r2,-8(fp)
   81df0:	10c00005 	stb	r3,0(r2)
    }

    Instance[0].bHPD  = (BYTE)HPD ;
   81df4:	e0bffc17 	ldw	r2,-16(fp)
   81df8:	1080004c 	andi	r2,r2,1
   81dfc:	1007883a 	mov	r3,r2
   81e00:	008002b4 	movhi	r2,10
   81e04:	1085ab04 	addi	r2,r2,5804
   81e08:	18c0004c 	andi	r3,r3,1
   81e0c:	180a90fa 	slli	r5,r3,3
   81e10:	11000303 	ldbu	r4,12(r2)
   81e14:	00fffdc4 	movi	r3,-9
   81e18:	20c6703a 	and	r3,r4,r3
   81e1c:	1809883a 	mov	r4,r3
   81e20:	2807883a 	mov	r3,r5
   81e24:	20c6b03a 	or	r3,r4,r3
   81e28:	10c00305 	stb	r3,12(r2)
    return HPD ;
   81e2c:	e0bffc17 	ldw	r2,-16(fp)
}
   81e30:	e037883a 	mov	sp,fp
   81e34:	dfc00117 	ldw	ra,4(sp)
   81e38:	df000017 	ldw	fp,0(sp)
   81e3c:	dec00204 	addi	sp,sp,8
   81e40:	f800283a 	ret

00081e44 <DisableIT6613>:

void
DisableIT6613()
{
   81e44:	defffe04 	addi	sp,sp,-8
   81e48:	dfc00115 	stw	ra,4(sp)
   81e4c:	df000015 	stw	fp,0(sp)
   81e50:	d839883a 	mov	fp,sp
    HDMITX_WriteI2C_Byte(REG_TX_SW_RST,B_AREF_RST|B_VID_RST|B_AUD_RST|B_HDCP_RST) ;
   81e54:	01400744 	movi	r5,29
   81e58:	01000104 	movi	r4,4
   81e5c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    DelayMS(1) ;
   81e60:	01000044 	movi	r4,1
   81e64:	00877380 	call	87738 <DelayMS>
    HDMITX_WriteI2C_Byte(REG_TX_AFE_DRV_CTRL,B_AFE_DRV_RST|B_AFE_DRV_PWD) ;
   81e68:	01400c04 	movi	r5,48
   81e6c:	01001844 	movi	r4,97
   81e70:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   81e74:	0001883a 	nop
   81e78:	e037883a 	mov	sp,fp
   81e7c:	dfc00117 	ldw	ra,4(sp)
   81e80:	df000017 	ldw	fp,0(sp)
   81e84:	dec00204 	addi	sp,sp,8
   81e88:	f800283a 	ret

00081e8c <DisableVideoOutput>:

void
DisableVideoOutput()
{
   81e8c:	defffd04 	addi	sp,sp,-12
   81e90:	dfc00215 	stw	ra,8(sp)
   81e94:	df000115 	stw	fp,4(sp)
   81e98:	df000104 	addi	fp,sp,4
	BYTE uc = HDMITX_ReadI2C_Byte(REG_TX_SW_RST) | B_VID_RST ;
   81e9c:	01000104 	movi	r4,4
   81ea0:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   81ea4:	10800214 	ori	r2,r2,8
   81ea8:	e0bfff05 	stb	r2,-4(fp)
	HDMITX_WriteI2C_Byte(REG_TX_SW_RST,uc) ;
   81eac:	e0bfff03 	ldbu	r2,-4(fp)
   81eb0:	100b883a 	mov	r5,r2
   81eb4:	01000104 	movi	r4,4
   81eb8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_AFE_DRV_CTRL,B_AFE_DRV_RST|B_AFE_DRV_PWD) ;
   81ebc:	01400c04 	movi	r5,48
   81ec0:	01001844 	movi	r4,97
   81ec4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   81ec8:	0001883a 	nop
   81ecc:	e037883a 	mov	sp,fp
   81ed0:	dfc00117 	ldw	ra,4(sp)
   81ed4:	df000017 	ldw	fp,0(sp)
   81ed8:	dec00204 	addi	sp,sp,8
   81edc:	f800283a 	ret

00081ee0 <DisableAudioOutput>:


void
DisableAudioOutput()
{
   81ee0:	defffd04 	addi	sp,sp,-12
   81ee4:	dfc00215 	stw	ra,8(sp)
   81ee8:	df000115 	stw	fp,4(sp)
   81eec:	df000104 	addi	fp,sp,4
	BYTE uc = HDMITX_ReadI2C_Byte(REG_TX_SW_RST) | B_AUD_RST ;
   81ef0:	01000104 	movi	r4,4
   81ef4:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   81ef8:	10800114 	ori	r2,r2,4
   81efc:	e0bfff05 	stb	r2,-4(fp)
	HDMITX_WriteI2C_Byte(REG_TX_SW_RST,uc) ;
   81f00:	e0bfff03 	ldbu	r2,-4(fp)
   81f04:	100b883a 	mov	r5,r2
   81f08:	01000104 	movi	r4,4
   81f0c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   81f10:	0001883a 	nop
   81f14:	e037883a 	mov	sp,fp
   81f18:	dfc00117 	ldw	ra,4(sp)
   81f1c:	df000017 	ldw	fp,0(sp)
   81f20:	dec00204 	addi	sp,sp,8
   81f24:	f800283a 	ret

00081f28 <EnableAVIInfoFrame>:



BOOL
EnableAVIInfoFrame(BYTE bEnable,BYTE *pAVIInfoFrame)
{
   81f28:	defffc04 	addi	sp,sp,-16
   81f2c:	dfc00315 	stw	ra,12(sp)
   81f30:	df000215 	stw	fp,8(sp)
   81f34:	df000204 	addi	fp,sp,8
   81f38:	2005883a 	mov	r2,r4
   81f3c:	e17fff15 	stw	r5,-4(fp)
   81f40:	e0bffe05 	stb	r2,-8(fp)
    if(!bEnable)
   81f44:	e0bffe03 	ldbu	r2,-8(fp)
   81f48:	1000031e 	bne	r2,zero,81f58 <EnableAVIInfoFrame+0x30>
    {
        DISABLE_AVI_INFOFRM_PKT() ;
   81f4c:	00865640 	call	86564 <DISABLE_AVI_INFOFRM_PKT>
        return TRUE ;
   81f50:	00800044 	movi	r2,1
   81f54:	00000606 	br	81f70 <EnableAVIInfoFrame+0x48>
    }

    if(SetAVIInfoFrame((AVI_InfoFrame *)pAVIInfoFrame) == ER_SUCCESS)
   81f58:	e13fff17 	ldw	r4,-4(fp)
   81f5c:	00866340 	call	86634 <SetAVIInfoFrame>
   81f60:	1000021e 	bne	r2,zero,81f6c <EnableAVIInfoFrame+0x44>
    {
        return TRUE ;
   81f64:	00800044 	movi	r2,1
   81f68:	00000106 	br	81f70 <EnableAVIInfoFrame+0x48>
    }

    return FALSE ;
   81f6c:	0005883a 	mov	r2,zero
}
   81f70:	e037883a 	mov	sp,fp
   81f74:	dfc00117 	ldw	ra,4(sp)
   81f78:	df000017 	ldw	fp,0(sp)
   81f7c:	dec00204 	addi	sp,sp,8
   81f80:	f800283a 	ret

00081f84 <EnableAudioInfoFrame>:

BOOL
EnableAudioInfoFrame(BYTE bEnable,BYTE *pAudioInfoFrame)
{
   81f84:	defffc04 	addi	sp,sp,-16
   81f88:	dfc00315 	stw	ra,12(sp)
   81f8c:	df000215 	stw	fp,8(sp)
   81f90:	df000204 	addi	fp,sp,8
   81f94:	2005883a 	mov	r2,r4
   81f98:	e17fff15 	stw	r5,-4(fp)
   81f9c:	e0bffe05 	stb	r2,-8(fp)
    if(!bEnable)
   81fa0:	e0bffe03 	ldbu	r2,-8(fp)
   81fa4:	1000031e 	bne	r2,zero,81fb4 <EnableAudioInfoFrame+0x30>
    {
        // richard modify, DISABLE_AVI_INFOFRM_PKT() ;
        DISABLE_AUD_INFOFRM_PKT(); 
   81fa8:	00865980 	call	86598 <DISABLE_AUD_INFOFRM_PKT>
        return TRUE ;
   81fac:	00800044 	movi	r2,1
   81fb0:	00000606 	br	81fcc <EnableAudioInfoFrame+0x48>
    }


    if(SetAudioInfoFrame((Audio_InfoFrame *)pAudioInfoFrame) == ER_SUCCESS)
   81fb4:	e13fff17 	ldw	r4,-4(fp)
   81fb8:	008683c0 	call	8683c <SetAudioInfoFrame>
   81fbc:	1000021e 	bne	r2,zero,81fc8 <EnableAudioInfoFrame+0x44>
    {
        return TRUE ;
   81fc0:	00800044 	movi	r2,1
   81fc4:	00000106 	br	81fcc <EnableAudioInfoFrame+0x48>
    }

    return FALSE ;
   81fc8:	0005883a 	mov	r2,zero
}
   81fcc:	e037883a 	mov	sp,fp
   81fd0:	dfc00117 	ldw	ra,4(sp)
   81fd4:	df000017 	ldw	fp,0(sp)
   81fd8:	dec00204 	addi	sp,sp,8
   81fdc:	f800283a 	ret

00081fe0 <SetAVMute>:

void
SetAVMute(BYTE bEnable)
{
   81fe0:	defffc04 	addi	sp,sp,-16
   81fe4:	dfc00315 	stw	ra,12(sp)
   81fe8:	df000215 	stw	fp,8(sp)
   81fec:	df000204 	addi	fp,sp,8
   81ff0:	2005883a 	mov	r2,r4
   81ff4:	e0bfff05 	stb	r2,-4(fp)
    BYTE uc ;

    Switch_HDMITX_Bank(0) ;
   81ff8:	000b883a 	mov	r5,zero
   81ffc:	010003c4 	movi	r4,15
   82000:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    uc = HDMITX_ReadI2C_Byte(REG_TX_GCP) ;
   82004:	01003044 	movi	r4,193
   82008:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   8200c:	e0bffe05 	stb	r2,-8(fp)
    uc &= ~B_TX_SETAVMUTE ;
   82010:	e0fffe03 	ldbu	r3,-8(fp)
   82014:	00bfff84 	movi	r2,-2
   82018:	1884703a 	and	r2,r3,r2
   8201c:	e0bffe05 	stb	r2,-8(fp)
    uc |= bEnable?B_TX_SETAVMUTE:0 ;
   82020:	e0bfff03 	ldbu	r2,-4(fp)
   82024:	1004c03a 	cmpne	r2,r2,zero
   82028:	1007883a 	mov	r3,r2
   8202c:	e0bffe03 	ldbu	r2,-8(fp)
   82030:	1884b03a 	or	r2,r3,r2
   82034:	e0bffe05 	stb	r2,-8(fp)
    HDMITX_WriteI2C_Byte(REG_TX_GCP,uc) ;
   82038:	e0bffe03 	ldbu	r2,-8(fp)
   8203c:	100b883a 	mov	r5,r2
   82040:	01003044 	movi	r4,193
   82044:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_PKT_GENERAL_CTRL,B_ENABLE_PKT|B_REPEAT_PKT) ;
   82048:	014000c4 	movi	r5,3
   8204c:	01003184 	movi	r4,198
   82050:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   82054:	0001883a 	nop
   82058:	e037883a 	mov	sp,fp
   8205c:	dfc00117 	ldw	ra,4(sp)
   82060:	df000017 	ldw	fp,0(sp)
   82064:	dec00204 	addi	sp,sp,8
   82068:	f800283a 	ret

0008206c <SetOutputColorDepthPhase>:

void
SetOutputColorDepthPhase(BYTE ColorDepth,BYTE bPhase)
{
   8206c:	defffb04 	addi	sp,sp,-20
   82070:	dfc00415 	stw	ra,16(sp)
   82074:	df000315 	stw	fp,12(sp)
   82078:	df000304 	addi	fp,sp,12
   8207c:	2007883a 	mov	r3,r4
   82080:	2805883a 	mov	r2,r5
   82084:	e0fffe05 	stb	r3,-8(fp)
   82088:	e0bfff05 	stb	r2,-4(fp)
    BYTE uc ;
    BYTE bColorDepth ;

    if(ColorDepth == 30)
   8208c:	e0bffe03 	ldbu	r2,-8(fp)
   82090:	10800798 	cmpnei	r2,r2,30
   82094:	1000031e 	bne	r2,zero,820a4 <SetOutputColorDepthPhase+0x38>
    {
        bColorDepth = B_CD_30 ;
   82098:	00801404 	movi	r2,80
   8209c:	e0bffd05 	stb	r2,-12(fp)
   820a0:	00000d06 	br	820d8 <SetOutputColorDepthPhase+0x6c>
    }
    else if (ColorDepth == 36)
   820a4:	e0bffe03 	ldbu	r2,-8(fp)
   820a8:	10800918 	cmpnei	r2,r2,36
   820ac:	1000031e 	bne	r2,zero,820bc <SetOutputColorDepthPhase+0x50>
    {
        bColorDepth = B_CD_36 ;
   820b0:	00801804 	movi	r2,96
   820b4:	e0bffd05 	stb	r2,-12(fp)
   820b8:	00000706 	br	820d8 <SetOutputColorDepthPhase+0x6c>
    }
    else if (ColorDepth == 24)
   820bc:	e0bffe03 	ldbu	r2,-8(fp)
   820c0:	10800618 	cmpnei	r2,r2,24
   820c4:	1000031e 	bne	r2,zero,820d4 <SetOutputColorDepthPhase+0x68>
    {
        bColorDepth = B_CD_24 ;
   820c8:	00801004 	movi	r2,64
   820cc:	e0bffd05 	stb	r2,-12(fp)
   820d0:	00000106 	br	820d8 <SetOutputColorDepthPhase+0x6c>
    }
    else
    {
        bColorDepth = 0 ; // not indicated
   820d4:	e03ffd05 	stb	zero,-12(fp)
    }

    Switch_HDMITX_Bank(0) ;
   820d8:	000b883a 	mov	r5,zero
   820dc:	010003c4 	movi	r4,15
   820e0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    uc = HDMITX_ReadI2C_Byte(REG_TX_GCP) ;
   820e4:	01003044 	movi	r4,193
   820e8:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   820ec:	e0bffd45 	stb	r2,-11(fp)
    uc &= ~B_COLOR_DEPTH_MASK ;
   820f0:	e0fffd43 	ldbu	r3,-11(fp)
   820f4:	00bfe3c4 	movi	r2,-113
   820f8:	1884703a 	and	r2,r3,r2
   820fc:	e0bffd45 	stb	r2,-11(fp)
    uc |= bColorDepth&B_COLOR_DEPTH_MASK;
   82100:	e0bffd03 	ldbu	r2,-12(fp)
   82104:	10801c0c 	andi	r2,r2,112
   82108:	1007883a 	mov	r3,r2
   8210c:	e0bffd43 	ldbu	r2,-11(fp)
   82110:	1884b03a 	or	r2,r3,r2
   82114:	e0bffd45 	stb	r2,-11(fp)
    HDMITX_WriteI2C_Byte(REG_TX_GCP,uc) ;
   82118:	e0bffd43 	ldbu	r2,-11(fp)
   8211c:	100b883a 	mov	r5,r2
   82120:	01003044 	movi	r4,193
   82124:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   82128:	0001883a 	nop
   8212c:	e037883a 	mov	sp,fp
   82130:	dfc00117 	ldw	ra,4(sp)
   82134:	df000017 	ldw	fp,0(sp)
   82138:	dec00204 	addi	sp,sp,8
   8213c:	f800283a 	ret

00082140 <Get6613Reg>:

void
Get6613Reg(BYTE *pReg)
{
   82140:	defffa04 	addi	sp,sp,-24
   82144:	dfc00515 	stw	ra,20(sp)
   82148:	df000415 	stw	fp,16(sp)
   8214c:	dc000315 	stw	r16,12(sp)
   82150:	df000404 	addi	fp,sp,16
   82154:	e13ffe15 	stw	r4,-8(fp)
	int i ;
	BYTE reg ;
    Switch_HDMITX_Bank(0) ;
   82158:	000b883a 	mov	r5,zero
   8215c:	010003c4 	movi	r4,15
   82160:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	for(i = 0 ; i < 0x100 ; i++)
   82164:	e03ffc15 	stw	zero,-16(fp)
   82168:	00000c06 	br	8219c <Get6613Reg+0x5c>
	{
		reg = i & 0xFF ;
   8216c:	e0bffc17 	ldw	r2,-16(fp)
   82170:	e0bffd05 	stb	r2,-12(fp)
		pReg[i] = HDMITX_ReadI2C_Byte(reg) ;
   82174:	e0bffc17 	ldw	r2,-16(fp)
   82178:	e0fffe17 	ldw	r3,-8(fp)
   8217c:	18a1883a 	add	r16,r3,r2
   82180:	e0bffd03 	ldbu	r2,-12(fp)
   82184:	1009883a 	mov	r4,r2
   82188:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   8218c:	80800005 	stb	r2,0(r16)
Get6613Reg(BYTE *pReg)
{
	int i ;
	BYTE reg ;
    Switch_HDMITX_Bank(0) ;
	for(i = 0 ; i < 0x100 ; i++)
   82190:	e0bffc17 	ldw	r2,-16(fp)
   82194:	10800044 	addi	r2,r2,1
   82198:	e0bffc15 	stw	r2,-16(fp)
   8219c:	e0bffc17 	ldw	r2,-16(fp)
   821a0:	10804010 	cmplti	r2,r2,256
   821a4:	103ff11e 	bne	r2,zero,8216c <__alt_data_end+0xfffb22ac>
	{
		reg = i & 0xFF ;
		pReg[i] = HDMITX_ReadI2C_Byte(reg) ;
	}
    Switch_HDMITX_Bank(1) ;
   821a8:	01400044 	movi	r5,1
   821ac:	010003c4 	movi	r4,15
   821b0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	for(reg = 0x30 ; reg < 0xB0 ; i++,reg++)
   821b4:	00800c04 	movi	r2,48
   821b8:	e0bffd05 	stb	r2,-12(fp)
   821bc:	00000d06 	br	821f4 <Get6613Reg+0xb4>
	{
		pReg[i] = HDMITX_ReadI2C_Byte(reg) ;
   821c0:	e0bffc17 	ldw	r2,-16(fp)
   821c4:	e0fffe17 	ldw	r3,-8(fp)
   821c8:	18a1883a 	add	r16,r3,r2
   821cc:	e0bffd03 	ldbu	r2,-12(fp)
   821d0:	1009883a 	mov	r4,r2
   821d4:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   821d8:	80800005 	stb	r2,0(r16)
	{
		reg = i & 0xFF ;
		pReg[i] = HDMITX_ReadI2C_Byte(reg) ;
	}
    Switch_HDMITX_Bank(1) ;
	for(reg = 0x30 ; reg < 0xB0 ; i++,reg++)
   821dc:	e0bffc17 	ldw	r2,-16(fp)
   821e0:	10800044 	addi	r2,r2,1
   821e4:	e0bffc15 	stw	r2,-16(fp)
   821e8:	e0bffd03 	ldbu	r2,-12(fp)
   821ec:	10800044 	addi	r2,r2,1
   821f0:	e0bffd05 	stb	r2,-12(fp)
   821f4:	e0bffd03 	ldbu	r2,-12(fp)
   821f8:	10802c30 	cmpltui	r2,r2,176
   821fc:	103ff01e 	bne	r2,zero,821c0 <__alt_data_end+0xfffb2300>
	{
		pReg[i] = HDMITX_ReadI2C_Byte(reg) ;
	}
    Switch_HDMITX_Bank(0) ;
   82200:	000b883a 	mov	r5,zero
   82204:	010003c4 	movi	r4,15
   82208:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

}
   8220c:	0001883a 	nop
   82210:	e6ffff04 	addi	sp,fp,-4
   82214:	dfc00217 	ldw	ra,8(sp)
   82218:	df000117 	ldw	fp,4(sp)
   8221c:	dc000017 	ldw	r16,0(sp)
   82220:	dec00304 	addi	sp,sp,12
   82224:	f800283a 	ret

00082228 <ProgramDEGenModeByID>:
    // HDES = 574, HDEE = 2494, VDES = 58, VDEE = 1498
    {UNKNOWN_MODE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF}
} ;

BOOL ProgramDEGenModeByID(MODE_ID id,BYTE bInputSignalType)
{
   82228:	defffb04 	addi	sp,sp,-20
   8222c:	dfc00415 	stw	ra,16(sp)
   82230:	df000315 	stw	fp,12(sp)
   82234:	df000304 	addi	fp,sp,12
   82238:	e13ffe15 	stw	r4,-8(fp)
   8223c:	2805883a 	mov	r2,r5
   82240:	e0bfff05 	stb	r2,-4(fp)
    int i ;
    if( (bInputSignalType & (T_MODE_DEGEN|T_MODE_SYNCGEN|T_MODE_SYNCEMB) )==(T_MODE_DEGEN))
   82244:	e0bfff03 	ldbu	r2,-4(fp)
   82248:	10800c8c 	andi	r2,r2,50
   8224c:	10800418 	cmpnei	r2,r2,16
   82250:	1000921e 	bne	r2,zero,8249c <ProgramDEGenModeByID+0x274>
    {
        for( i = 0 ; DeGen_Table[i].id != UNKNOWN_MODE ; i++ )
   82254:	e03ffd15 	stw	zero,-12(fp)
   82258:	00000b06 	br	82288 <ProgramDEGenModeByID+0x60>
        {
            if( id == DeGen_Table[i].id ) break ;
   8225c:	008002b4 	movhi	r2,10
   82260:	10b21404 	addi	r2,r2,-14256
   82264:	e0fffd17 	ldw	r3,-12(fp)
   82268:	1806913a 	slli	r3,r3,4
   8226c:	10c5883a 	add	r2,r2,r3
   82270:	10c00017 	ldw	r3,0(r2)
   82274:	e0bffe17 	ldw	r2,-8(fp)
   82278:	18800b26 	beq	r3,r2,822a8 <ProgramDEGenModeByID+0x80>
BOOL ProgramDEGenModeByID(MODE_ID id,BYTE bInputSignalType)
{
    int i ;
    if( (bInputSignalType & (T_MODE_DEGEN|T_MODE_SYNCGEN|T_MODE_SYNCEMB) )==(T_MODE_DEGEN))
    {
        for( i = 0 ; DeGen_Table[i].id != UNKNOWN_MODE ; i++ )
   8227c:	e0bffd17 	ldw	r2,-12(fp)
   82280:	10800044 	addi	r2,r2,1
   82284:	e0bffd15 	stw	r2,-12(fp)
   82288:	008002b4 	movhi	r2,10
   8228c:	10b21404 	addi	r2,r2,-14256
   82290:	e0fffd17 	ldw	r3,-12(fp)
   82294:	1806913a 	slli	r3,r3,4
   82298:	10c5883a 	add	r2,r2,r3
   8229c:	10800017 	ldw	r2,0(r2)
   822a0:	103fee1e 	bne	r2,zero,8225c <__alt_data_end+0xfffb239c>
   822a4:	00000106 	br	822ac <ProgramDEGenModeByID+0x84>
        {
            if( id == DeGen_Table[i].id ) break ;
   822a8:	0001883a 	nop
        }
        if( DeGen_Table[i].id == UNKNOWN_MODE )
   822ac:	008002b4 	movhi	r2,10
   822b0:	10b21404 	addi	r2,r2,-14256
   822b4:	e0fffd17 	ldw	r3,-12(fp)
   822b8:	1806913a 	slli	r3,r3,4
   822bc:	10c5883a 	add	r2,r2,r3
   822c0:	10800017 	ldw	r2,0(r2)
   822c4:	1000021e 	bne	r2,zero,822d0 <ProgramDEGenModeByID+0xa8>
        {
            return FALSE ;
   822c8:	0005883a 	mov	r2,zero
   822cc:	00007406 	br	824a0 <ProgramDEGenModeByID+0x278>
        }
        
        Switch_HDMITX_Bank(0) ;
   822d0:	000b883a 	mov	r5,zero
   822d4:	010003c4 	movi	r4,15
   822d8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(0x90,DeGen_Table[i].Reg90) ;
   822dc:	008002b4 	movhi	r2,10
   822e0:	10b21404 	addi	r2,r2,-14256
   822e4:	e0fffd17 	ldw	r3,-12(fp)
   822e8:	1806913a 	slli	r3,r3,4
   822ec:	10c5883a 	add	r2,r2,r3
   822f0:	10800104 	addi	r2,r2,4
   822f4:	10800003 	ldbu	r2,0(r2)
   822f8:	10803fcc 	andi	r2,r2,255
   822fc:	100b883a 	mov	r5,r2
   82300:	01002404 	movi	r4,144
   82304:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(0x92,DeGen_Table[i].Reg92) ;
   82308:	008002b4 	movhi	r2,10
   8230c:	10b21404 	addi	r2,r2,-14256
   82310:	e0fffd17 	ldw	r3,-12(fp)
   82314:	1806913a 	slli	r3,r3,4
   82318:	10c5883a 	add	r2,r2,r3
   8231c:	10800144 	addi	r2,r2,5
   82320:	10800003 	ldbu	r2,0(r2)
   82324:	10803fcc 	andi	r2,r2,255
   82328:	100b883a 	mov	r5,r2
   8232c:	01002484 	movi	r4,146
   82330:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(0x93,DeGen_Table[i].Reg93) ;
   82334:	008002b4 	movhi	r2,10
   82338:	10b21404 	addi	r2,r2,-14256
   8233c:	e0fffd17 	ldw	r3,-12(fp)
   82340:	1806913a 	slli	r3,r3,4
   82344:	10c5883a 	add	r2,r2,r3
   82348:	10800184 	addi	r2,r2,6
   8234c:	10800003 	ldbu	r2,0(r2)
   82350:	10803fcc 	andi	r2,r2,255
   82354:	100b883a 	mov	r5,r2
   82358:	010024c4 	movi	r4,147
   8235c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(0x94,DeGen_Table[i].Reg94) ;
   82360:	008002b4 	movhi	r2,10
   82364:	10b21404 	addi	r2,r2,-14256
   82368:	e0fffd17 	ldw	r3,-12(fp)
   8236c:	1806913a 	slli	r3,r3,4
   82370:	10c5883a 	add	r2,r2,r3
   82374:	108001c4 	addi	r2,r2,7
   82378:	10800003 	ldbu	r2,0(r2)
   8237c:	10803fcc 	andi	r2,r2,255
   82380:	100b883a 	mov	r5,r2
   82384:	01002504 	movi	r4,148
   82388:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(0x9A,DeGen_Table[i].Reg9A) ;
   8238c:	008002b4 	movhi	r2,10
   82390:	10b21404 	addi	r2,r2,-14256
   82394:	e0fffd17 	ldw	r3,-12(fp)
   82398:	1806913a 	slli	r3,r3,4
   8239c:	10c5883a 	add	r2,r2,r3
   823a0:	10800204 	addi	r2,r2,8
   823a4:	10800003 	ldbu	r2,0(r2)
   823a8:	10803fcc 	andi	r2,r2,255
   823ac:	100b883a 	mov	r5,r2
   823b0:	01002684 	movi	r4,154
   823b4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(0x9B,DeGen_Table[i].Reg9B) ;
   823b8:	008002b4 	movhi	r2,10
   823bc:	10b21404 	addi	r2,r2,-14256
   823c0:	e0fffd17 	ldw	r3,-12(fp)
   823c4:	1806913a 	slli	r3,r3,4
   823c8:	10c5883a 	add	r2,r2,r3
   823cc:	10800244 	addi	r2,r2,9
   823d0:	10800003 	ldbu	r2,0(r2)
   823d4:	10803fcc 	andi	r2,r2,255
   823d8:	100b883a 	mov	r5,r2
   823dc:	010026c4 	movi	r4,155
   823e0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(0x9C,DeGen_Table[i].Reg9C) ;
   823e4:	008002b4 	movhi	r2,10
   823e8:	10b21404 	addi	r2,r2,-14256
   823ec:	e0fffd17 	ldw	r3,-12(fp)
   823f0:	1806913a 	slli	r3,r3,4
   823f4:	10c5883a 	add	r2,r2,r3
   823f8:	10800284 	addi	r2,r2,10
   823fc:	10800003 	ldbu	r2,0(r2)
   82400:	10803fcc 	andi	r2,r2,255
   82404:	100b883a 	mov	r5,r2
   82408:	01002704 	movi	r4,156
   8240c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(0x9D,DeGen_Table[i].Reg9D) ;
   82410:	008002b4 	movhi	r2,10
   82414:	10b21404 	addi	r2,r2,-14256
   82418:	e0fffd17 	ldw	r3,-12(fp)
   8241c:	1806913a 	slli	r3,r3,4
   82420:	10c5883a 	add	r2,r2,r3
   82424:	108002c4 	addi	r2,r2,11
   82428:	10800003 	ldbu	r2,0(r2)
   8242c:	10803fcc 	andi	r2,r2,255
   82430:	100b883a 	mov	r5,r2
   82434:	01002744 	movi	r4,157
   82438:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(0x9E,DeGen_Table[i].Reg9E) ;
   8243c:	008002b4 	movhi	r2,10
   82440:	10b21404 	addi	r2,r2,-14256
   82444:	e0fffd17 	ldw	r3,-12(fp)
   82448:	1806913a 	slli	r3,r3,4
   8244c:	10c5883a 	add	r2,r2,r3
   82450:	10800304 	addi	r2,r2,12
   82454:	10800003 	ldbu	r2,0(r2)
   82458:	10803fcc 	andi	r2,r2,255
   8245c:	100b883a 	mov	r5,r2
   82460:	01002784 	movi	r4,158
   82464:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(0x9F,DeGen_Table[i].Reg9F) ;
   82468:	008002b4 	movhi	r2,10
   8246c:	10b21404 	addi	r2,r2,-14256
   82470:	e0fffd17 	ldw	r3,-12(fp)
   82474:	1806913a 	slli	r3,r3,4
   82478:	10c5883a 	add	r2,r2,r3
   8247c:	10800344 	addi	r2,r2,13
   82480:	10800003 	ldbu	r2,0(r2)
   82484:	10803fcc 	andi	r2,r2,255
   82488:	100b883a 	mov	r5,r2
   8248c:	010027c4 	movi	r4,159
   82490:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        return TRUE ;
   82494:	00800044 	movi	r2,1
   82498:	00000106 	br	824a0 <ProgramDEGenModeByID+0x278>
        
    }
    return FALSE ;
   8249c:	0005883a 	mov	r2,zero
}
   824a0:	e037883a 	mov	sp,fp
   824a4:	dfc00117 	ldw	ra,4(sp)
   824a8:	df000017 	ldw	fp,0(sp)
   824ac:	dec00204 	addi	sp,sp,8
   824b0:	f800283a 	ret

000824b4 <ProgramSyncEmbeddedVideoMode>:
    {0xFF,0xFF,0xff,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0,0}
} ;

BOOL
ProgramSyncEmbeddedVideoMode(BYTE VIC,BYTE bInputSignalType)
{
   824b4:	defffb04 	addi	sp,sp,-20
   824b8:	dfc00415 	stw	ra,16(sp)
   824bc:	df000315 	stw	fp,12(sp)
   824c0:	df000304 	addi	fp,sp,12
   824c4:	2007883a 	mov	r3,r4
   824c8:	2805883a 	mov	r2,r5
   824cc:	e0fffe05 	stb	r3,-8(fp)
   824d0:	e0bfff05 	stb	r2,-4(fp)
    int i ;
    // if Embedded Video,need to generate timing with pattern register

    ErrorF("ProgramSyncEmbeddedVideoMode(%d,%x)\n",VIC,bInputSignalType) ;
   824d4:	e0bffe03 	ldbu	r2,-8(fp)
   824d8:	e0ffff03 	ldbu	r3,-4(fp)
   824dc:	180d883a 	mov	r6,r3
   824e0:	100b883a 	mov	r5,r2
   824e4:	010002b4 	movhi	r4,10
   824e8:	212eaf04 	addi	r4,r4,-17732
   824ec:	00877a40 	call	877a4 <ErrorF>

    if( bInputSignalType & T_MODE_SYNCEMB )
   824f0:	e0bfff03 	ldbu	r2,-4(fp)
   824f4:	1080008c 	andi	r2,r2,2
   824f8:	10008726 	beq	r2,zero,82718 <ProgramSyncEmbeddedVideoMode+0x264>
    {
        for(i = 0 ; SyncEmbTable[i].fmt != 0xFF ; i++)
   824fc:	e03ffd15 	stw	zero,-12(fp)
   82500:	00000c06 	br	82534 <ProgramSyncEmbeddedVideoMode+0x80>
        {
            if(VIC == SyncEmbTable[i].fmt)
   82504:	008002b4 	movhi	r2,10
   82508:	10b35c04 	addi	r2,r2,-12944
   8250c:	e0fffd17 	ldw	r3,-12(fp)
   82510:	18c00524 	muli	r3,r3,20
   82514:	10c5883a 	add	r2,r2,r3
   82518:	10800003 	ldbu	r2,0(r2)
   8251c:	10c03fcc 	andi	r3,r2,255
   82520:	e0bffe03 	ldbu	r2,-8(fp)
   82524:	18800d26 	beq	r3,r2,8255c <ProgramSyncEmbeddedVideoMode+0xa8>

    ErrorF("ProgramSyncEmbeddedVideoMode(%d,%x)\n",VIC,bInputSignalType) ;

    if( bInputSignalType & T_MODE_SYNCEMB )
    {
        for(i = 0 ; SyncEmbTable[i].fmt != 0xFF ; i++)
   82528:	e0bffd17 	ldw	r2,-12(fp)
   8252c:	10800044 	addi	r2,r2,1
   82530:	e0bffd15 	stw	r2,-12(fp)
   82534:	008002b4 	movhi	r2,10
   82538:	10b35c04 	addi	r2,r2,-12944
   8253c:	e0fffd17 	ldw	r3,-12(fp)
   82540:	18c00524 	muli	r3,r3,20
   82544:	10c5883a 	add	r2,r2,r3
   82548:	10800003 	ldbu	r2,0(r2)
   8254c:	10803fcc 	andi	r2,r2,255
   82550:	10803fd8 	cmpnei	r2,r2,255
   82554:	103feb1e 	bne	r2,zero,82504 <__alt_data_end+0xfffb2644>
   82558:	00000106 	br	82560 <ProgramSyncEmbeddedVideoMode+0xac>
        {
            if(VIC == SyncEmbTable[i].fmt)
            {
                break ;
   8255c:	0001883a 	nop
            }
        }
    
        if(SyncEmbTable[i].fmt == 0xFF)
   82560:	008002b4 	movhi	r2,10
   82564:	10b35c04 	addi	r2,r2,-12944
   82568:	e0fffd17 	ldw	r3,-12(fp)
   8256c:	18c00524 	muli	r3,r3,20
   82570:	10c5883a 	add	r2,r2,r3
   82574:	10800003 	ldbu	r2,0(r2)
   82578:	10803fcc 	andi	r2,r2,255
   8257c:	10803fd8 	cmpnei	r2,r2,255
   82580:	1000021e 	bne	r2,zero,8258c <ProgramSyncEmbeddedVideoMode+0xd8>
        {
            return FALSE ;
   82584:	0005883a 	mov	r2,zero
   82588:	00006406 	br	8271c <ProgramSyncEmbeddedVideoMode+0x268>
        }
    
        HDMITX_WriteI2C_Byte(REG_TX_HVPol,SyncEmbTable[i].RegHVPol) ; // Reg90
   8258c:	008002b4 	movhi	r2,10
   82590:	10b35c04 	addi	r2,r2,-12944
   82594:	e0fffd17 	ldw	r3,-12(fp)
   82598:	18c00524 	muli	r3,r3,20
   8259c:	10c5883a 	add	r2,r2,r3
   825a0:	10800044 	addi	r2,r2,1
   825a4:	10800003 	ldbu	r2,0(r2)
   825a8:	10803fcc 	andi	r2,r2,255
   825ac:	100b883a 	mov	r5,r2
   825b0:	01002404 	movi	r4,144
   825b4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_HfPixel,SyncEmbTable[i].RegHfPixel) ; // Reg91
   825b8:	008002b4 	movhi	r2,10
   825bc:	10b35c04 	addi	r2,r2,-12944
   825c0:	e0fffd17 	ldw	r3,-12(fp)
   825c4:	18c00524 	muli	r3,r3,20
   825c8:	10c5883a 	add	r2,r2,r3
   825cc:	10800084 	addi	r2,r2,2
   825d0:	10800003 	ldbu	r2,0(r2)
   825d4:	10803fcc 	andi	r2,r2,255
   825d8:	100b883a 	mov	r5,r2
   825dc:	01002444 	movi	r4,145
   825e0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    
    	HDMITX_WriteI2C_Byte(REG_TX_HSSL,SyncEmbTable[i].RegHSSL) ; // Reg95
   825e4:	008002b4 	movhi	r2,10
   825e8:	10b35c04 	addi	r2,r2,-12944
   825ec:	e0fffd17 	ldw	r3,-12(fp)
   825f0:	18c00524 	muli	r3,r3,20
   825f4:	10c5883a 	add	r2,r2,r3
   825f8:	108000c4 	addi	r2,r2,3
   825fc:	10800003 	ldbu	r2,0(r2)
   82600:	10803fcc 	andi	r2,r2,255
   82604:	100b883a 	mov	r5,r2
   82608:	01002544 	movi	r4,149
   8260c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    	HDMITX_WriteI2C_Byte(REG_TX_HSEL,SyncEmbTable[i].RegHSEL) ; // Reg96
   82610:	008002b4 	movhi	r2,10
   82614:	10b35c04 	addi	r2,r2,-12944
   82618:	e0fffd17 	ldw	r3,-12(fp)
   8261c:	18c00524 	muli	r3,r3,20
   82620:	10c5883a 	add	r2,r2,r3
   82624:	10800104 	addi	r2,r2,4
   82628:	10800003 	ldbu	r2,0(r2)
   8262c:	10803fcc 	andi	r2,r2,255
   82630:	100b883a 	mov	r5,r2
   82634:	01002584 	movi	r4,150
   82638:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    	HDMITX_WriteI2C_Byte(REG_TX_HSH,SyncEmbTable[i].RegHSH) ; // Reg97
   8263c:	008002b4 	movhi	r2,10
   82640:	10b35c04 	addi	r2,r2,-12944
   82644:	e0fffd17 	ldw	r3,-12(fp)
   82648:	18c00524 	muli	r3,r3,20
   8264c:	10c5883a 	add	r2,r2,r3
   82650:	10800144 	addi	r2,r2,5
   82654:	10800003 	ldbu	r2,0(r2)
   82658:	10803fcc 	andi	r2,r2,255
   8265c:	100b883a 	mov	r5,r2
   82660:	010025c4 	movi	r4,151
   82664:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_VSS1,SyncEmbTable[i].RegVSS1) ; // RegA0
   82668:	008002b4 	movhi	r2,10
   8266c:	10b35c04 	addi	r2,r2,-12944
   82670:	e0fffd17 	ldw	r3,-12(fp)
   82674:	18c00524 	muli	r3,r3,20
   82678:	10c5883a 	add	r2,r2,r3
   8267c:	10800184 	addi	r2,r2,6
   82680:	10800003 	ldbu	r2,0(r2)
   82684:	10803fcc 	andi	r2,r2,255
   82688:	100b883a 	mov	r5,r2
   8268c:	01002804 	movi	r4,160
   82690:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_VSE1,SyncEmbTable[i].RegVSE1) ; // RegA1
   82694:	008002b4 	movhi	r2,10
   82698:	10b35c04 	addi	r2,r2,-12944
   8269c:	e0fffd17 	ldw	r3,-12(fp)
   826a0:	18c00524 	muli	r3,r3,20
   826a4:	10c5883a 	add	r2,r2,r3
   826a8:	108001c4 	addi	r2,r2,7
   826ac:	10800003 	ldbu	r2,0(r2)
   826b0:	10803fcc 	andi	r2,r2,255
   826b4:	100b883a 	mov	r5,r2
   826b8:	01002844 	movi	r4,161
   826bc:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    
        HDMITX_WriteI2C_Byte(REG_TX_VSS2,SyncEmbTable[i].RegVSS2) ; // RegA2
   826c0:	008002b4 	movhi	r2,10
   826c4:	10b35c04 	addi	r2,r2,-12944
   826c8:	e0fffd17 	ldw	r3,-12(fp)
   826cc:	18c00524 	muli	r3,r3,20
   826d0:	10c5883a 	add	r2,r2,r3
   826d4:	10800204 	addi	r2,r2,8
   826d8:	10800003 	ldbu	r2,0(r2)
   826dc:	10803fcc 	andi	r2,r2,255
   826e0:	100b883a 	mov	r5,r2
   826e4:	01002884 	movi	r4,162
   826e8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_VSE2,SyncEmbTable[i].RegVSE2) ; // RegA3
   826ec:	008002b4 	movhi	r2,10
   826f0:	10b35c04 	addi	r2,r2,-12944
   826f4:	e0fffd17 	ldw	r3,-12(fp)
   826f8:	18c00524 	muli	r3,r3,20
   826fc:	10c5883a 	add	r2,r2,r3
   82700:	10800244 	addi	r2,r2,9
   82704:	10800003 	ldbu	r2,0(r2)
   82708:	10803fcc 	andi	r2,r2,255
   8270c:	100b883a 	mov	r5,r2
   82710:	010028c4 	movi	r4,163
   82714:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    }

    return TRUE ;
   82718:	00800044 	movi	r2,1
}
   8271c:	e037883a 	mov	sp,fp
   82720:	dfc00117 	ldw	ra,4(sp)
   82724:	df000017 	ldw	fp,0(sp)
   82728:	dec00204 	addi	sp,sp,8
   8272c:	f800283a 	ret

00082730 <SetInputMode>:
// Side-Effect: Reg70.
//////////////////////////////////////////////////////////////////////

static void
SetInputMode(BYTE InputMode,BYTE bInputSignalType)
{
   82730:	defffb04 	addi	sp,sp,-20
   82734:	dfc00415 	stw	ra,16(sp)
   82738:	df000315 	stw	fp,12(sp)
   8273c:	df000304 	addi	fp,sp,12
   82740:	2007883a 	mov	r3,r4
   82744:	2805883a 	mov	r2,r5
   82748:	e0fffe05 	stb	r3,-8(fp)
   8274c:	e0bfff05 	stb	r2,-4(fp)
    BYTE ucData ;

    ErrorF("SetInputMode(%02X,%02X)\n",InputMode,bInputSignalType) ;
   82750:	e0bffe03 	ldbu	r2,-8(fp)
   82754:	e0ffff03 	ldbu	r3,-4(fp)
   82758:	180d883a 	mov	r6,r3
   8275c:	100b883a 	mov	r5,r2
   82760:	010002b4 	movhi	r4,10
   82764:	212eb904 	addi	r4,r4,-17692
   82768:	00877a40 	call	877a4 <ErrorF>

    ucData = HDMITX_ReadI2C_Byte(REG_TX_INPUT_MODE) ;
   8276c:	01001c04 	movi	r4,112
   82770:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   82774:	e0bffd05 	stb	r2,-12(fp)

    ucData &= ~(M_INCOLMOD|B_2X656CLK|B_SYNCEMB|B_INDDR|B_PCLKDIV2) ;
   82778:	e0bffd03 	ldbu	r2,-12(fp)
   8277c:	108000cc 	andi	r2,r2,3
   82780:	e0bffd05 	stb	r2,-12(fp)

    switch(InputMode & F_MODE_CLRMOD_MASK)
   82784:	e0bffe03 	ldbu	r2,-8(fp)
   82788:	108000cc 	andi	r2,r2,3
   8278c:	10c00060 	cmpeqi	r3,r2,1
   82790:	1800031e 	bne	r3,zero,827a0 <SetInputMode+0x70>
   82794:	108000a0 	cmpeqi	r2,r2,2
   82798:	1000051e 	bne	r2,zero,827b0 <SetInputMode+0x80>
        ucData |= B_IN_YUV444 ;
        break ;
    case F_MODE_RGB444:
    default:
        ucData |= B_IN_RGB ;
        break ;
   8279c:	00000906 	br	827c4 <SetInputMode+0x94>
    ucData &= ~(M_INCOLMOD|B_2X656CLK|B_SYNCEMB|B_INDDR|B_PCLKDIV2) ;

    switch(InputMode & F_MODE_CLRMOD_MASK)
    {
    case F_MODE_YUV422:
        ucData |= B_IN_YUV422 ;
   827a0:	e0bffd03 	ldbu	r2,-12(fp)
   827a4:	10801014 	ori	r2,r2,64
   827a8:	e0bffd05 	stb	r2,-12(fp)
        break ;
   827ac:	00000506 	br	827c4 <SetInputMode+0x94>
    case F_MODE_YUV444:
        ucData |= B_IN_YUV444 ;
   827b0:	e0fffd03 	ldbu	r3,-12(fp)
   827b4:	00bfe004 	movi	r2,-128
   827b8:	1884b03a 	or	r2,r3,r2
   827bc:	e0bffd05 	stb	r2,-12(fp)
        break ;
   827c0:	0001883a 	nop
    default:
        ucData |= B_IN_RGB ;
        break ;
    }

    if(bInputSignalType & T_MODE_PCLKDIV2)
   827c4:	e0bfff03 	ldbu	r2,-4(fp)
   827c8:	1080020c 	andi	r2,r2,8
   827cc:	10000626 	beq	r2,zero,827e8 <SetInputMode+0xb8>
    {
        ucData |= B_PCLKDIV2 ; ErrorF("PCLK Divided by 2 mode\n") ;
   827d0:	e0bffd03 	ldbu	r2,-12(fp)
   827d4:	10800814 	ori	r2,r2,32
   827d8:	e0bffd05 	stb	r2,-12(fp)
   827dc:	010002b4 	movhi	r4,10
   827e0:	212ec004 	addi	r4,r4,-17664
   827e4:	00877a40 	call	877a4 <ErrorF>
    }
    if(bInputSignalType & T_MODE_CCIR656)
   827e8:	e0bfff03 	ldbu	r2,-4(fp)
   827ec:	1080004c 	andi	r2,r2,1
   827f0:	10000626 	beq	r2,zero,8280c <SetInputMode+0xdc>
    {
        ucData |= B_2X656CLK ; ErrorF("CCIR656 mode\n") ;
   827f4:	e0bffd03 	ldbu	r2,-12(fp)
   827f8:	10800414 	ori	r2,r2,16
   827fc:	e0bffd05 	stb	r2,-12(fp)
   82800:	010002b4 	movhi	r4,10
   82804:	212ec604 	addi	r4,r4,-17640
   82808:	00877a40 	call	877a4 <ErrorF>
    }

    if(bInputSignalType & T_MODE_SYNCEMB)
   8280c:	e0bfff03 	ldbu	r2,-4(fp)
   82810:	1080008c 	andi	r2,r2,2
   82814:	10000626 	beq	r2,zero,82830 <SetInputMode+0x100>
    {
        ucData |= B_SYNCEMB ; ErrorF("Sync Embedded mode\n") ;
   82818:	e0bffd03 	ldbu	r2,-12(fp)
   8281c:	10800214 	ori	r2,r2,8
   82820:	e0bffd05 	stb	r2,-12(fp)
   82824:	010002b4 	movhi	r4,10
   82828:	212eca04 	addi	r4,r4,-17624
   8282c:	00877a40 	call	877a4 <ErrorF>
    }

    if(bInputSignalType & T_MODE_INDDR)
   82830:	e0bfff03 	ldbu	r2,-4(fp)
   82834:	1080010c 	andi	r2,r2,4
   82838:	10000626 	beq	r2,zero,82854 <SetInputMode+0x124>
    {
        ucData |= B_INDDR ; ErrorF("Input DDR mode\n") ;
   8283c:	e0bffd03 	ldbu	r2,-12(fp)
   82840:	10800114 	ori	r2,r2,4
   82844:	e0bffd05 	stb	r2,-12(fp)
   82848:	010002b4 	movhi	r4,10
   8284c:	212ecf04 	addi	r4,r4,-17604
   82850:	00877a40 	call	877a4 <ErrorF>
    }

    HDMITX_WriteI2C_Byte(REG_TX_INPUT_MODE,ucData) ;
   82854:	e0bffd03 	ldbu	r2,-12(fp)
   82858:	100b883a 	mov	r5,r2
   8285c:	01001c04 	movi	r4,112
   82860:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   82864:	0001883a 	nop
   82868:	e037883a 	mov	sp,fp
   8286c:	dfc00117 	ldw	ra,4(sp)
   82870:	df000017 	ldw	fp,0(sp)
   82874:	dec00204 	addi	sp,sp,8
   82878:	f800283a 	ret

0008287c <SetCSCScale>:
// Side-Effect:
//////////////////////////////////////////////////////////////////////

static void
SetCSCScale(BYTE bInputMode,BYTE bOutputMode)
{
   8287c:	defffb04 	addi	sp,sp,-20
   82880:	dfc00415 	stw	ra,16(sp)
   82884:	df000315 	stw	fp,12(sp)
   82888:	df000304 	addi	fp,sp,12
   8288c:	2007883a 	mov	r3,r4
   82890:	2805883a 	mov	r2,r5
   82894:	e0fffe05 	stb	r3,-8(fp)
   82898:	e0bfff05 	stb	r2,-4(fp)
    BYTE ucData,csc ;
    BYTE filter = 0 ; // filter is for Video CTRL DN_FREE_GO,EN_DITHER,and ENUDFILT
   8289c:	e03ffd45 	stb	zero,-11(fp)
	// (2) YUV444/422  in,RGB output (CSC enable,and output is not YUV422)
	// (3) RGB in,YUV444 output   (CSC enable,and output is not YUV422)
    //
    // YUV444/RGB24 <-> YUV422 need set up/down filter.

    switch(bInputMode&F_MODE_CLRMOD_MASK)
   828a0:	e0bffe03 	ldbu	r2,-8(fp)
   828a4:	108000cc 	andi	r2,r2,3
   828a8:	10c00060 	cmpeqi	r3,r2,1
   828ac:	18002f1e 	bne	r3,zero,8296c <SetCSCScale+0xf0>
   828b0:	10c000a0 	cmpeqi	r3,r2,2
   828b4:	1800021e 	bne	r3,zero,828c0 <SetCSCScale+0x44>
   828b8:	10006926 	beq	r2,zero,82a60 <SetCSCScale+0x1e4>
   828bc:	00009e06 	br	82b38 <SetCSCScale+0x2bc>
    {
    #ifdef SUPPORT_INPUTYUV444
    case F_MODE_YUV444:
        ErrorF("Input mode is YUV444 ") ;
   828c0:	010002b4 	movhi	r4,10
   828c4:	212ed304 	addi	r4,r4,-17588
   828c8:	00877a40 	call	877a4 <ErrorF>
        switch(bOutputMode&F_MODE_CLRMOD_MASK)
   828cc:	e0bfff03 	ldbu	r2,-4(fp)
   828d0:	108000cc 	andi	r2,r2,3
   828d4:	10c00060 	cmpeqi	r3,r2,1
   828d8:	1800091e 	bne	r3,zero,82900 <SetCSCScale+0x84>
   828dc:	10c000a0 	cmpeqi	r3,r2,2
   828e0:	1800021e 	bne	r3,zero,828ec <SetCSCScale+0x70>
   828e4:	10001126 	beq	r2,zero,8292c <SetCSCScale+0xb0>
                filter |= B_TX_EN_DITHER | B_TX_DNFREE_GO ;
            }

            break ;
        }
        break ;
   828e8:	00009306 	br	82b38 <SetCSCScale+0x2bc>
    case F_MODE_YUV444:
        ErrorF("Input mode is YUV444 ") ;
        switch(bOutputMode&F_MODE_CLRMOD_MASK)
        {
        case F_MODE_YUV444:
            ErrorF("Output mode is YUV444\n") ;
   828ec:	010002b4 	movhi	r4,10
   828f0:	212ed904 	addi	r4,r4,-17564
   828f4:	00877a40 	call	877a4 <ErrorF>
            csc = B_CSC_BYPASS ;
   828f8:	e03ffd05 	stb	zero,-12(fp)
            break ;
   828fc:	00001a06 	br	82968 <SetCSCScale+0xec>

        case F_MODE_YUV422:
            ErrorF("Output mode is YUV422\n") ;
   82900:	010002b4 	movhi	r4,10
   82904:	212edf04 	addi	r4,r4,-17540
   82908:	00877a40 	call	877a4 <ErrorF>
            if(bInputMode & F_MODE_EN_UDFILT) // YUV444 to YUV422 need up/down filter for processing.
   8290c:	e0bffe03 	ldbu	r2,-8(fp)
   82910:	1080100c 	andi	r2,r2,64
   82914:	10000326 	beq	r2,zero,82924 <SetCSCScale+0xa8>
            {
                filter |= B_TX_EN_UDFILTER ;
   82918:	e0bffd43 	ldbu	r2,-11(fp)
   8291c:	10801014 	ori	r2,r2,64
   82920:	e0bffd45 	stb	r2,-11(fp)
            }
            csc = B_CSC_BYPASS ;
   82924:	e03ffd05 	stb	zero,-12(fp)
            break ;
   82928:	00000f06 	br	82968 <SetCSCScale+0xec>
        case F_MODE_RGB444:
            ErrorF("Output mode is RGB24\n") ;
   8292c:	010002b4 	movhi	r4,10
   82930:	212ee504 	addi	r4,r4,-17516
   82934:	00877a40 	call	877a4 <ErrorF>
            csc = B_CSC_YUV2RGB ;
   82938:	008000c4 	movi	r2,3
   8293c:	e0bffd05 	stb	r2,-12(fp)
            if(bInputMode & F_MODE_EN_DITHER) // YUV444 to RGB24 need dither
   82940:	e0bffe03 	ldbu	r2,-8(fp)
   82944:	10803fcc 	andi	r2,r2,255
   82948:	1080201c 	xori	r2,r2,128
   8294c:	10bfe004 	addi	r2,r2,-128
   82950:	1000040e 	bge	r2,zero,82964 <SetCSCScale+0xe8>
            {
                filter |= B_TX_EN_DITHER | B_TX_DNFREE_GO ;
   82954:	e0fffd43 	ldbu	r3,-11(fp)
   82958:	00bfe804 	movi	r2,-96
   8295c:	1884b03a 	or	r2,r3,r2
   82960:	e0bffd45 	stb	r2,-11(fp)
            }

            break ;
   82964:	0001883a 	nop
        }
        break ;
   82968:	00007306 	br	82b38 <SetCSCScale+0x2bc>
    #endif

    #ifdef SUPPORT_INPUTYUV422
    case F_MODE_YUV422:
        ErrorF("Input mode is YUV422\n") ;
   8296c:	010002b4 	movhi	r4,10
   82970:	212eeb04 	addi	r4,r4,-17492
   82974:	00877a40 	call	877a4 <ErrorF>
        switch(bOutputMode&F_MODE_CLRMOD_MASK)
   82978:	e0bfff03 	ldbu	r2,-4(fp)
   8297c:	108000cc 	andi	r2,r2,3
   82980:	10c00060 	cmpeqi	r3,r2,1
   82984:	1800181e 	bne	r3,zero,829e8 <SetCSCScale+0x16c>
   82988:	10c000a0 	cmpeqi	r3,r2,2
   8298c:	1800021e 	bne	r3,zero,82998 <SetCSCScale+0x11c>
   82990:	10001a26 	beq	r2,zero,829fc <SetCSCScale+0x180>
                filter |= B_TX_EN_DITHER | B_TX_DNFREE_GO ;
            }

            break ;
        }
        break ;
   82994:	00006806 	br	82b38 <SetCSCScale+0x2bc>
    case F_MODE_YUV422:
        ErrorF("Input mode is YUV422\n") ;
        switch(bOutputMode&F_MODE_CLRMOD_MASK)
        {
        case F_MODE_YUV444:
            ErrorF("Output mode is YUV444\n") ;
   82998:	010002b4 	movhi	r4,10
   8299c:	212ed904 	addi	r4,r4,-17564
   829a0:	00877a40 	call	877a4 <ErrorF>
            csc = B_CSC_BYPASS ;
   829a4:	e03ffd05 	stb	zero,-12(fp)
            if(bInputMode & F_MODE_EN_UDFILT) // YUV422 to YUV444 need up filter
   829a8:	e0bffe03 	ldbu	r2,-8(fp)
   829ac:	1080100c 	andi	r2,r2,64
   829b0:	10000326 	beq	r2,zero,829c0 <SetCSCScale+0x144>
            {
                filter |= B_TX_EN_UDFILTER ;
   829b4:	e0bffd43 	ldbu	r2,-11(fp)
   829b8:	10801014 	ori	r2,r2,64
   829bc:	e0bffd45 	stb	r2,-11(fp)
            }

            if(bInputMode & F_MODE_EN_DITHER) // YUV422 to YUV444 need dither
   829c0:	e0bffe03 	ldbu	r2,-8(fp)
   829c4:	10803fcc 	andi	r2,r2,255
   829c8:	1080201c 	xori	r2,r2,128
   829cc:	10bfe004 	addi	r2,r2,-128
   829d0:	10001f0e 	bge	r2,zero,82a50 <SetCSCScale+0x1d4>
            {
                filter |= B_TX_EN_DITHER | B_TX_DNFREE_GO ;
   829d4:	e0fffd43 	ldbu	r3,-11(fp)
   829d8:	00bfe804 	movi	r2,-96
   829dc:	1884b03a 	or	r2,r3,r2
   829e0:	e0bffd45 	stb	r2,-11(fp)
            }

            break ;
   829e4:	00001a06 	br	82a50 <SetCSCScale+0x1d4>
        case F_MODE_YUV422:
            ErrorF("Output mode is YUV422\n") ;
   829e8:	010002b4 	movhi	r4,10
   829ec:	212edf04 	addi	r4,r4,-17540
   829f0:	00877a40 	call	877a4 <ErrorF>
            csc = B_CSC_BYPASS ;
   829f4:	e03ffd05 	stb	zero,-12(fp)

            break ;
   829f8:	00001806 	br	82a5c <SetCSCScale+0x1e0>

        case F_MODE_RGB444:
            ErrorF("Output mode is RGB24\n") ;
   829fc:	010002b4 	movhi	r4,10
   82a00:	212ee504 	addi	r4,r4,-17516
   82a04:	00877a40 	call	877a4 <ErrorF>
            csc = B_CSC_YUV2RGB ;
   82a08:	008000c4 	movi	r2,3
   82a0c:	e0bffd05 	stb	r2,-12(fp)
            if(bInputMode & F_MODE_EN_UDFILT) // YUV422 to RGB24 need up/dn filter.
   82a10:	e0bffe03 	ldbu	r2,-8(fp)
   82a14:	1080100c 	andi	r2,r2,64
   82a18:	10000326 	beq	r2,zero,82a28 <SetCSCScale+0x1ac>
            {
                filter |= B_TX_EN_UDFILTER ;
   82a1c:	e0bffd43 	ldbu	r2,-11(fp)
   82a20:	10801014 	ori	r2,r2,64
   82a24:	e0bffd45 	stb	r2,-11(fp)
            }

            if(bInputMode & F_MODE_EN_DITHER) // YUV422 to RGB24 need dither
   82a28:	e0bffe03 	ldbu	r2,-8(fp)
   82a2c:	10803fcc 	andi	r2,r2,255
   82a30:	1080201c 	xori	r2,r2,128
   82a34:	10bfe004 	addi	r2,r2,-128
   82a38:	1000070e 	bge	r2,zero,82a58 <SetCSCScale+0x1dc>
            {
                filter |= B_TX_EN_DITHER | B_TX_DNFREE_GO ;
   82a3c:	e0fffd43 	ldbu	r3,-11(fp)
   82a40:	00bfe804 	movi	r2,-96
   82a44:	1884b03a 	or	r2,r3,r2
   82a48:	e0bffd45 	stb	r2,-11(fp)
            }

            break ;
   82a4c:	00000206 	br	82a58 <SetCSCScale+0x1dc>
            if(bInputMode & F_MODE_EN_DITHER) // YUV422 to YUV444 need dither
            {
                filter |= B_TX_EN_DITHER | B_TX_DNFREE_GO ;
            }

            break ;
   82a50:	0001883a 	nop
   82a54:	00003806 	br	82b38 <SetCSCScale+0x2bc>
            if(bInputMode & F_MODE_EN_DITHER) // YUV422 to RGB24 need dither
            {
                filter |= B_TX_EN_DITHER | B_TX_DNFREE_GO ;
            }

            break ;
   82a58:	0001883a 	nop
        }
        break ;
   82a5c:	00003606 	br	82b38 <SetCSCScale+0x2bc>
    #endif

    #ifdef SUPPORT_INPUTRGB
    case F_MODE_RGB444:
        ErrorF("Input mode is RGB24\n") ;
   82a60:	010002b4 	movhi	r4,10
   82a64:	212ef104 	addi	r4,r4,-17468
   82a68:	00877a40 	call	877a4 <ErrorF>
        switch(bOutputMode&F_MODE_CLRMOD_MASK)
   82a6c:	e0bfff03 	ldbu	r2,-4(fp)
   82a70:	108000cc 	andi	r2,r2,3
   82a74:	10c00060 	cmpeqi	r3,r2,1
   82a78:	1800131e 	bne	r3,zero,82ac8 <SetCSCScale+0x24c>
   82a7c:	10c000a0 	cmpeqi	r3,r2,2
   82a80:	1800021e 	bne	r3,zero,82a8c <SetCSCScale+0x210>
   82a84:	10002526 	beq	r2,zero,82b1c <SetCSCScale+0x2a0>
        case F_MODE_RGB444:
            ErrorF("Output mode is RGB24\n") ;
            csc = B_CSC_BYPASS ;
            break ;
        }
        break ;
   82a88:	00002a06 	br	82b34 <SetCSCScale+0x2b8>
    case F_MODE_RGB444:
        ErrorF("Input mode is RGB24\n") ;
        switch(bOutputMode&F_MODE_CLRMOD_MASK)
        {
        case F_MODE_YUV444:
            ErrorF("Output mode is YUV444\n") ;
   82a8c:	010002b4 	movhi	r4,10
   82a90:	212ed904 	addi	r4,r4,-17564
   82a94:	00877a40 	call	877a4 <ErrorF>
            csc = B_CSC_RGB2YUV ;
   82a98:	00800084 	movi	r2,2
   82a9c:	e0bffd05 	stb	r2,-12(fp)

            if(bInputMode & F_MODE_EN_DITHER) // RGB24 to YUV444 need dither
   82aa0:	e0bffe03 	ldbu	r2,-8(fp)
   82aa4:	10803fcc 	andi	r2,r2,255
   82aa8:	1080201c 	xori	r2,r2,128
   82aac:	10bfe004 	addi	r2,r2,-128
   82ab0:	10001f0e 	bge	r2,zero,82b30 <SetCSCScale+0x2b4>
            {
                filter |= B_TX_EN_DITHER | B_TX_DNFREE_GO ;
   82ab4:	e0fffd43 	ldbu	r3,-11(fp)
   82ab8:	00bfe804 	movi	r2,-96
   82abc:	1884b03a 	or	r2,r3,r2
   82ac0:	e0bffd45 	stb	r2,-11(fp)
            }
            break ;
   82ac4:	00001a06 	br	82b30 <SetCSCScale+0x2b4>

        case F_MODE_YUV422:
            ErrorF("Output mode is YUV422\n") ;
   82ac8:	010002b4 	movhi	r4,10
   82acc:	212edf04 	addi	r4,r4,-17540
   82ad0:	00877a40 	call	877a4 <ErrorF>
            if(bInputMode & F_MODE_EN_UDFILT) // RGB24 to YUV422 need down filter.
   82ad4:	e0bffe03 	ldbu	r2,-8(fp)
   82ad8:	1080100c 	andi	r2,r2,64
   82adc:	10000326 	beq	r2,zero,82aec <SetCSCScale+0x270>
            {
                filter |= B_TX_EN_UDFILTER ;
   82ae0:	e0bffd43 	ldbu	r2,-11(fp)
   82ae4:	10801014 	ori	r2,r2,64
   82ae8:	e0bffd45 	stb	r2,-11(fp)
            }

            if(bInputMode & F_MODE_EN_DITHER) // RGB24 to YUV422 need dither
   82aec:	e0bffe03 	ldbu	r2,-8(fp)
   82af0:	10803fcc 	andi	r2,r2,255
   82af4:	1080201c 	xori	r2,r2,128
   82af8:	10bfe004 	addi	r2,r2,-128
   82afc:	1000040e 	bge	r2,zero,82b10 <SetCSCScale+0x294>
            {
                filter |= B_TX_EN_DITHER | B_TX_DNFREE_GO ;
   82b00:	e0fffd43 	ldbu	r3,-11(fp)
   82b04:	00bfe804 	movi	r2,-96
   82b08:	1884b03a 	or	r2,r3,r2
   82b0c:	e0bffd45 	stb	r2,-11(fp)
            }
            csc = B_CSC_RGB2YUV ;
   82b10:	00800084 	movi	r2,2
   82b14:	e0bffd05 	stb	r2,-12(fp)
            break ;
   82b18:	00000606 	br	82b34 <SetCSCScale+0x2b8>

        case F_MODE_RGB444:
            ErrorF("Output mode is RGB24\n") ;
   82b1c:	010002b4 	movhi	r4,10
   82b20:	212ee504 	addi	r4,r4,-17516
   82b24:	00877a40 	call	877a4 <ErrorF>
            csc = B_CSC_BYPASS ;
   82b28:	e03ffd05 	stb	zero,-12(fp)
            break ;
   82b2c:	00000106 	br	82b34 <SetCSCScale+0x2b8>

            if(bInputMode & F_MODE_EN_DITHER) // RGB24 to YUV444 need dither
            {
                filter |= B_TX_EN_DITHER | B_TX_DNFREE_GO ;
            }
            break ;
   82b30:	0001883a 	nop
        case F_MODE_RGB444:
            ErrorF("Output mode is RGB24\n") ;
            csc = B_CSC_BYPASS ;
            break ;
        }
        break ;
   82b34:	0001883a 	nop
    #endif
    }

    #ifdef SUPPORT_INPUTRGB
    // set the CSC metrix registers by colorimetry and quantization
    if(csc == B_CSC_RGB2YUV)
   82b38:	e0bffd03 	ldbu	r2,-12(fp)
   82b3c:	10800098 	cmpnei	r2,r2,2
   82b40:	1000421e 	bne	r2,zero,82c4c <SetCSCScale+0x3d0>
    {
        ErrorF("CSC = RGB2YUV %x ",csc) ;
   82b44:	e0bffd03 	ldbu	r2,-12(fp)
   82b48:	100b883a 	mov	r5,r2
   82b4c:	010002b4 	movhi	r4,10
   82b50:	212ef704 	addi	r4,r4,-17444
   82b54:	00877a40 	call	877a4 <ErrorF>
        switch(bInputMode&(F_MODE_ITU709|F_MODE_16_235))
   82b58:	e0bffe03 	ldbu	r2,-8(fp)
   82b5c:	10800c0c 	andi	r2,r2,48
   82b60:	10c00820 	cmpeqi	r3,r2,32
   82b64:	18001f1e 	bne	r3,zero,82be4 <SetCSCScale+0x368>
   82b68:	10c00c20 	cmpeqi	r3,r2,48
   82b6c:	1800031e 	bne	r3,zero,82b7c <SetCSCScale+0x300>
   82b70:	10800420 	cmpeqi	r2,r2,16
   82b74:	10000e1e 	bne	r2,zero,82bb0 <SetCSCScale+0x334>
   82b78:	00002706 	br	82c18 <SetCSCScale+0x39c>
        {
        case F_MODE_ITU709|F_MODE_16_235:
            ErrorF("ITU709 16-235 ") ;
   82b7c:	010002b4 	movhi	r4,10
   82b80:	212efc04 	addi	r4,r4,-17424
   82b84:	00877a40 	call	877a4 <ErrorF>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_YOFF,bCSCOffset_16_235,SIZEOF_CSCOFFSET) ;
   82b88:	018000c4 	movi	r6,3
   82b8c:	d1600004 	addi	r5,gp,-32768
   82b90:	01001cc4 	movi	r4,115
   82b94:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_MTX11_L,bCSCMtx_RGB2YUV_ITU709_16_235,SIZEOF_CSCMTX) ;
   82b98:	01800484 	movi	r6,18
   82b9c:	014002b4 	movhi	r5,10
   82ba0:	2971f904 	addi	r5,r5,-14364
   82ba4:	01001d84 	movi	r4,118
   82ba8:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            break ;
   82bac:	00002706 	br	82c4c <SetCSCScale+0x3d0>
        case F_MODE_ITU709|F_MODE_0_255:
            ErrorF("ITU709 0-255 ") ;
   82bb0:	010002b4 	movhi	r4,10
   82bb4:	212f0004 	addi	r4,r4,-17408
   82bb8:	00877a40 	call	877a4 <ErrorF>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_YOFF,bCSCOffset_0_255,SIZEOF_CSCOFFSET) ;
   82bbc:	018000c4 	movi	r6,3
   82bc0:	d16000c4 	addi	r5,gp,-32765
   82bc4:	01001cc4 	movi	r4,115
   82bc8:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_MTX11_L,bCSCMtx_RGB2YUV_ITU709_0_255,SIZEOF_CSCMTX) ;
   82bcc:	01800484 	movi	r6,18
   82bd0:	014002b4 	movhi	r5,10
   82bd4:	2971fd84 	addi	r5,r5,-14346
   82bd8:	01001d84 	movi	r4,118
   82bdc:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            break ;
   82be0:	00001a06 	br	82c4c <SetCSCScale+0x3d0>
        case F_MODE_ITU601|F_MODE_16_235:
            ErrorF("ITU601 16-235 ") ;
   82be4:	010002b4 	movhi	r4,10
   82be8:	212f0404 	addi	r4,r4,-17392
   82bec:	00877a40 	call	877a4 <ErrorF>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_YOFF,bCSCOffset_16_235,SIZEOF_CSCOFFSET) ;
   82bf0:	018000c4 	movi	r6,3
   82bf4:	d1600004 	addi	r5,gp,-32768
   82bf8:	01001cc4 	movi	r4,115
   82bfc:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_MTX11_L,bCSCMtx_RGB2YUV_ITU601_16_235,SIZEOF_CSCMTX) ;
   82c00:	01800484 	movi	r6,18
   82c04:	014002b4 	movhi	r5,10
   82c08:	2971f004 	addi	r5,r5,-14400
   82c0c:	01001d84 	movi	r4,118
   82c10:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            break ;
   82c14:	00000d06 	br	82c4c <SetCSCScale+0x3d0>
        case F_MODE_ITU601|F_MODE_0_255:
        default:
            ErrorF("ITU601 0-255 ") ;
   82c18:	010002b4 	movhi	r4,10
   82c1c:	212f0804 	addi	r4,r4,-17376
   82c20:	00877a40 	call	877a4 <ErrorF>
            
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_YOFF,bCSCOffset_0_255,SIZEOF_CSCOFFSET) ;
   82c24:	018000c4 	movi	r6,3
   82c28:	d16000c4 	addi	r5,gp,-32765
   82c2c:	01001cc4 	movi	r4,115
   82c30:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_MTX11_L,bCSCMtx_RGB2YUV_ITU601_0_255,SIZEOF_CSCMTX) ;
   82c34:	01800484 	movi	r6,18
   82c38:	014002b4 	movhi	r5,10
   82c3c:	2971f484 	addi	r5,r5,-14382
   82c40:	01001d84 	movi	r4,118
   82c44:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            break ;
   82c48:	0001883a 	nop

    }
    #endif

    #ifdef SUPPORT_INPUTYUV
    if (csc == B_CSC_YUV2RGB)
   82c4c:	e0bffd03 	ldbu	r2,-12(fp)
   82c50:	108000d8 	cmpnei	r2,r2,3
   82c54:	1000421e 	bne	r2,zero,82d60 <SetCSCScale+0x4e4>
    {
        int i;
        ErrorF("CSC = YUV2RGB %x ",csc) ;
   82c58:	e0bffd03 	ldbu	r2,-12(fp)
   82c5c:	100b883a 	mov	r5,r2
   82c60:	010002b4 	movhi	r4,10
   82c64:	212f0c04 	addi	r4,r4,-17360
   82c68:	00877a40 	call	877a4 <ErrorF>

        switch(bInputMode&(F_MODE_ITU709|F_MODE_16_235))
   82c6c:	e0bffe03 	ldbu	r2,-8(fp)
   82c70:	10800c0c 	andi	r2,r2,48
   82c74:	10c00820 	cmpeqi	r3,r2,32
   82c78:	18001f1e 	bne	r3,zero,82cf8 <SetCSCScale+0x47c>
   82c7c:	10c00c20 	cmpeqi	r3,r2,48
   82c80:	1800031e 	bne	r3,zero,82c90 <SetCSCScale+0x414>
   82c84:	10800420 	cmpeqi	r2,r2,16
   82c88:	10000e1e 	bne	r2,zero,82cc4 <SetCSCScale+0x448>
   82c8c:	00002706 	br	82d2c <SetCSCScale+0x4b0>
        {
        case F_MODE_ITU709|F_MODE_16_235:
            ErrorF("ITU709 16-235 ") ;
   82c90:	010002b4 	movhi	r4,10
   82c94:	212efc04 	addi	r4,r4,-17424
   82c98:	00877a40 	call	877a4 <ErrorF>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_YOFF,bCSCOffset_16_235,SIZEOF_CSCOFFSET) ;
   82c9c:	018000c4 	movi	r6,3
   82ca0:	d1600004 	addi	r5,gp,-32768
   82ca4:	01001cc4 	movi	r4,115
   82ca8:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_MTX11_L,bCSCMtx_YUV2RGB_ITU709_16_235,SIZEOF_CSCMTX) ;
   82cac:	01800484 	movi	r6,18
   82cb0:	014002b4 	movhi	r5,10
   82cb4:	29720b04 	addi	r5,r5,-14292
   82cb8:	01001d84 	movi	r4,118
   82cbc:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            break ;
   82cc0:	00002706 	br	82d60 <SetCSCScale+0x4e4>
        case F_MODE_ITU709|F_MODE_0_255:
            ErrorF("ITU709 0-255 ") ;
   82cc4:	010002b4 	movhi	r4,10
   82cc8:	212f0004 	addi	r4,r4,-17408
   82ccc:	00877a40 	call	877a4 <ErrorF>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_YOFF,bCSCOffset_0_255,SIZEOF_CSCOFFSET) ;
   82cd0:	018000c4 	movi	r6,3
   82cd4:	d16000c4 	addi	r5,gp,-32765
   82cd8:	01001cc4 	movi	r4,115
   82cdc:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_MTX11_L,bCSCMtx_YUV2RGB_ITU709_0_255,SIZEOF_CSCMTX) ;
   82ce0:	01800484 	movi	r6,18
   82ce4:	014002b4 	movhi	r5,10
   82ce8:	29720f84 	addi	r5,r5,-14274
   82cec:	01001d84 	movi	r4,118
   82cf0:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            break ;
   82cf4:	00001a06 	br	82d60 <SetCSCScale+0x4e4>
        case F_MODE_ITU601|F_MODE_16_235:
            ErrorF("ITU601 16-235 ") ;
   82cf8:	010002b4 	movhi	r4,10
   82cfc:	212f0404 	addi	r4,r4,-17392
   82d00:	00877a40 	call	877a4 <ErrorF>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_YOFF,bCSCOffset_16_235,SIZEOF_CSCOFFSET) ;
   82d04:	018000c4 	movi	r6,3
   82d08:	d1600004 	addi	r5,gp,-32768
   82d0c:	01001cc4 	movi	r4,115
   82d10:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_MTX11_L,bCSCMtx_YUV2RGB_ITU601_16_235,SIZEOF_CSCMTX) ;
   82d14:	01800484 	movi	r6,18
   82d18:	014002b4 	movhi	r5,10
   82d1c:	29720204 	addi	r5,r5,-14328
   82d20:	01001d84 	movi	r4,118
   82d24:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            break ;
   82d28:	00000d06 	br	82d60 <SetCSCScale+0x4e4>
        case F_MODE_ITU601|F_MODE_0_255:
        default:
            //????? debug
            ErrorF("ITU601 0-255 ") ;
   82d2c:	010002b4 	movhi	r4,10
   82d30:	212f0804 	addi	r4,r4,-17376
   82d34:	00877a40 	call	877a4 <ErrorF>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_YOFF,bCSCOffset_0_255,SIZEOF_CSCOFFSET) ;
   82d38:	018000c4 	movi	r6,3
   82d3c:	d16000c4 	addi	r5,gp,-32765
   82d40:	01001cc4 	movi	r4,115
   82d44:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            HDMITX_WriteI2C_ByteN(REG_TX_CSC_MTX11_L,bCSCMtx_YUV2RGB_ITU601_0_255,SIZEOF_CSCMTX) ;
   82d48:	01800484 	movi	r6,18
   82d4c:	014002b4 	movhi	r5,10
   82d50:	29720684 	addi	r5,r5,-14310
   82d54:	01001d84 	movi	r4,118
   82d58:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
            break ;
   82d5c:	0001883a 	nop
        }
    }
    #endif

    ucData = HDMITX_ReadI2C_Byte(REG_TX_CSC_CTRL) & ~(M_CSC_SEL|B_TX_DNFREE_GO|B_TX_EN_DITHER|B_TX_EN_UDFILTER) ;
   82d60:	01001c84 	movi	r4,114
   82d64:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   82d68:	1080070c 	andi	r2,r2,28
   82d6c:	e0bffd85 	stb	r2,-10(fp)
    ucData |= filter|csc ;
   82d70:	e0fffd43 	ldbu	r3,-11(fp)
   82d74:	e0bffd03 	ldbu	r2,-12(fp)
   82d78:	1884b03a 	or	r2,r3,r2
   82d7c:	1007883a 	mov	r3,r2
   82d80:	e0bffd83 	ldbu	r2,-10(fp)
   82d84:	1884b03a 	or	r2,r3,r2
   82d88:	e0bffd85 	stb	r2,-10(fp)
    HDMITX_WriteI2C_Byte(REG_TX_CSC_CTRL,ucData) ;
   82d8c:	e0bffd83 	ldbu	r2,-10(fp)
   82d90:	100b883a 	mov	r5,r2
   82d94:	01001c84 	movi	r4,114
   82d98:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    // set output Up/Down Filter,Dither control

}
   82d9c:	0001883a 	nop
   82da0:	e037883a 	mov	sp,fp
   82da4:	dfc00117 	ldw	ra,4(sp)
   82da8:	df000017 	ldw	fp,0(sp)
   82dac:	dec00204 	addi	sp,sp,8
   82db0:	f800283a 	ret

00082db4 <SetupAFE>:
//////////////////////////////////////////////////////////////////////

static void
// SetupAFE(BYTE ucFreqInMHz)
SetupAFE(VIDEOPCLKLEVEL level)
{
   82db4:	defffd04 	addi	sp,sp,-12
   82db8:	dfc00215 	stw	ra,8(sp)
   82dbc:	df000115 	stw	fp,4(sp)
   82dc0:	df000104 	addi	fp,sp,4
   82dc4:	e13fff15 	stw	r4,-4(fp)
    // @emily turn off reg61 before SetupAFE parameters.
    HDMITX_WriteI2C_Byte(REG_TX_AFE_DRV_CTRL,B_AFE_DRV_RST) ;/* 0x10 */
   82dc8:	01400404 	movi	r5,16
   82dcc:	01001844 	movi	r4,97
   82dd0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    // HDMITX_WriteI2C_Byte(REG_TX_AFE_DRV_CTRL,0x3) ;
    ErrorF("SetupAFE()\n") ;
   82dd4:	010002b4 	movhi	r4,10
   82dd8:	212f1104 	addi	r4,r4,-17340
   82ddc:	00877a40 	call	877a4 <ErrorF>
    //Reg64	0x08	0x80
    //Reg65	Default	Default
    //Reg66	Default	Default
    //Reg67	Default	Default

    switch(level)
   82de0:	e0bfff17 	ldw	r2,-4(fp)
   82de4:	108000a0 	cmpeqi	r2,r2,2
   82de8:	10000a26 	beq	r2,zero,82e14 <SetupAFE+0x60>
    {
    case PCLK_HIGH:
        HDMITX_WriteI2C_Byte(REG_TX_AFE_XP_CTRL,0x88) ; // reg62
   82dec:	01402204 	movi	r5,136
   82df0:	01001884 	movi	r4,98
   82df4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_AFE_ISW_CTRL, 0x10) ; // reg63
   82df8:	01400404 	movi	r5,16
   82dfc:	010018c4 	movi	r4,99
   82e00:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_AFE_IP_CTRL,0x84) ; // reg64
   82e04:	01402104 	movi	r5,132
   82e08:	01001904 	movi	r4,100
   82e0c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        break ;
   82e10:	00000a06 	br	82e3c <SetupAFE+0x88>
    default:
        HDMITX_WriteI2C_Byte(REG_TX_AFE_XP_CTRL,0x18) ; // reg62
   82e14:	01400604 	movi	r5,24
   82e18:	01001884 	movi	r4,98
   82e1c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_AFE_ISW_CTRL, 0x10) ; // reg63
   82e20:	01400404 	movi	r5,16
   82e24:	010018c4 	movi	r4,99
   82e28:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_AFE_IP_CTRL,0x0C) ; // reg64
   82e2c:	01400304 	movi	r5,12
   82e30:	01001904 	movi	r4,100
   82e34:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        break ;
   82e38:	0001883a 	nop
    }
    //HDMITX_AndREG_Byte(REG_TX_SW_RST,~(B_REF_RST|B_VID_RST|B_AREF_RST|B_HDMI_RST)) ;
    DelayMS(1) ;
   82e3c:	01000044 	movi	r4,1
   82e40:	00877380 	call	87738 <DelayMS>
    HDMITX_AndREG_Byte(REG_TX_SW_RST,B_VID_RST|B_AREF_RST|B_AUD_RST|B_HDCP_RST) ;
   82e44:	01000104 	movi	r4,4
   82e48:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   82e4c:	10803fcc 	andi	r2,r2,255
   82e50:	1080074c 	andi	r2,r2,29
   82e54:	100b883a 	mov	r5,r2
   82e58:	01000104 	movi	r4,4
   82e5c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    DelayMS(100) ;
   82e60:	01001904 	movi	r4,100
   82e64:	00877380 	call	87738 <DelayMS>
    HDMITX_AndREG_Byte(REG_TX_SW_RST,          B_AREF_RST|B_AUD_RST|B_HDCP_RST) ;
   82e68:	01000104 	movi	r4,4
   82e6c:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   82e70:	10803fcc 	andi	r2,r2,255
   82e74:	1080054c 	andi	r2,r2,21
   82e78:	100b883a 	mov	r5,r2
   82e7c:	01000104 	movi	r4,4
   82e80:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    // REG_TX_AFE_DRV_CTRL have to be set at the last step of setup .
}
   82e84:	0001883a 	nop
   82e88:	e037883a 	mov	sp,fp
   82e8c:	dfc00117 	ldw	ra,4(sp)
   82e90:	df000017 	ldw	fp,0(sp)
   82e94:	dec00204 	addi	sp,sp,8
   82e98:	f800283a 	ret

00082e9c <FireAFE>:
//         When program reg61 with 0x04,then audio and video circuit work.
// Side-Effect: N/A
//////////////////////////////////////////////////////////////////////
static void
FireAFE()
{
   82e9c:	defffc04 	addi	sp,sp,-16
   82ea0:	dfc00315 	stw	ra,12(sp)
   82ea4:	df000215 	stw	fp,8(sp)
   82ea8:	dc000115 	stw	r16,4(sp)
   82eac:	df000204 	addi	fp,sp,8
    BYTE reg;
    Switch_HDMITX_Bank(0) ;
   82eb0:	000b883a 	mov	r5,zero
   82eb4:	010003c4 	movi	r4,15
   82eb8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    HDMITX_WriteI2C_Byte(REG_TX_AFE_DRV_CTRL,0) ;
   82ebc:	000b883a 	mov	r5,zero
   82ec0:	01001844 	movi	r4,97
   82ec4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    for(reg = 0x61 ; reg <= 0x67 ; reg++)
   82ec8:	00801844 	movi	r2,97
   82ecc:	e0bffe05 	stb	r2,-8(fp)
   82ed0:	00000d06 	br	82f08 <FireAFE+0x6c>
    {
        ErrorF("Reg[%02X] = %02X\n",reg,HDMITX_ReadI2C_Byte(reg)) ;
   82ed4:	e43ffe03 	ldbu	r16,-8(fp)
   82ed8:	e0bffe03 	ldbu	r2,-8(fp)
   82edc:	1009883a 	mov	r4,r2
   82ee0:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   82ee4:	10803fcc 	andi	r2,r2,255
   82ee8:	100d883a 	mov	r6,r2
   82eec:	800b883a 	mov	r5,r16
   82ef0:	010002b4 	movhi	r4,10
   82ef4:	212f1404 	addi	r4,r4,-17328
   82ef8:	00877a40 	call	877a4 <ErrorF>
    BYTE reg;
    Switch_HDMITX_Bank(0) ;

    HDMITX_WriteI2C_Byte(REG_TX_AFE_DRV_CTRL,0) ;

    for(reg = 0x61 ; reg <= 0x67 ; reg++)
   82efc:	e0bffe03 	ldbu	r2,-8(fp)
   82f00:	10800044 	addi	r2,r2,1
   82f04:	e0bffe05 	stb	r2,-8(fp)
   82f08:	e0bffe03 	ldbu	r2,-8(fp)
   82f0c:	10801a30 	cmpltui	r2,r2,104
   82f10:	103ff01e 	bne	r2,zero,82ed4 <__alt_data_end+0xfffb3014>
    {
        ErrorF("Reg[%02X] = %02X\n",reg,HDMITX_ReadI2C_Byte(reg)) ;
    }
}
   82f14:	0001883a 	nop
   82f18:	e6ffff04 	addi	sp,fp,-4
   82f1c:	dfc00217 	ldw	ra,8(sp)
   82f20:	df000117 	ldw	fp,4(sp)
   82f24:	dc000017 	ldw	r16,0(sp)
   82f28:	dec00304 	addi	sp,sp,12
   82f2c:	f800283a 	ret

00082f30 <SetAudioFormat>:
//////////////////////////////////////////////////////////////////////


static SYS_STATUS
SetAudioFormat(BYTE NumChannel,BYTE AudioEnable,BYTE bSampleFreq,BYTE AudSWL,BYTE AudioCatCode)
{
   82f30:	defff604 	addi	sp,sp,-40
   82f34:	dfc00915 	stw	ra,36(sp)
   82f38:	df000815 	stw	fp,32(sp)
   82f3c:	df000804 	addi	fp,sp,32
   82f40:	2011883a 	mov	r8,r4
   82f44:	3009883a 	mov	r4,r6
   82f48:	3807883a 	mov	r3,r7
   82f4c:	e0800217 	ldw	r2,8(fp)
   82f50:	e23ffb05 	stb	r8,-20(fp)
   82f54:	e17ffc05 	stb	r5,-16(fp)
   82f58:	e13ffd05 	stb	r4,-12(fp)
   82f5c:	e0fffe05 	stb	r3,-8(fp)
   82f60:	e0bfff05 	stb	r2,-4(fp)
    BYTE fs = bSampleFreq ;
   82f64:	e0bffd03 	ldbu	r2,-12(fp)
   82f68:	e0bffac5 	stb	r2,-21(fp)

    BYTE SourceValid ;
    BYTE SoruceNum ;


    ErrorF("SetAudioFormat(%d channel,%02X,SampleFreq %d,AudSWL %d,%02X)\n",NumChannel,AudioEnable,bSampleFreq,AudSWL,AudioCatCode) ;
   82f6c:	e13ffb03 	ldbu	r4,-20(fp)
   82f70:	e17ffc03 	ldbu	r5,-16(fp)
   82f74:	e1bffd03 	ldbu	r6,-12(fp)
   82f78:	e0bffe03 	ldbu	r2,-8(fp)
   82f7c:	e0ffff03 	ldbu	r3,-4(fp)
   82f80:	d8c00115 	stw	r3,4(sp)
   82f84:	d8800015 	stw	r2,0(sp)
   82f88:	300f883a 	mov	r7,r6
   82f8c:	280d883a 	mov	r6,r5
   82f90:	200b883a 	mov	r5,r4
   82f94:	010002b4 	movhi	r4,10
   82f98:	212f1904 	addi	r4,r4,-17308
   82f9c:	00877a40 	call	877a4 <ErrorF>


//richard remove    Instance[0].bOutputAudioMode |= 0x41 ;
    if(NumChannel > 6)
   82fa0:	e0bffb03 	ldbu	r2,-20(fp)
   82fa4:	108001f0 	cmpltui	r2,r2,7
   82fa8:	1000051e 	bne	r2,zero,82fc0 <SetAudioFormat+0x90>
    {
        SourceValid = B_AUD_ERR2FLAT | B_AUD_S3VALID | B_AUD_S2VALID | B_AUD_S1VALID ;
   82fac:	008003c4 	movi	r2,15
   82fb0:	e0bffa45 	stb	r2,-23(fp)
        SoruceNum = 4 ;
   82fb4:	00800104 	movi	r2,4
   82fb8:	e0bffa85 	stb	r2,-22(fp)
   82fbc:	00001d06 	br	83034 <SetAudioFormat+0x104>
    }
    else if (NumChannel > 4)
   82fc0:	e0bffb03 	ldbu	r2,-20(fp)
   82fc4:	10800170 	cmpltui	r2,r2,5
   82fc8:	1000051e 	bne	r2,zero,82fe0 <SetAudioFormat+0xb0>
    {
        SourceValid = B_AUD_ERR2FLAT | B_AUD_S2VALID | B_AUD_S1VALID ;
   82fcc:	008002c4 	movi	r2,11
   82fd0:	e0bffa45 	stb	r2,-23(fp)
        SoruceNum = 3 ;
   82fd4:	008000c4 	movi	r2,3
   82fd8:	e0bffa85 	stb	r2,-22(fp)
   82fdc:	00001506 	br	83034 <SetAudioFormat+0x104>
    }
    else if (NumChannel > 2)
   82fe0:	e0bffb03 	ldbu	r2,-20(fp)
   82fe4:	108000f0 	cmpltui	r2,r2,3
   82fe8:	1000051e 	bne	r2,zero,83000 <SetAudioFormat+0xd0>
    {
        SourceValid = B_AUD_ERR2FLAT | B_AUD_S1VALID ;
   82fec:	00800244 	movi	r2,9
   82ff0:	e0bffa45 	stb	r2,-23(fp)
        SoruceNum = 2 ;
   82ff4:	00800084 	movi	r2,2
   82ff8:	e0bffa85 	stb	r2,-22(fp)
   82ffc:	00000d06 	br	83034 <SetAudioFormat+0x104>
    }
    else
    {
        SourceValid = B_AUD_ERR2FLAT ; // only two channel.
   83000:	00800204 	movi	r2,8
   83004:	e0bffa45 	stb	r2,-23(fp)
        SoruceNum = 1 ;
   83008:	00800044 	movi	r2,1
   8300c:	e0bffa85 	stb	r2,-22(fp)
        Instance[0].bOutputAudioMode &= ~0x40 ;
   83010:	008002b4 	movhi	r2,10
   83014:	1085ab04 	addi	r2,r2,5804
   83018:	10c00103 	ldbu	r3,4(r2)
   8301c:	00bfefc4 	movi	r2,-65
   83020:	1884703a 	and	r2,r3,r2
   83024:	1007883a 	mov	r3,r2
   83028:	008002b4 	movhi	r2,10
   8302c:	1085ab04 	addi	r2,r2,5804
   83030:	10c00105 	stb	r3,4(r2)
    }

    AudioEnable &= ~ (M_AUD_SWL|B_SPDIFTC) ;
   83034:	e0bffc03 	ldbu	r2,-16(fp)
   83038:	108007cc 	andi	r2,r2,31
   8303c:	e0bffc05 	stb	r2,-16(fp)

    switch(AudSWL)
   83040:	e0bffe03 	ldbu	r2,-8(fp)
   83044:	10c004a0 	cmpeqi	r3,r2,18
   83048:	18000d1e 	bne	r3,zero,83080 <SetAudioFormat+0x150>
   8304c:	10c004c8 	cmpgei	r3,r2,19
   83050:	1800031e 	bne	r3,zero,83060 <SetAudioFormat+0x130>
   83054:	10800420 	cmpeqi	r2,r2,16
   83058:	1000061e 	bne	r2,zero,83074 <SetAudioFormat+0x144>
   8305c:	00001c06 	br	830d0 <SetAudioFormat+0x1a0>
   83060:	10c00520 	cmpeqi	r3,r2,20
   83064:	18000c1e 	bne	r3,zero,83098 <SetAudioFormat+0x168>
   83068:	10800620 	cmpeqi	r2,r2,24
   8306c:	1000111e 	bne	r2,zero,830b4 <SetAudioFormat+0x184>
   83070:	00001706 	br	830d0 <SetAudioFormat+0x1a0>
    {
    case 16:
        SWL = AUD_SWL_16 ;
   83074:	00800084 	movi	r2,2
   83078:	e0bffa05 	stb	r2,-24(fp)
        AudioEnable |= M_AUD_16BIT ;
        break ;
   8307c:	00001606 	br	830d8 <SetAudioFormat+0x1a8>
    case 18:
        SWL = AUD_SWL_18 ;
   83080:	00800104 	movi	r2,4
   83084:	e0bffa05 	stb	r2,-24(fp)
        AudioEnable |= M_AUD_18BIT ;
   83088:	e0bffc03 	ldbu	r2,-16(fp)
   8308c:	10801014 	ori	r2,r2,64
   83090:	e0bffc05 	stb	r2,-16(fp)
        break ;
   83094:	00001006 	br	830d8 <SetAudioFormat+0x1a8>
    case 20:
        SWL = AUD_SWL_20 ;
   83098:	00800284 	movi	r2,10
   8309c:	e0bffa05 	stb	r2,-24(fp)
        AudioEnable |= M_AUD_20BIT ;
   830a0:	e0fffc03 	ldbu	r3,-16(fp)
   830a4:	00bfe004 	movi	r2,-128
   830a8:	1884b03a 	or	r2,r3,r2
   830ac:	e0bffc05 	stb	r2,-16(fp)
        break ;
   830b0:	00000906 	br	830d8 <SetAudioFormat+0x1a8>
    case 24:
        SWL = AUD_SWL_24 ;
   830b4:	008002c4 	movi	r2,11
   830b8:	e0bffa05 	stb	r2,-24(fp)
        AudioEnable |= M_AUD_24BIT ;
   830bc:	e0fffc03 	ldbu	r3,-16(fp)
   830c0:	00bff004 	movi	r2,-64
   830c4:	1884b03a 	or	r2,r3,r2
   830c8:	e0bffc05 	stb	r2,-16(fp)
        break ;
   830cc:	00000206 	br	830d8 <SetAudioFormat+0x1a8>
    default:
        return ER_FAIL ;
   830d0:	00800044 	movi	r2,1
   830d4:	00005c06 	br	83248 <SetAudioFormat+0x318>
    }


    Switch_HDMITX_Bank(0) ;
   830d8:	000b883a 	mov	r5,zero
   830dc:	010003c4 	movi	r4,15
   830e0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_AUDIO_CTRL0,AudioEnable&0xF0) ;
   830e4:	e0bffc03 	ldbu	r2,-16(fp)
   830e8:	10803c0c 	andi	r2,r2,240
   830ec:	100b883a 	mov	r5,r2
   830f0:	01003804 	movi	r4,224
   830f4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    HDMITX_AndREG_Byte(REG_TX_SW_RST,~(B_AUD_RST|B_AREF_RST)) ;
   830f8:	01000104 	movi	r4,4
   830fc:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83100:	10803fcc 	andi	r2,r2,255
   83104:	10803acc 	andi	r2,r2,235
   83108:	100b883a 	mov	r5,r2
   8310c:	01000104 	movi	r4,4
   83110:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_AUDIO_CTRL1,Instance[0].bOutputAudioMode) ; // regE1 bOutputAudioMode should be loaded from ROM image.
   83114:	008002b4 	movhi	r2,10
   83118:	1085ab04 	addi	r2,r2,5804
   8311c:	10800103 	ldbu	r2,4(r2)
   83120:	10803fcc 	andi	r2,r2,255
   83124:	100b883a 	mov	r5,r2
   83128:	01003844 	movi	r4,225
   8312c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_AUDIO_FIFOMAP,0xE4) ; // default mapping.
   83130:	01403904 	movi	r5,228
   83134:	01003884 	movi	r4,226
   83138:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_AUDIO_CTRL3,(Instance[0].bAudioChannelSwap&0xF)|(AudioEnable&B_AUD_SPDIF)) ;
   8313c:	008002b4 	movhi	r2,10
   83140:	1085ab04 	addi	r2,r2,5804
   83144:	10800143 	ldbu	r2,5(r2)
   83148:	108003cc 	andi	r2,r2,15
   8314c:	1007883a 	mov	r3,r2
   83150:	e0bffc03 	ldbu	r2,-16(fp)
   83154:	1080040c 	andi	r2,r2,16
   83158:	1884b03a 	or	r2,r3,r2
   8315c:	10803fcc 	andi	r2,r2,255
   83160:	100b883a 	mov	r5,r2
   83164:	010038c4 	movi	r4,227
   83168:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_AUD_SRCVALID_FLAT,SourceValid) ;
   8316c:	e0bffa43 	ldbu	r2,-23(fp)
   83170:	100b883a 	mov	r5,r2
   83174:	01003904 	movi	r4,228
   83178:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
//     HDMITX_WriteI2C_Byte(REG_TX_AUDCHST_CA_FS,0x00|fs) ; // choose clock
//     fs = ~fs ; // OFS is the one's complement of FS
//     HDMITX_WriteI2C_Byte(REG_TX_AUDCHST_OFS_WL,(fs<<4)|SWL) ;
//     Switch_HDMITX_Bank(0) ;

    Switch_HDMITX_Bank(1) ;
   8317c:	01400044 	movi	r5,1
   83180:	010003c4 	movi	r4,15
   83184:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_AUDCHST_MODE,0 |((NumChannel == 1)?1:0)) ; // 2 audio channel without pre-emphasis,if NumChannel set it as 1.
   83188:	e0bffb03 	ldbu	r2,-20(fp)
   8318c:	10800060 	cmpeqi	r2,r2,1
   83190:	10803fcc 	andi	r2,r2,255
   83194:	100b883a 	mov	r5,r2
   83198:	01002444 	movi	r4,145
   8319c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_AUDCHST_CAT,AudioCatCode) ;
   831a0:	e0bfff03 	ldbu	r2,-4(fp)
   831a4:	100b883a 	mov	r5,r2
   831a8:	01002484 	movi	r4,146
   831ac:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_AUDCHST_SRCNUM,SoruceNum) ;
   831b0:	e0bffa83 	ldbu	r2,-22(fp)
   831b4:	100b883a 	mov	r5,r2
   831b8:	010024c4 	movi	r4,147
   831bc:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_AUD0CHST_CHTNUM,0) ;
   831c0:	000b883a 	mov	r5,zero
   831c4:	01002504 	movi	r4,148
   831c8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_AUDCHST_CA_FS,0x00|fs) ; // choose clock
   831cc:	e0bffac3 	ldbu	r2,-21(fp)
   831d0:	100b883a 	mov	r5,r2
   831d4:	01002604 	movi	r4,152
   831d8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    fs = ~fs ; // OFS is the one's complement of FS
   831dc:	e0bffac3 	ldbu	r2,-21(fp)
   831e0:	0084303a 	nor	r2,zero,r2
   831e4:	e0bffac5 	stb	r2,-21(fp)
    HDMITX_WriteI2C_Byte(REG_TX_AUDCHST_OFS_WL,(fs<<4)|SWL) ;
   831e8:	e0bffac3 	ldbu	r2,-21(fp)
   831ec:	1004913a 	slli	r2,r2,4
   831f0:	1007883a 	mov	r3,r2
   831f4:	e0bffa03 	ldbu	r2,-24(fp)
   831f8:	1884b03a 	or	r2,r3,r2
   831fc:	10803fcc 	andi	r2,r2,255
   83200:	100b883a 	mov	r5,r2
   83204:	01002644 	movi	r4,153
   83208:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    Switch_HDMITX_Bank(0) ;
   8320c:	000b883a 	mov	r5,zero
   83210:	010003c4 	movi	r4,15
   83214:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    
    // richard modify (could be bug), if(!(AudioEnable | B_AUD_SPDIF))
    if(!(AudioEnable & B_AUD_SPDIF))
   83218:	e0bffc03 	ldbu	r2,-16(fp)
   8321c:	1080040c 	andi	r2,r2,16
   83220:	1000041e 	bne	r2,zero,83234 <SetAudioFormat+0x304>
    {
        HDMITX_WriteI2C_Byte(REG_TX_AUDIO_CTRL0,AudioEnable) ;
   83224:	e0bffc03 	ldbu	r2,-16(fp)
   83228:	100b883a 	mov	r5,r2
   8322c:	01003804 	movi	r4,224
   83230:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    }

    Instance[0].bAudioChannelEnable = AudioEnable ;
   83234:	008002b4 	movhi	r2,10
   83238:	1085ab04 	addi	r2,r2,5804
   8323c:	e0fffc03 	ldbu	r3,-16(fp)
   83240:	10c00185 	stb	r3,6(r2)
    
    // HDMITX_AndREG_Byte(REG_TX_SW_RST,B_AUD_RST) ;    // enable Audio
    return ER_SUCCESS;
   83244:	0005883a 	mov	r2,zero
}
   83248:	e037883a 	mov	sp,fp
   8324c:	dfc00117 	ldw	ra,4(sp)
   83250:	df000017 	ldw	fp,0(sp)
   83254:	dec00204 	addi	sp,sp,8
   83258:	f800283a 	ret

0008325c <AutoAdjustAudio>:



static void
AutoAdjustAudio()
{
   8325c:	defff904 	addi	sp,sp,-28
   83260:	dfc00615 	stw	ra,24(sp)
   83264:	df000515 	stw	fp,20(sp)
   83268:	df000504 	addi	fp,sp,20
//         {
//             return ;
//         }
//     }
    
    Switch_HDMITX_Bank(1) ;
   8326c:	01400044 	movi	r5,1
   83270:	010003c4 	movi	r4,15
   83274:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    
    N = ((unsigned long)HDMITX_ReadI2C_Byte(REGPktAudN2)&0xF) << 16 ;
   83278:	01000d44 	movi	r4,53
   8327c:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83280:	10803fcc 	andi	r2,r2,255
   83284:	108003cc 	andi	r2,r2,15
   83288:	1004943a 	slli	r2,r2,16
   8328c:	e0bffc15 	stw	r2,-16(fp)
    N |= ((unsigned long)HDMITX_ReadI2C_Byte(REGPktAudN1)) <<8 ;
   83290:	01000d04 	movi	r4,52
   83294:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83298:	10803fcc 	andi	r2,r2,255
   8329c:	1004923a 	slli	r2,r2,8
   832a0:	e0fffc17 	ldw	r3,-16(fp)
   832a4:	1884b03a 	or	r2,r3,r2
   832a8:	e0bffc15 	stw	r2,-16(fp)
    N |= ((unsigned long)HDMITX_ReadI2C_Byte(REGPktAudN0)) ;
   832ac:	01000cc4 	movi	r4,51
   832b0:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   832b4:	10803fcc 	andi	r2,r2,255
   832b8:	e0fffc17 	ldw	r3,-16(fp)
   832bc:	1884b03a 	or	r2,r3,r2
   832c0:	e0bffc15 	stw	r2,-16(fp)
    
    CTS = ((unsigned long)HDMITX_ReadI2C_Byte(REGPktAudCTSCnt2)&0xF) << 16 ;
   832c4:	01002884 	movi	r4,162
   832c8:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   832cc:	10803fcc 	andi	r2,r2,255
   832d0:	108003cc 	andi	r2,r2,15
   832d4:	1004943a 	slli	r2,r2,16
   832d8:	e0bffd15 	stw	r2,-12(fp)
    CTS |= ((unsigned long)HDMITX_ReadI2C_Byte(REGPktAudCTSCnt1)) <<8 ;
   832dc:	01002844 	movi	r4,161
   832e0:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   832e4:	10803fcc 	andi	r2,r2,255
   832e8:	1004923a 	slli	r2,r2,8
   832ec:	e0fffd17 	ldw	r3,-12(fp)
   832f0:	1884b03a 	or	r2,r3,r2
   832f4:	e0bffd15 	stw	r2,-12(fp)
    CTS |= ((unsigned long)HDMITX_ReadI2C_Byte(REGPktAudCTSCnt0)) ;
   832f8:	01002804 	movi	r4,160
   832fc:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83300:	10803fcc 	andi	r2,r2,255
   83304:	e0fffd17 	ldw	r3,-12(fp)
   83308:	1884b03a 	or	r2,r3,r2
   8330c:	e0bffd15 	stw	r2,-12(fp)
    Switch_HDMITX_Bank(0) ;
   83310:	000b883a 	mov	r5,zero
   83314:	010003c4 	movi	r4,15
   83318:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    
    // CTS = TMDSCLK * N / ( 128 * SampleFreq ) 
    // SampleFreq = TMDSCLK * N / (128*CTS) 
    
    if( CTS == 0 ) 
   8331c:	e0bffd17 	ldw	r2,-12(fp)
   83320:	10008826 	beq	r2,zero,83544 <AutoAdjustAudio+0x2e8>
    {
        return  ;
    }
    
    SampleFreq = Instance[0].TMDSClock/CTS ;
   83324:	008002b4 	movhi	r2,10
   83328:	1085ab04 	addi	r2,r2,5804
   8332c:	10800217 	ldw	r2,8(r2)
   83330:	e17ffd17 	ldw	r5,-12(fp)
   83334:	1009883a 	mov	r4,r2
   83338:	0088d8c0 	call	88d8c <__udivsi3>
   8333c:	e0bffe15 	stw	r2,-8(fp)
    SampleFreq *= N ;
   83340:	e0fffe17 	ldw	r3,-8(fp)
   83344:	e0bffc17 	ldw	r2,-16(fp)
   83348:	1885383a 	mul	r2,r3,r2
   8334c:	e0bffe15 	stw	r2,-8(fp)
    SampleFreq /= 128 ;
   83350:	e0bffe17 	ldw	r2,-8(fp)
   83354:	1004d1fa 	srli	r2,r2,7
   83358:	e0bffe15 	stw	r2,-8(fp)
            
    if( SampleFreq>31000 && SampleFreq<=38050 )
   8335c:	e0bffe17 	ldw	r2,-8(fp)
   83360:	109e4670 	cmpltui	r2,r2,31001
   83364:	10000a1e 	bne	r2,zero,83390 <AutoAdjustAudio+0x134>
   83368:	e0bffe17 	ldw	r2,-8(fp)
   8336c:	10a528e8 	cmpgeui	r2,r2,38051
   83370:	1000071e 	bne	r2,zero,83390 <AutoAdjustAudio+0x134>
    {
        Instance[0].bAudFs = AUDFS_32KHz ;
   83374:	008002b4 	movhi	r2,10
   83378:	1085ab04 	addi	r2,r2,5804
   8337c:	00c000c4 	movi	r3,3
   83380:	10c001c5 	stb	r3,7(r2)
        fs = AUDFS_32KHz ;;
   83384:	008000c4 	movi	r2,3
   83388:	e0bffb05 	stb	r2,-20(fp)
   8338c:	00004506 	br	834a4 <AutoAdjustAudio+0x248>
    }
    else if (SampleFreq < 46050 ) // 44.1KHz
   83390:	e0bffe17 	ldw	r2,-8(fp)
   83394:	10acf8a8 	cmpgeui	r2,r2,46050
   83398:	1000051e 	bne	r2,zero,833b0 <AutoAdjustAudio+0x154>
    {
        Instance[0].bAudFs = AUDFS_44p1KHz ;
   8339c:	008002b4 	movhi	r2,10
   833a0:	1085ab04 	addi	r2,r2,5804
   833a4:	100001c5 	stb	zero,7(r2)
        fs = AUDFS_44p1KHz ;;
   833a8:	e03ffb05 	stb	zero,-20(fp)
   833ac:	00003d06 	br	834a4 <AutoAdjustAudio+0x248>
    }
    else if (SampleFreq < 68100 ) // 48KHz
   833b0:	e0fffe17 	ldw	r3,-8(fp)
   833b4:	00800074 	movhi	r2,1
   833b8:	108280c4 	addi	r2,r2,2563
   833bc:	10c00736 	bltu	r2,r3,833dc <AutoAdjustAudio+0x180>
    {
        Instance[0].bAudFs = AUDFS_48KHz ;
   833c0:	008002b4 	movhi	r2,10
   833c4:	1085ab04 	addi	r2,r2,5804
   833c8:	00c00084 	movi	r3,2
   833cc:	10c001c5 	stb	r3,7(r2)
        fs = AUDFS_48KHz ;;
   833d0:	00800084 	movi	r2,2
   833d4:	e0bffb05 	stb	r2,-20(fp)
   833d8:	00003206 	br	834a4 <AutoAdjustAudio+0x248>
    }
    else if (SampleFreq < 92100 ) // 88.2 KHz
   833dc:	e0fffe17 	ldw	r3,-8(fp)
   833e0:	00800074 	movhi	r2,1
   833e4:	1099f0c4 	addi	r2,r2,26563
   833e8:	10c00736 	bltu	r2,r3,83408 <AutoAdjustAudio+0x1ac>
    {
        Instance[0].bAudFs = AUDFS_88p2KHz ;
   833ec:	008002b4 	movhi	r2,10
   833f0:	1085ab04 	addi	r2,r2,5804
   833f4:	00c00204 	movi	r3,8
   833f8:	10c001c5 	stb	r3,7(r2)
        fs = AUDFS_88p2KHz ;;
   833fc:	00800204 	movi	r2,8
   83400:	e0bffb05 	stb	r2,-20(fp)
   83404:	00002706 	br	834a4 <AutoAdjustAudio+0x248>
    }
    else if (SampleFreq < 136200 ) // 96KHz
   83408:	e0fffe17 	ldw	r3,-8(fp)
   8340c:	008000b4 	movhi	r2,2
   83410:	108501c4 	addi	r2,r2,5127
   83414:	10c00736 	bltu	r2,r3,83434 <AutoAdjustAudio+0x1d8>
    {
        Instance[0].bAudFs = AUDFS_96KHz ;
   83418:	008002b4 	movhi	r2,10
   8341c:	1085ab04 	addi	r2,r2,5804
   83420:	00c00284 	movi	r3,10
   83424:	10c001c5 	stb	r3,7(r2)
        fs = AUDFS_96KHz ;;
   83428:	00800284 	movi	r2,10
   8342c:	e0bffb05 	stb	r2,-20(fp)
   83430:	00001c06 	br	834a4 <AutoAdjustAudio+0x248>
    }
    else if (SampleFreq < 184200 ) // 176.4KHz
   83434:	e0fffe17 	ldw	r3,-8(fp)
   83438:	008000f4 	movhi	r2,3
   8343c:	10b3e1c4 	addi	r2,r2,-12409
   83440:	10c00736 	bltu	r2,r3,83460 <AutoAdjustAudio+0x204>
    {
        Instance[0].bAudFs = AUDFS_176p4KHz ;
   83444:	008002b4 	movhi	r2,10
   83448:	1085ab04 	addi	r2,r2,5804
   8344c:	00c00304 	movi	r3,12
   83450:	10c001c5 	stb	r3,7(r2)
        fs = AUDFS_176p4KHz ;;
   83454:	00800304 	movi	r2,12
   83458:	e0bffb05 	stb	r2,-20(fp)
   8345c:	00001106 	br	834a4 <AutoAdjustAudio+0x248>
    }
    else if (SampleFreq < 240200 ) // 192KHz
   83460:	e0fffe17 	ldw	r3,-8(fp)
   83464:	00800134 	movhi	r2,4
   83468:	10aa91c4 	addi	r2,r2,-21945
   8346c:	10c00736 	bltu	r2,r3,8348c <AutoAdjustAudio+0x230>
    {
        Instance[0].bAudFs = AUDFS_192KHz ;
   83470:	008002b4 	movhi	r2,10
   83474:	1085ab04 	addi	r2,r2,5804
   83478:	00c00384 	movi	r3,14
   8347c:	10c001c5 	stb	r3,7(r2)
        fs = AUDFS_192KHz ;;
   83480:	00800384 	movi	r2,14
   83484:	e0bffb05 	stb	r2,-20(fp)
   83488:	00000606 	br	834a4 <AutoAdjustAudio+0x248>
    }
    else 
    {
        Instance[0].bAudFs = AUDFS_OTHER;
   8348c:	008002b4 	movhi	r2,10
   83490:	1085ab04 	addi	r2,r2,5804
   83494:	00c00044 	movi	r3,1
   83498:	10c001c5 	stb	r3,7(r2)
        fs = AUDFS_OTHER;;
   8349c:	00800044 	movi	r2,1
   834a0:	e0bffb05 	stb	r2,-20(fp)
    }

//    bPendingAdjustAudioFreq = FALSE ;
    
    SetNCTS(Instance[0].TMDSClock, Instance[0].bAudFs) ; // set N, CTS by new generated clock.
   834a4:	008002b4 	movhi	r2,10
   834a8:	1085ab04 	addi	r2,r2,5804
   834ac:	10c00217 	ldw	r3,8(r2)
   834b0:	008002b4 	movhi	r2,10
   834b4:	1085ab04 	addi	r2,r2,5804
   834b8:	108001c3 	ldbu	r2,7(r2)
   834bc:	10803fcc 	andi	r2,r2,255
   834c0:	100b883a 	mov	r5,r2
   834c4:	1809883a 	mov	r4,r3
   834c8:	00836880 	call	83688 <SetNCTS>
    
    Switch_HDMITX_Bank(1) ; // adjust the new fs in channel status registers
   834cc:	01400044 	movi	r5,1
   834d0:	010003c4 	movi	r4,15
   834d4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_AUDCHST_CA_FS,0x00|fs) ; // choose clock
   834d8:	e0bffb03 	ldbu	r2,-20(fp)
   834dc:	100b883a 	mov	r5,r2
   834e0:	01002604 	movi	r4,152
   834e4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    fs = ~fs ; // OFS is the one's complement of FS
   834e8:	e0bffb03 	ldbu	r2,-20(fp)
   834ec:	0084303a 	nor	r2,zero,r2
   834f0:	e0bffb05 	stb	r2,-20(fp)
    uc = HDMITX_ReadI2C_Byte(REG_TX_AUDCHST_OFS_WL) ;
   834f4:	01002644 	movi	r4,153
   834f8:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   834fc:	e0bfff05 	stb	r2,-4(fp)
    uc &= 0xF ;
   83500:	e0bfff03 	ldbu	r2,-4(fp)
   83504:	108003cc 	andi	r2,r2,15
   83508:	e0bfff05 	stb	r2,-4(fp)
    uc |= fs << 4 ;
   8350c:	e0bffb03 	ldbu	r2,-20(fp)
   83510:	1004913a 	slli	r2,r2,4
   83514:	1007883a 	mov	r3,r2
   83518:	e0bfff03 	ldbu	r2,-4(fp)
   8351c:	1884b03a 	or	r2,r3,r2
   83520:	e0bfff05 	stb	r2,-4(fp)
    HDMITX_WriteI2C_Byte(REG_TX_AUDCHST_OFS_WL,uc) ;
   83524:	e0bfff03 	ldbu	r2,-4(fp)
   83528:	100b883a 	mov	r5,r2
   8352c:	01002644 	movi	r4,153
   83530:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    
    Switch_HDMITX_Bank(0) ;
   83534:	000b883a 	mov	r5,zero
   83538:	010003c4 	movi	r4,15
   8353c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
   83540:	00000106 	br	83548 <AutoAdjustAudio+0x2ec>
    // CTS = TMDSCLK * N / ( 128 * SampleFreq ) 
    // SampleFreq = TMDSCLK * N / (128*CTS) 
    
    if( CTS == 0 ) 
    {
        return  ;
   83544:	0001883a 	nop
    uc |= fs << 4 ;
    HDMITX_WriteI2C_Byte(REG_TX_AUDCHST_OFS_WL,uc) ;
    
    Switch_HDMITX_Bank(0) ;

}
   83548:	e037883a 	mov	sp,fp
   8354c:	dfc00117 	ldw	ra,4(sp)
   83550:	df000017 	ldw	fp,0(sp)
   83554:	dec00204 	addi	sp,sp,8
   83558:	f800283a 	ret

0008355c <SetupAudioChannel>:

static void
SetupAudioChannel()
{
   8355c:	defffe04 	addi	sp,sp,-8
   83560:	dfc00115 	stw	ra,4(sp)
   83564:	df000015 	stw	fp,0(sp)
   83568:	d839883a 	mov	fp,sp
    static BYTE bEnableAudioChannel=FALSE ;
    if( (HDMITX_ReadI2C_Byte(REG_TX_SW_RST) & (B_AUD_RST|B_AREF_RST)) == 0) // audio enabled
   8356c:	01000104 	movi	r4,4
   83570:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83574:	10803fcc 	andi	r2,r2,255
   83578:	1080050c 	andi	r2,r2,20
   8357c:	10003c1e 	bne	r2,zero,83670 <SetupAudioChannel+0x114>
    {
        Switch_HDMITX_Bank(0) ;
   83580:	000b883a 	mov	r5,zero
   83584:	010003c4 	movi	r4,15
   83588:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

        if((HDMITX_ReadI2C_Byte(REG_TX_AUDIO_CTRL0) & 0xf) == 0)
   8358c:	01003804 	movi	r4,224
   83590:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83594:	10803fcc 	andi	r2,r2,255
   83598:	108003cc 	andi	r2,r2,15
   8359c:	10001f1e 	bne	r2,zero,8361c <SetupAudioChannel+0xc0>
        {
            if(HDMITX_ReadI2C_Byte(REG_TX_CLK_STATUS2) & B_OSF_LOCK)
   835a0:	010017c4 	movi	r4,95
   835a4:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   835a8:	10803fcc 	andi	r2,r2,255
   835ac:	1080080c 	andi	r2,r2,32
   835b0:	10002f26 	beq	r2,zero,83670 <SetupAudioChannel+0x114>
            {
                SetNCTS(Instance[0].TMDSClock, Instance[0].bAudFs) ; // to enable automatic progress setting for N/CTS
   835b4:	008002b4 	movhi	r2,10
   835b8:	1085ab04 	addi	r2,r2,5804
   835bc:	10c00217 	ldw	r3,8(r2)
   835c0:	008002b4 	movhi	r2,10
   835c4:	1085ab04 	addi	r2,r2,5804
   835c8:	108001c3 	ldbu	r2,7(r2)
   835cc:	10803fcc 	andi	r2,r2,255
   835d0:	100b883a 	mov	r5,r2
   835d4:	1809883a 	mov	r4,r3
   835d8:	00836880 	call	83688 <SetNCTS>
                DelayMS(5);
   835dc:	01000144 	movi	r4,5
   835e0:	00877380 	call	87738 <DelayMS>
                AutoAdjustAudio() ;
   835e4:	008325c0 	call	8325c <AutoAdjustAudio>
                Switch_HDMITX_Bank(0) ;
   835e8:	000b883a 	mov	r5,zero
   835ec:	010003c4 	movi	r4,15
   835f0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
                HDMITX_WriteI2C_Byte(REG_TX_AUDIO_CTRL0, Instance[0].bAudioChannelEnable) ;
   835f4:	008002b4 	movhi	r2,10
   835f8:	1085ab04 	addi	r2,r2,5804
   835fc:	10800183 	ldbu	r2,6(r2)
   83600:	10803fcc 	andi	r2,r2,255
   83604:	100b883a 	mov	r5,r2
   83608:	01003804 	movi	r4,224
   8360c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
                bEnableAudioChannel=TRUE ;
   83610:	00800044 	movi	r2,1
   83614:	d0a99685 	stb	r2,-22950(gp)
                }
                bEnableAudioChannel=FALSE ;
            }
        }
    }
}
   83618:	00001506 	br	83670 <SetupAudioChannel+0x114>
                bEnableAudioChannel=TRUE ;
            }
        }
        else
        {
            if((HDMITX_ReadI2C_Byte(REG_TX_CLK_STATUS2) & B_OSF_LOCK)==0)
   8361c:	010017c4 	movi	r4,95
   83620:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83624:	10803fcc 	andi	r2,r2,255
   83628:	1080080c 	andi	r2,r2,32
   8362c:	1000101e 	bne	r2,zero,83670 <SetupAudioChannel+0x114>
            {
                // AutoAdjustAudio() ;
                // ForceSetNCTS(CurrentPCLK, CurrentSampleFreq) ;
                if( bEnableAudioChannel == TRUE )
   83630:	d0a99683 	ldbu	r2,-22950(gp)
   83634:	10803fcc 	andi	r2,r2,255
   83638:	10800058 	cmpnei	r2,r2,1
   8363c:	10000b1e 	bne	r2,zero,8366c <SetupAudioChannel+0x110>
                {
                    Switch_HDMITX_Bank(0) ;
   83640:	000b883a 	mov	r5,zero
   83644:	010003c4 	movi	r4,15
   83648:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
                    HDMITX_WriteI2C_Byte(REG_TX_AUDIO_CTRL0, Instance[0].bAudioChannelEnable&0xF0) ;
   8364c:	008002b4 	movhi	r2,10
   83650:	1085ab04 	addi	r2,r2,5804
   83654:	10800183 	ldbu	r2,6(r2)
   83658:	10803fcc 	andi	r2,r2,255
   8365c:	10803c0c 	andi	r2,r2,240
   83660:	100b883a 	mov	r5,r2
   83664:	01003804 	movi	r4,224
   83668:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
                }
                bEnableAudioChannel=FALSE ;
   8366c:	d0299685 	stb	zero,-22950(gp)
            }
        }
    }
}
   83670:	0001883a 	nop
   83674:	e037883a 	mov	sp,fp
   83678:	dfc00117 	ldw	ra,4(sp)
   8367c:	df000017 	ldw	fp,0(sp)
   83680:	dec00204 	addi	sp,sp,8
   83684:	f800283a 	ret

00083688 <SetNCTS>:
// Side-Effect: register bank will reset to bank 0.
//////////////////////////////////////////////////////////////////////

static SYS_STATUS
SetNCTS(ULONG PCLK,ULONG Fs)
{
   83688:	defff804 	addi	sp,sp,-32
   8368c:	dfc00715 	stw	ra,28(sp)
   83690:	df000615 	stw	fp,24(sp)
   83694:	dc400515 	stw	r17,20(sp)
   83698:	dc000415 	stw	r16,16(sp)
   8369c:	df000604 	addi	fp,sp,24
   836a0:	e13ffc15 	stw	r4,-16(fp)
   836a4:	e17ffd15 	stw	r5,-12(fp)
    ULONG n,MCLK ;

    MCLK = Fs * 256 ; // MCLK = fs * 256 ;
   836a8:	e0bffd17 	ldw	r2,-12(fp)
   836ac:	1004923a 	slli	r2,r2,8
   836b0:	e0bffb15 	stw	r2,-20(fp)

    ErrorF("SetNCTS(%ld,%ld): MCLK = %ld\n",PCLK,Fs,MCLK) ;
   836b4:	e1fffb17 	ldw	r7,-20(fp)
   836b8:	e1bffd17 	ldw	r6,-12(fp)
   836bc:	e17ffc17 	ldw	r5,-16(fp)
   836c0:	010002b4 	movhi	r4,10
   836c4:	212f2904 	addi	r4,r4,-17244
   836c8:	00877a40 	call	877a4 <ErrorF>

    if( PCLK )
   836cc:	e0bffc17 	ldw	r2,-16(fp)
   836d0:	10009b26 	beq	r2,zero,83940 <SetNCTS+0x2b8>
    {
    	switch (Fs) {
   836d4:	e0bffd17 	ldw	r2,-12(fp)
   836d8:	108003e8 	cmpgeui	r2,r2,15
   836dc:	10008e1e 	bne	r2,zero,83918 <SetNCTS+0x290>
   836e0:	e0bffd17 	ldw	r2,-12(fp)
   836e4:	100690ba 	slli	r3,r2,2
   836e8:	00800234 	movhi	r2,8
   836ec:	108dbf04 	addi	r2,r2,14076
   836f0:	1885883a 	add	r2,r3,r2
   836f4:	10800017 	ldw	r2,0(r2)
   836f8:	1000683a 	jmp	r2
   836fc:	0008377c 	xorhi	zero,zero,8413
   83700:	00083918 	cmpnei	zero,zero,8420
   83704:	000837c0 	call	837c <__reset-0x77c84>
   83708:	00083738 	rdprs	zero,zero,8412
   8370c:	00083918 	cmpnei	zero,zero,8420
   83710:	00083918 	cmpnei	zero,zero,8420
   83714:	00083918 	cmpnei	zero,zero,8420
   83718:	00083918 	cmpnei	zero,zero,8420
   8371c:	00083804 	movi	zero,8416
   83720:	00083918 	cmpnei	zero,zero,8420
   83724:	00083848 	cmpgei	zero,zero,8417
   83728:	00083918 	cmpnei	zero,zero,8420
   8372c:	0008388c 	andi	zero,zero,8418
   83730:	00083918 	cmpnei	zero,zero,8420
   83734:	000838d4 	movui	zero,8419
    		case AUDFS_32KHz:
    			switch (PCLK) {
   83738:	e0fffc17 	ldw	r3,-16(fp)
   8373c:	008038b4 	movhi	r2,226
   83740:	10974e04 	addi	r2,r2,23864
   83744:	18800626 	beq	r3,r2,83760 <SetNCTS+0xd8>
   83748:	00811b34 	movhi	r2,1132
   8374c:	10b48604 	addi	r2,r2,-11752
   83750:	1880061e 	bne	r3,r2,8376c <SetNCTS+0xe4>
    				case 74175000: n = 11648; break;
   83754:	008b6004 	movi	r2,11648
   83758:	e0bffa15 	stw	r2,-24(fp)
   8375c:	00000606 	br	83778 <SetNCTS+0xf0>
    				case 14835000: n = 11648; break;
   83760:	008b6004 	movi	r2,11648
   83764:	e0bffa15 	stw	r2,-24(fp)
   83768:	00000306 	br	83778 <SetNCTS+0xf0>
    				default: n = 4096;
   8376c:	00840004 	movi	r2,4096
   83770:	e0bffa15 	stw	r2,-24(fp)
    			}
    			break;
   83774:	0000a206 	br	83a00 <SetNCTS+0x378>
   83778:	0000a106 	br	83a00 <SetNCTS+0x378>
    		case AUDFS_44p1KHz:
    			switch (PCLK) {
   8377c:	e0fffc17 	ldw	r3,-16(fp)
   83780:	008038b4 	movhi	r2,226
   83784:	10974e04 	addi	r2,r2,23864
   83788:	18800626 	beq	r3,r2,837a4 <SetNCTS+0x11c>
   8378c:	00811b34 	movhi	r2,1132
   83790:	10b48604 	addi	r2,r2,-11752
   83794:	1880061e 	bne	r3,r2,837b0 <SetNCTS+0x128>
    				case 74175000: n = 17836; break;
   83798:	00916b04 	movi	r2,17836
   8379c:	e0bffa15 	stw	r2,-24(fp)
   837a0:	00000606 	br	837bc <SetNCTS+0x134>
    				case 14835000: n = 8918; break;
   837a4:	0088b584 	movi	r2,8918
   837a8:	e0bffa15 	stw	r2,-24(fp)
   837ac:	00000306 	br	837bc <SetNCTS+0x134>
    				default: n = 6272;
   837b0:	00862004 	movi	r2,6272
   837b4:	e0bffa15 	stw	r2,-24(fp)
    			}
    			break;
   837b8:	00009106 	br	83a00 <SetNCTS+0x378>
   837bc:	00009006 	br	83a00 <SetNCTS+0x378>
    		case AUDFS_48KHz:
    			switch (PCLK) {
   837c0:	e0fffc17 	ldw	r3,-16(fp)
   837c4:	008038b4 	movhi	r2,226
   837c8:	10974e04 	addi	r2,r2,23864
   837cc:	18800626 	beq	r3,r2,837e8 <SetNCTS+0x160>
   837d0:	00811b34 	movhi	r2,1132
   837d4:	10b48604 	addi	r2,r2,-11752
   837d8:	1880061e 	bne	r3,r2,837f4 <SetNCTS+0x16c>
    				case 74175000: n = 11648; break;
   837dc:	008b6004 	movi	r2,11648
   837e0:	e0bffa15 	stw	r2,-24(fp)
   837e4:	00000606 	br	83800 <SetNCTS+0x178>
    				case 14835000: n = 5824; break;
   837e8:	0085b004 	movi	r2,5824
   837ec:	e0bffa15 	stw	r2,-24(fp)
   837f0:	00000306 	br	83800 <SetNCTS+0x178>
    				default: n = 6144;
   837f4:	00860004 	movi	r2,6144
   837f8:	e0bffa15 	stw	r2,-24(fp)
    			}
    			break;
   837fc:	00008006 	br	83a00 <SetNCTS+0x378>
   83800:	00007f06 	br	83a00 <SetNCTS+0x378>
    		case AUDFS_88p2KHz:
    			switch (PCLK) {
   83804:	e0fffc17 	ldw	r3,-16(fp)
   83808:	008038b4 	movhi	r2,226
   8380c:	10974e04 	addi	r2,r2,23864
   83810:	18800626 	beq	r3,r2,8382c <SetNCTS+0x1a4>
   83814:	00811b34 	movhi	r2,1132
   83818:	10b48604 	addi	r2,r2,-11752
   8381c:	1880061e 	bne	r3,r2,83838 <SetNCTS+0x1b0>
    				case 74175000: n = 35672; break;
   83820:	00a2d614 	movui	r2,35672
   83824:	e0bffa15 	stw	r2,-24(fp)
   83828:	00000606 	br	83844 <SetNCTS+0x1bc>
    				case 14835000: n = 17836; break;
   8382c:	00916b04 	movi	r2,17836
   83830:	e0bffa15 	stw	r2,-24(fp)
   83834:	00000306 	br	83844 <SetNCTS+0x1bc>
    				default: n = 12544;
   83838:	008c4004 	movi	r2,12544
   8383c:	e0bffa15 	stw	r2,-24(fp)
    			}
    			break;
   83840:	00006f06 	br	83a00 <SetNCTS+0x378>
   83844:	00006e06 	br	83a00 <SetNCTS+0x378>
    		case AUDFS_96KHz:
    			switch (PCLK) {
   83848:	e0fffc17 	ldw	r3,-16(fp)
   8384c:	008038b4 	movhi	r2,226
   83850:	10974e04 	addi	r2,r2,23864
   83854:	18800626 	beq	r3,r2,83870 <SetNCTS+0x1e8>
   83858:	00811b34 	movhi	r2,1132
   8385c:	10b48604 	addi	r2,r2,-11752
   83860:	1880061e 	bne	r3,r2,8387c <SetNCTS+0x1f4>
    				case 74175000: n = 23296; break;
   83864:	0096c004 	movi	r2,23296
   83868:	e0bffa15 	stw	r2,-24(fp)
   8386c:	00000606 	br	83888 <SetNCTS+0x200>
    				case 14835000: n = 11648; break;
   83870:	008b6004 	movi	r2,11648
   83874:	e0bffa15 	stw	r2,-24(fp)
   83878:	00000306 	br	83888 <SetNCTS+0x200>
    				default: n = 12288;
   8387c:	008c0004 	movi	r2,12288
   83880:	e0bffa15 	stw	r2,-24(fp)
    			}
    			break;
   83884:	00005e06 	br	83a00 <SetNCTS+0x378>
   83888:	00005d06 	br	83a00 <SetNCTS+0x378>
    		case AUDFS_176p4KHz:
    			switch (PCLK) {
   8388c:	e0fffc17 	ldw	r3,-16(fp)
   83890:	008038b4 	movhi	r2,226
   83894:	10974e04 	addi	r2,r2,23864
   83898:	18800726 	beq	r3,r2,838b8 <SetNCTS+0x230>
   8389c:	00811b34 	movhi	r2,1132
   838a0:	10b48604 	addi	r2,r2,-11752
   838a4:	1880071e 	bne	r3,r2,838c4 <SetNCTS+0x23c>
    				case 74175000: n = 71344; break;
   838a8:	00800074 	movhi	r2,1
   838ac:	1085ac04 	addi	r2,r2,5808
   838b0:	e0bffa15 	stw	r2,-24(fp)
   838b4:	00000606 	br	838d0 <SetNCTS+0x248>
    				case 14835000: n = 35672; break;
   838b8:	00a2d614 	movui	r2,35672
   838bc:	e0bffa15 	stw	r2,-24(fp)
   838c0:	00000306 	br	838d0 <SetNCTS+0x248>
    				default: n = 25088;
   838c4:	00988004 	movi	r2,25088
   838c8:	e0bffa15 	stw	r2,-24(fp)
    			}
    			break;
   838cc:	00004c06 	br	83a00 <SetNCTS+0x378>
   838d0:	00004b06 	br	83a00 <SetNCTS+0x378>
    		case AUDFS_192KHz:
    			switch (PCLK) {
   838d4:	e0fffc17 	ldw	r3,-16(fp)
   838d8:	008038b4 	movhi	r2,226
   838dc:	10974e04 	addi	r2,r2,23864
   838e0:	18800626 	beq	r3,r2,838fc <SetNCTS+0x274>
   838e4:	00811b34 	movhi	r2,1132
   838e8:	10b48604 	addi	r2,r2,-11752
   838ec:	1880061e 	bne	r3,r2,83908 <SetNCTS+0x280>
    				case 74175000: n = 46592; break;
   838f0:	00ad8014 	movui	r2,46592
   838f4:	e0bffa15 	stw	r2,-24(fp)
   838f8:	00000606 	br	83914 <SetNCTS+0x28c>
    				case 14835000: n = 23296; break;
   838fc:	0096c004 	movi	r2,23296
   83900:	e0bffa15 	stw	r2,-24(fp)
   83904:	00000306 	br	83914 <SetNCTS+0x28c>
    				default: n = 24576;
   83908:	00980004 	movi	r2,24576
   8390c:	e0bffa15 	stw	r2,-24(fp)
    			}
    			break;
   83910:	00003b06 	br	83a00 <SetNCTS+0x378>
   83914:	00003a06 	br	83a00 <SetNCTS+0x378>
    		default: n = MCLK / 2000;
   83918:	e0fffb17 	ldw	r3,-20(fp)
   8391c:	008418b4 	movhi	r2,4194
   83920:	109374c4 	addi	r2,r2,19923
   83924:	1888383a 	mulxuu	r4,r3,r2
   83928:	1885383a 	mul	r2,r3,r2
   8392c:	1021883a 	mov	r16,r2
   83930:	2023883a 	mov	r17,r4
   83934:	8804d1fa 	srli	r2,r17,7
   83938:	e0bffa15 	stw	r2,-24(fp)
   8393c:	00003006 	br	83a00 <SetNCTS+0x378>
    	}
    }
    else
    {
        switch(Fs)
   83940:	e0bffd17 	ldw	r2,-12(fp)
   83944:	108003e8 	cmpgeui	r2,r2,15
   83948:	10002b1e 	bne	r2,zero,839f8 <SetNCTS+0x370>
   8394c:	e0bffd17 	ldw	r2,-12(fp)
   83950:	100690ba 	slli	r3,r2,2
   83954:	00800234 	movhi	r2,8
   83958:	108e5a04 	addi	r2,r2,14696
   8395c:	1885883a 	add	r2,r3,r2
   83960:	10800017 	ldw	r2,0(r2)
   83964:	1000683a 	jmp	r2
   83968:	000839b0 	cmpltui	zero,zero,8422
   8396c:	000839f8 	rdprs	zero,zero,8423
   83970:	000839bc 	xorhi	zero,zero,8422
   83974:	000839a4 	muli	zero,zero,8422
   83978:	000839f8 	rdprs	zero,zero,8423
   8397c:	000839f8 	rdprs	zero,zero,8423
   83980:	000839f8 	rdprs	zero,zero,8423
   83984:	000839f8 	rdprs	zero,zero,8423
   83988:	000839c8 	cmpgei	zero,zero,8423
   8398c:	000839f8 	rdprs	zero,zero,8423
   83990:	000839d4 	movui	zero,8423
   83994:	000839f8 	rdprs	zero,zero,8423
   83998:	000839e0 	cmpeqi	zero,zero,8423
   8399c:	000839f8 	rdprs	zero,zero,8423
   839a0:	000839ec 	andhi	zero,zero,8423
        {
		case AUDFS_32KHz: n = 4096; break;
   839a4:	00840004 	movi	r2,4096
   839a8:	e0bffa15 	stw	r2,-24(fp)
   839ac:	00001406 	br	83a00 <SetNCTS+0x378>
		case AUDFS_44p1KHz: n = 6272; break;
   839b0:	00862004 	movi	r2,6272
   839b4:	e0bffa15 	stw	r2,-24(fp)
   839b8:	00001106 	br	83a00 <SetNCTS+0x378>
		case AUDFS_48KHz: n = 6144; break;
   839bc:	00860004 	movi	r2,6144
   839c0:	e0bffa15 	stw	r2,-24(fp)
   839c4:	00000e06 	br	83a00 <SetNCTS+0x378>
		case AUDFS_88p2KHz: n = 12544; break;
   839c8:	008c4004 	movi	r2,12544
   839cc:	e0bffa15 	stw	r2,-24(fp)
   839d0:	00000b06 	br	83a00 <SetNCTS+0x378>
		case AUDFS_96KHz: n = 12288; break;
   839d4:	008c0004 	movi	r2,12288
   839d8:	e0bffa15 	stw	r2,-24(fp)
   839dc:	00000806 	br	83a00 <SetNCTS+0x378>
		case AUDFS_176p4KHz: n = 25088; break;
   839e0:	00988004 	movi	r2,25088
   839e4:	e0bffa15 	stw	r2,-24(fp)
   839e8:	00000506 	br	83a00 <SetNCTS+0x378>
		case AUDFS_192KHz: n = 24576; break;
   839ec:	00980004 	movi	r2,24576
   839f0:	e0bffa15 	stw	r2,-24(fp)
   839f4:	00000206 	br	83a00 <SetNCTS+0x378>
		default: n = 6144;
   839f8:	00860004 	movi	r2,6144
   839fc:	e0bffa15 	stw	r2,-24(fp)
        }

    }


    ErrorF("N = %ld\n",n) ;
   83a00:	e17ffa17 	ldw	r5,-24(fp)
   83a04:	010002b4 	movhi	r4,10
   83a08:	212f3104 	addi	r4,r4,-17212
   83a0c:	00877a40 	call	877a4 <ErrorF>
    Switch_HDMITX_Bank(1) ;
   83a10:	01400044 	movi	r5,1
   83a14:	010003c4 	movi	r4,15
   83a18:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REGPktAudN0,(BYTE)((n)&0xFF)) ;
   83a1c:	e0bffa17 	ldw	r2,-24(fp)
   83a20:	10803fcc 	andi	r2,r2,255
   83a24:	100b883a 	mov	r5,r2
   83a28:	01000cc4 	movi	r4,51
   83a2c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REGPktAudN1,(BYTE)((n>>8)&0xFF)) ;
   83a30:	e0bffa17 	ldw	r2,-24(fp)
   83a34:	1004d23a 	srli	r2,r2,8
   83a38:	10803fcc 	andi	r2,r2,255
   83a3c:	100b883a 	mov	r5,r2
   83a40:	01000d04 	movi	r4,52
   83a44:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REGPktAudN2,(BYTE)((n>>16)&0xF)) ;
   83a48:	e0bffa17 	ldw	r2,-24(fp)
   83a4c:	1004d43a 	srli	r2,r2,16
   83a50:	108003cc 	andi	r2,r2,15
   83a54:	100b883a 	mov	r5,r2
   83a58:	01000d44 	movi	r4,53
   83a5c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    Switch_HDMITX_Bank(0) ;
   83a60:	000b883a 	mov	r5,zero
   83a64:	010003c4 	movi	r4,15
   83a68:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    HDMITX_WriteI2C_Byte(REG_TX_PKT_SINGLE_CTRL,0) ; // D[1] = 0,HW auto count CTS
   83a6c:	000b883a 	mov	r5,zero
   83a70:	01003144 	movi	r4,197
   83a74:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    HDMITX_SetREG_Byte(REG_TX_CLK_CTRL0,~M_EXT_MCLK_SEL,B_EXT_256FS) ;
   83a78:	01001604 	movi	r4,88
   83a7c:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83a80:	1007883a 	mov	r3,r2
   83a84:	00bffcc4 	movi	r2,-13
   83a88:	1884703a 	and	r2,r3,r2
   83a8c:	10800114 	ori	r2,r2,4
   83a90:	10803fcc 	andi	r2,r2,255
   83a94:	100b883a 	mov	r5,r2
   83a98:	01001604 	movi	r4,88
   83a9c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    return ER_SUCCESS ;
   83aa0:	0005883a 	mov	r2,zero
}
   83aa4:	e6fffe04 	addi	sp,fp,-8
   83aa8:	dfc00317 	ldw	ra,12(sp)
   83aac:	df000217 	ldw	fp,8(sp)
   83ab0:	dc400117 	ldw	r17,4(sp)
   83ab4:	dc000017 	ldw	r16,0(sp)
   83ab8:	dec00404 	addi	sp,sp,16
   83abc:	f800283a 	ret

00083ac0 <ClearDDCFIFO>:
// Side-Effect: DDC master will set to be HOST.
//////////////////////////////////////////////////////////////////////

static void
ClearDDCFIFO()
{
   83ac0:	defffe04 	addi	sp,sp,-8
   83ac4:	dfc00115 	stw	ra,4(sp)
   83ac8:	df000015 	stw	fp,0(sp)
   83acc:	d839883a 	mov	fp,sp
    HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERDDC|B_MASTERHOST) ;
   83ad0:	01400044 	movi	r5,1
   83ad4:	01000404 	movi	r4,16
   83ad8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_FIFO_CLR) ;
   83adc:	01400244 	movi	r5,9
   83ae0:	01000544 	movi	r4,21
   83ae4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   83ae8:	0001883a 	nop
   83aec:	e037883a 	mov	sp,fp
   83af0:	dfc00117 	ldw	ra,4(sp)
   83af4:	df000017 	ldw	fp,0(sp)
   83af8:	dec00204 	addi	sp,sp,8
   83afc:	f800283a 	ret

00083b00 <GenerateDDCSCLK>:

static void
GenerateDDCSCLK()
{
   83b00:	defffe04 	addi	sp,sp,-8
   83b04:	dfc00115 	stw	ra,4(sp)
   83b08:	df000015 	stw	fp,0(sp)
   83b0c:	d839883a 	mov	fp,sp
    HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERDDC|B_MASTERHOST) ;
   83b10:	01400044 	movi	r5,1
   83b14:	01000404 	movi	r4,16
   83b18:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_GEN_SCLCLK) ;
   83b1c:	01400284 	movi	r5,10
   83b20:	01000544 	movi	r4,21
   83b24:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   83b28:	0001883a 	nop
   83b2c:	e037883a 	mov	sp,fp
   83b30:	dfc00117 	ldw	ra,4(sp)
   83b34:	df000017 	ldw	fp,0(sp)
   83b38:	dec00204 	addi	sp,sp,8
   83b3c:	f800283a 	ret

00083b40 <AbortDDC>:
// Side-Effect:
//////////////////////////////////////////////////////////////////////

static void
AbortDDC()
{
   83b40:	defffc04 	addi	sp,sp,-16
   83b44:	dfc00315 	stw	ra,12(sp)
   83b48:	df000215 	stw	fp,8(sp)
   83b4c:	df000204 	addi	fp,sp,8
    BYTE CPDesire,SWReset,DDCMaster ;
    BYTE uc, timeout ;
    // save the SW reset,DDC master,and CP Desire setting.
    SWReset = HDMITX_ReadI2C_Byte(REG_TX_SW_RST) ;
   83b50:	01000104 	movi	r4,4
   83b54:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83b58:	e0bffe45 	stb	r2,-7(fp)
    CPDesire = HDMITX_ReadI2C_Byte(REG_TX_HDCP_DESIRE) ;
   83b5c:	01000804 	movi	r4,32
   83b60:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83b64:	e0bffe85 	stb	r2,-6(fp)
    DDCMaster = HDMITX_ReadI2C_Byte(REG_TX_DDC_MASTER_CTRL) ;
   83b68:	01000404 	movi	r4,16
   83b6c:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83b70:	e0bffec5 	stb	r2,-5(fp)


    HDMITX_WriteI2C_Byte(REG_TX_HDCP_DESIRE,CPDesire&(~B_CPDESIRE)) ; // @emily change order
   83b74:	e0bffe83 	ldbu	r2,-6(fp)
   83b78:	10803f8c 	andi	r2,r2,254
   83b7c:	100b883a 	mov	r5,r2
   83b80:	01000804 	movi	r4,32
   83b84:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_SW_RST,SWReset|B_HDCP_RST) ;		 // @emily change order
   83b88:	e0bffe43 	ldbu	r2,-7(fp)
   83b8c:	10800054 	ori	r2,r2,1
   83b90:	10803fcc 	andi	r2,r2,255
   83b94:	100b883a 	mov	r5,r2
   83b98:	01000104 	movi	r4,4
   83b9c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERDDC|B_MASTERHOST) ;
   83ba0:	01400044 	movi	r5,1
   83ba4:	01000404 	movi	r4,16
   83ba8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_DDC_ABORT) ;
   83bac:	014003c4 	movi	r5,15
   83bb0:	01000544 	movi	r4,21
   83bb4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    for( timeout = 0 ; timeout < 200 ; timeout++ )
   83bb8:	e03ffe05 	stb	zero,-8(fp)
   83bbc:	00001606 	br	83c18 <AbortDDC+0xd8>
    {
        uc = HDMITX_ReadI2C_Byte(REG_TX_DDC_STATUS) ;
   83bc0:	01000584 	movi	r4,22
   83bc4:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83bc8:	e0bfff05 	stb	r2,-4(fp)
        if (uc&B_DDC_DONE)
   83bcc:	e0bfff03 	ldbu	r2,-4(fp)
   83bd0:	10803fcc 	andi	r2,r2,255
   83bd4:	1080201c 	xori	r2,r2,128
   83bd8:	10bfe004 	addi	r2,r2,-128
   83bdc:	10001216 	blt	r2,zero,83c28 <AbortDDC+0xe8>
        {
            break ; // success
        }
        
        if( uc & (B_DDC_NOACK|B_DDC_WAITBUS|B_DDC_ARBILOSE) )
   83be0:	e0bfff03 	ldbu	r2,-4(fp)
   83be4:	10800e0c 	andi	r2,r2,56
   83be8:	10000626 	beq	r2,zero,83c04 <AbortDDC+0xc4>
        {
            ErrorF("AbortDDC Fail by reg16=%02X\n",uc) ;
   83bec:	e0bfff03 	ldbu	r2,-4(fp)
   83bf0:	100b883a 	mov	r5,r2
   83bf4:	010002b4 	movhi	r4,10
   83bf8:	212f3404 	addi	r4,r4,-17200
   83bfc:	00877a40 	call	877a4 <ErrorF>
            break ;
   83c00:	00000a06 	br	83c2c <AbortDDC+0xec>
        }
        DelayMS(1) ; // delay 1 ms to stable.
   83c04:	01000044 	movi	r4,1
   83c08:	00877380 	call	87738 <DelayMS>
    HDMITX_WriteI2C_Byte(REG_TX_HDCP_DESIRE,CPDesire&(~B_CPDESIRE)) ; // @emily change order
    HDMITX_WriteI2C_Byte(REG_TX_SW_RST,SWReset|B_HDCP_RST) ;		 // @emily change order
    HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERDDC|B_MASTERHOST) ;
    HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_DDC_ABORT) ;

    for( timeout = 0 ; timeout < 200 ; timeout++ )
   83c0c:	e0bffe03 	ldbu	r2,-8(fp)
   83c10:	10800044 	addi	r2,r2,1
   83c14:	e0bffe05 	stb	r2,-8(fp)
   83c18:	e0bffe03 	ldbu	r2,-8(fp)
   83c1c:	10803230 	cmpltui	r2,r2,200
   83c20:	103fe71e 	bne	r2,zero,83bc0 <__alt_data_end+0xfffb3d00>
   83c24:	00000106 	br	83c2c <AbortDDC+0xec>
    {
        uc = HDMITX_ReadI2C_Byte(REG_TX_DDC_STATUS) ;
        if (uc&B_DDC_DONE)
        {
            break ; // success
   83c28:	0001883a 	nop
        }
        DelayMS(1) ; // delay 1 ms to stable.
    }

    // restore the SW reset,DDC master,and CP Desire setting.
    HDMITX_WriteI2C_Byte(REG_TX_SW_RST,SWReset) ;
   83c2c:	e0bffe43 	ldbu	r2,-7(fp)
   83c30:	100b883a 	mov	r5,r2
   83c34:	01000104 	movi	r4,4
   83c38:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_HDCP_DESIRE,CPDesire) ;
   83c3c:	e0bffe83 	ldbu	r2,-6(fp)
   83c40:	100b883a 	mov	r5,r2
   83c44:	01000804 	movi	r4,32
   83c48:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,DDCMaster) ;
   83c4c:	e0bffec3 	ldbu	r2,-5(fp)
   83c50:	100b883a 	mov	r5,r2
   83c54:	01000404 	movi	r4,16
   83c58:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   83c5c:	0001883a 	nop
   83c60:	e037883a 	mov	sp,fp
   83c64:	dfc00117 	ldw	ra,4(sp)
   83c68:	df000017 	ldw	fp,0(sp)
   83c6c:	dec00204 	addi	sp,sp,8
   83c70:	f800283a 	ret

00083c74 <ReadEDID>:
// Side-Effect: DDC master will set to be HOST. DDC FIFO will be used and dirty.
//////////////////////////////////////////////////////////////////////

static SYS_STATUS
ReadEDID(BYTE *pData,BYTE bSegment,BYTE offset,SHORT Count)
{
   83c74:	defff504 	addi	sp,sp,-44
   83c78:	dfc00a15 	stw	ra,40(sp)
   83c7c:	df000915 	stw	fp,36(sp)
   83c80:	dc000815 	stw	r16,32(sp)
   83c84:	df000904 	addi	fp,sp,36
   83c88:	e13ffb15 	stw	r4,-20(fp)
   83c8c:	2809883a 	mov	r4,r5
   83c90:	3007883a 	mov	r3,r6
   83c94:	3805883a 	mov	r2,r7
   83c98:	e13ffc05 	stb	r4,-16(fp)
   83c9c:	e0fffd05 	stb	r3,-12(fp)
   83ca0:	e0bffe0d 	sth	r2,-8(fp)
    SHORT RemainedCount,ReqCount ;
    BYTE bCurrOffset ;
    SHORT TimeOut ;
    BYTE *pBuff = pData ;
   83ca4:	e0bffb17 	ldw	r2,-20(fp)
   83ca8:	e0bff915 	stw	r2,-28(fp)
    BYTE ucdata ;

    // ErrorF("ReadEDID(%08lX,%d,%d,%d)\n",(ULONG)pData,bSegment,offset,Count) ;
    if(!pData)
   83cac:	e0bffb17 	ldw	r2,-20(fp)
   83cb0:	1000071e 	bne	r2,zero,83cd0 <ReadEDID+0x5c>
    {
        ErrorF("ReadEDID(): Invallid pData pointer %08lX\n",(ULONG)pData) ;
   83cb4:	e0bffb17 	ldw	r2,-20(fp)
   83cb8:	100b883a 	mov	r5,r2
   83cbc:	010002b4 	movhi	r4,10
   83cc0:	212f3c04 	addi	r4,r4,-17168
   83cc4:	00877a40 	call	877a4 <ErrorF>
        return ER_FAIL ;
   83cc8:	00800044 	movi	r2,1
   83ccc:	00009b06 	br	83f3c <ReadEDID+0x2c8>
    }

    if(HDMITX_ReadI2C_Byte(REG_TX_INT_STAT1) & B_INT_DDC_BUS_HANG)
   83cd0:	01000184 	movi	r4,6
   83cd4:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83cd8:	10803fcc 	andi	r2,r2,255
   83cdc:	1080010c 	andi	r2,r2,4
   83ce0:	10000426 	beq	r2,zero,83cf4 <ReadEDID+0x80>
    {
    	ErrorF("Called AboutDDC()\n") ;
   83ce4:	010002b4 	movhi	r4,10
   83ce8:	212f4704 	addi	r4,r4,-17124
   83cec:	00877a40 	call	877a4 <ErrorF>
        AbortDDC() ;
   83cf0:	0083b400 	call	83b40 <AbortDDC>

    }

    ClearDDCFIFO() ;
   83cf4:	0083ac00 	call	83ac0 <ClearDDCFIFO>

    RemainedCount = Count ;
   83cf8:	e0bffe0b 	ldhu	r2,-8(fp)
   83cfc:	e0bff70d 	sth	r2,-36(fp)
    bCurrOffset = offset ;
   83d00:	e0bffd03 	ldbu	r2,-12(fp)
   83d04:	e0bff805 	stb	r2,-32(fp)

    Switch_HDMITX_Bank(0) ;
   83d08:	000b883a 	mov	r5,zero
   83d0c:	010003c4 	movi	r4,15
   83d10:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    while(RemainedCount > 0)
   83d14:	00008606 	br	83f30 <ReadEDID+0x2bc>
    {

        ReqCount = (RemainedCount > DDC_FIFO_MAXREQ)?DDC_FIFO_MAXREQ:RemainedCount ;
   83d18:	e0bff70b 	ldhu	r2,-36(fp)
   83d1c:	10ffffcc 	andi	r3,r2,65535
   83d20:	18e0001c 	xori	r3,r3,32768
   83d24:	18e00004 	addi	r3,r3,-32768
   83d28:	18c00850 	cmplti	r3,r3,33
   83d2c:	1800011e 	bne	r3,zero,83d34 <ReadEDID+0xc0>
   83d30:	00800804 	movi	r2,32
   83d34:	e0bff78d 	sth	r2,-34(fp)
        ErrorF("ReadEDID(): ReqCount = %d,bCurrOffset = %d\n",ReqCount,bCurrOffset) ;
   83d38:	e0bff78f 	ldh	r2,-34(fp)
   83d3c:	e0fff803 	ldbu	r3,-32(fp)
   83d40:	180d883a 	mov	r6,r3
   83d44:	100b883a 	mov	r5,r2
   83d48:	010002b4 	movhi	r4,10
   83d4c:	212f4c04 	addi	r4,r4,-17104
   83d50:	00877a40 	call	877a4 <ErrorF>

        HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERDDC|B_MASTERHOST) ;
   83d54:	01400044 	movi	r5,1
   83d58:	01000404 	movi	r4,16
   83d5c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_FIFO_CLR) ;
   83d60:	01400244 	movi	r5,9
   83d64:	01000544 	movi	r4,21
   83d68:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

        for(TimeOut = 0 ; TimeOut < 200 ; TimeOut++)
   83d6c:	e03ff88d 	sth	zero,-30(fp)
   83d70:	00001906 	br	83dd8 <ReadEDID+0x164>
    	{
		    ucdata = HDMITX_ReadI2C_Byte(REG_TX_DDC_STATUS) ;
   83d74:	01000584 	movi	r4,22
   83d78:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83d7c:	e0bffa05 	stb	r2,-24(fp)
		    
		    if(ucdata&B_DDC_DONE)
   83d80:	e0bffa03 	ldbu	r2,-24(fp)
   83d84:	10803fcc 	andi	r2,r2,255
   83d88:	1080201c 	xori	r2,r2,128
   83d8c:	10bfe004 	addi	r2,r2,-128
   83d90:	10001516 	blt	r2,zero,83de8 <ReadEDID+0x174>
		    {
		        break ;  
		    }
		    
		    if((ucdata & B_DDC_ERROR)||(HDMITX_ReadI2C_Byte(REG_TX_INT_STAT1) & B_INT_DDC_BUS_HANG))
   83d94:	e0bffa03 	ldbu	r2,-24(fp)
   83d98:	10800e0c 	andi	r2,r2,56
   83d9c:	1000051e 	bne	r2,zero,83db4 <ReadEDID+0x140>
   83da0:	01000184 	movi	r4,6
   83da4:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83da8:	10803fcc 	andi	r2,r2,255
   83dac:	1080010c 	andi	r2,r2,4
   83db0:	10000626 	beq	r2,zero,83dcc <ReadEDID+0x158>
		    {
		    	ErrorF("Called AboutDDC()\n") ;
   83db4:	010002b4 	movhi	r4,10
   83db8:	212f4704 	addi	r4,r4,-17124
   83dbc:	00877a40 	call	877a4 <ErrorF>
		        AbortDDC() ;
   83dc0:	0083b400 	call	83b40 <AbortDDC>
				return ER_FAIL ;
   83dc4:	00800044 	movi	r2,1
   83dc8:	00005c06 	br	83f3c <ReadEDID+0x2c8>
        ErrorF("ReadEDID(): ReqCount = %d,bCurrOffset = %d\n",ReqCount,bCurrOffset) ;

        HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERDDC|B_MASTERHOST) ;
        HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_FIFO_CLR) ;

        for(TimeOut = 0 ; TimeOut < 200 ; TimeOut++)
   83dcc:	e0bff88b 	ldhu	r2,-30(fp)
   83dd0:	10800044 	addi	r2,r2,1
   83dd4:	e0bff88d 	sth	r2,-30(fp)
   83dd8:	e0bff88f 	ldh	r2,-30(fp)
   83ddc:	10803210 	cmplti	r2,r2,200
   83de0:	103fe41e 	bne	r2,zero,83d74 <__alt_data_end+0xfffb3eb4>
   83de4:	00000106 	br	83dec <ReadEDID+0x178>
    	{
		    ucdata = HDMITX_ReadI2C_Byte(REG_TX_DDC_STATUS) ;
		    
		    if(ucdata&B_DDC_DONE)
		    {
		        break ;  
   83de8:	0001883a 	nop
		        AbortDDC() ;
				return ER_FAIL ;
		    }
    	}

        HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERDDC|B_MASTERHOST) ;
   83dec:	01400044 	movi	r5,1
   83df0:	01000404 	movi	r4,16
   83df4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_DDC_HEADER,DDC_EDID_ADDRESS) ; // for EDID ucdata get
   83df8:	01402804 	movi	r5,160
   83dfc:	01000444 	movi	r4,17
   83e00:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_DDC_REQOFF,bCurrOffset) ;
   83e04:	e0bff803 	ldbu	r2,-32(fp)
   83e08:	100b883a 	mov	r5,r2
   83e0c:	01000484 	movi	r4,18
   83e10:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_DDC_REQCOUNT,(BYTE)ReqCount) ;
   83e14:	e0bff78b 	ldhu	r2,-34(fp)
   83e18:	10803fcc 	andi	r2,r2,255
   83e1c:	100b883a 	mov	r5,r2
   83e20:	010004c4 	movi	r4,19
   83e24:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_DDC_EDIDSEG,bSegment) ;
   83e28:	e0bffc03 	ldbu	r2,-16(fp)
   83e2c:	100b883a 	mov	r5,r2
   83e30:	01000504 	movi	r4,20
   83e34:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_EDID_READ) ;
   83e38:	014000c4 	movi	r5,3
   83e3c:	01000544 	movi	r4,21
   83e40:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

        bCurrOffset += ReqCount ;
   83e44:	e0bff78b 	ldhu	r2,-34(fp)
   83e48:	1007883a 	mov	r3,r2
   83e4c:	e0bff803 	ldbu	r2,-32(fp)
   83e50:	1885883a 	add	r2,r3,r2
   83e54:	e0bff805 	stb	r2,-32(fp)
        RemainedCount -= ReqCount ;
   83e58:	e0fff70b 	ldhu	r3,-36(fp)
   83e5c:	e0bff78b 	ldhu	r2,-34(fp)
   83e60:	1885c83a 	sub	r2,r3,r2
   83e64:	e0bff70d 	sth	r2,-36(fp)

        for(TimeOut = 250 ; TimeOut > 0 ; TimeOut --)
   83e68:	00803e84 	movi	r2,250
   83e6c:	e0bff88d 	sth	r2,-30(fp)
   83e70:	00001706 	br	83ed0 <ReadEDID+0x25c>
        {
            DelayMS(1) ;
   83e74:	01000044 	movi	r4,1
   83e78:	00877380 	call	87738 <DelayMS>
            ucdata = HDMITX_ReadI2C_Byte(REG_TX_DDC_STATUS) ;
   83e7c:	01000584 	movi	r4,22
   83e80:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83e84:	e0bffa05 	stb	r2,-24(fp)
            if(ucdata & B_DDC_DONE)
   83e88:	e0bffa03 	ldbu	r2,-24(fp)
   83e8c:	10803fcc 	andi	r2,r2,255
   83e90:	1080201c 	xori	r2,r2,128
   83e94:	10bfe004 	addi	r2,r2,-128
   83e98:	10001016 	blt	r2,zero,83edc <ReadEDID+0x268>
            {
                break ;
            }

            if(ucdata & B_DDC_ERROR)
   83e9c:	e0bffa03 	ldbu	r2,-24(fp)
   83ea0:	10800e0c 	andi	r2,r2,56
   83ea4:	10000726 	beq	r2,zero,83ec4 <ReadEDID+0x250>
            {
                ErrorF("ReadEDID(): DDC_STATUS = %02X,fail.\n",ucdata) ;
   83ea8:	e0bffa03 	ldbu	r2,-24(fp)
   83eac:	100b883a 	mov	r5,r2
   83eb0:	010002b4 	movhi	r4,10
   83eb4:	212f5704 	addi	r4,r4,-17060
   83eb8:	00877a40 	call	877a4 <ErrorF>
                return ER_FAIL ;
   83ebc:	00800044 	movi	r2,1
   83ec0:	00001e06 	br	83f3c <ReadEDID+0x2c8>
        HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_EDID_READ) ;

        bCurrOffset += ReqCount ;
        RemainedCount -= ReqCount ;

        for(TimeOut = 250 ; TimeOut > 0 ; TimeOut --)
   83ec4:	e0bff88b 	ldhu	r2,-30(fp)
   83ec8:	10bfffc4 	addi	r2,r2,-1
   83ecc:	e0bff88d 	sth	r2,-30(fp)
   83ed0:	e0bff88f 	ldh	r2,-30(fp)
   83ed4:	00bfe716 	blt	zero,r2,83e74 <__alt_data_end+0xfffb3fb4>
   83ed8:	00000106 	br	83ee0 <ReadEDID+0x26c>
        {
            DelayMS(1) ;
            ucdata = HDMITX_ReadI2C_Byte(REG_TX_DDC_STATUS) ;
            if(ucdata & B_DDC_DONE)
            {
                break ;
   83edc:	0001883a 	nop
                ErrorF("ReadEDID(): DDC_STATUS = %02X,fail.\n",ucdata) ;
                return ER_FAIL ;
            }
        }

        if(TimeOut == 0)
   83ee0:	e0bff88f 	ldh	r2,-30(fp)
   83ee4:	1000071e 	bne	r2,zero,83f04 <ReadEDID+0x290>
        {
            ErrorF("ReadEDID(): DDC TimeOut. \n",ucdata) ;
   83ee8:	e0bffa03 	ldbu	r2,-24(fp)
   83eec:	100b883a 	mov	r5,r2
   83ef0:	010002b4 	movhi	r4,10
   83ef4:	212f6104 	addi	r4,r4,-17020
   83ef8:	00877a40 	call	877a4 <ErrorF>
            return ER_FAIL ;
   83efc:	00800044 	movi	r2,1
   83f00:	00000e06 	br	83f3c <ReadEDID+0x2c8>
        }

        do
        {
            *(pBuff++) = HDMITX_ReadI2C_Byte(REG_TX_DDC_READFIFO) ;
   83f04:	e43ff917 	ldw	r16,-28(fp)
   83f08:	80800044 	addi	r2,r16,1
   83f0c:	e0bff915 	stw	r2,-28(fp)
   83f10:	010005c4 	movi	r4,23
   83f14:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83f18:	80800005 	stb	r2,0(r16)
            ReqCount -- ;
   83f1c:	e0bff78b 	ldhu	r2,-34(fp)
   83f20:	10bfffc4 	addi	r2,r2,-1
   83f24:	e0bff78d 	sth	r2,-34(fp)
        }while(ReqCount > 0) ;
   83f28:	e0bff78f 	ldh	r2,-34(fp)
   83f2c:	00bff516 	blt	zero,r2,83f04 <__alt_data_end+0xfffb4044>
    RemainedCount = Count ;
    bCurrOffset = offset ;

    Switch_HDMITX_Bank(0) ;

    while(RemainedCount > 0)
   83f30:	e0bff70f 	ldh	r2,-36(fp)
   83f34:	00bf7816 	blt	zero,r2,83d18 <__alt_data_end+0xfffb3e58>
            ReqCount -- ;
        }while(ReqCount > 0) ;

    }

    return ER_SUCCESS ;
   83f38:	0005883a 	mov	r2,zero
}
   83f3c:	e6ffff04 	addi	sp,fp,-4
   83f40:	dfc00217 	ldw	ra,8(sp)
   83f44:	df000117 	ldw	fp,4(sp)
   83f48:	dc000017 	ldw	r16,0(sp)
   83f4c:	dec00304 	addi	sp,sp,12
   83f50:	f800283a 	ret

00083f54 <HDCP_ClearAuthInterrupt>:
//////////////////////////////////////////////////////////////////////
// Authentication
//////////////////////////////////////////////////////////////////////
static void
HDCP_ClearAuthInterrupt()
{
   83f54:	defffd04 	addi	sp,sp,-12
   83f58:	dfc00215 	stw	ra,8(sp)
   83f5c:	df000115 	stw	fp,4(sp)
   83f60:	df000104 	addi	fp,sp,4
    BYTE uc ;
    uc = HDMITX_ReadI2C_Byte(REG_TX_INT_MASK2) & (~(B_KSVLISTCHK_MASK|B_T_AUTH_DONE_MASK|B_AUTH_FAIL_MASK));
   83f64:	01000284 	movi	r4,10
   83f68:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83f6c:	1007883a 	mov	r3,r2
   83f70:	00bffe04 	movi	r2,-8
   83f74:	1884703a 	and	r2,r3,r2
   83f78:	e0bfff05 	stb	r2,-4(fp)
    HDMITX_WriteI2C_Byte(REG_TX_INT_CLR0,B_CLR_AUTH_FAIL|B_CLR_AUTH_DONE|B_CLR_KSVLISTCHK) ;
   83f7c:	01400704 	movi	r5,28
   83f80:	01000304 	movi	r4,12
   83f84:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_INT_CLR1,0) ;
   83f88:	000b883a 	mov	r5,zero
   83f8c:	01000344 	movi	r4,13
   83f90:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_SYS_STATUS,B_INTACTDONE) ;
   83f94:	01400044 	movi	r5,1
   83f98:	01000384 	movi	r4,14
   83f9c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   83fa0:	0001883a 	nop
   83fa4:	e037883a 	mov	sp,fp
   83fa8:	dfc00117 	ldw	ra,4(sp)
   83fac:	df000017 	ldw	fp,0(sp)
   83fb0:	dec00204 	addi	sp,sp,8
   83fb4:	f800283a 	ret

00083fb8 <HDCP_ResetAuth>:

static void
HDCP_ResetAuth()
{
   83fb8:	defffe04 	addi	sp,sp,-8
   83fbc:	dfc00115 	stw	ra,4(sp)
   83fc0:	df000015 	stw	fp,0(sp)
   83fc4:	d839883a 	mov	fp,sp
    HDMITX_WriteI2C_Byte(REG_TX_LISTCTRL,0) ;
   83fc8:	000b883a 	mov	r5,zero
   83fcc:	01000884 	movi	r4,34
   83fd0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_HDCP_DESIRE,0) ;
   83fd4:	000b883a 	mov	r5,zero
   83fd8:	01000804 	movi	r4,32
   83fdc:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_OrREG_Byte(REG_TX_SW_RST,B_HDCP_RST) ;
   83fe0:	01000104 	movi	r4,4
   83fe4:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   83fe8:	10800054 	ori	r2,r2,1
   83fec:	10803fcc 	andi	r2,r2,255
   83ff0:	100b883a 	mov	r5,r2
   83ff4:	01000104 	movi	r4,4
   83ff8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERDDC|B_MASTERHOST) ;
   83ffc:	01400044 	movi	r5,1
   84000:	01000404 	movi	r4,16
   84004:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDCP_ClearAuthInterrupt() ;
   84008:	0083f540 	call	83f54 <HDCP_ClearAuthInterrupt>
    AbortDDC() ;
   8400c:	0083b400 	call	83b40 <AbortDDC>
}
   84010:	0001883a 	nop
   84014:	e037883a 	mov	sp,fp
   84018:	dfc00117 	ldw	ra,4(sp)
   8401c:	df000017 	ldw	fp,0(sp)
   84020:	dec00204 	addi	sp,sp,8
   84024:	f800283a 	ret

00084028 <HDCP_EnableEncryption>:
// Side-Effect: register bank will reset to zero.
//////////////////////////////////////////////////////////////////////

static SYS_STATUS
HDCP_EnableEncryption()
{
   84028:	defffe04 	addi	sp,sp,-8
   8402c:	dfc00115 	stw	ra,4(sp)
   84030:	df000015 	stw	fp,0(sp)
   84034:	d839883a 	mov	fp,sp
    Switch_HDMITX_Bank(0) ;
   84038:	000b883a 	mov	r5,zero
   8403c:	010003c4 	movi	r4,15
   84040:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	return HDMITX_WriteI2C_Byte(REG_TX_ENCRYPTION,B_ENABLE_ENCRYPTION);
   84044:	000b883a 	mov	r5,zero
   84048:	01003104 	movi	r4,196
   8404c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   84050:	e037883a 	mov	sp,fp
   84054:	dfc00117 	ldw	ra,4(sp)
   84058:	df000017 	ldw	fp,0(sp)
   8405c:	dec00204 	addi	sp,sp,8
   84060:	f800283a 	ret

00084064 <HDCP_Auth_Fire>:
// Side-Effect: N/A
//////////////////////////////////////////////////////////////////////

static void
HDCP_Auth_Fire()
{
   84064:	defffe04 	addi	sp,sp,-8
   84068:	dfc00115 	stw	ra,4(sp)
   8406c:	df000015 	stw	fp,0(sp)
   84070:	d839883a 	mov	fp,sp
    // ErrorF("HDCP_Auth_Fire():\n") ;
    HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERDDC|B_MASTERHDCP) ; // MASTERHDCP,no need command but fire.
   84074:	000b883a 	mov	r5,zero
   84078:	01000404 	movi	r4,16
   8407c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_AUTHFIRE,1);
   84080:	01400044 	movi	r5,1
   84084:	01000844 	movi	r4,33
   84088:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   8408c:	0001883a 	nop
   84090:	e037883a 	mov	sp,fp
   84094:	dfc00117 	ldw	ra,4(sp)
   84098:	df000017 	ldw	fp,0(sp)
   8409c:	dec00204 	addi	sp,sp,8
   840a0:	f800283a 	ret

000840a4 <HDCP_StartAnCipher>:
// Side-Effect: N/A
//////////////////////////////////////////////////////////////////////

static void
HDCP_StartAnCipher()
{
   840a4:	defffe04 	addi	sp,sp,-8
   840a8:	dfc00115 	stw	ra,4(sp)
   840ac:	df000015 	stw	fp,0(sp)
   840b0:	d839883a 	mov	fp,sp
    HDMITX_WriteI2C_Byte(REG_TX_AN_GENERATE,B_START_CIPHER_GEN) ;
   840b4:	01400044 	movi	r5,1
   840b8:	010007c4 	movi	r4,31
   840bc:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    DelayMS(1) ; // delay 1 ms
   840c0:	01000044 	movi	r4,1
   840c4:	00877380 	call	87738 <DelayMS>
}
   840c8:	0001883a 	nop
   840cc:	e037883a 	mov	sp,fp
   840d0:	dfc00117 	ldw	ra,4(sp)
   840d4:	df000017 	ldw	fp,0(sp)
   840d8:	dec00204 	addi	sp,sp,8
   840dc:	f800283a 	ret

000840e0 <HDCP_StopAnCipher>:
// Side-Effect: N/A
//////////////////////////////////////////////////////////////////////

static void
HDCP_StopAnCipher()
{
   840e0:	defffe04 	addi	sp,sp,-8
   840e4:	dfc00115 	stw	ra,4(sp)
   840e8:	df000015 	stw	fp,0(sp)
   840ec:	d839883a 	mov	fp,sp
    HDMITX_WriteI2C_Byte(REG_TX_AN_GENERATE,B_STOP_CIPHER_GEN) ;
   840f0:	000b883a 	mov	r5,zero
   840f4:	010007c4 	movi	r4,31
   840f8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   840fc:	0001883a 	nop
   84100:	e037883a 	mov	sp,fp
   84104:	dfc00117 	ldw	ra,4(sp)
   84108:	df000017 	ldw	fp,0(sp)
   8410c:	dec00204 	addi	sp,sp,8
   84110:	f800283a 	ret

00084114 <HDCP_GenerateAn>:
// Side-Effect:
//////////////////////////////////////////////////////////////////////

static void
HDCP_GenerateAn()
{
   84114:	defffc04 	addi	sp,sp,-16
   84118:	dfc00315 	stw	ra,12(sp)
   8411c:	df000215 	stw	fp,8(sp)
   84120:	df000204 	addi	fp,sp,8
    BYTE Data[8] ;

    HDCP_StartAnCipher() ;
   84124:	00840a40 	call	840a4 <HDCP_StartAnCipher>
    // HDMITX_WriteI2C_Byte(REG_TX_AN_GENERATE,B_START_CIPHER_GEN) ;
    // DelayMS(1) ; // delay 1 ms
    // HDMITX_WriteI2C_Byte(REG_TX_AN_GENERATE,B_STOP_CIPHER_GEN) ;

    HDCP_StopAnCipher() ;
   84128:	00840e00 	call	840e0 <HDCP_StopAnCipher>

    Switch_HDMITX_Bank(0) ;
   8412c:	000b883a 	mov	r5,zero
   84130:	010003c4 	movi	r4,15
   84134:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    // new An is ready in reg30
    HDMITX_ReadI2C_ByteN(REG_TX_AN_GEN,Data,8) ;
   84138:	01800204 	movi	r6,8
   8413c:	e17ffe04 	addi	r5,fp,-8
   84140:	01000c04 	movi	r4,48
   84144:	0087af40 	call	87af4 <HDMITX_ReadI2C_ByteN>
    HDMITX_WriteI2C_ByteN(REG_TX_AN,Data,8) ;
   84148:	01800204 	movi	r6,8
   8414c:	e17ffe04 	addi	r5,fp,-8
   84150:	01000a04 	movi	r4,40
   84154:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>

}
   84158:	0001883a 	nop
   8415c:	e037883a 	mov	sp,fp
   84160:	dfc00117 	ldw	ra,4(sp)
   84164:	df000017 	ldw	fp,0(sp)
   84168:	dec00204 	addi	sp,sp,8
   8416c:	f800283a 	ret

00084170 <HDCP_GetBCaps>:
// Side-Effect:
//////////////////////////////////////////////////////////////////////

static SYS_STATUS
HDCP_GetBCaps(PBYTE pBCaps ,PUSHORT pBStatus)
{
   84170:	defffb04 	addi	sp,sp,-20
   84174:	dfc00415 	stw	ra,16(sp)
   84178:	df000315 	stw	fp,12(sp)
   8417c:	df000304 	addi	fp,sp,12
   84180:	e13ffe15 	stw	r4,-8(fp)
   84184:	e17fff15 	stw	r5,-4(fp)
    BYTE ucdata ;
    BYTE TimeOut ;

    Switch_HDMITX_Bank(0) ;
   84188:	000b883a 	mov	r5,zero
   8418c:	010003c4 	movi	r4,15
   84190:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERDDC|B_MASTERHOST) ;
   84194:	01400044 	movi	r5,1
   84198:	01000404 	movi	r4,16
   8419c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_HEADER,DDC_HDCP_ADDRESS) ;
   841a0:	01401d04 	movi	r5,116
   841a4:	01000444 	movi	r4,17
   841a8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQOFF,0x40) ; // BCaps offset
   841ac:	01401004 	movi	r5,64
   841b0:	01000484 	movi	r4,18
   841b4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQCOUNT,3) ;
   841b8:	014000c4 	movi	r5,3
   841bc:	010004c4 	movi	r4,19
   841c0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_DDC_SEQ_BURSTREAD) ;
   841c4:	000b883a 	mov	r5,zero
   841c8:	01000544 	movi	r4,21
   841cc:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    for(TimeOut = 200 ; TimeOut > 0 ; TimeOut --)
   841d0:	00bff204 	movi	r2,-56
   841d4:	e0bffd05 	stb	r2,-12(fp)
   841d8:	00001706 	br	84238 <HDCP_GetBCaps+0xc8>
    {
        DelayMS(1) ;
   841dc:	01000044 	movi	r4,1
   841e0:	00877380 	call	87738 <DelayMS>

        ucdata = HDMITX_ReadI2C_Byte(REG_TX_DDC_STATUS) ;
   841e4:	01000584 	movi	r4,22
   841e8:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   841ec:	e0bffd45 	stb	r2,-11(fp)
        if(ucdata & B_DDC_DONE)
   841f0:	e0bffd43 	ldbu	r2,-11(fp)
   841f4:	10803fcc 	andi	r2,r2,255
   841f8:	1080201c 	xori	r2,r2,128
   841fc:	10bfe004 	addi	r2,r2,-128
   84200:	10001016 	blt	r2,zero,84244 <HDCP_GetBCaps+0xd4>
        {
            //ErrorF("HDCP_GetBCaps(): DDC Done.\n") ;
            break ;
        }

        if(ucdata & B_DDC_ERROR)
   84204:	e0bffd43 	ldbu	r2,-11(fp)
   84208:	10800e0c 	andi	r2,r2,56
   8420c:	10000726 	beq	r2,zero,8422c <HDCP_GetBCaps+0xbc>
        {
            ErrorF("HDCP_GetBCaps(): DDC fail by reg16=%02X.\n",ucdata) ;
   84210:	e0bffd43 	ldbu	r2,-11(fp)
   84214:	100b883a 	mov	r5,r2
   84218:	010002b4 	movhi	r4,10
   8421c:	212f6804 	addi	r4,r4,-16992
   84220:	00877a40 	call	877a4 <ErrorF>
            return ER_FAIL ;
   84224:	00800044 	movi	r2,1
   84228:	00001506 	br	84280 <HDCP_GetBCaps+0x110>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_HEADER,DDC_HDCP_ADDRESS) ;
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQOFF,0x40) ; // BCaps offset
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQCOUNT,3) ;
    HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_DDC_SEQ_BURSTREAD) ;

    for(TimeOut = 200 ; TimeOut > 0 ; TimeOut --)
   8422c:	e0bffd03 	ldbu	r2,-12(fp)
   84230:	10bfffc4 	addi	r2,r2,-1
   84234:	e0bffd05 	stb	r2,-12(fp)
   84238:	e0bffd03 	ldbu	r2,-12(fp)
   8423c:	103fe71e 	bne	r2,zero,841dc <__alt_data_end+0xfffb431c>
   84240:	00000106 	br	84248 <HDCP_GetBCaps+0xd8>

        ucdata = HDMITX_ReadI2C_Byte(REG_TX_DDC_STATUS) ;
        if(ucdata & B_DDC_DONE)
        {
            //ErrorF("HDCP_GetBCaps(): DDC Done.\n") ;
            break ;
   84244:	0001883a 	nop
            ErrorF("HDCP_GetBCaps(): DDC fail by reg16=%02X.\n",ucdata) ;
            return ER_FAIL ;
        }
    }

    if(TimeOut == 0)
   84248:	e0bffd03 	ldbu	r2,-12(fp)
   8424c:	1000021e 	bne	r2,zero,84258 <HDCP_GetBCaps+0xe8>
    {
        return ER_FAIL ;
   84250:	00800044 	movi	r2,1
   84254:	00000a06 	br	84280 <HDCP_GetBCaps+0x110>
    }

    HDMITX_ReadI2C_ByteN(REG_TX_BSTAT,(PBYTE)pBStatus,2) ;
   84258:	01800084 	movi	r6,2
   8425c:	e17fff17 	ldw	r5,-4(fp)
   84260:	01001104 	movi	r4,68
   84264:	0087af40 	call	87af4 <HDMITX_ReadI2C_ByteN>
    *pBCaps = HDMITX_ReadI2C_Byte(REG_TX_BCAP) ;
   84268:	010010c4 	movi	r4,67
   8426c:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84270:	1007883a 	mov	r3,r2
   84274:	e0bffe17 	ldw	r2,-8(fp)
   84278:	10c00005 	stb	r3,0(r2)
    return ER_SUCCESS ;
   8427c:	0005883a 	mov	r2,zero

}
   84280:	e037883a 	mov	sp,fp
   84284:	dfc00117 	ldw	ra,4(sp)
   84288:	df000017 	ldw	fp,0(sp)
   8428c:	dec00204 	addi	sp,sp,8
   84290:	f800283a 	ret

00084294 <HDCP_GetBKSV>:
// Side-Effect: N/A
//////////////////////////////////////////////////////////////////////

static SYS_STATUS
HDCP_GetBKSV(BYTE *pBKSV)
{
   84294:	defffc04 	addi	sp,sp,-16
   84298:	dfc00315 	stw	ra,12(sp)
   8429c:	df000215 	stw	fp,8(sp)
   842a0:	df000204 	addi	fp,sp,8
   842a4:	e13fff15 	stw	r4,-4(fp)
    BYTE ucdata ;
    BYTE TimeOut ;

    Switch_HDMITX_Bank(0) ;
   842a8:	000b883a 	mov	r5,zero
   842ac:	010003c4 	movi	r4,15
   842b0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERDDC|B_MASTERHOST) ;
   842b4:	01400044 	movi	r5,1
   842b8:	01000404 	movi	r4,16
   842bc:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_HEADER,DDC_HDCP_ADDRESS) ;
   842c0:	01401d04 	movi	r5,116
   842c4:	01000444 	movi	r4,17
   842c8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQOFF,0x00) ; // BKSV offset
   842cc:	000b883a 	mov	r5,zero
   842d0:	01000484 	movi	r4,18
   842d4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQCOUNT,5) ;
   842d8:	01400144 	movi	r5,5
   842dc:	010004c4 	movi	r4,19
   842e0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_DDC_SEQ_BURSTREAD) ;
   842e4:	000b883a 	mov	r5,zero
   842e8:	01000544 	movi	r4,21
   842ec:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    for(TimeOut = 200 ; TimeOut > 0 ; TimeOut --)
   842f0:	00bff204 	movi	r2,-56
   842f4:	e0bffe05 	stb	r2,-8(fp)
   842f8:	00001b06 	br	84368 <HDCP_GetBKSV+0xd4>
    {
        DelayMS(1) ;
   842fc:	01000044 	movi	r4,1
   84300:	00877380 	call	87738 <DelayMS>

        ucdata = HDMITX_ReadI2C_Byte(REG_TX_DDC_STATUS) ;
   84304:	01000584 	movi	r4,22
   84308:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   8430c:	e0bffe45 	stb	r2,-7(fp)
        if(ucdata & B_DDC_DONE)
   84310:	e0bffe43 	ldbu	r2,-7(fp)
   84314:	10803fcc 	andi	r2,r2,255
   84318:	1080201c 	xori	r2,r2,128
   8431c:	10bfe004 	addi	r2,r2,-128
   84320:	1000040e 	bge	r2,zero,84334 <HDCP_GetBKSV+0xa0>
        {
            ErrorF("HDCP_GetBCaps(): DDC Done.\n") ;
   84324:	010002b4 	movhi	r4,10
   84328:	212f7304 	addi	r4,r4,-16948
   8432c:	00877a40 	call	877a4 <ErrorF>
            break ;
   84330:	00000f06 	br	84370 <HDCP_GetBKSV+0xdc>
        }

        if(ucdata & B_DDC_ERROR)
   84334:	e0bffe43 	ldbu	r2,-7(fp)
   84338:	10800e0c 	andi	r2,r2,56
   8433c:	10000726 	beq	r2,zero,8435c <HDCP_GetBKSV+0xc8>
        {
            ErrorF("HDCP_GetBCaps(): DDC No ack or arbilose,%x,maybe cable did not connected. Fail.\n",ucdata) ;
   84340:	e0bffe43 	ldbu	r2,-7(fp)
   84344:	100b883a 	mov	r5,r2
   84348:	010002b4 	movhi	r4,10
   8434c:	212f7a04 	addi	r4,r4,-16920
   84350:	00877a40 	call	877a4 <ErrorF>
            return ER_FAIL ;
   84354:	00800044 	movi	r2,1
   84358:	00000e06 	br	84394 <HDCP_GetBKSV+0x100>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_HEADER,DDC_HDCP_ADDRESS) ;
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQOFF,0x00) ; // BKSV offset
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQCOUNT,5) ;
    HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_DDC_SEQ_BURSTREAD) ;

    for(TimeOut = 200 ; TimeOut > 0 ; TimeOut --)
   8435c:	e0bffe03 	ldbu	r2,-8(fp)
   84360:	10bfffc4 	addi	r2,r2,-1
   84364:	e0bffe05 	stb	r2,-8(fp)
   84368:	e0bffe03 	ldbu	r2,-8(fp)
   8436c:	103fe31e 	bne	r2,zero,842fc <__alt_data_end+0xfffb443c>
            ErrorF("HDCP_GetBCaps(): DDC No ack or arbilose,%x,maybe cable did not connected. Fail.\n",ucdata) ;
            return ER_FAIL ;
        }
    }

    if(TimeOut == 0)
   84370:	e0bffe03 	ldbu	r2,-8(fp)
   84374:	1000021e 	bne	r2,zero,84380 <HDCP_GetBKSV+0xec>
    {
        return ER_FAIL ;
   84378:	00800044 	movi	r2,1
   8437c:	00000506 	br	84394 <HDCP_GetBKSV+0x100>
    }

    HDMITX_ReadI2C_ByteN(REG_TX_BKSV,(PBYTE)pBKSV,5) ;
   84380:	01800144 	movi	r6,5
   84384:	e17fff17 	ldw	r5,-4(fp)
   84388:	01000ec4 	movi	r4,59
   8438c:	0087af40 	call	87af4 <HDMITX_ReadI2C_ByteN>

    return ER_SUCCESS ;
   84390:	0005883a 	mov	r2,zero
}
   84394:	e037883a 	mov	sp,fp
   84398:	dfc00117 	ldw	ra,4(sp)
   8439c:	df000017 	ldw	fp,0(sp)
   843a0:	dec00204 	addi	sp,sp,8
   843a4:	f800283a 	ret

000843a8 <countbit>:
//  1. Instance[0].bAuthenticated global variable will be TRUE when authenticated.
//  2. Auth_done interrupt and AUTH_FAIL interrupt will be enabled.
//////////////////////////////////////////////////////////////////////
static BYTE
countbit(BYTE b)
{
   843a8:	defffd04 	addi	sp,sp,-12
   843ac:	df000215 	stw	fp,8(sp)
   843b0:	df000204 	addi	fp,sp,8
   843b4:	2005883a 	mov	r2,r4
   843b8:	e0bfff05 	stb	r2,-4(fp)
    BYTE i,count ;
    for( i = 0, count = 0 ; i < 8 ; i++ )
   843bc:	e03ffe05 	stb	zero,-8(fp)
   843c0:	e03ffe45 	stb	zero,-7(fp)
   843c4:	00000b06 	br	843f4 <countbit+0x4c>
    {
        if( b & (1<<i) )
   843c8:	e0ffff03 	ldbu	r3,-4(fp)
   843cc:	e0bffe03 	ldbu	r2,-8(fp)
   843d0:	1885d83a 	sra	r2,r3,r2
   843d4:	1080004c 	andi	r2,r2,1
   843d8:	10000326 	beq	r2,zero,843e8 <countbit+0x40>
        {
            count++ ;
   843dc:	e0bffe43 	ldbu	r2,-7(fp)
   843e0:	10800044 	addi	r2,r2,1
   843e4:	e0bffe45 	stb	r2,-7(fp)
//////////////////////////////////////////////////////////////////////
static BYTE
countbit(BYTE b)
{
    BYTE i,count ;
    for( i = 0, count = 0 ; i < 8 ; i++ )
   843e8:	e0bffe03 	ldbu	r2,-8(fp)
   843ec:	10800044 	addi	r2,r2,1
   843f0:	e0bffe05 	stb	r2,-8(fp)
   843f4:	e0bffe03 	ldbu	r2,-8(fp)
   843f8:	10800230 	cmpltui	r2,r2,8
   843fc:	103ff21e 	bne	r2,zero,843c8 <__alt_data_end+0xfffb4508>
        if( b & (1<<i) )
        {
            count++ ;
        }
    }
    return count ;
   84400:	e0bffe43 	ldbu	r2,-7(fp)
}
   84404:	e037883a 	mov	sp,fp
   84408:	df000017 	ldw	fp,0(sp)
   8440c:	dec00104 	addi	sp,sp,4
   84410:	f800283a 	ret

00084414 <HDCP_Reset>:

static void
HDCP_Reset()
{
   84414:	defffd04 	addi	sp,sp,-12
   84418:	dfc00215 	stw	ra,8(sp)
   8441c:	df000115 	stw	fp,4(sp)
   84420:	df000104 	addi	fp,sp,4
    BYTE uc ;
    uc = HDMITX_ReadI2C_Byte(REG_TX_SW_RST) | B_HDCP_RST ;
   84424:	01000104 	movi	r4,4
   84428:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   8442c:	10800054 	ori	r2,r2,1
   84430:	e0bfff05 	stb	r2,-4(fp)
    HDMITX_WriteI2C_Byte(REG_TX_SW_RST,uc) ;
   84434:	e0bfff03 	ldbu	r2,-4(fp)
   84438:	100b883a 	mov	r5,r2
   8443c:	01000104 	movi	r4,4
   84440:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_HDCP_DESIRE,0) ;
   84444:	000b883a 	mov	r5,zero
   84448:	01000804 	movi	r4,32
   8444c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_LISTCTRL,0) ;
   84450:	000b883a 	mov	r5,zero
   84454:	01000884 	movi	r4,34
   84458:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERHOST) ;
   8445c:	01400044 	movi	r5,1
   84460:	01000404 	movi	r4,16
   84464:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    ClearDDCFIFO() ;
   84468:	0083ac00 	call	83ac0 <ClearDDCFIFO>
    AbortDDC() ;
   8446c:	0083b400 	call	83b40 <AbortDDC>
}
   84470:	0001883a 	nop
   84474:	e037883a 	mov	sp,fp
   84478:	dfc00117 	ldw	ra,4(sp)
   8447c:	df000017 	ldw	fp,0(sp)
   84480:	dec00204 	addi	sp,sp,8
   84484:	f800283a 	ret

00084488 <HDCP_Authenticate>:

static SYS_STATUS
HDCP_Authenticate()
{
   84488:	defff704 	addi	sp,sp,-36
   8448c:	dfc00815 	stw	ra,32(sp)
   84490:	df000715 	stw	fp,28(sp)
   84494:	dc000615 	stw	r16,24(sp)
   84498:	df000704 	addi	fp,sp,28
    USHORT TimeOut ;

  // richard   BYTE revoked = FALSE ;
    BYTE BKSV[5] ;

    Instance[0].bAuthenticated = FALSE ;
   8449c:	008002b4 	movhi	r2,10
   844a0:	1085ab04 	addi	r2,r2,5804
   844a4:	11000303 	ldbu	r4,12(r2)
   844a8:	00ffff84 	movi	r3,-2
   844ac:	20c6703a 	and	r3,r4,r3
   844b0:	10c00305 	stb	r3,12(r2)

    // Authenticate should be called after AFE setup up.

    ErrorF("HDCP_Authenticate():\n") ;
   844b4:	010002b4 	movhi	r4,10
   844b8:	212f8f04 	addi	r4,r4,-16836
   844bc:	00877a40 	call	877a4 <ErrorF>
	HDCP_Reset() ;
   844c0:	00844140 	call	84414 <HDCP_Reset>
    // ClearDDCFIFO() ;
    // AbortDDC() ;

    if(HDCP_GetBCaps(&BCaps,&BStatus) != ER_SUCCESS)
   844c4:	e0fffc84 	addi	r3,fp,-14
   844c8:	e0bffc04 	addi	r2,fp,-16
   844cc:	180b883a 	mov	r5,r3
   844d0:	1009883a 	mov	r4,r2
   844d4:	00841700 	call	84170 <HDCP_GetBCaps>
   844d8:	10000526 	beq	r2,zero,844f0 <HDCP_Authenticate+0x68>
    {
        ErrorF("HDCP_GetBCaps fail.\n") ;
   844dc:	010002b4 	movhi	r4,10
   844e0:	212f9504 	addi	r4,r4,-16812
   844e4:	00877a40 	call	877a4 <ErrorF>
        return ER_FAIL ;
   844e8:	00800044 	movi	r2,1
   844ec:	0000b506 	br	847c4 <HDCP_Authenticate+0x33c>
    }


	if(Instance[0].bHDMIMode)
   844f0:	008002b4 	movhi	r2,10
   844f4:	1085ab04 	addi	r2,r2,5804
   844f8:	10800317 	ldw	r2,12(r2)
   844fc:	1080008c 	andi	r2,r2,2
   84500:	10000f26 	beq	r2,zero,84540 <HDCP_Authenticate+0xb8>
	{
		if((BStatus & B_CAP_HDMI_MODE)==0)
   84504:	e0bffc8b 	ldhu	r2,-14(fp)
   84508:	10bfffcc 	andi	r2,r2,65535
   8450c:	1084000c 	andi	r2,r2,4096
   84510:	10000b1e 	bne	r2,zero,84540 <HDCP_Authenticate+0xb8>
		{
			ErrorF("Not a HDMI mode,do not authenticate and encryption. BCaps = %x BStatus = %x\n",BCaps,BStatus) ;
   84514:	e0bffc03 	ldbu	r2,-16(fp)
   84518:	10803fcc 	andi	r2,r2,255
   8451c:	e0fffc8b 	ldhu	r3,-14(fp)
   84520:	18ffffcc 	andi	r3,r3,65535
   84524:	180d883a 	mov	r6,r3
   84528:	100b883a 	mov	r5,r2
   8452c:	010002b4 	movhi	r4,10
   84530:	212f9b04 	addi	r4,r4,-16788
   84534:	00877a40 	call	877a4 <ErrorF>
			return ER_FAIL ;
   84538:	00800044 	movi	r2,1
   8453c:	0000a106 	br	847c4 <HDCP_Authenticate+0x33c>
		}
	}

	ErrorF("BCaps = %02X BStatus = %04X\n",BCaps,BStatus) ;
   84540:	e0bffc03 	ldbu	r2,-16(fp)
   84544:	10803fcc 	andi	r2,r2,255
   84548:	e0fffc8b 	ldhu	r3,-14(fp)
   8454c:	18ffffcc 	andi	r3,r3,65535
   84550:	180d883a 	mov	r6,r3
   84554:	100b883a 	mov	r5,r2
   84558:	010002b4 	movhi	r4,10
   8455c:	212faf04 	addi	r4,r4,-16708
   84560:	00877a40 	call	877a4 <ErrorF>
        ErrorF("Down Stream Count %d is over maximum supported number 6,fail.\n",(BStatus & M_DOWNSTREAM_COUNT)) ;
        return ER_FAIL ;
    }
    */

    HDCP_GetBKSV(BKSV) ;
   84564:	e0bffd04 	addi	r2,fp,-12
   84568:	1009883a 	mov	r4,r2
   8456c:	00842940 	call	84294 <HDCP_GetBKSV>
	ErrorF("BKSV %02X %02X %02X %02X %02X\n",BKSV[0],BKSV[1],BKSV[2],BKSV[3],BKSV[4]) ;
   84570:	e0bffd03 	ldbu	r2,-12(fp)
   84574:	11003fcc 	andi	r4,r2,255
   84578:	e0bffd43 	ldbu	r2,-11(fp)
   8457c:	11403fcc 	andi	r5,r2,255
   84580:	e0bffd83 	ldbu	r2,-10(fp)
   84584:	11803fcc 	andi	r6,r2,255
   84588:	e0bffdc3 	ldbu	r2,-9(fp)
   8458c:	10803fcc 	andi	r2,r2,255
   84590:	e0fffe03 	ldbu	r3,-8(fp)
   84594:	18c03fcc 	andi	r3,r3,255
   84598:	d8c00115 	stw	r3,4(sp)
   8459c:	d8800015 	stw	r2,0(sp)
   845a0:	300f883a 	mov	r7,r6
   845a4:	280d883a 	mov	r6,r5
   845a8:	200b883a 	mov	r5,r4
   845ac:	010002b4 	movhi	r4,10
   845b0:	212fb704 	addi	r4,r4,-16676
   845b4:	00877a40 	call	877a4 <ErrorF>
	
	for(TimeOut = 0, ucdata = 0 ; TimeOut < 5 ; TimeOut ++)
   845b8:	e03ffb8d 	sth	zero,-18(fp)
   845bc:	e03ffb05 	stb	zero,-20(fp)
   845c0:	00000e06 	br	845fc <HDCP_Authenticate+0x174>
	{
	    ucdata += countbit(BKSV[TimeOut]) ;
   845c4:	e0bffb8b 	ldhu	r2,-18(fp)
   845c8:	e0fffd04 	addi	r3,fp,-12
   845cc:	1885883a 	add	r2,r3,r2
   845d0:	10800003 	ldbu	r2,0(r2)
   845d4:	10803fcc 	andi	r2,r2,255
   845d8:	1009883a 	mov	r4,r2
   845dc:	00843a80 	call	843a8 <countbit>
   845e0:	1007883a 	mov	r3,r2
   845e4:	e0bffb03 	ldbu	r2,-20(fp)
   845e8:	1885883a 	add	r2,r3,r2
   845ec:	e0bffb05 	stb	r2,-20(fp)
    */

    HDCP_GetBKSV(BKSV) ;
	ErrorF("BKSV %02X %02X %02X %02X %02X\n",BKSV[0],BKSV[1],BKSV[2],BKSV[3],BKSV[4]) ;
	
	for(TimeOut = 0, ucdata = 0 ; TimeOut < 5 ; TimeOut ++)
   845f0:	e0bffb8b 	ldhu	r2,-18(fp)
   845f4:	10800044 	addi	r2,r2,1
   845f8:	e0bffb8d 	sth	r2,-18(fp)
   845fc:	e0bffb8b 	ldhu	r2,-18(fp)
   84600:	10800170 	cmpltui	r2,r2,5
   84604:	103fef1e 	bne	r2,zero,845c4 <__alt_data_end+0xfffb4704>
	{
	    ucdata += countbit(BKSV[TimeOut]) ;
	}
	if( ucdata != 20 ) return ER_FAIL ;
   84608:	e0bffb03 	ldbu	r2,-20(fp)
   8460c:	10800520 	cmpeqi	r2,r2,20
   84610:	1000021e 	bne	r2,zero,8461c <HDCP_Authenticate+0x194>
   84614:	00800044 	movi	r2,1
   84618:	00006a06 	br	847c4 <HDCP_Authenticate+0x33c>
        ErrorF("BKSV is revoked\n") ; return ER_FAIL ;
    }
    ErrorF("BKSV %02X %02X %02X %02X %02X is NOT %srevoked\n",BKSV[0],BKSV[1],BKSV[2],BKSV[3],BKSV[4],revoked?"not ":"") ;
    #endif // SUPPORT_DSSSHA

    Switch_HDMITX_Bank(0) ; // switch bank action should start on direct register writting of each function.
   8461c:	000b883a 	mov	r5,zero
   84620:	010003c4 	movi	r4,15
   84624:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    // 2006/08/11 added by jjtseng
    // enable HDCP on CPDired enabled.
    HDMITX_AndREG_Byte(REG_TX_SW_RST,~(B_HDCP_RST)) ;
   84628:	01000104 	movi	r4,4
   8462c:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84630:	10803fcc 	andi	r2,r2,255
   84634:	10803f8c 	andi	r2,r2,254
   84638:	100b883a 	mov	r5,r2
   8463c:	01000104 	movi	r4,4
   84640:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
//        HDMITX_WriteI2C_Byte(REG_TX_HDCP_DESIRE,B_ENABLE_HDPC11|B_CPDESIRE) ;
//    }
//    else
//    {
//        ErrorF("RX not support HDCP 1.1\n") ;
    HDMITX_WriteI2C_Byte(REG_TX_HDCP_DESIRE,B_CPDESIRE) ;
   84644:	01400044 	movi	r5,1
   84648:	01000804 	movi	r4,32
   8464c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    // ucdata = HDMITX_ReadI2C_Byte(REG_TX_SYS_STATUS) ;
    // ucdata = (ucdata & M_CTSINTSTEP) | B_INTACTDONE ;
    // HDMITX_WriteI2C_Byte(REG_TX_SYS_STATUS,ucdata) ; // clear action.

    // HDMITX_AndREG_Byte(REG_TX_INT_MASK2,~(B_AUTH_FAIL_MASK|B_T_AUTH_DONE_MASK)) ;    // enable GetBCaps Interrupt
    HDCP_ClearAuthInterrupt() ;
   84650:	0083f540 	call	83f54 <HDCP_ClearAuthInterrupt>
    ErrorF("int2 = %02X DDC_Status = %02X\n",HDMITX_ReadI2C_Byte(REG_TX_INT_STAT2),HDMITX_ReadI2C_Byte(REG_TX_DDC_STATUS)) ;
   84654:	010001c4 	movi	r4,7
   84658:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   8465c:	14003fcc 	andi	r16,r2,255
   84660:	01000584 	movi	r4,22
   84664:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84668:	10803fcc 	andi	r2,r2,255
   8466c:	100d883a 	mov	r6,r2
   84670:	800b883a 	mov	r5,r16
   84674:	010002b4 	movhi	r4,10
   84678:	212fbf04 	addi	r4,r4,-16644
   8467c:	00877a40 	call	877a4 <ErrorF>


    HDCP_GenerateAn() ;
   84680:	00841140 	call	84114 <HDCP_GenerateAn>
    HDMITX_WriteI2C_Byte(REG_TX_LISTCTRL,0) ;
   84684:	000b883a 	mov	r5,zero
   84688:	01000884 	movi	r4,34
   8468c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    Instance[0].bAuthenticated = FALSE ;
   84690:	008002b4 	movhi	r2,10
   84694:	1085ab04 	addi	r2,r2,5804
   84698:	11000303 	ldbu	r4,12(r2)
   8469c:	00ffff84 	movi	r3,-2
   846a0:	20c6703a 	and	r3,r4,r3
   846a4:	10c00305 	stb	r3,12(r2)

    if((BCaps & B_CAP_HDMI_REPEATER) == 0)
   846a8:	e0bffc03 	ldbu	r2,-16(fp)
   846ac:	10803fcc 	andi	r2,r2,255
   846b0:	1080100c 	andi	r2,r2,64
   846b4:	1000421e 	bne	r2,zero,847c0 <HDCP_Authenticate+0x338>
    {
        HDCP_Auth_Fire();
   846b8:	00840640 	call	84064 <HDCP_Auth_Fire>
        // wait for status ;
        
        for(TimeOut = 250 ; TimeOut > 0 ; TimeOut --)
   846bc:	00803e84 	movi	r2,250
   846c0:	e0bffb8d 	sth	r2,-18(fp)
   846c4:	00002d06 	br	8477c <HDCP_Authenticate+0x2f4>
        {
            DelayMS(5) ; // delay 1ms
   846c8:	01000144 	movi	r4,5
   846cc:	00877380 	call	87738 <DelayMS>
            ucdata = HDMITX_ReadI2C_Byte(REG_TX_AUTH_STAT) ;
   846d0:	01001184 	movi	r4,70
   846d4:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   846d8:	e0bffb05 	stb	r2,-20(fp)
            ErrorF("reg46 = %02x reg16 = %02x\n",ucdata,HDMITX_ReadI2C_Byte(0x16)) ;
   846dc:	e43ffb03 	ldbu	r16,-20(fp)
   846e0:	01000584 	movi	r4,22
   846e4:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   846e8:	10803fcc 	andi	r2,r2,255
   846ec:	100d883a 	mov	r6,r2
   846f0:	800b883a 	mov	r5,r16
   846f4:	010002b4 	movhi	r4,10
   846f8:	212fc704 	addi	r4,r4,-16612
   846fc:	00877a40 	call	877a4 <ErrorF>

            if(ucdata & B_T_AUTH_DONE)
   84700:	e0bffb03 	ldbu	r2,-20(fp)
   84704:	10803fcc 	andi	r2,r2,255
   84708:	1080201c 	xori	r2,r2,128
   8470c:	10bfe004 	addi	r2,r2,-128
   84710:	1000060e 	bge	r2,zero,8472c <HDCP_Authenticate+0x2a4>
            {
                Instance[0].bAuthenticated = TRUE ;
   84714:	008002b4 	movhi	r2,10
   84718:	1085ab04 	addi	r2,r2,5804
   8471c:	10c00303 	ldbu	r3,12(r2)
   84720:	18c00054 	ori	r3,r3,1
   84724:	10c00305 	stb	r3,12(r2)
                break ;
   84728:	00001606 	br	84784 <HDCP_Authenticate+0x2fc>
            }
            
            ucdata = HDMITX_ReadI2C_Byte(REG_TX_INT_STAT2) ;
   8472c:	010001c4 	movi	r4,7
   84730:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84734:	e0bffb05 	stb	r2,-20(fp)
            if(ucdata & B_INT_AUTH_FAIL)
   84738:	e0bffb03 	ldbu	r2,-20(fp)
   8473c:	1080004c 	andi	r2,r2,1
   84740:	10000b26 	beq	r2,zero,84770 <HDCP_Authenticate+0x2e8>
                HDMITX_WriteI2C_Byte(REG_TX_INT_CLR0,B_CLR_AUTH_FAIL) ;
                HDMITX_WriteI2C_Byte(REG_TX_INT_CLR1,0) ;
                HDMITX_WriteI2C_Byte(REG_TX_SYS_STATUS,B_INTACTDONE) ;
                HDMITX_WriteI2C_Byte(REG_TX_SYS_STATUS,0) ;
                */
                ErrorF("HDCP_Authenticate(): Authenticate fail\n") ;
   84744:	010002b4 	movhi	r4,10
   84748:	212fce04 	addi	r4,r4,-16584
   8474c:	00877a40 	call	877a4 <ErrorF>
                Instance[0].bAuthenticated = FALSE ;
   84750:	008002b4 	movhi	r2,10
   84754:	1085ab04 	addi	r2,r2,5804
   84758:	11000303 	ldbu	r4,12(r2)
   8475c:	00ffff84 	movi	r3,-2
   84760:	20c6703a 	and	r3,r4,r3
   84764:	10c00305 	stb	r3,12(r2)
                return ER_FAIL ;
   84768:	00800044 	movi	r2,1
   8476c:	00001506 	br	847c4 <HDCP_Authenticate+0x33c>
    if((BCaps & B_CAP_HDMI_REPEATER) == 0)
    {
        HDCP_Auth_Fire();
        // wait for status ;
        
        for(TimeOut = 250 ; TimeOut > 0 ; TimeOut --)
   84770:	e0bffb8b 	ldhu	r2,-18(fp)
   84774:	10bfffc4 	addi	r2,r2,-1
   84778:	e0bffb8d 	sth	r2,-18(fp)
   8477c:	e0bffb8b 	ldhu	r2,-18(fp)
   84780:	103fd11e 	bne	r2,zero,846c8 <__alt_data_end+0xfffb4808>
                Instance[0].bAuthenticated = FALSE ;
                return ER_FAIL ;
            }
        }

        if(TimeOut == 0)
   84784:	e0bffb8b 	ldhu	r2,-18(fp)
   84788:	10000b1e 	bne	r2,zero,847b8 <HDCP_Authenticate+0x330>
        {
             ErrorF("HDCP_Authenticate(): Time out. return fail\n") ;
   8478c:	010002b4 	movhi	r4,10
   84790:	212fd804 	addi	r4,r4,-16544
   84794:	00877a40 	call	877a4 <ErrorF>
             Instance[0].bAuthenticated = FALSE ;
   84798:	008002b4 	movhi	r2,10
   8479c:	1085ab04 	addi	r2,r2,5804
   847a0:	11000303 	ldbu	r4,12(r2)
   847a4:	00ffff84 	movi	r3,-2
   847a8:	20c6703a 	and	r3,r4,r3
   847ac:	10c00305 	stb	r3,12(r2)
             return ER_FAIL ;
   847b0:	00800044 	movi	r2,1
   847b4:	00000306 	br	847c4 <HDCP_Authenticate+0x33c>
        }
        return ER_SUCCESS ;
   847b8:	0005883a 	mov	r2,zero
   847bc:	00000106 	br	847c4 <HDCP_Authenticate+0x33c>
    }

    return HDCP_Authenticate_Repeater() ;
   847c0:	0085e500 	call	85e50 <HDCP_Authenticate_Repeater>
}
   847c4:	e6ffff04 	addi	sp,fp,-4
   847c8:	dfc00217 	ldw	ra,8(sp)
   847cc:	df000117 	ldw	fp,4(sp)
   847d0:	dc000017 	ldw	r16,0(sp)
   847d4:	dec00304 	addi	sp,sp,12
   847d8:	f800283a 	ret

000847dc <HDCP_VerifyIntegration>:
// Side-Effect:
//////////////////////////////////////////////////////////////////////

static SYS_STATUS
HDCP_VerifyIntegration()
{
   847dc:	defffe04 	addi	sp,sp,-8
   847e0:	dfc00115 	stw	ra,4(sp)
   847e4:	df000015 	stw	fp,0(sp)
   847e8:	d839883a 	mov	fp,sp
 // richard   BYTE ucdata ;
    // if any interrupt issued a Auth fail,returned the Verify Integration fail.

    if(HDMITX_ReadI2C_Byte(REG_TX_INT_STAT1) & B_INT_AUTH_FAIL)
   847ec:	01000184 	movi	r4,6
   847f0:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   847f4:	10803fcc 	andi	r2,r2,255
   847f8:	1080004c 	andi	r2,r2,1
   847fc:	10000926 	beq	r2,zero,84824 <HDCP_VerifyIntegration+0x48>
    {
        HDCP_ClearAuthInterrupt() ;
   84800:	0083f540 	call	83f54 <HDCP_ClearAuthInterrupt>
        Instance[0].bAuthenticated = FALSE ;
   84804:	008002b4 	movhi	r2,10
   84808:	1085ab04 	addi	r2,r2,5804
   8480c:	11000303 	ldbu	r4,12(r2)
   84810:	00ffff84 	movi	r3,-2
   84814:	20c6703a 	and	r3,r4,r3
   84818:	10c00305 	stb	r3,12(r2)
        return ER_FAIL ;
   8481c:	00800044 	movi	r2,1
   84820:	00000806 	br	84844 <HDCP_VerifyIntegration+0x68>
    }

    if(Instance[0].bAuthenticated == TRUE)
   84824:	008002b4 	movhi	r2,10
   84828:	1085ab04 	addi	r2,r2,5804
   8482c:	10800317 	ldw	r2,12(r2)
   84830:	1080004c 	andi	r2,r2,1
   84834:	10000226 	beq	r2,zero,84840 <HDCP_VerifyIntegration+0x64>
    {
        return ER_SUCCESS ;
   84838:	0005883a 	mov	r2,zero
   8483c:	00000106 	br	84844 <HDCP_VerifyIntegration+0x68>
    }

    return ER_FAIL ;
   84840:	00800044 	movi	r2,1
}
   84844:	e037883a 	mov	sp,fp
   84848:	dfc00117 	ldw	ra,4(sp)
   8484c:	df000017 	ldw	fp,0(sp)
   84850:	dec00204 	addi	sp,sp,8
   84854:	f800283a 	ret

00084858 <HDCP_CancelRepeaterAuthenticate>:
static _XDATA BYTE Vr[20] ;
static _XDATA BYTE M0[8] ;

static void
HDCP_CancelRepeaterAuthenticate()
{
   84858:	defffe04 	addi	sp,sp,-8
   8485c:	dfc00115 	stw	ra,4(sp)
   84860:	df000015 	stw	fp,0(sp)
   84864:	d839883a 	mov	fp,sp
    ErrorF("HDCP_CancelRepeaterAuthenticate") ;
   84868:	010002b4 	movhi	r4,10
   8486c:	212fe304 	addi	r4,r4,-16500
   84870:	00877a40 	call	877a4 <ErrorF>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERDDC|B_MASTERHOST) ;
   84874:	01400044 	movi	r5,1
   84878:	01000404 	movi	r4,16
   8487c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    AbortDDC() ;
   84880:	0083b400 	call	83b40 <AbortDDC>
    HDMITX_WriteI2C_Byte(REG_TX_LISTCTRL,B_LISTFAIL|B_LISTDONE) ;
   84884:	014000c4 	movi	r5,3
   84888:	01000884 	movi	r4,34
   8488c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDCP_ClearAuthInterrupt() ;
   84890:	0083f540 	call	83f54 <HDCP_ClearAuthInterrupt>
}
   84894:	0001883a 	nop
   84898:	e037883a 	mov	sp,fp
   8489c:	dfc00117 	ldw	ra,4(sp)
   848a0:	df000017 	ldw	fp,0(sp)
   848a4:	dec00204 	addi	sp,sp,8
   848a8:	f800283a 	ret

000848ac <HDCP_ResumeRepeaterAuthenticate>:

static void
HDCP_ResumeRepeaterAuthenticate()
{
   848ac:	defffe04 	addi	sp,sp,-8
   848b0:	dfc00115 	stw	ra,4(sp)
   848b4:	df000015 	stw	fp,0(sp)
   848b8:	d839883a 	mov	fp,sp
    HDMITX_WriteI2C_Byte(REG_TX_LISTCTRL,B_LISTDONE) ;
   848bc:	01400044 	movi	r5,1
   848c0:	01000884 	movi	r4,34
   848c4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERHDCP) ;
   848c8:	000b883a 	mov	r5,zero
   848cc:	01000404 	movi	r4,16
   848d0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   848d4:	0001883a 	nop
   848d8:	e037883a 	mov	sp,fp
   848dc:	dfc00117 	ldw	ra,4(sp)
   848e0:	df000017 	ldw	fp,0(sp)
   848e4:	dec00204 	addi	sp,sp,8
   848e8:	f800283a 	ret

000848ec <HDCP_GetKSVList>:


static SYS_STATUS
HDCP_GetKSVList(BYTE *pKSVList,BYTE cDownStream)
{
   848ec:	defffa04 	addi	sp,sp,-24
   848f0:	dfc00515 	stw	ra,20(sp)
   848f4:	df000415 	stw	fp,16(sp)
   848f8:	dc000315 	stw	r16,12(sp)
   848fc:	df000404 	addi	fp,sp,16
   84900:	e13ffd15 	stw	r4,-12(fp)
   84904:	2805883a 	mov	r2,r5
   84908:	e0bffe05 	stb	r2,-8(fp)
    BYTE TimeOut = 100 ;
   8490c:	00801904 	movi	r2,100
   84910:	e0bffc05 	stb	r2,-16(fp)
	BYTE ucdata ;
	
	if(cDownStream == 0 || pKSVList == NULL)
   84914:	e0bffe03 	ldbu	r2,-8(fp)
   84918:	10000226 	beq	r2,zero,84924 <HDCP_GetKSVList+0x38>
   8491c:	e0bffd17 	ldw	r2,-12(fp)
   84920:	1000021e 	bne	r2,zero,8492c <HDCP_GetKSVList+0x40>
	{
	    return ER_FAIL ;
   84924:	00800044 	movi	r2,1
   84928:	00005506 	br	84a80 <HDCP_GetKSVList+0x194>
	}
	
    HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERHOST) ;
   8492c:	01400044 	movi	r5,1
   84930:	01000404 	movi	r4,16
   84934:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_HEADER,0x74) ;
   84938:	01401d04 	movi	r5,116
   8493c:	01000444 	movi	r4,17
   84940:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQOFF,0x43) ;
   84944:	014010c4 	movi	r5,67
   84948:	01000484 	movi	r4,18
   8494c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQCOUNT,cDownStream * 5) ;
   84950:	e0bffe03 	ldbu	r2,-8(fp)
   84954:	10800164 	muli	r2,r2,5
   84958:	10803fcc 	andi	r2,r2,255
   8495c:	100b883a 	mov	r5,r2
   84960:	010004c4 	movi	r4,19
   84964:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_DDC_SEQ_BURSTREAD) ;
   84968:	000b883a 	mov	r5,zero
   8496c:	01000544 	movi	r4,21
   84970:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>


    for(TimeOut = 200 ; TimeOut > 0 ; TimeOut --)
   84974:	00bff204 	movi	r2,-56
   84978:	e0bffc05 	stb	r2,-16(fp)
   8497c:	00001b06 	br	849ec <HDCP_GetKSVList+0x100>
    {

        ucdata = HDMITX_ReadI2C_Byte(REG_TX_DDC_STATUS) ;
   84980:	01000584 	movi	r4,22
   84984:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84988:	e0bffc45 	stb	r2,-15(fp)
        if(ucdata & B_DDC_DONE)
   8498c:	e0bffc43 	ldbu	r2,-15(fp)
   84990:	10803fcc 	andi	r2,r2,255
   84994:	1080201c 	xori	r2,r2,128
   84998:	10bfe004 	addi	r2,r2,-128
   8499c:	1000040e 	bge	r2,zero,849b0 <HDCP_GetKSVList+0xc4>
        {
            ErrorF("HDCP_GetKSVList(): DDC Done.\n") ;
   849a0:	010002b4 	movhi	r4,10
   849a4:	212feb04 	addi	r4,r4,-16468
   849a8:	00877a40 	call	877a4 <ErrorF>
            break ;
   849ac:	00001106 	br	849f4 <HDCP_GetKSVList+0x108>
        }

        if(ucdata & B_DDC_ERROR)
   849b0:	e0bffc43 	ldbu	r2,-15(fp)
   849b4:	10800e0c 	andi	r2,r2,56
   849b8:	10000726 	beq	r2,zero,849d8 <HDCP_GetKSVList+0xec>
        {
            ErrorF("HDCP_GetKSVList(): DDC Fail by REG_TX_DDC_STATUS = %x.\n",ucdata) ;
   849bc:	e0bffc43 	ldbu	r2,-15(fp)
   849c0:	100b883a 	mov	r5,r2
   849c4:	010002b4 	movhi	r4,10
   849c8:	212ff304 	addi	r4,r4,-16436
   849cc:	00877a40 	call	877a4 <ErrorF>
            return ER_FAIL ;
   849d0:	00800044 	movi	r2,1
   849d4:	00002a06 	br	84a80 <HDCP_GetKSVList+0x194>
        }
        DelayMS(5) ;
   849d8:	01000144 	movi	r4,5
   849dc:	00877380 	call	87738 <DelayMS>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQOFF,0x43) ;
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQCOUNT,cDownStream * 5) ;
    HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_DDC_SEQ_BURSTREAD) ;


    for(TimeOut = 200 ; TimeOut > 0 ; TimeOut --)
   849e0:	e0bffc03 	ldbu	r2,-16(fp)
   849e4:	10bfffc4 	addi	r2,r2,-1
   849e8:	e0bffc05 	stb	r2,-16(fp)
   849ec:	e0bffc03 	ldbu	r2,-16(fp)
   849f0:	103fe31e 	bne	r2,zero,84980 <__alt_data_end+0xfffb4ac0>
            return ER_FAIL ;
        }
        DelayMS(5) ;
    }

    if(TimeOut == 0)
   849f4:	e0bffc03 	ldbu	r2,-16(fp)
   849f8:	1000021e 	bne	r2,zero,84a04 <HDCP_GetKSVList+0x118>
    {
        return ER_FAIL ;
   849fc:	00800044 	movi	r2,1
   84a00:	00001f06 	br	84a80 <HDCP_GetKSVList+0x194>
    }

    ErrorF("HDCP_GetKSVList(): KSV") ;
   84a04:	010002b4 	movhi	r4,10
   84a08:	21300104 	addi	r4,r4,-16380
   84a0c:	00877a40 	call	877a4 <ErrorF>
    for(TimeOut = 0 ; TimeOut < cDownStream * 5 ; TimeOut++)
   84a10:	e03ffc05 	stb	zero,-16(fp)
   84a14:	00001206 	br	84a60 <HDCP_GetKSVList+0x174>
    {
        pKSVList[TimeOut] = HDMITX_ReadI2C_Byte(REG_TX_DDC_READFIFO) ;
   84a18:	e0bffc03 	ldbu	r2,-16(fp)
   84a1c:	e0fffd17 	ldw	r3,-12(fp)
   84a20:	18a1883a 	add	r16,r3,r2
   84a24:	010005c4 	movi	r4,23
   84a28:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84a2c:	80800005 	stb	r2,0(r16)
        ErrorF(" %02X",pKSVList[TimeOut]) ;
   84a30:	e0bffc03 	ldbu	r2,-16(fp)
   84a34:	e0fffd17 	ldw	r3,-12(fp)
   84a38:	1885883a 	add	r2,r3,r2
   84a3c:	10800003 	ldbu	r2,0(r2)
   84a40:	10803fcc 	andi	r2,r2,255
   84a44:	100b883a 	mov	r5,r2
   84a48:	010002b4 	movhi	r4,10
   84a4c:	21300704 	addi	r4,r4,-16356
   84a50:	00877a40 	call	877a4 <ErrorF>
    {
        return ER_FAIL ;
    }

    ErrorF("HDCP_GetKSVList(): KSV") ;
    for(TimeOut = 0 ; TimeOut < cDownStream * 5 ; TimeOut++)
   84a54:	e0bffc03 	ldbu	r2,-16(fp)
   84a58:	10800044 	addi	r2,r2,1
   84a5c:	e0bffc05 	stb	r2,-16(fp)
   84a60:	e0fffc03 	ldbu	r3,-16(fp)
   84a64:	e0bffe03 	ldbu	r2,-8(fp)
   84a68:	10800164 	muli	r2,r2,5
   84a6c:	18bfea16 	blt	r3,r2,84a18 <__alt_data_end+0xfffb4b58>
    {
        pKSVList[TimeOut] = HDMITX_ReadI2C_Byte(REG_TX_DDC_READFIFO) ;
        ErrorF(" %02X",pKSVList[TimeOut]) ;
    }
    ErrorF("\n") ;
   84a70:	010002b4 	movhi	r4,10
   84a74:	21300904 	addi	r4,r4,-16348
   84a78:	00877a40 	call	877a4 <ErrorF>
	return ER_SUCCESS ;
   84a7c:	0005883a 	mov	r2,zero
}
   84a80:	e6ffff04 	addi	sp,fp,-4
   84a84:	dfc00217 	ldw	ra,8(sp)
   84a88:	df000117 	ldw	fp,4(sp)
   84a8c:	dc000017 	ldw	r16,0(sp)
   84a90:	dec00304 	addi	sp,sp,12
   84a94:	f800283a 	ret

00084a98 <HDCP_GetVr>:

static SYS_STATUS
HDCP_GetVr(BYTE *pVr)
{
   84a98:	defffa04 	addi	sp,sp,-24
   84a9c:	dfc00515 	stw	ra,20(sp)
   84aa0:	df000415 	stw	fp,16(sp)
   84aa4:	dc000315 	stw	r16,12(sp)
   84aa8:	df000404 	addi	fp,sp,16
   84aac:	e13ffe15 	stw	r4,-8(fp)
    BYTE TimeOut  ;
	BYTE ucdata ;
	
	if(pVr == NULL)
   84ab0:	e0bffe17 	ldw	r2,-8(fp)
   84ab4:	1000021e 	bne	r2,zero,84ac0 <HDCP_GetVr+0x28>
	{
	   // richard  return NULL ;
       return ER_FAIL;
   84ab8:	00800044 	movi	r2,1
   84abc:	00009306 	br	84d0c <HDCP_GetVr+0x274>
	}
	
    HDMITX_WriteI2C_Byte(REG_TX_DDC_MASTER_CTRL,B_MASTERHOST) ;
   84ac0:	01400044 	movi	r5,1
   84ac4:	01000404 	movi	r4,16
   84ac8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_HEADER,0x74) ;
   84acc:	01401d04 	movi	r5,116
   84ad0:	01000444 	movi	r4,17
   84ad4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQOFF,0x20) ;
   84ad8:	01400804 	movi	r5,32
   84adc:	01000484 	movi	r4,18
   84ae0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQCOUNT,20) ;
   84ae4:	01400504 	movi	r5,20
   84ae8:	010004c4 	movi	r4,19
   84aec:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_DDC_SEQ_BURSTREAD) ;
   84af0:	000b883a 	mov	r5,zero
   84af4:	01000544 	movi	r4,21
   84af8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>


    for(TimeOut = 200 ; TimeOut > 0 ; TimeOut --)
   84afc:	00bff204 	movi	r2,-56
   84b00:	e0bffd05 	stb	r2,-12(fp)
   84b04:	00001b06 	br	84b74 <HDCP_GetVr+0xdc>
    {
        ucdata = HDMITX_ReadI2C_Byte(REG_TX_DDC_STATUS) ;
   84b08:	01000584 	movi	r4,22
   84b0c:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84b10:	e0bffd45 	stb	r2,-11(fp)
        if(ucdata & B_DDC_DONE)
   84b14:	e0bffd43 	ldbu	r2,-11(fp)
   84b18:	10803fcc 	andi	r2,r2,255
   84b1c:	1080201c 	xori	r2,r2,128
   84b20:	10bfe004 	addi	r2,r2,-128
   84b24:	1000040e 	bge	r2,zero,84b38 <HDCP_GetVr+0xa0>
        {
            ErrorF("HDCP_GetVr(): DDC Done.\n") ;
   84b28:	010002b4 	movhi	r4,10
   84b2c:	21300a04 	addi	r4,r4,-16344
   84b30:	00877a40 	call	877a4 <ErrorF>
            break ;
   84b34:	00001106 	br	84b7c <HDCP_GetVr+0xe4>
        }

        if(ucdata & B_DDC_ERROR)
   84b38:	e0bffd43 	ldbu	r2,-11(fp)
   84b3c:	10800e0c 	andi	r2,r2,56
   84b40:	10000726 	beq	r2,zero,84b60 <HDCP_GetVr+0xc8>
        {
            ErrorF("HDCP_GetVr(): DDC fail by REG_TX_DDC_STATUS = %x.\n",ucdata) ;
   84b44:	e0bffd43 	ldbu	r2,-11(fp)
   84b48:	100b883a 	mov	r5,r2
   84b4c:	010002b4 	movhi	r4,10
   84b50:	21301104 	addi	r4,r4,-16316
   84b54:	00877a40 	call	877a4 <ErrorF>
            return ER_FAIL ;
   84b58:	00800044 	movi	r2,1
   84b5c:	00006b06 	br	84d0c <HDCP_GetVr+0x274>
        }
        DelayMS(5) ;
   84b60:	01000144 	movi	r4,5
   84b64:	00877380 	call	87738 <DelayMS>
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQOFF,0x20) ;
    HDMITX_WriteI2C_Byte(REG_TX_DDC_REQCOUNT,20) ;
    HDMITX_WriteI2C_Byte(REG_TX_DDC_CMD,CMD_DDC_SEQ_BURSTREAD) ;


    for(TimeOut = 200 ; TimeOut > 0 ; TimeOut --)
   84b68:	e0bffd03 	ldbu	r2,-12(fp)
   84b6c:	10bfffc4 	addi	r2,r2,-1
   84b70:	e0bffd05 	stb	r2,-12(fp)
   84b74:	e0bffd03 	ldbu	r2,-12(fp)
   84b78:	103fe31e 	bne	r2,zero,84b08 <__alt_data_end+0xfffb4c48>
            return ER_FAIL ;
        }
        DelayMS(5) ;
    }

    if(TimeOut == 0)
   84b7c:	e0bffd03 	ldbu	r2,-12(fp)
   84b80:	1000071e 	bne	r2,zero,84ba0 <HDCP_GetVr+0x108>
    {
        ErrorF("HDCP_GetVr(): DDC fail by timeout.\n",ucdata) ;
   84b84:	e0bffd43 	ldbu	r2,-11(fp)
   84b88:	100b883a 	mov	r5,r2
   84b8c:	010002b4 	movhi	r4,10
   84b90:	21301e04 	addi	r4,r4,-16264
   84b94:	00877a40 	call	877a4 <ErrorF>
        return ER_FAIL ;
   84b98:	00800044 	movi	r2,1
   84b9c:	00005b06 	br	84d0c <HDCP_GetVr+0x274>
    }

    Switch_HDMITX_Bank(0) ;
   84ba0:	000b883a 	mov	r5,zero
   84ba4:	010003c4 	movi	r4,15
   84ba8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    for(TimeOut = 0 ; TimeOut < 5 ; TimeOut++)
   84bac:	e03ffd05 	stb	zero,-12(fp)
   84bb0:	00005206 	br	84cfc <HDCP_GetVr+0x264>
    {
        HDMITX_WriteI2C_Byte(REG_TX_SHA_SEL ,TimeOut) ;
   84bb4:	e0bffd03 	ldbu	r2,-12(fp)
   84bb8:	100b883a 	mov	r5,r2
   84bbc:	01001404 	movi	r4,80
   84bc0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        pVr[TimeOut*4+3]  = (ULONG)HDMITX_ReadI2C_Byte(REG_TX_SHA_RD_BYTE1) ;
   84bc4:	e0bffd03 	ldbu	r2,-12(fp)
   84bc8:	1085883a 	add	r2,r2,r2
   84bcc:	1085883a 	add	r2,r2,r2
   84bd0:	108000c4 	addi	r2,r2,3
   84bd4:	e0fffe17 	ldw	r3,-8(fp)
   84bd8:	18a1883a 	add	r16,r3,r2
   84bdc:	01001444 	movi	r4,81
   84be0:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84be4:	80800005 	stb	r2,0(r16)
        pVr[TimeOut*4+2] = (ULONG)HDMITX_ReadI2C_Byte(REG_TX_SHA_RD_BYTE2) ;
   84be8:	e0bffd03 	ldbu	r2,-12(fp)
   84bec:	1085883a 	add	r2,r2,r2
   84bf0:	1085883a 	add	r2,r2,r2
   84bf4:	10800084 	addi	r2,r2,2
   84bf8:	e0fffe17 	ldw	r3,-8(fp)
   84bfc:	18a1883a 	add	r16,r3,r2
   84c00:	01001484 	movi	r4,82
   84c04:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84c08:	80800005 	stb	r2,0(r16)
        pVr[TimeOut*4+1] = (ULONG)HDMITX_ReadI2C_Byte(REG_TX_SHA_RD_BYTE3) ;
   84c0c:	e0bffd03 	ldbu	r2,-12(fp)
   84c10:	1085883a 	add	r2,r2,r2
   84c14:	1085883a 	add	r2,r2,r2
   84c18:	10800044 	addi	r2,r2,1
   84c1c:	e0fffe17 	ldw	r3,-8(fp)
   84c20:	18a1883a 	add	r16,r3,r2
   84c24:	010014c4 	movi	r4,83
   84c28:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84c2c:	80800005 	stb	r2,0(r16)
        pVr[TimeOut*4] = (ULONG)HDMITX_ReadI2C_Byte(REG_TX_SHA_RD_BYTE4) ;
   84c30:	e0bffd03 	ldbu	r2,-12(fp)
   84c34:	1085883a 	add	r2,r2,r2
   84c38:	1085883a 	add	r2,r2,r2
   84c3c:	1007883a 	mov	r3,r2
   84c40:	e0bffe17 	ldw	r2,-8(fp)
   84c44:	10e1883a 	add	r16,r2,r3
   84c48:	01001504 	movi	r4,84
   84c4c:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84c50:	80800005 	stb	r2,0(r16)
		ErrorF("V' = %02X %02X %02X %02X\n",pVr[TimeOut*4],pVr[TimeOut*4+1],pVr[TimeOut*4+2],pVr[TimeOut*4+3]) ; 
   84c54:	e0bffd03 	ldbu	r2,-12(fp)
   84c58:	1085883a 	add	r2,r2,r2
   84c5c:	1085883a 	add	r2,r2,r2
   84c60:	1007883a 	mov	r3,r2
   84c64:	e0bffe17 	ldw	r2,-8(fp)
   84c68:	10c5883a 	add	r2,r2,r3
   84c6c:	10800003 	ldbu	r2,0(r2)
   84c70:	11003fcc 	andi	r4,r2,255
   84c74:	e0bffd03 	ldbu	r2,-12(fp)
   84c78:	1085883a 	add	r2,r2,r2
   84c7c:	1085883a 	add	r2,r2,r2
   84c80:	10800044 	addi	r2,r2,1
   84c84:	e0fffe17 	ldw	r3,-8(fp)
   84c88:	1885883a 	add	r2,r3,r2
   84c8c:	10800003 	ldbu	r2,0(r2)
   84c90:	11403fcc 	andi	r5,r2,255
   84c94:	e0bffd03 	ldbu	r2,-12(fp)
   84c98:	1085883a 	add	r2,r2,r2
   84c9c:	1085883a 	add	r2,r2,r2
   84ca0:	10800084 	addi	r2,r2,2
   84ca4:	e0fffe17 	ldw	r3,-8(fp)
   84ca8:	1885883a 	add	r2,r3,r2
   84cac:	10800003 	ldbu	r2,0(r2)
   84cb0:	11803fcc 	andi	r6,r2,255
   84cb4:	e0bffd03 	ldbu	r2,-12(fp)
   84cb8:	1085883a 	add	r2,r2,r2
   84cbc:	1085883a 	add	r2,r2,r2
   84cc0:	108000c4 	addi	r2,r2,3
   84cc4:	e0fffe17 	ldw	r3,-8(fp)
   84cc8:	1885883a 	add	r2,r3,r2
   84ccc:	10800003 	ldbu	r2,0(r2)
   84cd0:	10803fcc 	andi	r2,r2,255
   84cd4:	d8800015 	stw	r2,0(sp)
   84cd8:	300f883a 	mov	r7,r6
   84cdc:	280d883a 	mov	r6,r5
   84ce0:	200b883a 	mov	r5,r4
   84ce4:	010002b4 	movhi	r4,10
   84ce8:	21302704 	addi	r4,r4,-16228
   84cec:	00877a40 	call	877a4 <ErrorF>
        return ER_FAIL ;
    }

    Switch_HDMITX_Bank(0) ;

    for(TimeOut = 0 ; TimeOut < 5 ; TimeOut++)
   84cf0:	e0bffd03 	ldbu	r2,-12(fp)
   84cf4:	10800044 	addi	r2,r2,1
   84cf8:	e0bffd05 	stb	r2,-12(fp)
   84cfc:	e0bffd03 	ldbu	r2,-12(fp)
   84d00:	10800170 	cmpltui	r2,r2,5
   84d04:	103fab1e 	bne	r2,zero,84bb4 <__alt_data_end+0xfffb4cf4>
        pVr[TimeOut*4+1] = (ULONG)HDMITX_ReadI2C_Byte(REG_TX_SHA_RD_BYTE3) ;
        pVr[TimeOut*4] = (ULONG)HDMITX_ReadI2C_Byte(REG_TX_SHA_RD_BYTE4) ;
		ErrorF("V' = %02X %02X %02X %02X\n",pVr[TimeOut*4],pVr[TimeOut*4+1],pVr[TimeOut*4+2],pVr[TimeOut*4+3]) ; 
    }
    
    return ER_SUCCESS ;
   84d08:	0005883a 	mov	r2,zero
}
   84d0c:	e6ffff04 	addi	sp,fp,-4
   84d10:	dfc00217 	ldw	ra,8(sp)
   84d14:	df000117 	ldw	fp,4(sp)
   84d18:	dc000017 	ldw	r16,0(sp)
   84d1c:	dec00304 	addi	sp,sp,12
   84d20:	f800283a 	ret

00084d24 <HDCP_GetM0>:

static SYS_STATUS
HDCP_GetM0(BYTE *pM0)
{
   84d24:	defffb04 	addi	sp,sp,-20
   84d28:	dfc00415 	stw	ra,16(sp)
   84d2c:	df000315 	stw	fp,12(sp)
   84d30:	dc000215 	stw	r16,8(sp)
   84d34:	df000304 	addi	fp,sp,12
   84d38:	e13ffe15 	stw	r4,-8(fp)
	int i ;

    if(!pM0)
   84d3c:	e0bffe17 	ldw	r2,-8(fp)
   84d40:	1000021e 	bne	r2,zero,84d4c <HDCP_GetM0+0x28>
    {
        return ER_FAIL ;
   84d44:	00800044 	movi	r2,1
   84d48:	00004f06 	br	84e88 <HDCP_GetM0+0x164>
    }
    
    HDMITX_WriteI2C_Byte(REG_TX_SHA_SEL,5) ; // read m0[31:0] from reg51~reg54
   84d4c:	01400144 	movi	r5,5
   84d50:	01001404 	movi	r4,80
   84d54:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    pM0[0] = HDMITX_ReadI2C_Byte(REG_TX_SHA_RD_BYTE1) ;
   84d58:	01001444 	movi	r4,81
   84d5c:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84d60:	1007883a 	mov	r3,r2
   84d64:	e0bffe17 	ldw	r2,-8(fp)
   84d68:	10c00005 	stb	r3,0(r2)
    pM0[1] = HDMITX_ReadI2C_Byte(REG_TX_SHA_RD_BYTE2) ;
   84d6c:	e0bffe17 	ldw	r2,-8(fp)
   84d70:	14000044 	addi	r16,r2,1
   84d74:	01001484 	movi	r4,82
   84d78:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84d7c:	80800005 	stb	r2,0(r16)
    pM0[2] = HDMITX_ReadI2C_Byte(REG_TX_SHA_RD_BYTE3) ;
   84d80:	e0bffe17 	ldw	r2,-8(fp)
   84d84:	14000084 	addi	r16,r2,2
   84d88:	010014c4 	movi	r4,83
   84d8c:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84d90:	80800005 	stb	r2,0(r16)
    pM0[3] = HDMITX_ReadI2C_Byte(REG_TX_SHA_RD_BYTE4) ;
   84d94:	e0bffe17 	ldw	r2,-8(fp)
   84d98:	140000c4 	addi	r16,r2,3
   84d9c:	01001504 	movi	r4,84
   84da0:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84da4:	80800005 	stb	r2,0(r16)
    HDMITX_WriteI2C_Byte(REG_TX_SHA_SEL,0) ; // read m0[39:32] from reg55
   84da8:	000b883a 	mov	r5,zero
   84dac:	01001404 	movi	r4,80
   84db0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    pM0[4] = HDMITX_ReadI2C_Byte(REG_TX_AKSV_RD_BYTE5) ;
   84db4:	e0bffe17 	ldw	r2,-8(fp)
   84db8:	14000104 	addi	r16,r2,4
   84dbc:	01001544 	movi	r4,85
   84dc0:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84dc4:	80800005 	stb	r2,0(r16)
    HDMITX_WriteI2C_Byte(REG_TX_SHA_SEL,1) ; // read m0[47:40] from reg55
   84dc8:	01400044 	movi	r5,1
   84dcc:	01001404 	movi	r4,80
   84dd0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    pM0[5] = HDMITX_ReadI2C_Byte(REG_TX_AKSV_RD_BYTE5) ;
   84dd4:	e0bffe17 	ldw	r2,-8(fp)
   84dd8:	14000144 	addi	r16,r2,5
   84ddc:	01001544 	movi	r4,85
   84de0:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84de4:	80800005 	stb	r2,0(r16)
    HDMITX_WriteI2C_Byte(REG_TX_SHA_SEL,2) ; // read m0[55:48] from reg55
   84de8:	01400084 	movi	r5,2
   84dec:	01001404 	movi	r4,80
   84df0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    pM0[6] = HDMITX_ReadI2C_Byte(REG_TX_AKSV_RD_BYTE5) ;
   84df4:	e0bffe17 	ldw	r2,-8(fp)
   84df8:	14000184 	addi	r16,r2,6
   84dfc:	01001544 	movi	r4,85
   84e00:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84e04:	80800005 	stb	r2,0(r16)
    HDMITX_WriteI2C_Byte(REG_TX_SHA_SEL,3) ; // read m0[63:56] from reg55
   84e08:	014000c4 	movi	r5,3
   84e0c:	01001404 	movi	r4,80
   84e10:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    pM0[7] = HDMITX_ReadI2C_Byte(REG_TX_AKSV_RD_BYTE5) ;
   84e14:	e0bffe17 	ldw	r2,-8(fp)
   84e18:	140001c4 	addi	r16,r2,7
   84e1c:	01001544 	movi	r4,85
   84e20:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   84e24:	80800005 	stb	r2,0(r16)

    ErrorF("M[] =") ;
   84e28:	010002b4 	movhi	r4,10
   84e2c:	21302e04 	addi	r4,r4,-16200
   84e30:	00877a40 	call	877a4 <ErrorF>
	for(i = 0 ; i < 8 ; i++){
   84e34:	e03ffd15 	stw	zero,-12(fp)
   84e38:	00000c06 	br	84e6c <HDCP_GetM0+0x148>
		ErrorF("0x%02x,",pM0[i]) ;
   84e3c:	e0bffd17 	ldw	r2,-12(fp)
   84e40:	e0fffe17 	ldw	r3,-8(fp)
   84e44:	1885883a 	add	r2,r3,r2
   84e48:	10800003 	ldbu	r2,0(r2)
   84e4c:	10803fcc 	andi	r2,r2,255
   84e50:	100b883a 	mov	r5,r2
   84e54:	010002b4 	movhi	r4,10
   84e58:	21303004 	addi	r4,r4,-16192
   84e5c:	00877a40 	call	877a4 <ErrorF>
    pM0[6] = HDMITX_ReadI2C_Byte(REG_TX_AKSV_RD_BYTE5) ;
    HDMITX_WriteI2C_Byte(REG_TX_SHA_SEL,3) ; // read m0[63:56] from reg55
    pM0[7] = HDMITX_ReadI2C_Byte(REG_TX_AKSV_RD_BYTE5) ;

    ErrorF("M[] =") ;
	for(i = 0 ; i < 8 ; i++){
   84e60:	e0bffd17 	ldw	r2,-12(fp)
   84e64:	10800044 	addi	r2,r2,1
   84e68:	e0bffd15 	stw	r2,-12(fp)
   84e6c:	e0bffd17 	ldw	r2,-12(fp)
   84e70:	10800210 	cmplti	r2,r2,8
   84e74:	103ff11e 	bne	r2,zero,84e3c <__alt_data_end+0xfffb4f7c>
		ErrorF("0x%02x,",pM0[i]) ;
	}
	ErrorF("\n") ;
   84e78:	010002b4 	movhi	r4,10
   84e7c:	21300904 	addi	r4,r4,-16348
   84e80:	00877a40 	call	877a4 <ErrorF>
    return ER_SUCCESS ;
   84e84:	0005883a 	mov	r2,zero
}
   84e88:	e6ffff04 	addi	sp,fp,-4
   84e8c:	dfc00217 	ldw	ra,8(sp)
   84e90:	df000117 	ldw	fp,4(sp)
   84e94:	dc000017 	ldw	r16,0(sp)
   84e98:	dec00304 	addi	sp,sp,12
   84e9c:	f800283a 	ret

00084ea0 <SHATransform>:

#define rol(x,y) (((x) << (y)) | (((ULONG)x) >> (32-y)))

static void SHATransform(ULONG * h); // richard add
void SHATransform(ULONG * h)
{
   84ea0:	defff504 	addi	sp,sp,-44
   84ea4:	dfc00a15 	stw	ra,40(sp)
   84ea8:	df000915 	stw	fp,36(sp)
   84eac:	df000904 	addi	fp,sp,36
   84eb0:	e13fff15 	stw	r4,-4(fp)
	LONG t;

      
	for (t = 16; t < 80; t++) {
   84eb4:	00800404 	movi	r2,16
   84eb8:	e0bff915 	stw	r2,-28(fp)
   84ebc:	00003c06 	br	84fb0 <SHATransform+0x110>
		ULONG tmp = w[t - 3] ^ w[t - 8] ^ w[t - 14] ^ w[t - 16];
   84ec0:	e0bff917 	ldw	r2,-28(fp)
   84ec4:	10ffff44 	addi	r3,r2,-3
   84ec8:	008002b4 	movhi	r2,10
   84ecc:	10852c04 	addi	r2,r2,5296
   84ed0:	18c7883a 	add	r3,r3,r3
   84ed4:	18c7883a 	add	r3,r3,r3
   84ed8:	10c5883a 	add	r2,r2,r3
   84edc:	11000017 	ldw	r4,0(r2)
   84ee0:	e0bff917 	ldw	r2,-28(fp)
   84ee4:	10fffe04 	addi	r3,r2,-8
   84ee8:	008002b4 	movhi	r2,10
   84eec:	10852c04 	addi	r2,r2,5296
   84ef0:	18c7883a 	add	r3,r3,r3
   84ef4:	18c7883a 	add	r3,r3,r3
   84ef8:	10c5883a 	add	r2,r2,r3
   84efc:	10800017 	ldw	r2,0(r2)
   84f00:	2088f03a 	xor	r4,r4,r2
   84f04:	e0bff917 	ldw	r2,-28(fp)
   84f08:	10fffc84 	addi	r3,r2,-14
   84f0c:	008002b4 	movhi	r2,10
   84f10:	10852c04 	addi	r2,r2,5296
   84f14:	18c7883a 	add	r3,r3,r3
   84f18:	18c7883a 	add	r3,r3,r3
   84f1c:	10c5883a 	add	r2,r2,r3
   84f20:	10800017 	ldw	r2,0(r2)
   84f24:	2088f03a 	xor	r4,r4,r2
   84f28:	e0bff917 	ldw	r2,-28(fp)
   84f2c:	10fffc04 	addi	r3,r2,-16
   84f30:	008002b4 	movhi	r2,10
   84f34:	10852c04 	addi	r2,r2,5296
   84f38:	18c7883a 	add	r3,r3,r3
   84f3c:	18c7883a 	add	r3,r3,r3
   84f40:	10c5883a 	add	r2,r2,r3
   84f44:	10800017 	ldw	r2,0(r2)
   84f48:	2084f03a 	xor	r2,r4,r2
   84f4c:	e0bffa15 	stw	r2,-24(fp)
		w[t] = rol(tmp,1);
   84f50:	e0bffa17 	ldw	r2,-24(fp)
   84f54:	1008107a 	roli	r4,r2,1
   84f58:	008002b4 	movhi	r2,10
   84f5c:	10852c04 	addi	r2,r2,5296
   84f60:	e0fff917 	ldw	r3,-28(fp)
   84f64:	18c7883a 	add	r3,r3,r3
   84f68:	18c7883a 	add	r3,r3,r3
   84f6c:	10c5883a 	add	r2,r2,r3
   84f70:	11000015 	stw	r4,0(r2)
		printf("w[%2d] = %08lX\n",t,w[t]) ;
   84f74:	008002b4 	movhi	r2,10
   84f78:	10852c04 	addi	r2,r2,5296
   84f7c:	e0fff917 	ldw	r3,-28(fp)
   84f80:	18c7883a 	add	r3,r3,r3
   84f84:	18c7883a 	add	r3,r3,r3
   84f88:	10c5883a 	add	r2,r2,r3
   84f8c:	10800017 	ldw	r2,0(r2)
   84f90:	100d883a 	mov	r6,r2
   84f94:	e17ff917 	ldw	r5,-28(fp)
   84f98:	010002b4 	movhi	r4,10
   84f9c:	21303204 	addi	r4,r4,-16184
   84fa0:	0088fc00 	call	88fc0 <printf>
void SHATransform(ULONG * h)
{
	LONG t;

      
	for (t = 16; t < 80; t++) {
   84fa4:	e0bff917 	ldw	r2,-28(fp)
   84fa8:	10800044 	addi	r2,r2,1
   84fac:	e0bff915 	stw	r2,-28(fp)
   84fb0:	e0bff917 	ldw	r2,-28(fp)
   84fb4:	10801410 	cmplti	r2,r2,80
   84fb8:	103fc11e 	bne	r2,zero,84ec0 <__alt_data_end+0xfffb5000>
		ULONG tmp = w[t - 3] ^ w[t - 8] ^ w[t - 14] ^ w[t - 16];
		w[t] = rol(tmp,1);
		printf("w[%2d] = %08lX\n",t,w[t]) ;
	}

	h[0] = 0x67452301 ;
   84fbc:	e0ffff17 	ldw	r3,-4(fp)
   84fc0:	0099d174 	movhi	r2,26437
   84fc4:	1088c044 	addi	r2,r2,8961
   84fc8:	18800015 	stw	r2,0(r3)
	h[1] = 0xefcdab89;
   84fcc:	e0bfff17 	ldw	r2,-4(fp)
   84fd0:	10c00104 	addi	r3,r2,4
   84fd4:	00bbf3b4 	movhi	r2,61390
   84fd8:	10aae244 	addi	r2,r2,-21623
   84fdc:	18800015 	stw	r2,0(r3)
	h[2] = 0x98badcfe;
   84fe0:	e0bfff17 	ldw	r2,-4(fp)
   84fe4:	10c00204 	addi	r3,r2,8
   84fe8:	00a62ef4 	movhi	r2,39099
   84fec:	10b73f84 	addi	r2,r2,-8962
   84ff0:	18800015 	stw	r2,0(r3)
	h[3] = 0x10325476;
   84ff4:	e0bfff17 	ldw	r2,-4(fp)
   84ff8:	10c00304 	addi	r3,r2,12
   84ffc:	00840cb4 	movhi	r2,4146
   85000:	10951d84 	addi	r2,r2,21622
   85004:	18800015 	stw	r2,0(r3)
	h[4] = 0xc3d2e1f0;
   85008:	e0bfff17 	ldw	r2,-4(fp)
   8500c:	10c00404 	addi	r3,r2,16
   85010:	00b0f4f4 	movhi	r2,50131
   85014:	10b87c04 	addi	r2,r2,-7696
   85018:	18800015 	stw	r2,0(r3)

	for (t = 0; t < 20; t++) {
   8501c:	e03ff915 	stw	zero,-28(fp)
   85020:	00005606 	br	8517c <SHATransform+0x2dc>
		ULONG tmp =
			rol(h[0],5) + ((h[1] & h[2]) | (h[3] & ~h[1])) + h[4] + w[t] + 0x5a827999;
   85024:	e0bfff17 	ldw	r2,-4(fp)
   85028:	10800017 	ldw	r2,0(r2)
   8502c:	1006117a 	roli	r3,r2,5
   85030:	e0bfff17 	ldw	r2,-4(fp)
   85034:	10800304 	addi	r2,r2,12
   85038:	11000017 	ldw	r4,0(r2)
   8503c:	e0bfff17 	ldw	r2,-4(fp)
   85040:	10800204 	addi	r2,r2,8
   85044:	10800017 	ldw	r2,0(r2)
   85048:	2088f03a 	xor	r4,r4,r2
   8504c:	e0bfff17 	ldw	r2,-4(fp)
   85050:	10800104 	addi	r2,r2,4
   85054:	10800017 	ldw	r2,0(r2)
   85058:	2088703a 	and	r4,r4,r2
   8505c:	e0bfff17 	ldw	r2,-4(fp)
   85060:	10800304 	addi	r2,r2,12
   85064:	10800017 	ldw	r2,0(r2)
   85068:	2084f03a 	xor	r2,r4,r2
   8506c:	1887883a 	add	r3,r3,r2
   85070:	e0bfff17 	ldw	r2,-4(fp)
   85074:	10800404 	addi	r2,r2,16
   85078:	10800017 	ldw	r2,0(r2)
   8507c:	1889883a 	add	r4,r3,r2
   85080:	008002b4 	movhi	r2,10
   85084:	10852c04 	addi	r2,r2,5296
   85088:	e0fff917 	ldw	r3,-28(fp)
   8508c:	18c7883a 	add	r3,r3,r3
   85090:	18c7883a 	add	r3,r3,r3
   85094:	10c5883a 	add	r2,r2,r3
   85098:	10800017 	ldw	r2,0(r2)
   8509c:	2087883a 	add	r3,r4,r2
	h[2] = 0x98badcfe;
	h[3] = 0x10325476;
	h[4] = 0xc3d2e1f0;

	for (t = 0; t < 20; t++) {
		ULONG tmp =
   850a0:	0096a0b4 	movhi	r2,23170
   850a4:	109e6644 	addi	r2,r2,31129
   850a8:	1885883a 	add	r2,r3,r2
   850ac:	e0bffb15 	stw	r2,-20(fp)
			rol(h[0],5) + ((h[1] & h[2]) | (h[3] & ~h[1])) + h[4] + w[t] + 0x5a827999;
		printf("%08lX %08lX %08lX %08lX %08lX\n",h[0],h[1],h[2],h[3],h[4]) ;
   850b0:	e0bfff17 	ldw	r2,-4(fp)
   850b4:	11000017 	ldw	r4,0(r2)
   850b8:	e0bfff17 	ldw	r2,-4(fp)
   850bc:	10800104 	addi	r2,r2,4
   850c0:	11400017 	ldw	r5,0(r2)
   850c4:	e0bfff17 	ldw	r2,-4(fp)
   850c8:	10800204 	addi	r2,r2,8
   850cc:	11800017 	ldw	r6,0(r2)
   850d0:	e0bfff17 	ldw	r2,-4(fp)
   850d4:	10800304 	addi	r2,r2,12
   850d8:	10800017 	ldw	r2,0(r2)
   850dc:	e0ffff17 	ldw	r3,-4(fp)
   850e0:	18c00404 	addi	r3,r3,16
   850e4:	18c00017 	ldw	r3,0(r3)
   850e8:	d8c00115 	stw	r3,4(sp)
   850ec:	d8800015 	stw	r2,0(sp)
   850f0:	300f883a 	mov	r7,r6
   850f4:	280d883a 	mov	r6,r5
   850f8:	200b883a 	mov	r5,r4
   850fc:	010002b4 	movhi	r4,10
   85100:	21303604 	addi	r4,r4,-16168
   85104:	0088fc00 	call	88fc0 <printf>

		h[4] = h[3];
   85108:	e0bfff17 	ldw	r2,-4(fp)
   8510c:	10800404 	addi	r2,r2,16
   85110:	e0ffff17 	ldw	r3,-4(fp)
   85114:	18c00317 	ldw	r3,12(r3)
   85118:	10c00015 	stw	r3,0(r2)
		h[3] = h[2];
   8511c:	e0bfff17 	ldw	r2,-4(fp)
   85120:	10800304 	addi	r2,r2,12
   85124:	e0ffff17 	ldw	r3,-4(fp)
   85128:	18c00217 	ldw	r3,8(r3)
   8512c:	10c00015 	stw	r3,0(r2)
		h[2] = rol(h[1],30);
   85130:	e0bfff17 	ldw	r2,-4(fp)
   85134:	10800204 	addi	r2,r2,8
   85138:	e0ffff17 	ldw	r3,-4(fp)
   8513c:	18c00104 	addi	r3,r3,4
   85140:	19000017 	ldw	r4,0(r3)
   85144:	00c00084 	movi	r3,2
   85148:	20c6583a 	ror	r3,r4,r3
   8514c:	10c00015 	stw	r3,0(r2)
		h[1] = h[0];
   85150:	e0bfff17 	ldw	r2,-4(fp)
   85154:	10800104 	addi	r2,r2,4
   85158:	e0ffff17 	ldw	r3,-4(fp)
   8515c:	18c00017 	ldw	r3,0(r3)
   85160:	10c00015 	stw	r3,0(r2)
		h[0] = tmp;
   85164:	e0bfff17 	ldw	r2,-4(fp)
   85168:	e0fffb17 	ldw	r3,-20(fp)
   8516c:	10c00015 	stw	r3,0(r2)
	h[1] = 0xefcdab89;
	h[2] = 0x98badcfe;
	h[3] = 0x10325476;
	h[4] = 0xc3d2e1f0;

	for (t = 0; t < 20; t++) {
   85170:	e0bff917 	ldw	r2,-28(fp)
   85174:	10800044 	addi	r2,r2,1
   85178:	e0bff915 	stw	r2,-28(fp)
   8517c:	e0bff917 	ldw	r2,-28(fp)
   85180:	10800510 	cmplti	r2,r2,20
   85184:	103fa71e 	bne	r2,zero,85024 <__alt_data_end+0xfffb5164>
		h[2] = rol(h[1],30);
		h[1] = h[0];
		h[0] = tmp;
		
	}
	for (t = 20; t < 40; t++) {
   85188:	00800504 	movi	r2,20
   8518c:	e0bff915 	stw	r2,-28(fp)
   85190:	00005206 	br	852dc <SHATransform+0x43c>
		ULONG tmp = rol(h[0],5) + (h[1] ^ h[2] ^ h[3]) + h[4] + w[t] + 0x6ed9eba1;
   85194:	e0bfff17 	ldw	r2,-4(fp)
   85198:	10800017 	ldw	r2,0(r2)
   8519c:	1006117a 	roli	r3,r2,5
   851a0:	e0bfff17 	ldw	r2,-4(fp)
   851a4:	10800104 	addi	r2,r2,4
   851a8:	11000017 	ldw	r4,0(r2)
   851ac:	e0bfff17 	ldw	r2,-4(fp)
   851b0:	10800204 	addi	r2,r2,8
   851b4:	10800017 	ldw	r2,0(r2)
   851b8:	2088f03a 	xor	r4,r4,r2
   851bc:	e0bfff17 	ldw	r2,-4(fp)
   851c0:	10800304 	addi	r2,r2,12
   851c4:	10800017 	ldw	r2,0(r2)
   851c8:	2084f03a 	xor	r2,r4,r2
   851cc:	1887883a 	add	r3,r3,r2
   851d0:	e0bfff17 	ldw	r2,-4(fp)
   851d4:	10800404 	addi	r2,r2,16
   851d8:	10800017 	ldw	r2,0(r2)
   851dc:	1889883a 	add	r4,r3,r2
   851e0:	008002b4 	movhi	r2,10
   851e4:	10852c04 	addi	r2,r2,5296
   851e8:	e0fff917 	ldw	r3,-28(fp)
   851ec:	18c7883a 	add	r3,r3,r3
   851f0:	18c7883a 	add	r3,r3,r3
   851f4:	10c5883a 	add	r2,r2,r3
   851f8:	10800017 	ldw	r2,0(r2)
   851fc:	2087883a 	add	r3,r4,r2
   85200:	009bb6b4 	movhi	r2,28378
   85204:	10bae844 	addi	r2,r2,-5215
   85208:	1885883a 	add	r2,r3,r2
   8520c:	e0bffc15 	stw	r2,-16(fp)
		printf("%08lX %08lX %08lX %08lX %08lX\n",h[0],h[1],h[2],h[3],h[4]) ;
   85210:	e0bfff17 	ldw	r2,-4(fp)
   85214:	11000017 	ldw	r4,0(r2)
   85218:	e0bfff17 	ldw	r2,-4(fp)
   8521c:	10800104 	addi	r2,r2,4
   85220:	11400017 	ldw	r5,0(r2)
   85224:	e0bfff17 	ldw	r2,-4(fp)
   85228:	10800204 	addi	r2,r2,8
   8522c:	11800017 	ldw	r6,0(r2)
   85230:	e0bfff17 	ldw	r2,-4(fp)
   85234:	10800304 	addi	r2,r2,12
   85238:	10800017 	ldw	r2,0(r2)
   8523c:	e0ffff17 	ldw	r3,-4(fp)
   85240:	18c00404 	addi	r3,r3,16
   85244:	18c00017 	ldw	r3,0(r3)
   85248:	d8c00115 	stw	r3,4(sp)
   8524c:	d8800015 	stw	r2,0(sp)
   85250:	300f883a 	mov	r7,r6
   85254:	280d883a 	mov	r6,r5
   85258:	200b883a 	mov	r5,r4
   8525c:	010002b4 	movhi	r4,10
   85260:	21303604 	addi	r4,r4,-16168
   85264:	0088fc00 	call	88fc0 <printf>
		h[4] = h[3];
   85268:	e0bfff17 	ldw	r2,-4(fp)
   8526c:	10800404 	addi	r2,r2,16
   85270:	e0ffff17 	ldw	r3,-4(fp)
   85274:	18c00317 	ldw	r3,12(r3)
   85278:	10c00015 	stw	r3,0(r2)
		h[3] = h[2];
   8527c:	e0bfff17 	ldw	r2,-4(fp)
   85280:	10800304 	addi	r2,r2,12
   85284:	e0ffff17 	ldw	r3,-4(fp)
   85288:	18c00217 	ldw	r3,8(r3)
   8528c:	10c00015 	stw	r3,0(r2)
		h[2] = rol(h[1],30);
   85290:	e0bfff17 	ldw	r2,-4(fp)
   85294:	10800204 	addi	r2,r2,8
   85298:	e0ffff17 	ldw	r3,-4(fp)
   8529c:	18c00104 	addi	r3,r3,4
   852a0:	19000017 	ldw	r4,0(r3)
   852a4:	00c00084 	movi	r3,2
   852a8:	20c6583a 	ror	r3,r4,r3
   852ac:	10c00015 	stw	r3,0(r2)
		h[1] = h[0];
   852b0:	e0bfff17 	ldw	r2,-4(fp)
   852b4:	10800104 	addi	r2,r2,4
   852b8:	e0ffff17 	ldw	r3,-4(fp)
   852bc:	18c00017 	ldw	r3,0(r3)
   852c0:	10c00015 	stw	r3,0(r2)
		h[0] = tmp;
   852c4:	e0bfff17 	ldw	r2,-4(fp)
   852c8:	e0fffc17 	ldw	r3,-16(fp)
   852cc:	10c00015 	stw	r3,0(r2)
		h[2] = rol(h[1],30);
		h[1] = h[0];
		h[0] = tmp;
		
	}
	for (t = 20; t < 40; t++) {
   852d0:	e0bff917 	ldw	r2,-28(fp)
   852d4:	10800044 	addi	r2,r2,1
   852d8:	e0bff915 	stw	r2,-28(fp)
   852dc:	e0bff917 	ldw	r2,-28(fp)
   852e0:	10800a10 	cmplti	r2,r2,40
   852e4:	103fab1e 	bne	r2,zero,85194 <__alt_data_end+0xfffb52d4>
		h[3] = h[2];
		h[2] = rol(h[1],30);
		h[1] = h[0];
		h[0] = tmp;
	}
	for (t = 40; t < 60; t++) {
   852e8:	00800a04 	movi	r2,40
   852ec:	e0bff915 	stw	r2,-28(fp)
   852f0:	00005a06 	br	8545c <SHATransform+0x5bc>
		ULONG tmp = rol(h[0],
   852f4:	e0bfff17 	ldw	r2,-4(fp)
   852f8:	10800017 	ldw	r2,0(r2)
   852fc:	1006117a 	roli	r3,r2,5
						 5) + ((h[1] & h[2]) | (h[1] & h[3]) | (h[2] & h[3])) + h[4] + w[t] +
   85300:	e0bfff17 	ldw	r2,-4(fp)
   85304:	10800104 	addi	r2,r2,4
   85308:	11000017 	ldw	r4,0(r2)
   8530c:	e0bfff17 	ldw	r2,-4(fp)
   85310:	10800204 	addi	r2,r2,8
   85314:	11400017 	ldw	r5,0(r2)
   85318:	e0bfff17 	ldw	r2,-4(fp)
   8531c:	10800304 	addi	r2,r2,12
   85320:	10800017 	ldw	r2,0(r2)
   85324:	2884b03a 	or	r2,r5,r2
   85328:	2088703a 	and	r4,r4,r2
   8532c:	e0bfff17 	ldw	r2,-4(fp)
   85330:	10800204 	addi	r2,r2,8
   85334:	11400017 	ldw	r5,0(r2)
   85338:	e0bfff17 	ldw	r2,-4(fp)
   8533c:	10800304 	addi	r2,r2,12
   85340:	10800017 	ldw	r2,0(r2)
   85344:	2884703a 	and	r2,r5,r2
   85348:	2084b03a 	or	r2,r4,r2
   8534c:	1887883a 	add	r3,r3,r2
   85350:	e0bfff17 	ldw	r2,-4(fp)
   85354:	10800404 	addi	r2,r2,16
   85358:	10800017 	ldw	r2,0(r2)
   8535c:	1889883a 	add	r4,r3,r2
   85360:	008002b4 	movhi	r2,10
   85364:	10852c04 	addi	r2,r2,5296
   85368:	e0fff917 	ldw	r3,-28(fp)
   8536c:	18c7883a 	add	r3,r3,r3
   85370:	18c7883a 	add	r3,r3,r3
   85374:	10c5883a 	add	r2,r2,r3
   85378:	10800017 	ldw	r2,0(r2)
   8537c:	2087883a 	add	r3,r4,r2
		h[2] = rol(h[1],30);
		h[1] = h[0];
		h[0] = tmp;
	}
	for (t = 40; t < 60; t++) {
		ULONG tmp = rol(h[0],
   85380:	00a3c734 	movhi	r2,36636
   85384:	10af3704 	addi	r2,r2,-17188
   85388:	1885883a 	add	r2,r3,r2
   8538c:	e0bffd15 	stw	r2,-12(fp)
						 5) + ((h[1] & h[2]) | (h[1] & h[3]) | (h[2] & h[3])) + h[4] + w[t] +
			0x8f1bbcdc;
		printf("%08lX %08lX %08lX %08lX %08lX\n",h[0],h[1],h[2],h[3],h[4]) ;
   85390:	e0bfff17 	ldw	r2,-4(fp)
   85394:	11000017 	ldw	r4,0(r2)
   85398:	e0bfff17 	ldw	r2,-4(fp)
   8539c:	10800104 	addi	r2,r2,4
   853a0:	11400017 	ldw	r5,0(r2)
   853a4:	e0bfff17 	ldw	r2,-4(fp)
   853a8:	10800204 	addi	r2,r2,8
   853ac:	11800017 	ldw	r6,0(r2)
   853b0:	e0bfff17 	ldw	r2,-4(fp)
   853b4:	10800304 	addi	r2,r2,12
   853b8:	10800017 	ldw	r2,0(r2)
   853bc:	e0ffff17 	ldw	r3,-4(fp)
   853c0:	18c00404 	addi	r3,r3,16
   853c4:	18c00017 	ldw	r3,0(r3)
   853c8:	d8c00115 	stw	r3,4(sp)
   853cc:	d8800015 	stw	r2,0(sp)
   853d0:	300f883a 	mov	r7,r6
   853d4:	280d883a 	mov	r6,r5
   853d8:	200b883a 	mov	r5,r4
   853dc:	010002b4 	movhi	r4,10
   853e0:	21303604 	addi	r4,r4,-16168
   853e4:	0088fc00 	call	88fc0 <printf>
		h[4] = h[3];
   853e8:	e0bfff17 	ldw	r2,-4(fp)
   853ec:	10800404 	addi	r2,r2,16
   853f0:	e0ffff17 	ldw	r3,-4(fp)
   853f4:	18c00317 	ldw	r3,12(r3)
   853f8:	10c00015 	stw	r3,0(r2)
		h[3] = h[2];
   853fc:	e0bfff17 	ldw	r2,-4(fp)
   85400:	10800304 	addi	r2,r2,12
   85404:	e0ffff17 	ldw	r3,-4(fp)
   85408:	18c00217 	ldw	r3,8(r3)
   8540c:	10c00015 	stw	r3,0(r2)
		h[2] = rol(h[1],30);
   85410:	e0bfff17 	ldw	r2,-4(fp)
   85414:	10800204 	addi	r2,r2,8
   85418:	e0ffff17 	ldw	r3,-4(fp)
   8541c:	18c00104 	addi	r3,r3,4
   85420:	19000017 	ldw	r4,0(r3)
   85424:	00c00084 	movi	r3,2
   85428:	20c6583a 	ror	r3,r4,r3
   8542c:	10c00015 	stw	r3,0(r2)
		h[1] = h[0];
   85430:	e0bfff17 	ldw	r2,-4(fp)
   85434:	10800104 	addi	r2,r2,4
   85438:	e0ffff17 	ldw	r3,-4(fp)
   8543c:	18c00017 	ldw	r3,0(r3)
   85440:	10c00015 	stw	r3,0(r2)
		h[0] = tmp;
   85444:	e0bfff17 	ldw	r2,-4(fp)
   85448:	e0fffd17 	ldw	r3,-12(fp)
   8544c:	10c00015 	stw	r3,0(r2)
		h[3] = h[2];
		h[2] = rol(h[1],30);
		h[1] = h[0];
		h[0] = tmp;
	}
	for (t = 40; t < 60; t++) {
   85450:	e0bff917 	ldw	r2,-28(fp)
   85454:	10800044 	addi	r2,r2,1
   85458:	e0bff915 	stw	r2,-28(fp)
   8545c:	e0bff917 	ldw	r2,-28(fp)
   85460:	10800f10 	cmplti	r2,r2,60
   85464:	103fa31e 	bne	r2,zero,852f4 <__alt_data_end+0xfffb5434>
		h[3] = h[2];
		h[2] = rol(h[1],30);
		h[1] = h[0];
		h[0] = tmp;
	}
	for (t = 60; t < 80; t++) {
   85468:	00800f04 	movi	r2,60
   8546c:	e0bff915 	stw	r2,-28(fp)
   85470:	00005206 	br	855bc <SHATransform+0x71c>
		ULONG tmp = rol(h[0],5) + (h[1] ^ h[2] ^ h[3]) + h[4] + w[t] + 0xca62c1d6;
   85474:	e0bfff17 	ldw	r2,-4(fp)
   85478:	10800017 	ldw	r2,0(r2)
   8547c:	1006117a 	roli	r3,r2,5
   85480:	e0bfff17 	ldw	r2,-4(fp)
   85484:	10800104 	addi	r2,r2,4
   85488:	11000017 	ldw	r4,0(r2)
   8548c:	e0bfff17 	ldw	r2,-4(fp)
   85490:	10800204 	addi	r2,r2,8
   85494:	10800017 	ldw	r2,0(r2)
   85498:	2088f03a 	xor	r4,r4,r2
   8549c:	e0bfff17 	ldw	r2,-4(fp)
   854a0:	10800304 	addi	r2,r2,12
   854a4:	10800017 	ldw	r2,0(r2)
   854a8:	2084f03a 	xor	r2,r4,r2
   854ac:	1887883a 	add	r3,r3,r2
   854b0:	e0bfff17 	ldw	r2,-4(fp)
   854b4:	10800404 	addi	r2,r2,16
   854b8:	10800017 	ldw	r2,0(r2)
   854bc:	1889883a 	add	r4,r3,r2
   854c0:	008002b4 	movhi	r2,10
   854c4:	10852c04 	addi	r2,r2,5296
   854c8:	e0fff917 	ldw	r3,-28(fp)
   854cc:	18c7883a 	add	r3,r3,r3
   854d0:	18c7883a 	add	r3,r3,r3
   854d4:	10c5883a 	add	r2,r2,r3
   854d8:	10800017 	ldw	r2,0(r2)
   854dc:	2087883a 	add	r3,r4,r2
   854e0:	00b298f4 	movhi	r2,51811
   854e4:	10b07584 	addi	r2,r2,-15914
   854e8:	1885883a 	add	r2,r3,r2
   854ec:	e0bffe15 	stw	r2,-8(fp)
		printf("%08lX %08lX %08lX %08lX %08lX\n",h[0],h[1],h[2],h[3],h[4]) ;
   854f0:	e0bfff17 	ldw	r2,-4(fp)
   854f4:	11000017 	ldw	r4,0(r2)
   854f8:	e0bfff17 	ldw	r2,-4(fp)
   854fc:	10800104 	addi	r2,r2,4
   85500:	11400017 	ldw	r5,0(r2)
   85504:	e0bfff17 	ldw	r2,-4(fp)
   85508:	10800204 	addi	r2,r2,8
   8550c:	11800017 	ldw	r6,0(r2)
   85510:	e0bfff17 	ldw	r2,-4(fp)
   85514:	10800304 	addi	r2,r2,12
   85518:	10800017 	ldw	r2,0(r2)
   8551c:	e0ffff17 	ldw	r3,-4(fp)
   85520:	18c00404 	addi	r3,r3,16
   85524:	18c00017 	ldw	r3,0(r3)
   85528:	d8c00115 	stw	r3,4(sp)
   8552c:	d8800015 	stw	r2,0(sp)
   85530:	300f883a 	mov	r7,r6
   85534:	280d883a 	mov	r6,r5
   85538:	200b883a 	mov	r5,r4
   8553c:	010002b4 	movhi	r4,10
   85540:	21303604 	addi	r4,r4,-16168
   85544:	0088fc00 	call	88fc0 <printf>
		h[4] = h[3];
   85548:	e0bfff17 	ldw	r2,-4(fp)
   8554c:	10800404 	addi	r2,r2,16
   85550:	e0ffff17 	ldw	r3,-4(fp)
   85554:	18c00317 	ldw	r3,12(r3)
   85558:	10c00015 	stw	r3,0(r2)
		h[3] = h[2];
   8555c:	e0bfff17 	ldw	r2,-4(fp)
   85560:	10800304 	addi	r2,r2,12
   85564:	e0ffff17 	ldw	r3,-4(fp)
   85568:	18c00217 	ldw	r3,8(r3)
   8556c:	10c00015 	stw	r3,0(r2)
		h[2] = rol(h[1],30);
   85570:	e0bfff17 	ldw	r2,-4(fp)
   85574:	10800204 	addi	r2,r2,8
   85578:	e0ffff17 	ldw	r3,-4(fp)
   8557c:	18c00104 	addi	r3,r3,4
   85580:	19000017 	ldw	r4,0(r3)
   85584:	00c00084 	movi	r3,2
   85588:	20c6583a 	ror	r3,r4,r3
   8558c:	10c00015 	stw	r3,0(r2)
		h[1] = h[0];
   85590:	e0bfff17 	ldw	r2,-4(fp)
   85594:	10800104 	addi	r2,r2,4
   85598:	e0ffff17 	ldw	r3,-4(fp)
   8559c:	18c00017 	ldw	r3,0(r3)
   855a0:	10c00015 	stw	r3,0(r2)
		h[0] = tmp;
   855a4:	e0bfff17 	ldw	r2,-4(fp)
   855a8:	e0fffe17 	ldw	r3,-8(fp)
   855ac:	10c00015 	stw	r3,0(r2)
		h[3] = h[2];
		h[2] = rol(h[1],30);
		h[1] = h[0];
		h[0] = tmp;
	}
	for (t = 60; t < 80; t++) {
   855b0:	e0bff917 	ldw	r2,-28(fp)
   855b4:	10800044 	addi	r2,r2,1
   855b8:	e0bff915 	stw	r2,-28(fp)
   855bc:	e0bff917 	ldw	r2,-28(fp)
   855c0:	10801410 	cmplti	r2,r2,80
   855c4:	103fab1e 	bne	r2,zero,85474 <__alt_data_end+0xfffb55b4>
		h[3] = h[2];
		h[2] = rol(h[1],30);
		h[1] = h[0];
		h[0] = tmp;
	}
	printf("%08lX %08lX %08lX %08lX %08lX\n",h[0],h[1],h[2],h[3],h[4]) ;
   855c8:	e0bfff17 	ldw	r2,-4(fp)
   855cc:	11000017 	ldw	r4,0(r2)
   855d0:	e0bfff17 	ldw	r2,-4(fp)
   855d4:	10800104 	addi	r2,r2,4
   855d8:	11400017 	ldw	r5,0(r2)
   855dc:	e0bfff17 	ldw	r2,-4(fp)
   855e0:	10800204 	addi	r2,r2,8
   855e4:	11800017 	ldw	r6,0(r2)
   855e8:	e0bfff17 	ldw	r2,-4(fp)
   855ec:	10800304 	addi	r2,r2,12
   855f0:	10800017 	ldw	r2,0(r2)
   855f4:	e0ffff17 	ldw	r3,-4(fp)
   855f8:	18c00404 	addi	r3,r3,16
   855fc:	18c00017 	ldw	r3,0(r3)
   85600:	d8c00115 	stw	r3,4(sp)
   85604:	d8800015 	stw	r2,0(sp)
   85608:	300f883a 	mov	r7,r6
   8560c:	280d883a 	mov	r6,r5
   85610:	200b883a 	mov	r5,r4
   85614:	010002b4 	movhi	r4,10
   85618:	21303604 	addi	r4,r4,-16168
   8561c:	0088fc00 	call	88fc0 <printf>

	h[0] += 0x67452301 ;
   85620:	e0bfff17 	ldw	r2,-4(fp)
   85624:	10c00017 	ldw	r3,0(r2)
   85628:	0099d174 	movhi	r2,26437
   8562c:	1088c044 	addi	r2,r2,8961
   85630:	1887883a 	add	r3,r3,r2
   85634:	e0bfff17 	ldw	r2,-4(fp)
   85638:	10c00015 	stw	r3,0(r2)
	h[1] += 0xefcdab89;
   8563c:	e0bfff17 	ldw	r2,-4(fp)
   85640:	10c00104 	addi	r3,r2,4
   85644:	e0bfff17 	ldw	r2,-4(fp)
   85648:	10800104 	addi	r2,r2,4
   8564c:	11000017 	ldw	r4,0(r2)
   85650:	00bbf3b4 	movhi	r2,61390
   85654:	10aae244 	addi	r2,r2,-21623
   85658:	2085883a 	add	r2,r4,r2
   8565c:	18800015 	stw	r2,0(r3)
	h[2] += 0x98badcfe;
   85660:	e0bfff17 	ldw	r2,-4(fp)
   85664:	10c00204 	addi	r3,r2,8
   85668:	e0bfff17 	ldw	r2,-4(fp)
   8566c:	10800204 	addi	r2,r2,8
   85670:	11000017 	ldw	r4,0(r2)
   85674:	00a62ef4 	movhi	r2,39099
   85678:	10b73f84 	addi	r2,r2,-8962
   8567c:	2085883a 	add	r2,r4,r2
   85680:	18800015 	stw	r2,0(r3)
	h[3] += 0x10325476;
   85684:	e0bfff17 	ldw	r2,-4(fp)
   85688:	10c00304 	addi	r3,r2,12
   8568c:	e0bfff17 	ldw	r2,-4(fp)
   85690:	10800304 	addi	r2,r2,12
   85694:	11000017 	ldw	r4,0(r2)
   85698:	00840cb4 	movhi	r2,4146
   8569c:	10951d84 	addi	r2,r2,21622
   856a0:	2085883a 	add	r2,r4,r2
   856a4:	18800015 	stw	r2,0(r3)
	h[4] += 0xc3d2e1f0;
   856a8:	e0bfff17 	ldw	r2,-4(fp)
   856ac:	10c00404 	addi	r3,r2,16
   856b0:	e0bfff17 	ldw	r2,-4(fp)
   856b4:	10800404 	addi	r2,r2,16
   856b8:	11000017 	ldw	r4,0(r2)
   856bc:	00b0f4f4 	movhi	r2,50131
   856c0:	10b87c04 	addi	r2,r2,-7696
   856c4:	2085883a 	add	r2,r4,r2
   856c8:	18800015 	stw	r2,0(r3)
	printf("%08lX %08lX %08lX %08lX %08lX\n",h[0],h[1],h[2],h[3],h[4]) ;
   856cc:	e0bfff17 	ldw	r2,-4(fp)
   856d0:	11000017 	ldw	r4,0(r2)
   856d4:	e0bfff17 	ldw	r2,-4(fp)
   856d8:	10800104 	addi	r2,r2,4
   856dc:	11400017 	ldw	r5,0(r2)
   856e0:	e0bfff17 	ldw	r2,-4(fp)
   856e4:	10800204 	addi	r2,r2,8
   856e8:	11800017 	ldw	r6,0(r2)
   856ec:	e0bfff17 	ldw	r2,-4(fp)
   856f0:	10800304 	addi	r2,r2,12
   856f4:	10800017 	ldw	r2,0(r2)
   856f8:	e0ffff17 	ldw	r3,-4(fp)
   856fc:	18c00404 	addi	r3,r3,16
   85700:	18c00017 	ldw	r3,0(r3)
   85704:	d8c00115 	stw	r3,4(sp)
   85708:	d8800015 	stw	r2,0(sp)
   8570c:	300f883a 	mov	r7,r6
   85710:	280d883a 	mov	r6,r5
   85714:	200b883a 	mov	r5,r4
   85718:	010002b4 	movhi	r4,10
   8571c:	21303604 	addi	r4,r4,-16168
   85720:	0088fc00 	call	88fc0 <printf>
}
   85724:	0001883a 	nop
   85728:	e037883a 	mov	sp,fp
   8572c:	dfc00117 	ldw	ra,4(sp)
   85730:	df000017 	ldw	fp,0(sp)
   85734:	dec00204 	addi	sp,sp,8
   85738:	f800283a 	ret

0008573c <SHA_Simple>:
 * the end,and pass those blocks to the core SHA algorithm.
 */


void SHA_Simple(void *p,LONG len,BYTE *output)
{
   8573c:	defff504 	addi	sp,sp,-44
   85740:	dfc00a15 	stw	ra,40(sp)
   85744:	df000915 	stw	fp,36(sp)
   85748:	df000904 	addi	fp,sp,36
   8574c:	e13ffd15 	stw	r4,-12(fp)
   85750:	e17ffe15 	stw	r5,-8(fp)
   85754:	e1bfff15 	stw	r6,-4(fp)
	// SHA_State s;
    int i, t ;
    ULONG c ;
    char *pBuff = p ;
   85758:	e0bffd17 	ldw	r2,-12(fp)
   8575c:	e0bffb15 	stw	r2,-20(fp)
    
    
    for( i = 0 ; i < len ; i++ )
   85760:	e03ff915 	stw	zero,-28(fp)
   85764:	00005106 	br	858ac <SHA_Simple+0x170>
    {
        t = i/4 ;
   85768:	e0bff917 	ldw	r2,-28(fp)
   8576c:	1000010e 	bge	r2,zero,85774 <SHA_Simple+0x38>
   85770:	108000c4 	addi	r2,r2,3
   85774:	1005d0ba 	srai	r2,r2,2
   85778:	e0bffa15 	stw	r2,-24(fp)
        if( i%4 == 0 )
   8577c:	e0bff917 	ldw	r2,-28(fp)
   85780:	108000cc 	andi	r2,r2,3
   85784:	1000071e 	bne	r2,zero,857a4 <SHA_Simple+0x68>
        {
            w[t] = 0 ;
   85788:	008002b4 	movhi	r2,10
   8578c:	10852c04 	addi	r2,r2,5296
   85790:	e0fffa17 	ldw	r3,-24(fp)
   85794:	18c7883a 	add	r3,r3,r3
   85798:	18c7883a 	add	r3,r3,r3
   8579c:	10c5883a 	add	r2,r2,r3
   857a0:	10000015 	stw	zero,0(r2)
        }
        c = pBuff[i] ;
   857a4:	e0bff917 	ldw	r2,-28(fp)
   857a8:	e0fffb17 	ldw	r3,-20(fp)
   857ac:	1885883a 	add	r2,r3,r2
   857b0:	10800003 	ldbu	r2,0(r2)
   857b4:	10803fcc 	andi	r2,r2,255
   857b8:	1080201c 	xori	r2,r2,128
   857bc:	10bfe004 	addi	r2,r2,-128
   857c0:	e0bffc15 	stw	r2,-16(fp)
        c <<= (3-(i%4))*8 ;
   857c4:	e0fff917 	ldw	r3,-28(fp)
   857c8:	00a00034 	movhi	r2,32768
   857cc:	108000c4 	addi	r2,r2,3
   857d0:	1884703a 	and	r2,r3,r2
   857d4:	1000040e 	bge	r2,zero,857e8 <SHA_Simple+0xac>
   857d8:	10bfffc4 	addi	r2,r2,-1
   857dc:	00ffff04 	movi	r3,-4
   857e0:	10c4b03a 	or	r2,r2,r3
   857e4:	10800044 	addi	r2,r2,1
   857e8:	1007883a 	mov	r3,r2
   857ec:	008000c4 	movi	r2,3
   857f0:	10c5c83a 	sub	r2,r2,r3
   857f4:	100490fa 	slli	r2,r2,3
   857f8:	e0fffc17 	ldw	r3,-16(fp)
   857fc:	1884983a 	sll	r2,r3,r2
   85800:	e0bffc15 	stw	r2,-16(fp)
        w[t] |= c ;
   85804:	008002b4 	movhi	r2,10
   85808:	10852c04 	addi	r2,r2,5296
   8580c:	e0fffa17 	ldw	r3,-24(fp)
   85810:	18c7883a 	add	r3,r3,r3
   85814:	18c7883a 	add	r3,r3,r3
   85818:	10c5883a 	add	r2,r2,r3
   8581c:	10c00017 	ldw	r3,0(r2)
   85820:	e0bffc17 	ldw	r2,-16(fp)
   85824:	1888b03a 	or	r4,r3,r2
   85828:	008002b4 	movhi	r2,10
   8582c:	10852c04 	addi	r2,r2,5296
   85830:	e0fffa17 	ldw	r3,-24(fp)
   85834:	18c7883a 	add	r3,r3,r3
   85838:	18c7883a 	add	r3,r3,r3
   8583c:	10c5883a 	add	r2,r2,r3
   85840:	11000015 	stw	r4,0(r2)
        printf("pBuff[%d] = %02x, c = %08lX, w[%d] = %08lX\n",i,pBuff[i],c,t,w[t]) ;
   85844:	e0bff917 	ldw	r2,-28(fp)
   85848:	e0fffb17 	ldw	r3,-20(fp)
   8584c:	1885883a 	add	r2,r3,r2
   85850:	10800003 	ldbu	r2,0(r2)
   85854:	11003fcc 	andi	r4,r2,255
   85858:	2100201c 	xori	r4,r4,128
   8585c:	213fe004 	addi	r4,r4,-128
   85860:	008002b4 	movhi	r2,10
   85864:	10852c04 	addi	r2,r2,5296
   85868:	e0fffa17 	ldw	r3,-24(fp)
   8586c:	18c7883a 	add	r3,r3,r3
   85870:	18c7883a 	add	r3,r3,r3
   85874:	10c5883a 	add	r2,r2,r3
   85878:	10800017 	ldw	r2,0(r2)
   8587c:	d8800115 	stw	r2,4(sp)
   85880:	e0bffa17 	ldw	r2,-24(fp)
   85884:	d8800015 	stw	r2,0(sp)
   85888:	e1fffc17 	ldw	r7,-16(fp)
   8588c:	200d883a 	mov	r6,r4
   85890:	e17ff917 	ldw	r5,-28(fp)
   85894:	010002b4 	movhi	r4,10
   85898:	21303e04 	addi	r4,r4,-16136
   8589c:	0088fc00 	call	88fc0 <printf>
    int i, t ;
    ULONG c ;
    char *pBuff = p ;
    
    
    for( i = 0 ; i < len ; i++ )
   858a0:	e0bff917 	ldw	r2,-28(fp)
   858a4:	10800044 	addi	r2,r2,1
   858a8:	e0bff915 	stw	r2,-28(fp)
   858ac:	e0fff917 	ldw	r3,-28(fp)
   858b0:	e0bffe17 	ldw	r2,-8(fp)
   858b4:	18bfac16 	blt	r3,r2,85768 <__alt_data_end+0xfffb58a8>
        c = pBuff[i] ;
        c <<= (3-(i%4))*8 ;
        w[t] |= c ;
        printf("pBuff[%d] = %02x, c = %08lX, w[%d] = %08lX\n",i,pBuff[i],c,t,w[t]) ;
    }
    t = i/4 ;
   858b8:	e0bff917 	ldw	r2,-28(fp)
   858bc:	1000010e 	bge	r2,zero,858c4 <SHA_Simple+0x188>
   858c0:	108000c4 	addi	r2,r2,3
   858c4:	1005d0ba 	srai	r2,r2,2
   858c8:	e0bffa15 	stw	r2,-24(fp)
    if( i%4 == 0 )
   858cc:	e0bff917 	ldw	r2,-28(fp)
   858d0:	108000cc 	andi	r2,r2,3
   858d4:	1000071e 	bne	r2,zero,858f4 <SHA_Simple+0x1b8>
    {
        w[t] = 0 ;
   858d8:	008002b4 	movhi	r2,10
   858dc:	10852c04 	addi	r2,r2,5296
   858e0:	e0fffa17 	ldw	r3,-24(fp)
   858e4:	18c7883a 	add	r3,r3,r3
   858e8:	18c7883a 	add	r3,r3,r3
   858ec:	10c5883a 	add	r2,r2,r3
   858f0:	10000015 	stw	zero,0(r2)
    }
    c = 0x80 << ((3-i%4)*24) ;
   858f4:	e0fff917 	ldw	r3,-28(fp)
   858f8:	00a00034 	movhi	r2,32768
   858fc:	108000c4 	addi	r2,r2,3
   85900:	1884703a 	and	r2,r3,r2
   85904:	1000040e 	bge	r2,zero,85918 <SHA_Simple+0x1dc>
   85908:	10bfffc4 	addi	r2,r2,-1
   8590c:	00ffff04 	movi	r3,-4
   85910:	10c4b03a 	or	r2,r2,r3
   85914:	10800044 	addi	r2,r2,1
   85918:	1007883a 	mov	r3,r2
   8591c:	008000c4 	movi	r2,3
   85920:	10c5c83a 	sub	r2,r2,r3
   85924:	10800624 	muli	r2,r2,24
   85928:	00c02004 	movi	r3,128
   8592c:	1884983a 	sll	r2,r3,r2
   85930:	e0bffc15 	stw	r2,-16(fp)
    w[t]|= c ; t++ ;
   85934:	008002b4 	movhi	r2,10
   85938:	10852c04 	addi	r2,r2,5296
   8593c:	e0fffa17 	ldw	r3,-24(fp)
   85940:	18c7883a 	add	r3,r3,r3
   85944:	18c7883a 	add	r3,r3,r3
   85948:	10c5883a 	add	r2,r2,r3
   8594c:	10c00017 	ldw	r3,0(r2)
   85950:	e0bffc17 	ldw	r2,-16(fp)
   85954:	1888b03a 	or	r4,r3,r2
   85958:	008002b4 	movhi	r2,10
   8595c:	10852c04 	addi	r2,r2,5296
   85960:	e0fffa17 	ldw	r3,-24(fp)
   85964:	18c7883a 	add	r3,r3,r3
   85968:	18c7883a 	add	r3,r3,r3
   8596c:	10c5883a 	add	r2,r2,r3
   85970:	11000015 	stw	r4,0(r2)
   85974:	e0bffa17 	ldw	r2,-24(fp)
   85978:	10800044 	addi	r2,r2,1
   8597c:	e0bffa15 	stw	r2,-24(fp)
    for( ; t < 15 ; t++ )
   85980:	00000a06 	br	859ac <SHA_Simple+0x270>
    {
        w[t] = 0 ;
   85984:	008002b4 	movhi	r2,10
   85988:	10852c04 	addi	r2,r2,5296
   8598c:	e0fffa17 	ldw	r3,-24(fp)
   85990:	18c7883a 	add	r3,r3,r3
   85994:	18c7883a 	add	r3,r3,r3
   85998:	10c5883a 	add	r2,r2,r3
   8599c:	10000015 	stw	zero,0(r2)
    {
        w[t] = 0 ;
    }
    c = 0x80 << ((3-i%4)*24) ;
    w[t]|= c ; t++ ;
    for( ; t < 15 ; t++ )
   859a0:	e0bffa17 	ldw	r2,-24(fp)
   859a4:	10800044 	addi	r2,r2,1
   859a8:	e0bffa15 	stw	r2,-24(fp)
   859ac:	e0bffa17 	ldw	r2,-24(fp)
   859b0:	108003d0 	cmplti	r2,r2,15
   859b4:	103ff31e 	bne	r2,zero,85984 <__alt_data_end+0xfffb5ac4>
    {
        w[t] = 0 ;
    }
    w[15] = len*8  ;
   859b8:	e0bffe17 	ldw	r2,-8(fp)
   859bc:	100490fa 	slli	r2,r2,3
   859c0:	1007883a 	mov	r3,r2
   859c4:	008002b4 	movhi	r2,10
   859c8:	10852c04 	addi	r2,r2,5296
   859cc:	10c00f15 	stw	r3,60(r2)
    
    for( t = 0 ; t< 16 ; t++ )
   859d0:	e03ffa15 	stw	zero,-24(fp)
   859d4:	00000f06 	br	85a14 <SHA_Simple+0x2d8>
    {
        printf("w[%2d] = %08lX\n",t,w[t]) ;
   859d8:	008002b4 	movhi	r2,10
   859dc:	10852c04 	addi	r2,r2,5296
   859e0:	e0fffa17 	ldw	r3,-24(fp)
   859e4:	18c7883a 	add	r3,r3,r3
   859e8:	18c7883a 	add	r3,r3,r3
   859ec:	10c5883a 	add	r2,r2,r3
   859f0:	10800017 	ldw	r2,0(r2)
   859f4:	100d883a 	mov	r6,r2
   859f8:	e17ffa17 	ldw	r5,-24(fp)
   859fc:	010002b4 	movhi	r4,10
   85a00:	21303204 	addi	r4,r4,-16184
   85a04:	0088fc00 	call	88fc0 <printf>
    {
        w[t] = 0 ;
    }
    w[15] = len*8  ;
    
    for( t = 0 ; t< 16 ; t++ )
   85a08:	e0bffa17 	ldw	r2,-24(fp)
   85a0c:	10800044 	addi	r2,r2,1
   85a10:	e0bffa15 	stw	r2,-24(fp)
   85a14:	e0bffa17 	ldw	r2,-24(fp)
   85a18:	10800410 	cmplti	r2,r2,16
   85a1c:	103fee1e 	bne	r2,zero,859d8 <__alt_data_end+0xfffb5b18>
    {
        printf("w[%2d] = %08lX\n",t,w[t]) ;
    }

    SHATransform(sha) ;
   85a20:	010002b4 	movhi	r4,10
   85a24:	21057c04 	addi	r4,r4,5616
   85a28:	0084ea00 	call	84ea0 <SHATransform>
    
    for( i = 0 ; i < 5 ; i++ )
   85a2c:	e03ff915 	stw	zero,-28(fp)
   85a30:	00003e06 	br	85b2c <SHA_Simple+0x3f0>
    {
        output[i*4]   = (BYTE)((sha[i]>>24)&0xFF) ;
   85a34:	e0bff917 	ldw	r2,-28(fp)
   85a38:	1085883a 	add	r2,r2,r2
   85a3c:	1085883a 	add	r2,r2,r2
   85a40:	1007883a 	mov	r3,r2
   85a44:	e0bfff17 	ldw	r2,-4(fp)
   85a48:	10c9883a 	add	r4,r2,r3
   85a4c:	008002b4 	movhi	r2,10
   85a50:	10857c04 	addi	r2,r2,5616
   85a54:	e0fff917 	ldw	r3,-28(fp)
   85a58:	18c7883a 	add	r3,r3,r3
   85a5c:	18c7883a 	add	r3,r3,r3
   85a60:	10c5883a 	add	r2,r2,r3
   85a64:	10800017 	ldw	r2,0(r2)
   85a68:	1004d63a 	srli	r2,r2,24
   85a6c:	20800005 	stb	r2,0(r4)
        output[i*4+1] = (BYTE)((sha[i]>>16)&0xFF) ;
   85a70:	e0bff917 	ldw	r2,-28(fp)
   85a74:	1085883a 	add	r2,r2,r2
   85a78:	1085883a 	add	r2,r2,r2
   85a7c:	10800044 	addi	r2,r2,1
   85a80:	e0ffff17 	ldw	r3,-4(fp)
   85a84:	1889883a 	add	r4,r3,r2
   85a88:	008002b4 	movhi	r2,10
   85a8c:	10857c04 	addi	r2,r2,5616
   85a90:	e0fff917 	ldw	r3,-28(fp)
   85a94:	18c7883a 	add	r3,r3,r3
   85a98:	18c7883a 	add	r3,r3,r3
   85a9c:	10c5883a 	add	r2,r2,r3
   85aa0:	10800017 	ldw	r2,0(r2)
   85aa4:	1004d43a 	srli	r2,r2,16
   85aa8:	20800005 	stb	r2,0(r4)
        output[i*4+2] = (BYTE)((sha[i]>>8)&0xFF) ;
   85aac:	e0bff917 	ldw	r2,-28(fp)
   85ab0:	1085883a 	add	r2,r2,r2
   85ab4:	1085883a 	add	r2,r2,r2
   85ab8:	10800084 	addi	r2,r2,2
   85abc:	e0ffff17 	ldw	r3,-4(fp)
   85ac0:	1889883a 	add	r4,r3,r2
   85ac4:	008002b4 	movhi	r2,10
   85ac8:	10857c04 	addi	r2,r2,5616
   85acc:	e0fff917 	ldw	r3,-28(fp)
   85ad0:	18c7883a 	add	r3,r3,r3
   85ad4:	18c7883a 	add	r3,r3,r3
   85ad8:	10c5883a 	add	r2,r2,r3
   85adc:	10800017 	ldw	r2,0(r2)
   85ae0:	1004d23a 	srli	r2,r2,8
   85ae4:	20800005 	stb	r2,0(r4)
        output[i*4+3] = (BYTE)(sha[i]&0xFF) ;
   85ae8:	e0bff917 	ldw	r2,-28(fp)
   85aec:	1085883a 	add	r2,r2,r2
   85af0:	1085883a 	add	r2,r2,r2
   85af4:	108000c4 	addi	r2,r2,3
   85af8:	e0ffff17 	ldw	r3,-4(fp)
   85afc:	1889883a 	add	r4,r3,r2
   85b00:	008002b4 	movhi	r2,10
   85b04:	10857c04 	addi	r2,r2,5616
   85b08:	e0fff917 	ldw	r3,-28(fp)
   85b0c:	18c7883a 	add	r3,r3,r3
   85b10:	18c7883a 	add	r3,r3,r3
   85b14:	10c5883a 	add	r2,r2,r3
   85b18:	10800017 	ldw	r2,0(r2)
   85b1c:	20800005 	stb	r2,0(r4)
        printf("w[%2d] = %08lX\n",t,w[t]) ;
    }

    SHATransform(sha) ;
    
    for( i = 0 ; i < 5 ; i++ )
   85b20:	e0bff917 	ldw	r2,-28(fp)
   85b24:	10800044 	addi	r2,r2,1
   85b28:	e0bff915 	stw	r2,-28(fp)
   85b2c:	e0bff917 	ldw	r2,-28(fp)
   85b30:	10800150 	cmplti	r2,r2,5
   85b34:	103fbf1e 	bne	r2,zero,85a34 <__alt_data_end+0xfffb5b74>
        output[i*4]   = (BYTE)((sha[i]>>24)&0xFF) ;
        output[i*4+1] = (BYTE)((sha[i]>>16)&0xFF) ;
        output[i*4+2] = (BYTE)((sha[i]>>8)&0xFF) ;
        output[i*4+3] = (BYTE)(sha[i]&0xFF) ;
    }
}
   85b38:	0001883a 	nop
   85b3c:	e037883a 	mov	sp,fp
   85b40:	dfc00117 	ldw	ra,4(sp)
   85b44:	df000017 	ldw	fp,0(sp)
   85b48:	dec00204 	addi	sp,sp,8
   85b4c:	f800283a 	ret

00085b50 <HDCP_CheckSHA>:

static SYS_STATUS
HDCP_CheckSHA(BYTE pM0[],USHORT BStatus,BYTE pKSVList[],int cDownStream,BYTE Vr[])
{
   85b50:	defff804 	addi	sp,sp,-32
   85b54:	dfc00715 	stw	ra,28(sp)
   85b58:	df000615 	stw	fp,24(sp)
   85b5c:	df000604 	addi	fp,sp,24
   85b60:	e13ffc15 	stw	r4,-16(fp)
   85b64:	2805883a 	mov	r2,r5
   85b68:	e1bffe15 	stw	r6,-8(fp)
   85b6c:	e1ffff15 	stw	r7,-4(fp)
   85b70:	e0bffd0d 	sth	r2,-12(fp)
    int i,n ;
    
    for(i = 0 ; i < cDownStream*5 ; i++)
   85b74:	e03ffa15 	stw	zero,-24(fp)
   85b78:	00000c06 	br	85bac <HDCP_CheckSHA+0x5c>
    {
        SHABuff[i] = pKSVList[i] ;
   85b7c:	e0bffa17 	ldw	r2,-24(fp)
   85b80:	e0fffe17 	ldw	r3,-8(fp)
   85b84:	1885883a 	add	r2,r3,r2
   85b88:	10c00003 	ldbu	r3,0(r2)
   85b8c:	008002b4 	movhi	r2,10
   85b90:	10851704 	addi	r2,r2,5212
   85b94:	e13ffa17 	ldw	r4,-24(fp)
   85b98:	1105883a 	add	r2,r2,r4
   85b9c:	10c00005 	stb	r3,0(r2)
static SYS_STATUS
HDCP_CheckSHA(BYTE pM0[],USHORT BStatus,BYTE pKSVList[],int cDownStream,BYTE Vr[])
{
    int i,n ;
    
    for(i = 0 ; i < cDownStream*5 ; i++)
   85ba0:	e0bffa17 	ldw	r2,-24(fp)
   85ba4:	10800044 	addi	r2,r2,1
   85ba8:	e0bffa15 	stw	r2,-24(fp)
   85bac:	e0bfff17 	ldw	r2,-4(fp)
   85bb0:	10800164 	muli	r2,r2,5
   85bb4:	e0fffa17 	ldw	r3,-24(fp)
   85bb8:	18bff016 	blt	r3,r2,85b7c <__alt_data_end+0xfffb5cbc>
    {
        SHABuff[i] = pKSVList[i] ;
    }
    SHABuff[i++] = BStatus & 0xFF ;
   85bbc:	e0fffa17 	ldw	r3,-24(fp)
   85bc0:	18800044 	addi	r2,r3,1
   85bc4:	e0bffa15 	stw	r2,-24(fp)
   85bc8:	e0bffd0b 	ldhu	r2,-12(fp)
   85bcc:	1009883a 	mov	r4,r2
   85bd0:	008002b4 	movhi	r2,10
   85bd4:	10851704 	addi	r2,r2,5212
   85bd8:	10c5883a 	add	r2,r2,r3
   85bdc:	11000005 	stb	r4,0(r2)
    SHABuff[i++] = (BStatus>>8) & 0xFF ;
   85be0:	e0fffa17 	ldw	r3,-24(fp)
   85be4:	18800044 	addi	r2,r3,1
   85be8:	e0bffa15 	stw	r2,-24(fp)
   85bec:	e0bffd0b 	ldhu	r2,-12(fp)
   85bf0:	1004d23a 	srli	r2,r2,8
   85bf4:	1009883a 	mov	r4,r2
   85bf8:	008002b4 	movhi	r2,10
   85bfc:	10851704 	addi	r2,r2,5212
   85c00:	10c5883a 	add	r2,r2,r3
   85c04:	11000005 	stb	r4,0(r2)
    for(n = 0 ; n < 8 ; n++,i++)
   85c08:	e03ffb15 	stw	zero,-20(fp)
   85c0c:	00000f06 	br	85c4c <HDCP_CheckSHA+0xfc>
    {
        SHABuff[i] = pM0[n] ;
   85c10:	e0bffb17 	ldw	r2,-20(fp)
   85c14:	e0fffc17 	ldw	r3,-16(fp)
   85c18:	1885883a 	add	r2,r3,r2
   85c1c:	10c00003 	ldbu	r3,0(r2)
   85c20:	008002b4 	movhi	r2,10
   85c24:	10851704 	addi	r2,r2,5212
   85c28:	e13ffa17 	ldw	r4,-24(fp)
   85c2c:	1105883a 	add	r2,r2,r4
   85c30:	10c00005 	stb	r3,0(r2)
    {
        SHABuff[i] = pKSVList[i] ;
    }
    SHABuff[i++] = BStatus & 0xFF ;
    SHABuff[i++] = (BStatus>>8) & 0xFF ;
    for(n = 0 ; n < 8 ; n++,i++)
   85c34:	e0bffb17 	ldw	r2,-20(fp)
   85c38:	10800044 	addi	r2,r2,1
   85c3c:	e0bffb15 	stw	r2,-20(fp)
   85c40:	e0bffa17 	ldw	r2,-24(fp)
   85c44:	10800044 	addi	r2,r2,1
   85c48:	e0bffa15 	stw	r2,-24(fp)
   85c4c:	e0bffb17 	ldw	r2,-20(fp)
   85c50:	10800210 	cmplti	r2,r2,8
   85c54:	103fee1e 	bne	r2,zero,85c10 <__alt_data_end+0xfffb5d50>
    {
        SHABuff[i] = pM0[n] ;
    }
    n = i ;
   85c58:	e0bffa17 	ldw	r2,-24(fp)
   85c5c:	e0bffb15 	stw	r2,-20(fp)
    // SHABuff[i++] = 0x80 ; // end mask
    for(; i < 64 ; i++)
   85c60:	00000806 	br	85c84 <HDCP_CheckSHA+0x134>
    {
        SHABuff[i] = 0 ;
   85c64:	008002b4 	movhi	r2,10
   85c68:	10851704 	addi	r2,r2,5212
   85c6c:	e0fffa17 	ldw	r3,-24(fp)
   85c70:	10c5883a 	add	r2,r2,r3
   85c74:	10000005 	stb	zero,0(r2)
    {
        SHABuff[i] = pM0[n] ;
    }
    n = i ;
    // SHABuff[i++] = 0x80 ; // end mask
    for(; i < 64 ; i++)
   85c78:	e0bffa17 	ldw	r2,-24(fp)
   85c7c:	10800044 	addi	r2,r2,1
   85c80:	e0bffa15 	stw	r2,-24(fp)
   85c84:	e0bffa17 	ldw	r2,-24(fp)
   85c88:	10801010 	cmplti	r2,r2,64
   85c8c:	103ff51e 	bne	r2,zero,85c64 <__alt_data_end+0xfffb5da4>
    }
    // n = cDownStream * 5 + 2 /* for BStatus */ + 8 /* for M0 */ ;
    // n *= 8 ;
    // SHABuff[62] = (n>>8) & 0xff ;
    // SHABuff[63] = (n>>8) & 0xff ;
    for(i = 0 ; i < 64 ; i++)
   85c90:	e03ffa15 	stw	zero,-24(fp)
   85c94:	00002006 	br	85d18 <HDCP_CheckSHA+0x1c8>
	{
		if(i % 16 == 0) printf("SHA[]: ") ;
   85c98:	e0bffa17 	ldw	r2,-24(fp)
   85c9c:	108003cc 	andi	r2,r2,15
   85ca0:	1000031e 	bne	r2,zero,85cb0 <HDCP_CheckSHA+0x160>
   85ca4:	010002b4 	movhi	r4,10
   85ca8:	21304904 	addi	r4,r4,-16092
   85cac:	0088fc00 	call	88fc0 <printf>
		printf(" %02X",SHABuff[i]) ;
   85cb0:	008002b4 	movhi	r2,10
   85cb4:	10851704 	addi	r2,r2,5212
   85cb8:	e0fffa17 	ldw	r3,-24(fp)
   85cbc:	10c5883a 	add	r2,r2,r3
   85cc0:	10800003 	ldbu	r2,0(r2)
   85cc4:	10803fcc 	andi	r2,r2,255
   85cc8:	100b883a 	mov	r5,r2
   85ccc:	010002b4 	movhi	r4,10
   85cd0:	21300704 	addi	r4,r4,-16356
   85cd4:	0088fc00 	call	88fc0 <printf>
		if((i%16)==15) printf("\n") ;
   85cd8:	e0fffa17 	ldw	r3,-24(fp)
   85cdc:	00a00034 	movhi	r2,32768
   85ce0:	108003c4 	addi	r2,r2,15
   85ce4:	1884703a 	and	r2,r3,r2
   85ce8:	1000040e 	bge	r2,zero,85cfc <HDCP_CheckSHA+0x1ac>
   85cec:	10bfffc4 	addi	r2,r2,-1
   85cf0:	00fffc04 	movi	r3,-16
   85cf4:	10c4b03a 	or	r2,r2,r3
   85cf8:	10800044 	addi	r2,r2,1
   85cfc:	108003d8 	cmpnei	r2,r2,15
   85d00:	1000021e 	bne	r2,zero,85d0c <HDCP_CheckSHA+0x1bc>
   85d04:	01000284 	movi	r4,10
   85d08:	00890040 	call	89004 <putchar>
    }
    // n = cDownStream * 5 + 2 /* for BStatus */ + 8 /* for M0 */ ;
    // n *= 8 ;
    // SHABuff[62] = (n>>8) & 0xff ;
    // SHABuff[63] = (n>>8) & 0xff ;
    for(i = 0 ; i < 64 ; i++)
   85d0c:	e0bffa17 	ldw	r2,-24(fp)
   85d10:	10800044 	addi	r2,r2,1
   85d14:	e0bffa15 	stw	r2,-24(fp)
   85d18:	e0bffa17 	ldw	r2,-24(fp)
   85d1c:	10801010 	cmplti	r2,r2,64
   85d20:	103fdd1e 	bne	r2,zero,85c98 <__alt_data_end+0xfffb5dd8>
	{
		if(i % 16 == 0) printf("SHA[]: ") ;
		printf(" %02X",SHABuff[i]) ;
		if((i%16)==15) printf("\n") ;
	}
    SHA_Simple(SHABuff,n,V) ;
   85d24:	018002b4 	movhi	r6,10
   85d28:	31852704 	addi	r6,r6,5276
   85d2c:	e17ffb17 	ldw	r5,-20(fp)
   85d30:	010002b4 	movhi	r4,10
   85d34:	21051704 	addi	r4,r4,5212
   85d38:	008573c0 	call	8573c <SHA_Simple>
    printf("V[] =") ;
   85d3c:	010002b4 	movhi	r4,10
   85d40:	21304b04 	addi	r4,r4,-16084
   85d44:	0088fc00 	call	88fc0 <printf>
    for(i = 0 ; i < 20 ; i++)
   85d48:	e03ffa15 	stw	zero,-24(fp)
   85d4c:	00000d06 	br	85d84 <HDCP_CheckSHA+0x234>
    {
        printf(" %02X",V[i]) ;
   85d50:	008002b4 	movhi	r2,10
   85d54:	10852704 	addi	r2,r2,5276
   85d58:	e0fffa17 	ldw	r3,-24(fp)
   85d5c:	10c5883a 	add	r2,r2,r3
   85d60:	10800003 	ldbu	r2,0(r2)
   85d64:	10803fcc 	andi	r2,r2,255
   85d68:	100b883a 	mov	r5,r2
   85d6c:	010002b4 	movhi	r4,10
   85d70:	21300704 	addi	r4,r4,-16356
   85d74:	0088fc00 	call	88fc0 <printf>
		printf(" %02X",SHABuff[i]) ;
		if((i%16)==15) printf("\n") ;
	}
    SHA_Simple(SHABuff,n,V) ;
    printf("V[] =") ;
    for(i = 0 ; i < 20 ; i++)
   85d78:	e0bffa17 	ldw	r2,-24(fp)
   85d7c:	10800044 	addi	r2,r2,1
   85d80:	e0bffa15 	stw	r2,-24(fp)
   85d84:	e0bffa17 	ldw	r2,-24(fp)
   85d88:	10800510 	cmplti	r2,r2,20
   85d8c:	103ff01e 	bne	r2,zero,85d50 <__alt_data_end+0xfffb5e90>
    {
        printf(" %02X",V[i]) ;
    }
    printf("\nVr[] =") ;
   85d90:	010002b4 	movhi	r4,10
   85d94:	21304d04 	addi	r4,r4,-16076
   85d98:	0088fc00 	call	88fc0 <printf>
    for(i = 0 ; i < 20 ; i++)
   85d9c:	e03ffa15 	stw	zero,-24(fp)
   85da0:	00000c06 	br	85dd4 <HDCP_CheckSHA+0x284>
    {
        printf(" %02X",Vr[i]) ;
   85da4:	e0bffa17 	ldw	r2,-24(fp)
   85da8:	e0c00217 	ldw	r3,8(fp)
   85dac:	1885883a 	add	r2,r3,r2
   85db0:	10800003 	ldbu	r2,0(r2)
   85db4:	10803fcc 	andi	r2,r2,255
   85db8:	100b883a 	mov	r5,r2
   85dbc:	010002b4 	movhi	r4,10
   85dc0:	21300704 	addi	r4,r4,-16356
   85dc4:	0088fc00 	call	88fc0 <printf>
    for(i = 0 ; i < 20 ; i++)
    {
        printf(" %02X",V[i]) ;
    }
    printf("\nVr[] =") ;
    for(i = 0 ; i < 20 ; i++)
   85dc8:	e0bffa17 	ldw	r2,-24(fp)
   85dcc:	10800044 	addi	r2,r2,1
   85dd0:	e0bffa15 	stw	r2,-24(fp)
   85dd4:	e0bffa17 	ldw	r2,-24(fp)
   85dd8:	10800510 	cmplti	r2,r2,20
   85ddc:	103ff11e 	bne	r2,zero,85da4 <__alt_data_end+0xfffb5ee4>
    {
        printf(" %02X",Vr[i]) ;
    }
        
    for(i = 0 ; i < 20 ; i++)
   85de0:	e03ffa15 	stw	zero,-24(fp)
   85de4:	00001106 	br	85e2c <HDCP_CheckSHA+0x2dc>
    {
        if(V[i] != Vr[i])
   85de8:	008002b4 	movhi	r2,10
   85dec:	10852704 	addi	r2,r2,5276
   85df0:	e0fffa17 	ldw	r3,-24(fp)
   85df4:	10c5883a 	add	r2,r2,r3
   85df8:	11000003 	ldbu	r4,0(r2)
   85dfc:	e0bffa17 	ldw	r2,-24(fp)
   85e00:	e0c00217 	ldw	r3,8(fp)
   85e04:	1885883a 	add	r2,r3,r2
   85e08:	10800003 	ldbu	r2,0(r2)
   85e0c:	20c03fcc 	andi	r3,r4,255
   85e10:	10803fcc 	andi	r2,r2,255
   85e14:	18800226 	beq	r3,r2,85e20 <HDCP_CheckSHA+0x2d0>
        {
            return ER_FAIL ;
   85e18:	00800044 	movi	r2,1
   85e1c:	00000706 	br	85e3c <HDCP_CheckSHA+0x2ec>
    for(i = 0 ; i < 20 ; i++)
    {
        printf(" %02X",Vr[i]) ;
    }
        
    for(i = 0 ; i < 20 ; i++)
   85e20:	e0bffa17 	ldw	r2,-24(fp)
   85e24:	10800044 	addi	r2,r2,1
   85e28:	e0bffa15 	stw	r2,-24(fp)
   85e2c:	e0bffa17 	ldw	r2,-24(fp)
   85e30:	10800510 	cmplti	r2,r2,20
   85e34:	103fec1e 	bne	r2,zero,85de8 <__alt_data_end+0xfffb5f28>
        if(V[i] != Vr[i])
        {
            return ER_FAIL ;
        }
    }
    return ER_SUCCESS ;
   85e38:	0005883a 	mov	r2,zero
}
   85e3c:	e037883a 	mov	sp,fp
   85e40:	dfc00117 	ldw	ra,4(sp)
   85e44:	df000017 	ldw	fp,0(sp)
   85e48:	dec00204 	addi	sp,sp,8
   85e4c:	f800283a 	ret

00085e50 <HDCP_Authenticate_Repeater>:

static SYS_STATUS
HDCP_Authenticate_Repeater()
{
   85e50:	defff704 	addi	sp,sp,-36
   85e54:	dfc00815 	stw	ra,32(sp)
   85e58:	df000715 	stw	fp,28(sp)
   85e5c:	df000704 	addi	fp,sp,28

    BYTE BCaps;
    USHORT BStatus ;
    USHORT TimeOut ;

	ErrorF("Authentication for repeater\n") ;
   85e60:	010002b4 	movhi	r4,10
   85e64:	21304f04 	addi	r4,r4,-16068
   85e68:	00877a40 	call	877a4 <ErrorF>
	// end emily add for test
    //////////////////////////////////////
    // Authenticate Fired
    //////////////////////////////////////
  
    HDCP_GetBCaps(&BCaps,&BStatus) ;
   85e6c:	e0ffff84 	addi	r3,fp,-2
   85e70:	e0bfff44 	addi	r2,fp,-3
   85e74:	180b883a 	mov	r5,r3
   85e78:	1009883a 	mov	r4,r2
   85e7c:	00841700 	call	84170 <HDCP_GetBCaps>
	DelayMS(2);
   85e80:	01000084 	movi	r4,2
   85e84:	00877380 	call	87738 <DelayMS>
    HDCP_Auth_Fire();
   85e88:	00840640 	call	84064 <HDCP_Auth_Fire>
	DelayMS(550); // emily add for test
   85e8c:	01008984 	movi	r4,550
   85e90:	00877380 	call	87738 <DelayMS>

    for(TimeOut = 250*6 ; TimeOut > 0 ; TimeOut --)
   85e94:	00817704 	movi	r2,1500
   85e98:	e0bffe8d 	sth	r2,-6(fp)
   85e9c:	00002c06 	br	85f50 <HDCP_Authenticate_Repeater+0x100>
    {

        uc = HDMITX_ReadI2C_Byte(REG_TX_INT_STAT1) ;
   85ea0:	01000184 	movi	r4,6
   85ea4:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   85ea8:	e0bffc05 	stb	r2,-16(fp)
        if(uc & B_INT_DDC_BUS_HANG)
   85eac:	e0bffc03 	ldbu	r2,-16(fp)
   85eb0:	1080010c 	andi	r2,r2,4
   85eb4:	10000426 	beq	r2,zero,85ec8 <HDCP_Authenticate_Repeater+0x78>
        {
            ErrorF("DDC Bus hang\n") ;
   85eb8:	010002b4 	movhi	r4,10
   85ebc:	21305704 	addi	r4,r4,-16036
   85ec0:	00877a40 	call	877a4 <ErrorF>
            goto HDCP_Repeater_Fail ;
   85ec4:	0000f306 	br	86294 <HDCP_Authenticate_Repeater+0x444>
        }

        uc = HDMITX_ReadI2C_Byte(REG_TX_INT_STAT2) ;
   85ec8:	010001c4 	movi	r4,7
   85ecc:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   85ed0:	e0bffc05 	stb	r2,-16(fp)

        if(uc & B_INT_AUTH_FAIL)
   85ed4:	e0bffc03 	ldbu	r2,-16(fp)
   85ed8:	1080004c 	andi	r2,r2,1
   85edc:	10000426 	beq	r2,zero,85ef0 <HDCP_Authenticate_Repeater+0xa0>
            HDMITX_WriteI2C_Byte(REG_TX_INT_CLR0,B_CLR_AUTH_FAIL) ;
            HDMITX_WriteI2C_Byte(REG_TX_INT_CLR1,0) ;
            HDMITX_WriteI2C_Byte(REG_TX_SYS_STATUS,B_INTACTDONE) ;
            HDMITX_WriteI2C_Byte(REG_TX_SYS_STATUS,0) ;
			*/
            ErrorF("HDCP_Authenticate_Repeater(): B_INT_AUTH_FAIL.\n") ;
   85ee0:	010002b4 	movhi	r4,10
   85ee4:	21305b04 	addi	r4,r4,-16020
   85ee8:	00877a40 	call	877a4 <ErrorF>
            goto HDCP_Repeater_Fail ;
   85eec:	0000e906 	br	86294 <HDCP_Authenticate_Repeater+0x444>
        }
        // emily add for test
		// test =(HDMITX_ReadI2C_Byte(0x7)&0x4)>>2 ;
        if(uc & B_INT_KSVLIST_CHK)
   85ef0:	e0bffc03 	ldbu	r2,-16(fp)
   85ef4:	1080010c 	andi	r2,r2,4
   85ef8:	10001026 	beq	r2,zero,85f3c <HDCP_Authenticate_Repeater+0xec>
        {
            HDMITX_WriteI2C_Byte(REG_TX_INT_CLR0,B_CLR_KSVLISTCHK) ;
   85efc:	01400404 	movi	r5,16
   85f00:	01000304 	movi	r4,12
   85f04:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
            HDMITX_WriteI2C_Byte(REG_TX_INT_CLR1,0) ;
   85f08:	000b883a 	mov	r5,zero
   85f0c:	01000344 	movi	r4,13
   85f10:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
            HDMITX_WriteI2C_Byte(REG_TX_SYS_STATUS,B_INTACTDONE) ;
   85f14:	01400044 	movi	r5,1
   85f18:	01000384 	movi	r4,14
   85f1c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
            HDMITX_WriteI2C_Byte(REG_TX_SYS_STATUS,0) ;
   85f20:	000b883a 	mov	r5,zero
   85f24:	01000384 	movi	r4,14
   85f28:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
            ErrorF("B_INT_KSVLIST_CHK\n") ;
   85f2c:	010002b4 	movhi	r4,10
   85f30:	21306704 	addi	r4,r4,-15972
   85f34:	00877a40 	call	877a4 <ErrorF>
            break ;
   85f38:	00000706 	br	85f58 <HDCP_Authenticate_Repeater+0x108>
        }

        DelayMS(5) ;
   85f3c:	01000144 	movi	r4,5
   85f40:	00877380 	call	87738 <DelayMS>
    HDCP_GetBCaps(&BCaps,&BStatus) ;
	DelayMS(2);
    HDCP_Auth_Fire();
	DelayMS(550); // emily add for test

    for(TimeOut = 250*6 ; TimeOut > 0 ; TimeOut --)
   85f44:	e0bffe8b 	ldhu	r2,-6(fp)
   85f48:	10bfffc4 	addi	r2,r2,-1
   85f4c:	e0bffe8d 	sth	r2,-6(fp)
   85f50:	e0bffe8b 	ldhu	r2,-6(fp)
   85f54:	103fd21e 	bne	r2,zero,85ea0 <__alt_data_end+0xfffb5fe0>
        }

        DelayMS(5) ;
    }

    if(TimeOut == 0)
   85f58:	e0bffe8b 	ldhu	r2,-6(fp)
   85f5c:	1000041e 	bne	r2,zero,85f70 <HDCP_Authenticate_Repeater+0x120>
    {
        ErrorF("Time out for wait KSV List checking interrupt\n") ;
   85f60:	010002b4 	movhi	r4,10
   85f64:	21306c04 	addi	r4,r4,-15952
   85f68:	00877a40 	call	877a4 <ErrorF>
        goto HDCP_Repeater_Fail ;
   85f6c:	0000c906 	br	86294 <HDCP_Authenticate_Repeater+0x444>

    ///////////////////////////////////////
    // clear KSVList check interrupt.
    ///////////////////////////////////////

    for(TimeOut = 500 ; TimeOut > 0 ; TimeOut --)
   85f70:	00807d04 	movi	r2,500
   85f74:	e0bffe8d 	sth	r2,-6(fp)
   85f78:	00002306 	br	86008 <HDCP_Authenticate_Repeater+0x1b8>
    {
		if((TimeOut % 100) == 0)
   85f7c:	e0bffe8b 	ldhu	r2,-6(fp)
   85f80:	01401904 	movi	r5,100
   85f84:	1009883a 	mov	r4,r2
   85f88:	0088df00 	call	88df0 <__umodsi3>
   85f8c:	10bfffcc 	andi	r2,r2,65535
   85f90:	1000051e 	bne	r2,zero,85fa8 <HDCP_Authenticate_Repeater+0x158>
		{
		    ErrorF("Wait KSV FIFO Ready %d\n",TimeOut) ;
   85f94:	e0bffe8b 	ldhu	r2,-6(fp)
   85f98:	100b883a 	mov	r5,r2
   85f9c:	010002b4 	movhi	r4,10
   85fa0:	21307804 	addi	r4,r4,-15904
   85fa4:	00877a40 	call	877a4 <ErrorF>
		}
		
        if(HDCP_GetBCaps(&BCaps,&BStatus) == ER_FAIL)
   85fa8:	e0ffff84 	addi	r3,fp,-2
   85fac:	e0bfff44 	addi	r2,fp,-3
   85fb0:	180b883a 	mov	r5,r3
   85fb4:	1009883a 	mov	r4,r2
   85fb8:	00841700 	call	84170 <HDCP_GetBCaps>
   85fbc:	10800058 	cmpnei	r2,r2,1
   85fc0:	1000041e 	bne	r2,zero,85fd4 <HDCP_Authenticate_Repeater+0x184>
        {
            ErrorF("Get BCaps fail\n") ;
   85fc4:	010002b4 	movhi	r4,10
   85fc8:	21307e04 	addi	r4,r4,-15880
   85fcc:	00877a40 	call	877a4 <ErrorF>
            goto HDCP_Repeater_Fail ;
   85fd0:	0000b006 	br	86294 <HDCP_Authenticate_Repeater+0x444>
        }

        if(BCaps & B_CAP_KSV_FIFO_RDY)
   85fd4:	e0bfff43 	ldbu	r2,-3(fp)
   85fd8:	10803fcc 	andi	r2,r2,255
   85fdc:	1080080c 	andi	r2,r2,32
   85fe0:	10000426 	beq	r2,zero,85ff4 <HDCP_Authenticate_Repeater+0x1a4>
        {
			 ErrorF("FIFO Ready\n") ;
   85fe4:	010002b4 	movhi	r4,10
   85fe8:	21308204 	addi	r4,r4,-15864
   85fec:	00877a40 	call	877a4 <ErrorF>
			 break ;
   85ff0:	00000706 	br	86010 <HDCP_Authenticate_Repeater+0x1c0>
        }
        DelayMS(5) ;
   85ff4:	01000144 	movi	r4,5
   85ff8:	00877380 	call	87738 <DelayMS>

    ///////////////////////////////////////
    // clear KSVList check interrupt.
    ///////////////////////////////////////

    for(TimeOut = 500 ; TimeOut > 0 ; TimeOut --)
   85ffc:	e0bffe8b 	ldhu	r2,-6(fp)
   86000:	10bfffc4 	addi	r2,r2,-1
   86004:	e0bffe8d 	sth	r2,-6(fp)
   86008:	e0bffe8b 	ldhu	r2,-6(fp)
   8600c:	103fdb1e 	bne	r2,zero,85f7c <__alt_data_end+0xfffb60bc>
        }
        DelayMS(5) ;

    }

    if(TimeOut == 0)
   86010:	e0bffe8b 	ldhu	r2,-6(fp)
   86014:	1000041e 	bne	r2,zero,86028 <HDCP_Authenticate_Repeater+0x1d8>
    {
        ErrorF("Get KSV FIFO ready TimeOut\n") ;
   86018:	010002b4 	movhi	r4,10
   8601c:	21308504 	addi	r4,r4,-15852
   86020:	00877a40 	call	877a4 <ErrorF>
        goto HDCP_Repeater_Fail ;
   86024:	00009b06 	br	86294 <HDCP_Authenticate_Repeater+0x444>
    }

	ErrorF("Wait timeout = %d\n",TimeOut) ;
   86028:	e0bffe8b 	ldhu	r2,-6(fp)
   8602c:	100b883a 	mov	r5,r2
   86030:	010002b4 	movhi	r4,10
   86034:	21308c04 	addi	r4,r4,-15824
   86038:	00877a40 	call	877a4 <ErrorF>
	
    ClearDDCFIFO() ;
   8603c:	0083ac00 	call	83ac0 <ClearDDCFIFO>
    GenerateDDCSCLK() ;
   86040:	0083b000 	call	83b00 <GenerateDDCSCLK>
    cDownStream =  (BStatus & M_DOWNSTREAM_COUNT) ;
   86044:	e0bfff8b 	ldhu	r2,-2(fp)
   86048:	10801fcc 	andi	r2,r2,127
   8604c:	e0bfff05 	stb	r2,-4(fp)
    
    if(cDownStream == 0 || cDownStream > 6 || BStatus & (B_MAX_CASCADE_EXCEEDED|B_DOWNSTREAM_OVER))
   86050:	e0bfff03 	ldbu	r2,-4(fp)
   86054:	10000726 	beq	r2,zero,86074 <HDCP_Authenticate_Repeater+0x224>
   86058:	e0bfff03 	ldbu	r2,-4(fp)
   8605c:	108001e8 	cmpgeui	r2,r2,7
   86060:	1000041e 	bne	r2,zero,86074 <HDCP_Authenticate_Repeater+0x224>
   86064:	e0bfff8b 	ldhu	r2,-2(fp)
   86068:	10bfffcc 	andi	r2,r2,65535
   8606c:	1082200c 	andi	r2,r2,2176
   86070:	10000426 	beq	r2,zero,86084 <HDCP_Authenticate_Repeater+0x234>
    {
        ErrorF("Invalid Down stream count,fail\n") ;
   86074:	010002b4 	movhi	r4,10
   86078:	21309104 	addi	r4,r4,-15804
   8607c:	00877a40 	call	877a4 <ErrorF>
        goto HDCP_Repeater_Fail ;
   86080:	00008406 	br	86294 <HDCP_Authenticate_Repeater+0x444>
    }
    

    if(HDCP_GetKSVList(KSVList,cDownStream) == ER_FAIL)
   86084:	e0bfff03 	ldbu	r2,-4(fp)
   86088:	100b883a 	mov	r5,r2
   8608c:	010002b4 	movhi	r4,10
   86090:	21050a04 	addi	r4,r4,5160
   86094:	00848ec0 	call	848ec <HDCP_GetKSVList>
   86098:	10800058 	cmpnei	r2,r2,1
   8609c:	10007626 	beq	r2,zero,86278 <HDCP_Authenticate_Repeater+0x428>
    {
        goto HDCP_Repeater_Fail ;
    }

    for(i = 0 ; i < cDownStream ; i++)
   860a0:	e03ffd15 	stw	zero,-12(fp)
   860a4:	00005206 	br	861f0 <HDCP_Authenticate_Repeater+0x3a0>
    {
		revoked=FALSE ; uc = 0 ;
   860a8:	e03ffe05 	stb	zero,-8(fp)
   860ac:	e03ffc05 	stb	zero,-16(fp)
		for( TimeOut = 0 ; TimeOut < 5 ; TimeOut++ )
   860b0:	e03ffe8d 	sth	zero,-6(fp)
   860b4:	00001206 	br	86100 <HDCP_Authenticate_Repeater+0x2b0>
		{
		    // check bit count
		    uc += countbit(KSVList[i*5+TimeOut]) ;
   860b8:	e0bffd17 	ldw	r2,-12(fp)
   860bc:	10c00164 	muli	r3,r2,5
   860c0:	e0bffe8b 	ldhu	r2,-6(fp)
   860c4:	1887883a 	add	r3,r3,r2
   860c8:	008002b4 	movhi	r2,10
   860cc:	10850a04 	addi	r2,r2,5160
   860d0:	10c5883a 	add	r2,r2,r3
   860d4:	10800003 	ldbu	r2,0(r2)
   860d8:	10803fcc 	andi	r2,r2,255
   860dc:	1009883a 	mov	r4,r2
   860e0:	00843a80 	call	843a8 <countbit>
   860e4:	1007883a 	mov	r3,r2
   860e8:	e0bffc03 	ldbu	r2,-16(fp)
   860ec:	1885883a 	add	r2,r3,r2
   860f0:	e0bffc05 	stb	r2,-16(fp)
    }

    for(i = 0 ; i < cDownStream ; i++)
    {
		revoked=FALSE ; uc = 0 ;
		for( TimeOut = 0 ; TimeOut < 5 ; TimeOut++ )
   860f4:	e0bffe8b 	ldhu	r2,-6(fp)
   860f8:	10800044 	addi	r2,r2,1
   860fc:	e0bffe8d 	sth	r2,-6(fp)
   86100:	e0bffe8b 	ldhu	r2,-6(fp)
   86104:	10800170 	cmpltui	r2,r2,5
   86108:	103feb1e 	bne	r2,zero,860b8 <__alt_data_end+0xfffb61f8>
		{
		    // check bit count
		    uc += countbit(KSVList[i*5+TimeOut]) ;
		}
		if( uc != 20 ) revoked = TRUE ;
   8610c:	e0bffc03 	ldbu	r2,-16(fp)
   86110:	10800520 	cmpeqi	r2,r2,20
   86114:	1000021e 	bne	r2,zero,86120 <HDCP_Authenticate_Repeater+0x2d0>
   86118:	00800044 	movi	r2,1
   8611c:	e0bffe05 	stb	r2,-8(fp)
    #ifdef SUPPORT_REVOKE_KSV    
        HDCP_VerifyRevocationList(SRM1,&KSVList[i*5],&revoked) ;
    #endif
        if(revoked)
   86120:	e0bffe03 	ldbu	r2,-8(fp)
   86124:	10002f26 	beq	r2,zero,861e4 <HDCP_Authenticate_Repeater+0x394>
        {
            ErrorF("KSVFIFO[%d] = %02X %02X %02X %02X %02X is revoked\n",i,KSVList[i*5],KSVList[i*5+1],KSVList[i*5+2],KSVList[i*5+3],KSVList[i*5+4]) ; 
   86128:	e0bffd17 	ldw	r2,-12(fp)
   8612c:	10c00164 	muli	r3,r2,5
   86130:	008002b4 	movhi	r2,10
   86134:	10850a04 	addi	r2,r2,5160
   86138:	10c5883a 	add	r2,r2,r3
   8613c:	10800003 	ldbu	r2,0(r2)
   86140:	11803fcc 	andi	r6,r2,255
   86144:	e0bffd17 	ldw	r2,-12(fp)
   86148:	10800164 	muli	r2,r2,5
   8614c:	10c00044 	addi	r3,r2,1
   86150:	008002b4 	movhi	r2,10
   86154:	10850a04 	addi	r2,r2,5160
   86158:	10c5883a 	add	r2,r2,r3
   8615c:	10800003 	ldbu	r2,0(r2)
   86160:	11c03fcc 	andi	r7,r2,255
   86164:	e0bffd17 	ldw	r2,-12(fp)
   86168:	10800164 	muli	r2,r2,5
   8616c:	10c00084 	addi	r3,r2,2
   86170:	008002b4 	movhi	r2,10
   86174:	10850a04 	addi	r2,r2,5160
   86178:	10c5883a 	add	r2,r2,r3
   8617c:	10800003 	ldbu	r2,0(r2)
   86180:	10c03fcc 	andi	r3,r2,255
   86184:	e0bffd17 	ldw	r2,-12(fp)
   86188:	10800164 	muli	r2,r2,5
   8618c:	110000c4 	addi	r4,r2,3
   86190:	008002b4 	movhi	r2,10
   86194:	10850a04 	addi	r2,r2,5160
   86198:	1105883a 	add	r2,r2,r4
   8619c:	10800003 	ldbu	r2,0(r2)
   861a0:	11003fcc 	andi	r4,r2,255
   861a4:	e0bffd17 	ldw	r2,-12(fp)
   861a8:	10800164 	muli	r2,r2,5
   861ac:	11400104 	addi	r5,r2,4
   861b0:	008002b4 	movhi	r2,10
   861b4:	10850a04 	addi	r2,r2,5160
   861b8:	1145883a 	add	r2,r2,r5
   861bc:	10800003 	ldbu	r2,0(r2)
   861c0:	10803fcc 	andi	r2,r2,255
   861c4:	d8800215 	stw	r2,8(sp)
   861c8:	d9000115 	stw	r4,4(sp)
   861cc:	d8c00015 	stw	r3,0(sp)
   861d0:	e17ffd17 	ldw	r5,-12(fp)
   861d4:	010002b4 	movhi	r4,10
   861d8:	21309904 	addi	r4,r4,-15772
   861dc:	00877a40 	call	877a4 <ErrorF>
			 goto HDCP_Repeater_Fail ;
   861e0:	00002c06 	br	86294 <HDCP_Authenticate_Repeater+0x444>
    if(HDCP_GetKSVList(KSVList,cDownStream) == ER_FAIL)
    {
        goto HDCP_Repeater_Fail ;
    }

    for(i = 0 ; i < cDownStream ; i++)
   861e4:	e0bffd17 	ldw	r2,-12(fp)
   861e8:	10800044 	addi	r2,r2,1
   861ec:	e0bffd15 	stw	r2,-12(fp)
   861f0:	e0bfff03 	ldbu	r2,-4(fp)
   861f4:	e0fffd17 	ldw	r3,-12(fp)
   861f8:	18bfab16 	blt	r3,r2,860a8 <__alt_data_end+0xfffb61e8>
			 goto HDCP_Repeater_Fail ;
        }
    }

    
    if(HDCP_GetVr(Vr) == ER_FAIL)
   861fc:	010002b4 	movhi	r4,10
   86200:	21051204 	addi	r4,r4,5192
   86204:	0084a980 	call	84a98 <HDCP_GetVr>
   86208:	10800058 	cmpnei	r2,r2,1
   8620c:	10001c26 	beq	r2,zero,86280 <HDCP_Authenticate_Repeater+0x430>
    {
        goto HDCP_Repeater_Fail ; 
    }

    if(HDCP_GetM0(M0) == ER_FAIL)
   86210:	d1299484 	addi	r4,gp,-22958
   86214:	0084d240 	call	84d24 <HDCP_GetM0>
   86218:	10800058 	cmpnei	r2,r2,1
   8621c:	10001a26 	beq	r2,zero,86288 <HDCP_Authenticate_Repeater+0x438>
    {
        goto HDCP_Repeater_Fail ;
    }
    
    // do check SHA
    if(HDCP_CheckSHA(M0,BStatus,KSVList,cDownStream,Vr) == ER_FAIL)
   86220:	e0bfff8b 	ldhu	r2,-2(fp)
   86224:	10ffffcc 	andi	r3,r2,65535
   86228:	e13fff03 	ldbu	r4,-4(fp)
   8622c:	008002b4 	movhi	r2,10
   86230:	10851204 	addi	r2,r2,5192
   86234:	d8800015 	stw	r2,0(sp)
   86238:	200f883a 	mov	r7,r4
   8623c:	018002b4 	movhi	r6,10
   86240:	31850a04 	addi	r6,r6,5160
   86244:	180b883a 	mov	r5,r3
   86248:	d1299484 	addi	r4,gp,-22958
   8624c:	0085b500 	call	85b50 <HDCP_CheckSHA>
   86250:	10800058 	cmpnei	r2,r2,1
   86254:	10000e26 	beq	r2,zero,86290 <HDCP_Authenticate_Repeater+0x440>
    {
        goto HDCP_Repeater_Fail ;
    }
    
    
    HDCP_ResumeRepeaterAuthenticate() ;
   86258:	00848ac0 	call	848ac <HDCP_ResumeRepeaterAuthenticate>
	Instance[0].bAuthenticated = TRUE ;
   8625c:	008002b4 	movhi	r2,10
   86260:	1085ab04 	addi	r2,r2,5804
   86264:	10c00303 	ldbu	r3,12(r2)
   86268:	18c00054 	ori	r3,r3,1
   8626c:	10c00305 	stb	r3,12(r2)
    return ER_SUCCESS ;
   86270:	0005883a 	mov	r2,zero
   86274:	00000906 	br	8629c <HDCP_Authenticate_Repeater+0x44c>
    }
    

    if(HDCP_GetKSVList(KSVList,cDownStream) == ER_FAIL)
    {
        goto HDCP_Repeater_Fail ;
   86278:	0001883a 	nop
   8627c:	00000506 	br	86294 <HDCP_Authenticate_Repeater+0x444>
    }

    
    if(HDCP_GetVr(Vr) == ER_FAIL)
    {
        goto HDCP_Repeater_Fail ; 
   86280:	0001883a 	nop
   86284:	00000306 	br	86294 <HDCP_Authenticate_Repeater+0x444>
    }

    if(HDCP_GetM0(M0) == ER_FAIL)
    {
        goto HDCP_Repeater_Fail ;
   86288:	0001883a 	nop
   8628c:	00000106 	br	86294 <HDCP_Authenticate_Repeater+0x444>
    }
    
    // do check SHA
    if(HDCP_CheckSHA(M0,BStatus,KSVList,cDownStream,Vr) == ER_FAIL)
    {
        goto HDCP_Repeater_Fail ;
   86290:	0001883a 	nop
    HDCP_ResumeRepeaterAuthenticate() ;
	Instance[0].bAuthenticated = TRUE ;
    return ER_SUCCESS ;
    
HDCP_Repeater_Fail:
    HDCP_CancelRepeaterAuthenticate() ;
   86294:	00848580 	call	84858 <HDCP_CancelRepeaterAuthenticate>
    return ER_FAIL ;
   86298:	00800044 	movi	r2,1
}
   8629c:	e037883a 	mov	sp,fp
   862a0:	dfc00117 	ldw	ra,4(sp)
   862a4:	df000017 	ldw	fp,0(sp)
   862a8:	dec00204 	addi	sp,sp,8
   862ac:	f800283a 	ret

000862b0 <HDCP_ResumeAuthentication>:
// Side-Effect: as Authentication and Encryption.
//////////////////////////////////////////////////////////////////////

static void
HDCP_ResumeAuthentication()
{
   862b0:	defffe04 	addi	sp,sp,-8
   862b4:	dfc00115 	stw	ra,4(sp)
   862b8:	df000015 	stw	fp,0(sp)
   862bc:	d839883a 	mov	fp,sp
    SetAVMute(TRUE) ;
   862c0:	01000044 	movi	r4,1
   862c4:	0081fe00 	call	81fe0 <SetAVMute>
    if(HDCP_Authenticate() == ER_SUCCESS)
   862c8:	00844880 	call	84488 <HDCP_Authenticate>
   862cc:	1000011e 	bne	r2,zero,862d4 <HDCP_ResumeAuthentication+0x24>
	{
		HDCP_EnableEncryption() ;
   862d0:	00840280 	call	84028 <HDCP_EnableEncryption>
	}
	SetAVMute(FALSE) ;
   862d4:	0009883a 	mov	r4,zero
   862d8:	0081fe00 	call	81fe0 <SetAVMute>
}
   862dc:	0001883a 	nop
   862e0:	e037883a 	mov	sp,fp
   862e4:	dfc00117 	ldw	ra,4(sp)
   862e8:	df000017 	ldw	fp,0(sp)
   862ec:	dec00204 	addi	sp,sp,8
   862f0:	f800283a 	ret

000862f4 <ENABLE_NULL_PKT>:
#endif // SUPPORT_HDCP


static void
ENABLE_NULL_PKT()
{
   862f4:	defffe04 	addi	sp,sp,-8
   862f8:	dfc00115 	stw	ra,4(sp)
   862fc:	df000015 	stw	fp,0(sp)
   86300:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_NULL_CTRL,B_ENABLE_PKT|B_REPEAT_PKT);
   86304:	014000c4 	movi	r5,3
   86308:	01003244 	movi	r4,201
   8630c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   86310:	0001883a 	nop
   86314:	e037883a 	mov	sp,fp
   86318:	dfc00117 	ldw	ra,4(sp)
   8631c:	df000017 	ldw	fp,0(sp)
   86320:	dec00204 	addi	sp,sp,8
   86324:	f800283a 	ret

00086328 <ENABLE_ACP_PKT>:


static void
ENABLE_ACP_PKT()
{
   86328:	defffe04 	addi	sp,sp,-8
   8632c:	dfc00115 	stw	ra,4(sp)
   86330:	df000015 	stw	fp,0(sp)
   86334:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_ACP_CTRL,B_ENABLE_PKT|B_REPEAT_PKT);
   86338:	014000c4 	movi	r5,3
   8633c:	01003284 	movi	r4,202
   86340:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   86344:	0001883a 	nop
   86348:	e037883a 	mov	sp,fp
   8634c:	dfc00117 	ldw	ra,4(sp)
   86350:	df000017 	ldw	fp,0(sp)
   86354:	dec00204 	addi	sp,sp,8
   86358:	f800283a 	ret

0008635c <ENABLE_ISRC1_PKT>:


static void
ENABLE_ISRC1_PKT()
{
   8635c:	defffe04 	addi	sp,sp,-8
   86360:	dfc00115 	stw	ra,4(sp)
   86364:	df000015 	stw	fp,0(sp)
   86368:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_ISRC1_CTRL,B_ENABLE_PKT|B_REPEAT_PKT);
   8636c:	014000c4 	movi	r5,3
   86370:	010032c4 	movi	r4,203
   86374:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   86378:	0001883a 	nop
   8637c:	e037883a 	mov	sp,fp
   86380:	dfc00117 	ldw	ra,4(sp)
   86384:	df000017 	ldw	fp,0(sp)
   86388:	dec00204 	addi	sp,sp,8
   8638c:	f800283a 	ret

00086390 <ENABLE_ISRC2_PKT>:


static void
ENABLE_ISRC2_PKT()
{
   86390:	defffe04 	addi	sp,sp,-8
   86394:	dfc00115 	stw	ra,4(sp)
   86398:	df000015 	stw	fp,0(sp)
   8639c:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_ISRC2_CTRL,B_ENABLE_PKT|B_REPEAT_PKT);
   863a0:	014000c4 	movi	r5,3
   863a4:	01003304 	movi	r4,204
   863a8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   863ac:	0001883a 	nop
   863b0:	e037883a 	mov	sp,fp
   863b4:	dfc00117 	ldw	ra,4(sp)
   863b8:	df000017 	ldw	fp,0(sp)
   863bc:	dec00204 	addi	sp,sp,8
   863c0:	f800283a 	ret

000863c4 <ENABLE_AVI_INFOFRM_PKT>:


static void
ENABLE_AVI_INFOFRM_PKT()
{
   863c4:	defffe04 	addi	sp,sp,-8
   863c8:	dfc00115 	stw	ra,4(sp)
   863cc:	df000015 	stw	fp,0(sp)
   863d0:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_AVI_INFOFRM_CTRL,B_ENABLE_PKT|B_REPEAT_PKT);
   863d4:	014000c4 	movi	r5,3
   863d8:	01003344 	movi	r4,205
   863dc:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   863e0:	0001883a 	nop
   863e4:	e037883a 	mov	sp,fp
   863e8:	dfc00117 	ldw	ra,4(sp)
   863ec:	df000017 	ldw	fp,0(sp)
   863f0:	dec00204 	addi	sp,sp,8
   863f4:	f800283a 	ret

000863f8 <ENABLE_AUD_INFOFRM_PKT>:


static void
ENABLE_AUD_INFOFRM_PKT()
{
   863f8:	defffe04 	addi	sp,sp,-8
   863fc:	dfc00115 	stw	ra,4(sp)
   86400:	df000015 	stw	fp,0(sp)
   86404:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_AUD_INFOFRM_CTRL,B_ENABLE_PKT|B_REPEAT_PKT);
   86408:	014000c4 	movi	r5,3
   8640c:	01003384 	movi	r4,206
   86410:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   86414:	0001883a 	nop
   86418:	e037883a 	mov	sp,fp
   8641c:	dfc00117 	ldw	ra,4(sp)
   86420:	df000017 	ldw	fp,0(sp)
   86424:	dec00204 	addi	sp,sp,8
   86428:	f800283a 	ret

0008642c <ENABLE_SPD_INFOFRM_PKT>:


static void
ENABLE_SPD_INFOFRM_PKT()
{
   8642c:	defffe04 	addi	sp,sp,-8
   86430:	dfc00115 	stw	ra,4(sp)
   86434:	df000015 	stw	fp,0(sp)
   86438:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_SPD_INFOFRM_CTRL,B_ENABLE_PKT|B_REPEAT_PKT);
   8643c:	014000c4 	movi	r5,3
   86440:	010033c4 	movi	r4,207
   86444:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   86448:	0001883a 	nop
   8644c:	e037883a 	mov	sp,fp
   86450:	dfc00117 	ldw	ra,4(sp)
   86454:	df000017 	ldw	fp,0(sp)
   86458:	dec00204 	addi	sp,sp,8
   8645c:	f800283a 	ret

00086460 <ENABLE_MPG_INFOFRM_PKT>:


static void
ENABLE_MPG_INFOFRM_PKT()
{
   86460:	defffe04 	addi	sp,sp,-8
   86464:	dfc00115 	stw	ra,4(sp)
   86468:	df000015 	stw	fp,0(sp)
   8646c:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_MPG_INFOFRM_CTRL,B_ENABLE_PKT|B_REPEAT_PKT);
   86470:	014000c4 	movi	r5,3
   86474:	01003404 	movi	r4,208
   86478:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   8647c:	0001883a 	nop
   86480:	e037883a 	mov	sp,fp
   86484:	dfc00117 	ldw	ra,4(sp)
   86488:	df000017 	ldw	fp,0(sp)
   8648c:	dec00204 	addi	sp,sp,8
   86490:	f800283a 	ret

00086494 <DISABLE_NULL_PKT>:

static void
DISABLE_NULL_PKT()
{
   86494:	defffe04 	addi	sp,sp,-8
   86498:	dfc00115 	stw	ra,4(sp)
   8649c:	df000015 	stw	fp,0(sp)
   864a0:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_NULL_CTRL,0);
   864a4:	000b883a 	mov	r5,zero
   864a8:	01003244 	movi	r4,201
   864ac:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   864b0:	0001883a 	nop
   864b4:	e037883a 	mov	sp,fp
   864b8:	dfc00117 	ldw	ra,4(sp)
   864bc:	df000017 	ldw	fp,0(sp)
   864c0:	dec00204 	addi	sp,sp,8
   864c4:	f800283a 	ret

000864c8 <DISABLE_ACP_PKT>:


static void
DISABLE_ACP_PKT()
{
   864c8:	defffe04 	addi	sp,sp,-8
   864cc:	dfc00115 	stw	ra,4(sp)
   864d0:	df000015 	stw	fp,0(sp)
   864d4:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_ACP_CTRL,0);
   864d8:	000b883a 	mov	r5,zero
   864dc:	01003284 	movi	r4,202
   864e0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   864e4:	0001883a 	nop
   864e8:	e037883a 	mov	sp,fp
   864ec:	dfc00117 	ldw	ra,4(sp)
   864f0:	df000017 	ldw	fp,0(sp)
   864f4:	dec00204 	addi	sp,sp,8
   864f8:	f800283a 	ret

000864fc <DISABLE_ISRC1_PKT>:


static void
DISABLE_ISRC1_PKT()
{
   864fc:	defffe04 	addi	sp,sp,-8
   86500:	dfc00115 	stw	ra,4(sp)
   86504:	df000015 	stw	fp,0(sp)
   86508:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_ISRC1_CTRL,0);
   8650c:	000b883a 	mov	r5,zero
   86510:	010032c4 	movi	r4,203
   86514:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   86518:	0001883a 	nop
   8651c:	e037883a 	mov	sp,fp
   86520:	dfc00117 	ldw	ra,4(sp)
   86524:	df000017 	ldw	fp,0(sp)
   86528:	dec00204 	addi	sp,sp,8
   8652c:	f800283a 	ret

00086530 <DISABLE_ISRC2_PKT>:


static void
DISABLE_ISRC2_PKT()
{
   86530:	defffe04 	addi	sp,sp,-8
   86534:	dfc00115 	stw	ra,4(sp)
   86538:	df000015 	stw	fp,0(sp)
   8653c:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_ISRC2_CTRL,0);
   86540:	000b883a 	mov	r5,zero
   86544:	01003304 	movi	r4,204
   86548:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   8654c:	0001883a 	nop
   86550:	e037883a 	mov	sp,fp
   86554:	dfc00117 	ldw	ra,4(sp)
   86558:	df000017 	ldw	fp,0(sp)
   8655c:	dec00204 	addi	sp,sp,8
   86560:	f800283a 	ret

00086564 <DISABLE_AVI_INFOFRM_PKT>:


static void
DISABLE_AVI_INFOFRM_PKT()
{
   86564:	defffe04 	addi	sp,sp,-8
   86568:	dfc00115 	stw	ra,4(sp)
   8656c:	df000015 	stw	fp,0(sp)
   86570:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_AVI_INFOFRM_CTRL,0);
   86574:	000b883a 	mov	r5,zero
   86578:	01003344 	movi	r4,205
   8657c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   86580:	0001883a 	nop
   86584:	e037883a 	mov	sp,fp
   86588:	dfc00117 	ldw	ra,4(sp)
   8658c:	df000017 	ldw	fp,0(sp)
   86590:	dec00204 	addi	sp,sp,8
   86594:	f800283a 	ret

00086598 <DISABLE_AUD_INFOFRM_PKT>:


static void
DISABLE_AUD_INFOFRM_PKT()
{
   86598:	defffe04 	addi	sp,sp,-8
   8659c:	dfc00115 	stw	ra,4(sp)
   865a0:	df000015 	stw	fp,0(sp)
   865a4:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_AUD_INFOFRM_CTRL,0);
   865a8:	000b883a 	mov	r5,zero
   865ac:	01003384 	movi	r4,206
   865b0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   865b4:	0001883a 	nop
   865b8:	e037883a 	mov	sp,fp
   865bc:	dfc00117 	ldw	ra,4(sp)
   865c0:	df000017 	ldw	fp,0(sp)
   865c4:	dec00204 	addi	sp,sp,8
   865c8:	f800283a 	ret

000865cc <DISABLE_SPD_INFOFRM_PKT>:


static void
DISABLE_SPD_INFOFRM_PKT()
{
   865cc:	defffe04 	addi	sp,sp,-8
   865d0:	dfc00115 	stw	ra,4(sp)
   865d4:	df000015 	stw	fp,0(sp)
   865d8:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_SPD_INFOFRM_CTRL,0);
   865dc:	000b883a 	mov	r5,zero
   865e0:	010033c4 	movi	r4,207
   865e4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   865e8:	0001883a 	nop
   865ec:	e037883a 	mov	sp,fp
   865f0:	dfc00117 	ldw	ra,4(sp)
   865f4:	df000017 	ldw	fp,0(sp)
   865f8:	dec00204 	addi	sp,sp,8
   865fc:	f800283a 	ret

00086600 <DISABLE_MPG_INFOFRM_PKT>:


static void
DISABLE_MPG_INFOFRM_PKT()
{
   86600:	defffe04 	addi	sp,sp,-8
   86604:	dfc00115 	stw	ra,4(sp)
   86608:	df000015 	stw	fp,0(sp)
   8660c:	d839883a 	mov	fp,sp

    HDMITX_WriteI2C_Byte(REG_TX_MPG_INFOFRM_CTRL,0);
   86610:	000b883a 	mov	r5,zero
   86614:	01003404 	movi	r4,208
   86618:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
}
   8661c:	0001883a 	nop
   86620:	e037883a 	mov	sp,fp
   86624:	dfc00117 	ldw	ra,4(sp)
   86628:	df000017 	ldw	fp,0(sp)
   8662c:	dec00204 	addi	sp,sp,8
   86630:	f800283a 	ret

00086634 <SetAVIInfoFrame>:
// Side-Effect: N/A
//////////////////////////////////////////////////////////////////////

static SYS_STATUS
SetAVIInfoFrame(AVI_InfoFrame *pAVIInfoFrame)
{
   86634:	defffb04 	addi	sp,sp,-20
   86638:	dfc00415 	stw	ra,16(sp)
   8663c:	df000315 	stw	fp,12(sp)
   86640:	df000304 	addi	fp,sp,12
   86644:	e13fff15 	stw	r4,-4(fp)
    int i ;
    byte ucData ;

    if(!pAVIInfoFrame)
   86648:	e0bfff17 	ldw	r2,-4(fp)
   8664c:	1000021e 	bne	r2,zero,86658 <SetAVIInfoFrame+0x24>
    {
        return ER_FAIL ;
   86650:	00800044 	movi	r2,1
   86654:	00007406 	br	86828 <SetAVIInfoFrame+0x1f4>
    }

    Switch_HDMITX_Bank(1) ;
   86658:	01400044 	movi	r5,1
   8665c:	010003c4 	movi	r4,15
   86660:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB1,pAVIInfoFrame->pktbyte.AVI_DB[0]);
   86664:	e0bfff17 	ldw	r2,-4(fp)
   86668:	108000c3 	ldbu	r2,3(r2)
   8666c:	10803fcc 	andi	r2,r2,255
   86670:	100b883a 	mov	r5,r2
   86674:	01001604 	movi	r4,88
   86678:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB2,pAVIInfoFrame->pktbyte.AVI_DB[1]);
   8667c:	e0bfff17 	ldw	r2,-4(fp)
   86680:	10800103 	ldbu	r2,4(r2)
   86684:	10803fcc 	andi	r2,r2,255
   86688:	100b883a 	mov	r5,r2
   8668c:	01001644 	movi	r4,89
   86690:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB3,pAVIInfoFrame->pktbyte.AVI_DB[2]);
   86694:	e0bfff17 	ldw	r2,-4(fp)
   86698:	10800143 	ldbu	r2,5(r2)
   8669c:	10803fcc 	andi	r2,r2,255
   866a0:	100b883a 	mov	r5,r2
   866a4:	01001684 	movi	r4,90
   866a8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB4,pAVIInfoFrame->pktbyte.AVI_DB[3]);
   866ac:	e0bfff17 	ldw	r2,-4(fp)
   866b0:	10800183 	ldbu	r2,6(r2)
   866b4:	10803fcc 	andi	r2,r2,255
   866b8:	100b883a 	mov	r5,r2
   866bc:	010016c4 	movi	r4,91
   866c0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB5,pAVIInfoFrame->pktbyte.AVI_DB[4]);
   866c4:	e0bfff17 	ldw	r2,-4(fp)
   866c8:	108001c3 	ldbu	r2,7(r2)
   866cc:	10803fcc 	andi	r2,r2,255
   866d0:	100b883a 	mov	r5,r2
   866d4:	01001704 	movi	r4,92
   866d8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB6,pAVIInfoFrame->pktbyte.AVI_DB[5]);
   866dc:	e0bfff17 	ldw	r2,-4(fp)
   866e0:	10800203 	ldbu	r2,8(r2)
   866e4:	10803fcc 	andi	r2,r2,255
   866e8:	100b883a 	mov	r5,r2
   866ec:	01001784 	movi	r4,94
   866f0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB7,pAVIInfoFrame->pktbyte.AVI_DB[6]);
   866f4:	e0bfff17 	ldw	r2,-4(fp)
   866f8:	10800243 	ldbu	r2,9(r2)
   866fc:	10803fcc 	andi	r2,r2,255
   86700:	100b883a 	mov	r5,r2
   86704:	010017c4 	movi	r4,95
   86708:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB8,pAVIInfoFrame->pktbyte.AVI_DB[7]);
   8670c:	e0bfff17 	ldw	r2,-4(fp)
   86710:	10800283 	ldbu	r2,10(r2)
   86714:	10803fcc 	andi	r2,r2,255
   86718:	100b883a 	mov	r5,r2
   8671c:	01001804 	movi	r4,96
   86720:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB9,pAVIInfoFrame->pktbyte.AVI_DB[8]);
   86724:	e0bfff17 	ldw	r2,-4(fp)
   86728:	108002c3 	ldbu	r2,11(r2)
   8672c:	10803fcc 	andi	r2,r2,255
   86730:	100b883a 	mov	r5,r2
   86734:	01001844 	movi	r4,97
   86738:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB10,pAVIInfoFrame->pktbyte.AVI_DB[9]);
   8673c:	e0bfff17 	ldw	r2,-4(fp)
   86740:	10800303 	ldbu	r2,12(r2)
   86744:	10803fcc 	andi	r2,r2,255
   86748:	100b883a 	mov	r5,r2
   8674c:	01001884 	movi	r4,98
   86750:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB11,pAVIInfoFrame->pktbyte.AVI_DB[10]);
   86754:	e0bfff17 	ldw	r2,-4(fp)
   86758:	10800343 	ldbu	r2,13(r2)
   8675c:	10803fcc 	andi	r2,r2,255
   86760:	100b883a 	mov	r5,r2
   86764:	010018c4 	movi	r4,99
   86768:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB12,pAVIInfoFrame->pktbyte.AVI_DB[11]);
   8676c:	e0bfff17 	ldw	r2,-4(fp)
   86770:	10800383 	ldbu	r2,14(r2)
   86774:	10803fcc 	andi	r2,r2,255
   86778:	100b883a 	mov	r5,r2
   8677c:	01001904 	movi	r4,100
   86780:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB13,pAVIInfoFrame->pktbyte.AVI_DB[12]);
   86784:	e0bfff17 	ldw	r2,-4(fp)
   86788:	108003c3 	ldbu	r2,15(r2)
   8678c:	10803fcc 	andi	r2,r2,255
   86790:	100b883a 	mov	r5,r2
   86794:	01001944 	movi	r4,101
   86798:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    for(i = 0,ucData = 0; i < 13 ; i++)
   8679c:	e03ffd15 	stw	zero,-12(fp)
   867a0:	e03ffe05 	stb	zero,-8(fp)
   867a4:	00000b06 	br	867d4 <SetAVIInfoFrame+0x1a0>
    {
        ucData -= pAVIInfoFrame->pktbyte.AVI_DB[i] ;
   867a8:	e0ffff17 	ldw	r3,-4(fp)
   867ac:	e0bffd17 	ldw	r2,-12(fp)
   867b0:	1885883a 	add	r2,r3,r2
   867b4:	108000c4 	addi	r2,r2,3
   867b8:	10800003 	ldbu	r2,0(r2)
   867bc:	e0fffe03 	ldbu	r3,-8(fp)
   867c0:	1885c83a 	sub	r2,r3,r2
   867c4:	e0bffe05 	stb	r2,-8(fp)
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB9,pAVIInfoFrame->pktbyte.AVI_DB[8]);
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB10,pAVIInfoFrame->pktbyte.AVI_DB[9]);
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB11,pAVIInfoFrame->pktbyte.AVI_DB[10]);
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB12,pAVIInfoFrame->pktbyte.AVI_DB[11]);
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_DB13,pAVIInfoFrame->pktbyte.AVI_DB[12]);
    for(i = 0,ucData = 0; i < 13 ; i++)
   867c8:	e0bffd17 	ldw	r2,-12(fp)
   867cc:	10800044 	addi	r2,r2,1
   867d0:	e0bffd15 	stw	r2,-12(fp)
   867d4:	e0bffd17 	ldw	r2,-12(fp)
   867d8:	10800350 	cmplti	r2,r2,13
   867dc:	103ff21e 	bne	r2,zero,867a8 <__alt_data_end+0xfffb68e8>
    {
        ucData -= pAVIInfoFrame->pktbyte.AVI_DB[i] ;
    }
	ErrorF("SetAVIInfo(): ") ;
   867e0:	010002b4 	movhi	r4,10
   867e4:	2130a604 	addi	r4,r4,-15720
   867e8:	00877a40 	call	877a4 <ErrorF>
    //ErrorF("%02X ",HDMITX_ReadI2C_Byte(REG_TX_AVIINFO_DB9)) ;
    //ErrorF("%02X ",HDMITX_ReadI2C_Byte(REG_TX_AVIINFO_DB10)) ;
    //ErrorF("%02X ",HDMITX_ReadI2C_Byte(REG_TX_AVIINFO_DB11)) ;
    //ErrorF("%02X ",HDMITX_ReadI2C_Byte(REG_TX_AVIINFO_DB12)) ;
    //ErrorF("%02X ",HDMITX_ReadI2C_Byte(REG_TX_AVIINFO_DB13)) ;
	ErrorF("\n") ;
   867ec:	010002b4 	movhi	r4,10
   867f0:	21300904 	addi	r4,r4,-16348
   867f4:	00877a40 	call	877a4 <ErrorF>
    ucData -= 0x80+AVI_INFOFRAME_VER+AVI_INFOFRAME_TYPE+AVI_INFOFRAME_LEN ;
   867f8:	e0bffe03 	ldbu	r2,-8(fp)
   867fc:	10801bc4 	addi	r2,r2,111
   86800:	e0bffe05 	stb	r2,-8(fp)
	HDMITX_WriteI2C_Byte(REG_TX_AVIINFO_SUM,ucData);
   86804:	e0bffe03 	ldbu	r2,-8(fp)
   86808:	100b883a 	mov	r5,r2
   8680c:	01001744 	movi	r4,93
   86810:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>


    Switch_HDMITX_Bank(0) ;
   86814:	000b883a 	mov	r5,zero
   86818:	010003c4 	movi	r4,15
   8681c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    ENABLE_AVI_INFOFRM_PKT();
   86820:	00863c40 	call	863c4 <ENABLE_AVI_INFOFRM_PKT>
    return ER_SUCCESS ;
   86824:	0005883a 	mov	r2,zero
}
   86828:	e037883a 	mov	sp,fp
   8682c:	dfc00117 	ldw	ra,4(sp)
   86830:	df000017 	ldw	fp,0(sp)
   86834:	dec00204 	addi	sp,sp,8
   86838:	f800283a 	ret

0008683c <SetAudioInfoFrame>:
// Side-Effect: N/A
//////////////////////////////////////////////////////////////////////

static SYS_STATUS
SetAudioInfoFrame(Audio_InfoFrame *pAudioInfoFrame)
{
   8683c:	defffb04 	addi	sp,sp,-20
   86840:	dfc00415 	stw	ra,16(sp)
   86844:	df000315 	stw	fp,12(sp)
   86848:	df000304 	addi	fp,sp,12
   8684c:	e13fff15 	stw	r4,-4(fp)
    int i ;
    BYTE ucData ;

    if(!pAudioInfoFrame)
   86850:	e0bfff17 	ldw	r2,-4(fp)
   86854:	1000021e 	bne	r2,zero,86860 <SetAudioInfoFrame+0x24>
    {
        return ER_FAIL ;
   86858:	00800044 	movi	r2,1
   8685c:	00003806 	br	86940 <SetAudioInfoFrame+0x104>
    }

    Switch_HDMITX_Bank(1) ;
   86860:	01400044 	movi	r5,1
   86864:	010003c4 	movi	r4,15
   86868:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_PKT_AUDINFO_CC,pAudioInfoFrame->pktbyte.AUD_DB[0]);
   8686c:	e0bfff17 	ldw	r2,-4(fp)
   86870:	108000c3 	ldbu	r2,3(r2)
   86874:	10803fcc 	andi	r2,r2,255
   86878:	100b883a 	mov	r5,r2
   8687c:	01001a04 	movi	r4,104
   86880:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_PKT_AUDINFO_SF,pAudioInfoFrame->pktbyte.AUD_DB[1]);
   86884:	e0bfff17 	ldw	r2,-4(fp)
   86888:	10800103 	ldbu	r2,4(r2)
   8688c:	10803fcc 	andi	r2,r2,255
   86890:	100b883a 	mov	r5,r2
   86894:	01001a44 	movi	r4,105
   86898:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_PKT_AUDINFO_CA,pAudioInfoFrame->pktbyte.AUD_DB[3]);
   8689c:	e0bfff17 	ldw	r2,-4(fp)
   868a0:	10800183 	ldbu	r2,6(r2)
   868a4:	10803fcc 	andi	r2,r2,255
   868a8:	100b883a 	mov	r5,r2
   868ac:	01001ac4 	movi	r4,107
   868b0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_PKT_AUDINFO_DM_LSV,pAudioInfoFrame->pktbyte.AUD_DB[4]) ;
   868b4:	e0bfff17 	ldw	r2,-4(fp)
   868b8:	108001c3 	ldbu	r2,7(r2)
   868bc:	10803fcc 	andi	r2,r2,255
   868c0:	100b883a 	mov	r5,r2
   868c4:	01001b04 	movi	r4,108
   868c8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    for(i = 0,ucData = 0 ; i< 5 ; i++)
   868cc:	e03ffd15 	stw	zero,-12(fp)
   868d0:	e03ffe05 	stb	zero,-8(fp)
   868d4:	00000b06 	br	86904 <SetAudioInfoFrame+0xc8>
    {
        ucData -= pAudioInfoFrame->pktbyte.AUD_DB[i] ;
   868d8:	e0ffff17 	ldw	r3,-4(fp)
   868dc:	e0bffd17 	ldw	r2,-12(fp)
   868e0:	1885883a 	add	r2,r3,r2
   868e4:	108000c4 	addi	r2,r2,3
   868e8:	10800003 	ldbu	r2,0(r2)
   868ec:	e0fffe03 	ldbu	r3,-8(fp)
   868f0:	1885c83a 	sub	r2,r3,r2
   868f4:	e0bffe05 	stb	r2,-8(fp)
    HDMITX_WriteI2C_Byte(REG_TX_PKT_AUDINFO_CC,pAudioInfoFrame->pktbyte.AUD_DB[0]);
    HDMITX_WriteI2C_Byte(REG_TX_PKT_AUDINFO_SF,pAudioInfoFrame->pktbyte.AUD_DB[1]);
    HDMITX_WriteI2C_Byte(REG_TX_PKT_AUDINFO_CA,pAudioInfoFrame->pktbyte.AUD_DB[3]);
    HDMITX_WriteI2C_Byte(REG_TX_PKT_AUDINFO_DM_LSV,pAudioInfoFrame->pktbyte.AUD_DB[4]) ;

    for(i = 0,ucData = 0 ; i< 5 ; i++)
   868f8:	e0bffd17 	ldw	r2,-12(fp)
   868fc:	10800044 	addi	r2,r2,1
   86900:	e0bffd15 	stw	r2,-12(fp)
   86904:	e0bffd17 	ldw	r2,-12(fp)
   86908:	10800150 	cmplti	r2,r2,5
   8690c:	103ff21e 	bne	r2,zero,868d8 <__alt_data_end+0xfffb6a18>
    {
        ucData -= pAudioInfoFrame->pktbyte.AUD_DB[i] ;
    }
    ucData -= 0x80+AUDIO_INFOFRAME_VER+AUDIO_INFOFRAME_TYPE+AUDIO_INFOFRAME_LEN ;
   86910:	e0bffe03 	ldbu	r2,-8(fp)
   86914:	10801c44 	addi	r2,r2,113
   86918:	e0bffe05 	stb	r2,-8(fp)

    HDMITX_WriteI2C_Byte(REG_TX_PKT_AUDINFO_SUM,ucData) ;
   8691c:	e0bffe03 	ldbu	r2,-8(fp)
   86920:	100b883a 	mov	r5,r2
   86924:	01001b44 	movi	r4,109
   86928:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>


    Switch_HDMITX_Bank(0) ;
   8692c:	000b883a 	mov	r5,zero
   86930:	010003c4 	movi	r4,15
   86934:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    ENABLE_AUD_INFOFRM_PKT();
   86938:	00863f80 	call	863f8 <ENABLE_AUD_INFOFRM_PKT>
    return ER_SUCCESS ;
   8693c:	0005883a 	mov	r2,zero
}
   86940:	e037883a 	mov	sp,fp
   86944:	dfc00117 	ldw	ra,4(sp)
   86948:	df000017 	ldw	fp,0(sp)
   8694c:	dec00204 	addi	sp,sp,8
   86950:	f800283a 	ret

00086954 <SetSPDInfoFrame>:
// Side-Effect: N/A
//////////////////////////////////////////////////////////////////////

static SYS_STATUS
SetSPDInfoFrame(SPD_InfoFrame *pSPDInfoFrame)
{
   86954:	defffb04 	addi	sp,sp,-20
   86958:	dfc00415 	stw	ra,16(sp)
   8695c:	df000315 	stw	fp,12(sp)
   86960:	df000304 	addi	fp,sp,12
   86964:	e13fff15 	stw	r4,-4(fp)
    int i ;
    BYTE ucData ;

    if(!pSPDInfoFrame)
   86968:	e0bfff17 	ldw	r2,-4(fp)
   8696c:	1000021e 	bne	r2,zero,86978 <SetSPDInfoFrame+0x24>
    {
        return ER_FAIL ;
   86970:	00800044 	movi	r2,1
   86974:	00002b06 	br	86a24 <SetSPDInfoFrame+0xd0>
    }

    Switch_HDMITX_Bank(1) ;
   86978:	01400044 	movi	r5,1
   8697c:	010003c4 	movi	r4,15
   86980:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    for(i = 0,ucData = 0 ; i < 25 ; i++)
   86984:	e03ffd15 	stw	zero,-12(fp)
   86988:	e03ffe05 	stb	zero,-8(fp)
   8698c:	00001606 	br	869e8 <SetSPDInfoFrame+0x94>
    {
        ucData -= pSPDInfoFrame->pktbyte.SPD_DB[i] ;
   86990:	e0ffff17 	ldw	r3,-4(fp)
   86994:	e0bffd17 	ldw	r2,-12(fp)
   86998:	1885883a 	add	r2,r3,r2
   8699c:	108000c4 	addi	r2,r2,3
   869a0:	10800003 	ldbu	r2,0(r2)
   869a4:	e0fffe03 	ldbu	r3,-8(fp)
   869a8:	1885c83a 	sub	r2,r3,r2
   869ac:	e0bffe05 	stb	r2,-8(fp)
        HDMITX_WriteI2C_Byte(REG_TX_PKT_SPDINFO_PB1+i,pSPDInfoFrame->pktbyte.SPD_DB[i]) ;
   869b0:	e0bffd17 	ldw	r2,-12(fp)
   869b4:	10801c44 	addi	r2,r2,113
   869b8:	11003fcc 	andi	r4,r2,255
   869bc:	e0ffff17 	ldw	r3,-4(fp)
   869c0:	e0bffd17 	ldw	r2,-12(fp)
   869c4:	1885883a 	add	r2,r3,r2
   869c8:	108000c4 	addi	r2,r2,3
   869cc:	10800003 	ldbu	r2,0(r2)
   869d0:	10803fcc 	andi	r2,r2,255
   869d4:	100b883a 	mov	r5,r2
   869d8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    {
        return ER_FAIL ;
    }

    Switch_HDMITX_Bank(1) ;
    for(i = 0,ucData = 0 ; i < 25 ; i++)
   869dc:	e0bffd17 	ldw	r2,-12(fp)
   869e0:	10800044 	addi	r2,r2,1
   869e4:	e0bffd15 	stw	r2,-12(fp)
   869e8:	e0bffd17 	ldw	r2,-12(fp)
   869ec:	10800650 	cmplti	r2,r2,25
   869f0:	103fe71e 	bne	r2,zero,86990 <__alt_data_end+0xfffb6ad0>
    {
        ucData -= pSPDInfoFrame->pktbyte.SPD_DB[i] ;
        HDMITX_WriteI2C_Byte(REG_TX_PKT_SPDINFO_PB1+i,pSPDInfoFrame->pktbyte.SPD_DB[i]) ;
    }
    ucData -= 0x80+SPD_INFOFRAME_VER+SPD_INFOFRAME_TYPE+SPD_INFOFRAME_LEN ;
   869f4:	e0bffe03 	ldbu	r2,-8(fp)
   869f8:	108018c4 	addi	r2,r2,99
   869fc:	e0bffe05 	stb	r2,-8(fp)
    HDMITX_WriteI2C_Byte(REG_TX_PKT_SPDINFO_SUM,ucData) ; // checksum
   86a00:	e0bffe03 	ldbu	r2,-8(fp)
   86a04:	100b883a 	mov	r5,r2
   86a08:	01001c04 	movi	r4,112
   86a0c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    Switch_HDMITX_Bank(0) ;
   86a10:	000b883a 	mov	r5,zero
   86a14:	010003c4 	movi	r4,15
   86a18:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    ENABLE_SPD_INFOFRM_PKT();
   86a1c:	008642c0 	call	8642c <ENABLE_SPD_INFOFRM_PKT>
    return ER_SUCCESS ;
   86a20:	0005883a 	mov	r2,zero
}
   86a24:	e037883a 	mov	sp,fp
   86a28:	dfc00117 	ldw	ra,4(sp)
   86a2c:	df000017 	ldw	fp,0(sp)
   86a30:	dec00204 	addi	sp,sp,8
   86a34:	f800283a 	ret

00086a38 <SetMPEGInfoFrame>:
// Side-Effect: N/A
//////////////////////////////////////////////////////////////////////

static SYS_STATUS
SetMPEGInfoFrame(MPEG_InfoFrame *pMPGInfoFrame)
{
   86a38:	defffb04 	addi	sp,sp,-20
   86a3c:	dfc00415 	stw	ra,16(sp)
   86a40:	df000315 	stw	fp,12(sp)
   86a44:	df000304 	addi	fp,sp,12
   86a48:	e13fff15 	stw	r4,-4(fp)
    int i ;
    BYTE ucData ;

    if(!pMPGInfoFrame)
   86a4c:	e0bfff17 	ldw	r2,-4(fp)
   86a50:	1000021e 	bne	r2,zero,86a5c <SetMPEGInfoFrame+0x24>
    {
        return ER_FAIL ;
   86a54:	00800044 	movi	r2,1
   86a58:	00004706 	br	86b78 <SetMPEGInfoFrame+0x140>
    }

    Switch_HDMITX_Bank(1) ;
   86a5c:	01400044 	movi	r5,1
   86a60:	010003c4 	movi	r4,15
   86a64:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    HDMITX_WriteI2C_Byte(REG_TX_PKT_MPGINFO_FMT,pMPGInfoFrame->info.FieldRepeat|(pMPGInfoFrame->info.MpegFrame<<1)) ;
   86a68:	e0bfff17 	ldw	r2,-4(fp)
   86a6c:	10800217 	ldw	r2,8(r2)
   86a70:	1004d13a 	srli	r2,r2,4
   86a74:	1080004c 	andi	r2,r2,1
   86a78:	1007883a 	mov	r3,r2
   86a7c:	e0bfff17 	ldw	r2,-4(fp)
   86a80:	10800217 	ldw	r2,8(r2)
   86a84:	108000cc 	andi	r2,r2,3
   86a88:	10803fcc 	andi	r2,r2,255
   86a8c:	1085883a 	add	r2,r2,r2
   86a90:	1884b03a 	or	r2,r3,r2
   86a94:	10803fcc 	andi	r2,r2,255
   86a98:	100b883a 	mov	r5,r2
   86a9c:	01002284 	movi	r4,138
   86aa0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_PKG_MPGINFO_DB0,pMPGInfoFrame->pktbyte.MPG_DB[0]) ;
   86aa4:	e0bfff17 	ldw	r2,-4(fp)
   86aa8:	108000c3 	ldbu	r2,3(r2)
   86aac:	10803fcc 	andi	r2,r2,255
   86ab0:	100b883a 	mov	r5,r2
   86ab4:	010022c4 	movi	r4,139
   86ab8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_PKG_MPGINFO_DB1,pMPGInfoFrame->pktbyte.MPG_DB[1]) ;
   86abc:	e0bfff17 	ldw	r2,-4(fp)
   86ac0:	10800103 	ldbu	r2,4(r2)
   86ac4:	10803fcc 	andi	r2,r2,255
   86ac8:	100b883a 	mov	r5,r2
   86acc:	01002304 	movi	r4,140
   86ad0:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_PKG_MPGINFO_DB2,pMPGInfoFrame->pktbyte.MPG_DB[2]) ;
   86ad4:	e0bfff17 	ldw	r2,-4(fp)
   86ad8:	10800143 	ldbu	r2,5(r2)
   86adc:	10803fcc 	andi	r2,r2,255
   86ae0:	100b883a 	mov	r5,r2
   86ae4:	01002344 	movi	r4,141
   86ae8:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    HDMITX_WriteI2C_Byte(REG_TX_PKG_MPGINFO_DB3,pMPGInfoFrame->pktbyte.MPG_DB[3]) ;
   86aec:	e0bfff17 	ldw	r2,-4(fp)
   86af0:	10800183 	ldbu	r2,6(r2)
   86af4:	10803fcc 	andi	r2,r2,255
   86af8:	100b883a 	mov	r5,r2
   86afc:	01002384 	movi	r4,142
   86b00:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    for(ucData = 0,i = 0 ; i < 5 ; i++)
   86b04:	e03ffe05 	stb	zero,-8(fp)
   86b08:	e03ffd15 	stw	zero,-12(fp)
   86b0c:	00000b06 	br	86b3c <SetMPEGInfoFrame+0x104>
    {
        ucData -= pMPGInfoFrame->pktbyte.MPG_DB[i] ;
   86b10:	e0ffff17 	ldw	r3,-4(fp)
   86b14:	e0bffd17 	ldw	r2,-12(fp)
   86b18:	1885883a 	add	r2,r3,r2
   86b1c:	108000c4 	addi	r2,r2,3
   86b20:	10800003 	ldbu	r2,0(r2)
   86b24:	e0fffe03 	ldbu	r3,-8(fp)
   86b28:	1885c83a 	sub	r2,r3,r2
   86b2c:	e0bffe05 	stb	r2,-8(fp)
    HDMITX_WriteI2C_Byte(REG_TX_PKG_MPGINFO_DB0,pMPGInfoFrame->pktbyte.MPG_DB[0]) ;
    HDMITX_WriteI2C_Byte(REG_TX_PKG_MPGINFO_DB1,pMPGInfoFrame->pktbyte.MPG_DB[1]) ;
    HDMITX_WriteI2C_Byte(REG_TX_PKG_MPGINFO_DB2,pMPGInfoFrame->pktbyte.MPG_DB[2]) ;
    HDMITX_WriteI2C_Byte(REG_TX_PKG_MPGINFO_DB3,pMPGInfoFrame->pktbyte.MPG_DB[3]) ;

    for(ucData = 0,i = 0 ; i < 5 ; i++)
   86b30:	e0bffd17 	ldw	r2,-12(fp)
   86b34:	10800044 	addi	r2,r2,1
   86b38:	e0bffd15 	stw	r2,-12(fp)
   86b3c:	e0bffd17 	ldw	r2,-12(fp)
   86b40:	10800150 	cmplti	r2,r2,5
   86b44:	103ff21e 	bne	r2,zero,86b10 <__alt_data_end+0xfffb6c50>
    {
        ucData -= pMPGInfoFrame->pktbyte.MPG_DB[i] ;
    }
    ucData -= 0x80+MPEG_INFOFRAME_VER+MPEG_INFOFRAME_TYPE+MPEG_INFOFRAME_LEN ;
   86b48:	e0bffe03 	ldbu	r2,-8(fp)
   86b4c:	10801c04 	addi	r2,r2,112
   86b50:	e0bffe05 	stb	r2,-8(fp)

    HDMITX_WriteI2C_Byte(REG_TX_PKG_MPGINFO_SUM,ucData) ;
   86b54:	e0bffe03 	ldbu	r2,-8(fp)
   86b58:	100b883a 	mov	r5,r2
   86b5c:	010023c4 	movi	r4,143
   86b60:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>

    Switch_HDMITX_Bank(0) ;
   86b64:	000b883a 	mov	r5,zero
   86b68:	010003c4 	movi	r4,15
   86b6c:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
    ENABLE_SPD_INFOFRM_PKT() ;
   86b70:	008642c0 	call	8642c <ENABLE_SPD_INFOFRM_PKT>

    return ER_SUCCESS ;
   86b74:	0005883a 	mov	r2,zero
}
   86b78:	e037883a 	mov	sp,fp
   86b7c:	dfc00117 	ldw	ra,4(sp)
   86b80:	df000017 	ldw	fp,0(sp)
   86b84:	dec00204 	addi	sp,sp,8
   86b88:	f800283a 	ret

00086b8c <HDMITX_SetOutput>:
//richard, move to .hvoid HDMITX_SetOutput() ;
//richard richard, move to .h void HDMITX_DevLoopProc() ;

void
HDMITX_SetOutput()
{
   86b8c:	defffa04 	addi	sp,sp,-24
   86b90:	dfc00515 	stw	ra,20(sp)
   86b94:	df000415 	stw	fp,16(sp)
   86b98:	df000404 	addi	fp,sp,16
    VIDEOPCLKLEVEL level ;
    unsigned long TMDSClock = VideoPixelClock*(pixelrep+1);
   86b9c:	d0a99c03 	ldbu	r2,-22928(gp)
   86ba0:	10803fcc 	andi	r2,r2,255
   86ba4:	10800044 	addi	r2,r2,1
   86ba8:	1007883a 	mov	r3,r2
   86bac:	d0a99917 	ldw	r2,-22940(gp)
   86bb0:	1885383a 	mul	r2,r3,r2
   86bb4:	e0bffe15 	stw	r2,-8(fp)
    #ifdef SUPPORT_SYNCEMB
    ProgramSyncEmbeddedVideoMode(VIC, bInputSignalType) ; // inf CCIR656 input
    #endif
    
    //TMDSClock = 745000000;  //????? richard
    if( TMDSClock>80000000 )
   86bb8:	e0fffe17 	ldw	r3,-8(fp)
   86bbc:	00813174 	movhi	r2,1221
   86bc0:	10ad0004 	addi	r2,r2,-19456
   86bc4:	10c0032e 	bgeu	r2,r3,86bd4 <HDMITX_SetOutput+0x48>
    {
        level = PCLK_HIGH ;
   86bc8:	00800084 	movi	r2,2
   86bcc:	e0bffd15 	stw	r2,-12(fp)
   86bd0:	00000806 	br	86bf4 <HDMITX_SetOutput+0x68>
    }
    else if(TMDSClock>20000000)
   86bd4:	e0fffe17 	ldw	r3,-8(fp)
   86bd8:	00804c74 	movhi	r2,305
   86bdc:	108b4004 	addi	r2,r2,11520
   86be0:	10c0032e 	bgeu	r2,r3,86bf0 <HDMITX_SetOutput+0x64>
    {
        level = PCLK_MEDIUM ;
   86be4:	00800044 	movi	r2,1
   86be8:	e0bffd15 	stw	r2,-12(fp)
   86bec:	00000106 	br	86bf4 <HDMITX_SetOutput+0x68>
    }
    else
    {
        level = PCLK_LOW ;
   86bf0:	e03ffd15 	stw	zero,-12(fp)
    


    //BOOL EnableVideoOutput(VIDEOPCLKLEVEL level,BYTE inputColorMode,BYTE outputColorMode,BYTE bHDMI) ;
    //EnableVideoOutput(level,bInputColorMode, bInputSignalType, bOutputColorMode,bHDMIMode) ;
    EnableVideoOutput(level,bInputColorMode, bOutputColorMode,bHDMIMode) ; // richard modify
   86bf4:	d0a99803 	ldbu	r2,-22944(gp)
   86bf8:	10c03fcc 	andi	r3,r2,255
   86bfc:	d0a998c3 	ldbu	r2,-22941(gp)
   86c00:	11003fcc 	andi	r4,r2,255
   86c04:	d0a99d17 	ldw	r2,-22924(gp)
   86c08:	10803fcc 	andi	r2,r2,255
   86c0c:	100f883a 	mov	r7,r2
   86c10:	200d883a 	mov	r6,r4
   86c14:	180b883a 	mov	r5,r3
   86c18:	e13ffd17 	ldw	r4,-12(fp)
   86c1c:	00816e40 	call	816e4 <EnableVideoOutput>
    
    if( bHDMIMode )
   86c20:	d0a99d17 	ldw	r2,-22924(gp)
   86c24:	10001b26 	beq	r2,zero,86c94 <HDMITX_SetOutput+0x108>
    {
    	OS_PRINTF("ConfigAVIInfoFrame, VIC=%d\n", VIC);
   86c28:	d0a99f03 	ldbu	r2,-22916(gp)
   86c2c:	10803fcc 	andi	r2,r2,255
   86c30:	100b883a 	mov	r5,r2
   86c34:	010002b4 	movhi	r4,10
   86c38:	2130aa04 	addi	r4,r4,-15704
   86c3c:	008780c0 	call	8780c <OS_PRINTF>
        ConfigAVIInfoFrame(VIC, pixelrep) ;
   86c40:	d0a99f03 	ldbu	r2,-22916(gp)
   86c44:	10803fcc 	andi	r2,r2,255
   86c48:	d0e99c03 	ldbu	r3,-22928(gp)
   86c4c:	18c03fcc 	andi	r3,r3,255
   86c50:	180b883a 	mov	r5,r3
   86c54:	1009883a 	mov	r4,r2
   86c58:	008717c0 	call	8717c <ConfigAVIInfoFrame>

        EnableHDCP(TRUE) ;
   86c5c:	01000044 	movi	r4,1
   86c60:	0081af00 	call	81af0 <EnableHDCP>
		if( bAudioEnable )
   86c64:	d0a99e17 	ldw	r2,-22920(gp)
   86c68:	10000a26 	beq	r2,zero,86c94 <HDMITX_SetOutput+0x108>
		{
            //BOOL EnableAudioOutput(ULONG VideoPixelClock,BYTE bAudioSampleFreq,BYTE ChannelNumber,BYTE bAudSWL,BYTE bSPDIF)
            //EnableAudioOutput(TMDSClock,48000, 2, FALSE);
            bool bSPDIF = FALSE;
   86c6c:	e03fff15 	stw	zero,-4(fp)
            EnableAudioOutput(TMDSClock,AUDFS_48KHz, 2, 16, bSPDIF);  // richard modify
   86c70:	e0bfff17 	ldw	r2,-4(fp)
   86c74:	10803fcc 	andi	r2,r2,255
   86c78:	d8800015 	stw	r2,0(sp)
   86c7c:	01c00404 	movi	r7,16
   86c80:	01800084 	movi	r6,2
   86c84:	01400084 	movi	r5,2
   86c88:	e13ffe17 	ldw	r4,-8(fp)
   86c8c:	00818780 	call	81878 <EnableAudioOutput>
            ConfigAudioInfoFrm() ;
   86c90:	00873640 	call	87364 <ConfigAudioInfoFrm>
		}
    }
    SetAVMute(FALSE) ;
   86c94:	0009883a 	mov	r4,zero
   86c98:	0081fe00 	call	81fe0 <SetAVMute>
    bChangeMode = FALSE ;
   86c9c:	d0299715 	stw	zero,-22948(gp)
}
   86ca0:	0001883a 	nop
   86ca4:	e037883a 	mov	sp,fp
   86ca8:	dfc00117 	ldw	ra,4(sp)
   86cac:	df000017 	ldw	fp,0(sp)
   86cb0:	dec00204 	addi	sp,sp,8
   86cb4:	f800283a 	ret

00086cb8 <HDMITX_ChangeDisplayOption>:



void
HDMITX_ChangeDisplayOption(HDMI_Video_Type OutputVideoTiming, HDMI_OutputColorMode OutputColorMode)
{
   86cb8:	defffd04 	addi	sp,sp,-12
   86cbc:	df000215 	stw	fp,8(sp)
   86cc0:	df000204 	addi	fp,sp,8
   86cc4:	e13ffe15 	stw	r4,-8(fp)
   86cc8:	e17fff15 	stw	r5,-4(fp)
   //HDMI_Video_Type  t=HDMI_480i60_16x9;
    switch(OutputVideoTiming)
   86ccc:	e0bffe17 	ldw	r2,-8(fp)
   86cd0:	10800be8 	cmpgeui	r2,r2,47
   86cd4:	1000fc1e 	bne	r2,zero,870c8 <HDMITX_ChangeDisplayOption+0x410>
   86cd8:	e0bffe17 	ldw	r2,-8(fp)
   86cdc:	100690ba 	slli	r3,r2,2
   86ce0:	00800234 	movhi	r2,8
   86ce4:	109b3d04 	addi	r2,r2,27892
   86ce8:	1885883a 	add	r2,r3,r2
   86cec:	10800017 	ldw	r2,0(r2)
   86cf0:	1000683a 	jmp	r2
   86cf4:	000870c8 	cmpgei	zero,zero,8643
   86cf8:	00086db0 	cmpltui	zero,zero,8630
   86cfc:	00086dd4 	movui	zero,8631
   86d00:	00086df8 	rdprs	zero,zero,8631
   86d04:	00086e20 	cmpeqi	zero,zero,8632
   86d08:	00086e4c 	andi	zero,zero,8633
   86d0c:	00086e78 	rdprs	zero,zero,8633
   86d10:	00086ea0 	cmpeqi	zero,zero,8634
   86d14:	000870c8 	cmpgei	zero,zero,8643
   86d18:	000870c8 	cmpgei	zero,zero,8643
   86d1c:	000870c8 	cmpgei	zero,zero,8643
   86d20:	000870c8 	cmpgei	zero,zero,8643
   86d24:	000870c8 	cmpgei	zero,zero,8643
   86d28:	000870c8 	cmpgei	zero,zero,8643
   86d2c:	000870c8 	cmpgei	zero,zero,8643
   86d30:	000870c8 	cmpgei	zero,zero,8643
   86d34:	00086ecc 	andi	zero,zero,8635
   86d38:	00086ef8 	rdprs	zero,zero,8635
   86d3c:	00086f1c 	xori	zero,zero,8636
   86d40:	00086f44 	movi	zero,8637
   86d44:	00086f70 	cmpltui	zero,zero,8637
   86d48:	00086f9c 	xori	zero,zero,8638
   86d4c:	00086fc4 	movi	zero,8639
   86d50:	000870c8 	cmpgei	zero,zero,8643
   86d54:	000870c8 	cmpgei	zero,zero,8643
   86d58:	000870c8 	cmpgei	zero,zero,8643
   86d5c:	000870c8 	cmpgei	zero,zero,8643
   86d60:	000870c8 	cmpgei	zero,zero,8643
   86d64:	000870c8 	cmpgei	zero,zero,8643
   86d68:	000870c8 	cmpgei	zero,zero,8643
   86d6c:	000870c8 	cmpgei	zero,zero,8643
   86d70:	00086ff0 	cmpltui	zero,zero,8639
   86d74:	0008701c 	xori	zero,zero,8640
   86d78:	00087048 	cmpgei	zero,zero,8641
   86d7c:	00087074 	movhi	zero,8641
   86d80:	000870c8 	cmpgei	zero,zero,8643
   86d84:	000870c8 	cmpgei	zero,zero,8643
   86d88:	000870c8 	cmpgei	zero,zero,8643
   86d8c:	000870c8 	cmpgei	zero,zero,8643
   86d90:	000870c8 	cmpgei	zero,zero,8643
   86d94:	000870c8 	cmpgei	zero,zero,8643
   86d98:	000870c8 	cmpgei	zero,zero,8643
   86d9c:	000870c8 	cmpgei	zero,zero,8643
   86da0:	000870c8 	cmpgei	zero,zero,8643
   86da4:	000870c8 	cmpgei	zero,zero,8643
   86da8:	000870c8 	cmpgei	zero,zero,8643
   86dac:	000870a0 	cmpeqi	zero,zero,8642
	{
    case HDMI_640x480p60:
        VIC = 1 ;
   86db0:	00800044 	movi	r2,1
   86db4:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 25000000 ;
   86db8:	00805f74 	movhi	r2,381
   86dbc:	109e1004 	addi	r2,r2,30784
   86dc0:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   86dc4:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_4x3 ;
   86dc8:	d0299a15 	stw	zero,-22936(gp)
        Colorimetry = HDMI_ITU601 ;
   86dcc:	d0299b15 	stw	zero,-22932(gp)
        break ;
   86dd0:	0000c006 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_480p60:
        VIC = 2 ;
   86dd4:	00800084 	movi	r2,2
   86dd8:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 27000000 ;
   86ddc:	00806734 	movhi	r2,412
   86de0:	10bf3004 	addi	r2,r2,-832
   86de4:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   86de8:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_4x3 ;
   86dec:	d0299a15 	stw	zero,-22936(gp)
        Colorimetry = HDMI_ITU601 ;
   86df0:	d0299b15 	stw	zero,-22932(gp)
        break ;
   86df4:	0000b706 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_480p60_16x9:
        VIC = 3 ;
   86df8:	008000c4 	movi	r2,3
   86dfc:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 27000000 ;
   86e00:	00806734 	movhi	r2,412
   86e04:	10bf3004 	addi	r2,r2,-832
   86e08:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   86e0c:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_16x9 ;
   86e10:	00800044 	movi	r2,1
   86e14:	d0a99a15 	stw	r2,-22936(gp)
        Colorimetry = HDMI_ITU601 ;
   86e18:	d0299b15 	stw	zero,-22932(gp)
        break ;
   86e1c:	0000ad06 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_720p60:
        VIC = 4 ;
   86e20:	00800104 	movi	r2,4
   86e24:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 74250000 ;
   86e28:	00811b74 	movhi	r2,1133
   86e2c:	10bdc404 	addi	r2,r2,-2288
   86e30:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   86e34:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_16x9 ;
   86e38:	00800044 	movi	r2,1
   86e3c:	d0a99a15 	stw	r2,-22936(gp)
        Colorimetry = HDMI_ITU709 ;
   86e40:	00800044 	movi	r2,1
   86e44:	d0a99b15 	stw	r2,-22932(gp)
        break ;
   86e48:	0000a206 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_1080i60:
        VIC = 5 ;
   86e4c:	00800144 	movi	r2,5
   86e50:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 74250000 ;
   86e54:	00811b74 	movhi	r2,1133
   86e58:	10bdc404 	addi	r2,r2,-2288
   86e5c:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   86e60:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_16x9 ;
   86e64:	00800044 	movi	r2,1
   86e68:	d0a99a15 	stw	r2,-22936(gp)
        Colorimetry = HDMI_ITU709 ;
   86e6c:	00800044 	movi	r2,1
   86e70:	d0a99b15 	stw	r2,-22932(gp)
        break ;
   86e74:	00009706 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_480i60:
        VIC = 6 ;
   86e78:	00800184 	movi	r2,6
   86e7c:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 13500000 ;
   86e80:	008033b4 	movhi	r2,206
   86e84:	10bf9804 	addi	r2,r2,-416
   86e88:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 1 ;
   86e8c:	00800044 	movi	r2,1
   86e90:	d0a99c05 	stb	r2,-22928(gp)
        aspec = HDMI_4x3 ;
   86e94:	d0299a15 	stw	zero,-22936(gp)
        Colorimetry = HDMI_ITU601 ;
   86e98:	d0299b15 	stw	zero,-22932(gp)
        break ;
   86e9c:	00008d06 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_480i60_16x9:
        VIC = 7 ;
   86ea0:	008001c4 	movi	r2,7
   86ea4:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 13500000 ;
   86ea8:	008033b4 	movhi	r2,206
   86eac:	10bf9804 	addi	r2,r2,-416
   86eb0:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 1 ;
   86eb4:	00800044 	movi	r2,1
   86eb8:	d0a99c05 	stb	r2,-22928(gp)
        aspec = HDMI_16x9 ;
   86ebc:	00800044 	movi	r2,1
   86ec0:	d0a99a15 	stw	r2,-22936(gp)
        Colorimetry = HDMI_ITU601 ;
   86ec4:	d0299b15 	stw	zero,-22932(gp)
        break ;
   86ec8:	00008206 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_1080p60:
        VIC = 16 ;
   86ecc:	00800404 	movi	r2,16
   86ed0:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 148500000 ;
   86ed4:	008236b4 	movhi	r2,2266
   86ed8:	10bb8804 	addi	r2,r2,-4576
   86edc:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   86ee0:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_16x9 ;
   86ee4:	00800044 	movi	r2,1
   86ee8:	d0a99a15 	stw	r2,-22936(gp)
        Colorimetry = HDMI_ITU709 ;
   86eec:	00800044 	movi	r2,1
   86ef0:	d0a99b15 	stw	r2,-22932(gp)
        break ;
   86ef4:	00007706 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_576p50:
        VIC = 17 ;
   86ef8:	00800444 	movi	r2,17
   86efc:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 27000000 ;
   86f00:	00806734 	movhi	r2,412
   86f04:	10bf3004 	addi	r2,r2,-832
   86f08:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   86f0c:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_4x3 ;
   86f10:	d0299a15 	stw	zero,-22936(gp)
        Colorimetry = HDMI_ITU601 ;
   86f14:	d0299b15 	stw	zero,-22932(gp)
        break ;
   86f18:	00006e06 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_576p50_16x9:
        VIC = 18 ;
   86f1c:	00800484 	movi	r2,18
   86f20:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 27000000 ;
   86f24:	00806734 	movhi	r2,412
   86f28:	10bf3004 	addi	r2,r2,-832
   86f2c:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   86f30:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_16x9 ;
   86f34:	00800044 	movi	r2,1
   86f38:	d0a99a15 	stw	r2,-22936(gp)
        Colorimetry = HDMI_ITU601 ;
   86f3c:	d0299b15 	stw	zero,-22932(gp)
        break ;
   86f40:	00006406 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_720p50:
        VIC = 19 ;
   86f44:	008004c4 	movi	r2,19
   86f48:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 74250000 ;
   86f4c:	00811b74 	movhi	r2,1133
   86f50:	10bdc404 	addi	r2,r2,-2288
   86f54:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   86f58:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_16x9 ;
   86f5c:	00800044 	movi	r2,1
   86f60:	d0a99a15 	stw	r2,-22936(gp)
        Colorimetry = HDMI_ITU709 ;
   86f64:	00800044 	movi	r2,1
   86f68:	d0a99b15 	stw	r2,-22932(gp)
        break ;
   86f6c:	00005906 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_1080i50:
        VIC = 20 ;
   86f70:	00800504 	movi	r2,20
   86f74:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 74250000 ;
   86f78:	00811b74 	movhi	r2,1133
   86f7c:	10bdc404 	addi	r2,r2,-2288
   86f80:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   86f84:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_16x9 ;
   86f88:	00800044 	movi	r2,1
   86f8c:	d0a99a15 	stw	r2,-22936(gp)
        Colorimetry = HDMI_ITU709 ;
   86f90:	00800044 	movi	r2,1
   86f94:	d0a99b15 	stw	r2,-22932(gp)
        break ;
   86f98:	00004e06 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_576i50:
        VIC = 21 ;
   86f9c:	00800544 	movi	r2,21
   86fa0:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 13500000 ;
   86fa4:	008033b4 	movhi	r2,206
   86fa8:	10bf9804 	addi	r2,r2,-416
   86fac:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 1 ;
   86fb0:	00800044 	movi	r2,1
   86fb4:	d0a99c05 	stb	r2,-22928(gp)
        aspec = HDMI_4x3 ;
   86fb8:	d0299a15 	stw	zero,-22936(gp)
        Colorimetry = HDMI_ITU601 ;
   86fbc:	d0299b15 	stw	zero,-22932(gp)
        break ;
   86fc0:	00004406 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_576i50_16x9:
        VIC = 22 ;
   86fc4:	00800584 	movi	r2,22
   86fc8:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 13500000 ;
   86fcc:	008033b4 	movhi	r2,206
   86fd0:	10bf9804 	addi	r2,r2,-416
   86fd4:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 1 ;
   86fd8:	00800044 	movi	r2,1
   86fdc:	d0a99c05 	stb	r2,-22928(gp)
        aspec = HDMI_16x9 ;
   86fe0:	00800044 	movi	r2,1
   86fe4:	d0a99a15 	stw	r2,-22936(gp)
        Colorimetry = HDMI_ITU601 ;
   86fe8:	d0299b15 	stw	zero,-22932(gp)
        break ;
   86fec:	00003906 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_1080p50:
        VIC = 31 ;
   86ff0:	008007c4 	movi	r2,31
   86ff4:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 148500000 ;
   86ff8:	008236b4 	movhi	r2,2266
   86ffc:	10bb8804 	addi	r2,r2,-4576
   87000:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   87004:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_16x9 ;
   87008:	00800044 	movi	r2,1
   8700c:	d0a99a15 	stw	r2,-22936(gp)
        Colorimetry = HDMI_ITU709 ;
   87010:	00800044 	movi	r2,1
   87014:	d0a99b15 	stw	r2,-22932(gp)
        break ;
   87018:	00002e06 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_1080p24:
        VIC = 32 ;
   8701c:	00800804 	movi	r2,32
   87020:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 74250000 ;
   87024:	00811b74 	movhi	r2,1133
   87028:	10bdc404 	addi	r2,r2,-2288
   8702c:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   87030:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_16x9 ;
   87034:	00800044 	movi	r2,1
   87038:	d0a99a15 	stw	r2,-22936(gp)
        Colorimetry = HDMI_ITU709 ;
   8703c:	00800044 	movi	r2,1
   87040:	d0a99b15 	stw	r2,-22932(gp)
        break ;
   87044:	00002306 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_1080p25:
        VIC = 33 ;
   87048:	00800844 	movi	r2,33
   8704c:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 74250000 ;
   87050:	00811b74 	movhi	r2,1133
   87054:	10bdc404 	addi	r2,r2,-2288
   87058:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   8705c:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_16x9 ;
   87060:	00800044 	movi	r2,1
   87064:	d0a99a15 	stw	r2,-22936(gp)
        Colorimetry = HDMI_ITU709 ;
   87068:	00800044 	movi	r2,1
   8706c:	d0a99b15 	stw	r2,-22932(gp)
        break ;
   87070:	00001806 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_1080p30:
        VIC = 34 ;
   87074:	00800884 	movi	r2,34
   87078:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 74250000 ;
   8707c:	00811b74 	movhi	r2,1133
   87080:	10bdc404 	addi	r2,r2,-2288
   87084:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   87088:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_16x9 ;
   8708c:	00800044 	movi	r2,1
   87090:	d0a99a15 	stw	r2,-22936(gp)
        Colorimetry = HDMI_ITU709 ;
   87094:	00800044 	movi	r2,1
   87098:	d0a99b15 	stw	r2,-22932(gp)
        break ;
   8709c:	00000d06 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
    case HDMI_1080i120:// richard add
        VIC = 46 ;
   870a0:	00800b84 	movi	r2,46
   870a4:	d0a99f05 	stb	r2,-22916(gp)
        VideoPixelClock = 148500000 ;
   870a8:	008236b4 	movhi	r2,2266
   870ac:	10bb8804 	addi	r2,r2,-4576
   870b0:	d0a99915 	stw	r2,-22940(gp)
        pixelrep = 0 ;
   870b4:	d0299c05 	stb	zero,-22928(gp)
        aspec = HDMI_16x9 ;
   870b8:	00800044 	movi	r2,1
   870bc:	d0a99a15 	stw	r2,-22936(gp)
        Colorimetry = HDMI_ITU601 ;
   870c0:	d0299b15 	stw	zero,-22932(gp)
        break ;
   870c4:	00000306 	br	870d4 <HDMITX_ChangeDisplayOption+0x41c>
        
        
    default:
        VIC = 0; // richard add
   870c8:	d0299f05 	stb	zero,-22916(gp)
        bChangeMode = FALSE ;                
   870cc:	d0299715 	stw	zero,-22948(gp)
        return ;
   870d0:	00002606 	br	8716c <HDMITX_ChangeDisplayOption+0x4b4>
    }

    switch(OutputColorMode)
   870d4:	e0bfff17 	ldw	r2,-4(fp)
   870d8:	10c00060 	cmpeqi	r3,r2,1
   870dc:	1800031e 	bne	r3,zero,870ec <HDMITX_ChangeDisplayOption+0x434>
   870e0:	108000a0 	cmpeqi	r2,r2,2
   870e4:	1000041e 	bne	r2,zero,870f8 <HDMITX_ChangeDisplayOption+0x440>
   870e8:	00000606 	br	87104 <HDMITX_ChangeDisplayOption+0x44c>
    {
    case HDMI_YUV444:
        bOutputColorMode = F_MODE_YUV444 ;
   870ec:	00800084 	movi	r2,2
   870f0:	d0a998c5 	stb	r2,-22941(gp)
        break ;
   870f4:	00000506 	br	8710c <HDMITX_ChangeDisplayOption+0x454>
    case HDMI_YUV422:
        bOutputColorMode = F_MODE_YUV422 ;
   870f8:	00800044 	movi	r2,1
   870fc:	d0a998c5 	stb	r2,-22941(gp)
        break ;
   87100:	00000206 	br	8710c <HDMITX_ChangeDisplayOption+0x454>
    case HDMI_RGB444:
    default:
        bOutputColorMode = F_MODE_RGB444 ;
   87104:	d02998c5 	stb	zero,-22941(gp)
        break ;
   87108:	0001883a 	nop
    }

    if( Colorimetry == HDMI_ITU709 )
   8710c:	d0a99b17 	ldw	r2,-22932(gp)
   87110:	10800058 	cmpnei	r2,r2,1
   87114:	1000041e 	bne	r2,zero,87128 <HDMITX_ChangeDisplayOption+0x470>
    {
        bInputColorMode |= F_VIDMODE_ITU709 ;
   87118:	d0a99803 	ldbu	r2,-22944(gp)
   8711c:	10800414 	ori	r2,r2,16
   87120:	d0a99805 	stb	r2,-22944(gp)
   87124:	00000406 	br	87138 <HDMITX_ChangeDisplayOption+0x480>
    }
    else
    {
        bInputColorMode &= ~F_VIDMODE_ITU709 ;
   87128:	d0e99803 	ldbu	r3,-22944(gp)
   8712c:	00bffbc4 	movi	r2,-17
   87130:	1884703a 	and	r2,r3,r2
   87134:	d0a99805 	stb	r2,-22944(gp)
    }
    
    if( Colorimetry != HDMI_640x480p60)
   87138:	d0a99b17 	ldw	r2,-22932(gp)
   8713c:	10800060 	cmpeqi	r2,r2,1
   87140:	1000041e 	bne	r2,zero,87154 <HDMITX_ChangeDisplayOption+0x49c>
    {
        bInputColorMode |= F_VIDMODE_16_235 ;
   87144:	d0a99803 	ldbu	r2,-22944(gp)
   87148:	10800814 	ori	r2,r2,32
   8714c:	d0a99805 	stb	r2,-22944(gp)
   87150:	00000406 	br	87164 <HDMITX_ChangeDisplayOption+0x4ac>
    }
    else
    {
        bInputColorMode &= ~F_VIDMODE_16_235 ;
   87154:	d0e99803 	ldbu	r3,-22944(gp)
   87158:	00bff7c4 	movi	r2,-33
   8715c:	1884703a 	and	r2,r3,r2
   87160:	d0a99805 	stb	r2,-22944(gp)
    }

    bChangeMode = TRUE ;
   87164:	00800044 	movi	r2,1
   87168:	d0a99715 	stw	r2,-22948(gp)
}
   8716c:	e037883a 	mov	sp,fp
   87170:	df000017 	ldw	fp,0(sp)
   87174:	dec00104 	addi	sp,sp,4
   87178:	f800283a 	ret

0008717c <ConfigAVIInfoFrame>:


void
ConfigAVIInfoFrame(BYTE VIC, BYTE pixelrep)
{
   8717c:	defffc04 	addi	sp,sp,-16
   87180:	dfc00315 	stw	ra,12(sp)
   87184:	df000215 	stw	fp,8(sp)
   87188:	df000204 	addi	fp,sp,8
   8718c:	2007883a 	mov	r3,r4
   87190:	2805883a 	mov	r2,r5
   87194:	e0fffe05 	stb	r3,-8(fp)
   87198:	e0bfff05 	stb	r2,-4(fp)
//     AVI_InfoFrame AviInfo;

    AviInfo.pktbyte.AVI_HB[0] = AVI_INFOFRAME_TYPE|0x80 ; 
   8719c:	008002b4 	movhi	r2,10
   871a0:	1085f104 	addi	r2,r2,6084
   871a4:	00ffe084 	movi	r3,-126
   871a8:	10c00005 	stb	r3,0(r2)
    AviInfo.pktbyte.AVI_HB[1] = AVI_INFOFRAME_VER ; 
   871ac:	008002b4 	movhi	r2,10
   871b0:	1085f104 	addi	r2,r2,6084
   871b4:	00c00084 	movi	r3,2
   871b8:	10c00045 	stb	r3,1(r2)
    AviInfo.pktbyte.AVI_HB[2] = AVI_INFOFRAME_LEN ; 
   871bc:	008002b4 	movhi	r2,10
   871c0:	1085f104 	addi	r2,r2,6084
   871c4:	00c00344 	movi	r3,13
   871c8:	10c00085 	stb	r3,2(r2)
    
    switch(bOutputColorMode)
   871cc:	d0a998c3 	ldbu	r2,-22941(gp)
   871d0:	10803fcc 	andi	r2,r2,255
   871d4:	10c00060 	cmpeqi	r3,r2,1
   871d8:	1800071e 	bne	r3,zero,871f8 <ConfigAVIInfoFrame+0x7c>
   871dc:	108000a0 	cmpeqi	r2,r2,2
   871e0:	10000a26 	beq	r2,zero,8720c <ConfigAVIInfoFrame+0x90>
    {
    case F_MODE_YUV444:
        // AviInfo.info.ColorMode = 2 ;
        AviInfo.pktbyte.AVI_DB[0] = (2<<5)|(1<<4) ;
   871e4:	008002b4 	movhi	r2,10
   871e8:	1085f104 	addi	r2,r2,6084
   871ec:	00c01404 	movi	r3,80
   871f0:	10c000c5 	stb	r3,3(r2)
        break ;
   871f4:	00000a06 	br	87220 <ConfigAVIInfoFrame+0xa4>
    case F_MODE_YUV422:
        // AviInfo.info.ColorMode = 1 ;
        AviInfo.pktbyte.AVI_DB[0] = (1<<5)|(1<<4) ;
   871f8:	008002b4 	movhi	r2,10
   871fc:	1085f104 	addi	r2,r2,6084
   87200:	00c00c04 	movi	r3,48
   87204:	10c000c5 	stb	r3,3(r2)
        break ;
   87208:	00000506 	br	87220 <ConfigAVIInfoFrame+0xa4>
    case F_MODE_RGB444:
    default:
        // AviInfo.info.ColorMode = 0 ;
        AviInfo.pktbyte.AVI_DB[0] = (0<<5)|(1<<4) ;
   8720c:	008002b4 	movhi	r2,10
   87210:	1085f104 	addi	r2,r2,6084
   87214:	00c00404 	movi	r3,16
   87218:	10c000c5 	stb	r3,3(r2)
        break ;
   8721c:	0001883a 	nop
    }
    AviInfo.pktbyte.AVI_DB[1] = 8 ;
   87220:	008002b4 	movhi	r2,10
   87224:	1085f104 	addi	r2,r2,6084
   87228:	00c00204 	movi	r3,8
   8722c:	10c00105 	stb	r3,4(r2)
    AviInfo.pktbyte.AVI_DB[1] |= (aspec != HDMI_16x9)?(1<<4):(2<<4) ; // 4:3 or 16:9
   87230:	008002b4 	movhi	r2,10
   87234:	1085f104 	addi	r2,r2,6084
   87238:	10800103 	ldbu	r2,4(r2)
   8723c:	1007883a 	mov	r3,r2
   87240:	d0a99a17 	ldw	r2,-22936(gp)
   87244:	10800060 	cmpeqi	r2,r2,1
   87248:	1000021e 	bne	r2,zero,87254 <ConfigAVIInfoFrame+0xd8>
   8724c:	00800404 	movi	r2,16
   87250:	00000106 	br	87258 <ConfigAVIInfoFrame+0xdc>
   87254:	00800804 	movi	r2,32
   87258:	1884b03a 	or	r2,r3,r2
   8725c:	1007883a 	mov	r3,r2
   87260:	008002b4 	movhi	r2,10
   87264:	1085f104 	addi	r2,r2,6084
   87268:	10c00105 	stb	r3,4(r2)
    AviInfo.pktbyte.AVI_DB[1] |= (Colorimetry != HDMI_ITU709)?(1<<6):(2<<6) ; // 4:3 or 16:9
   8726c:	008002b4 	movhi	r2,10
   87270:	1085f104 	addi	r2,r2,6084
   87274:	10800103 	ldbu	r2,4(r2)
   87278:	1007883a 	mov	r3,r2
   8727c:	d0a99b17 	ldw	r2,-22932(gp)
   87280:	10800060 	cmpeqi	r2,r2,1
   87284:	1000021e 	bne	r2,zero,87290 <ConfigAVIInfoFrame+0x114>
   87288:	00801004 	movi	r2,64
   8728c:	00000106 	br	87294 <ConfigAVIInfoFrame+0x118>
   87290:	00bfe004 	movi	r2,-128
   87294:	1884b03a 	or	r2,r3,r2
   87298:	1007883a 	mov	r3,r2
   8729c:	008002b4 	movhi	r2,10
   872a0:	1085f104 	addi	r2,r2,6084
   872a4:	10c00105 	stb	r3,4(r2)
    AviInfo.pktbyte.AVI_DB[2] = 0 ;
   872a8:	008002b4 	movhi	r2,10
   872ac:	1085f104 	addi	r2,r2,6084
   872b0:	10000145 	stb	zero,5(r2)
    AviInfo.pktbyte.AVI_DB[3] = VIC ;
   872b4:	008002b4 	movhi	r2,10
   872b8:	1085f104 	addi	r2,r2,6084
   872bc:	e0fffe03 	ldbu	r3,-8(fp)
   872c0:	10c00185 	stb	r3,6(r2)
    AviInfo.pktbyte.AVI_DB[4] =  pixelrep & 3 ;
   872c4:	e0bfff03 	ldbu	r2,-4(fp)
   872c8:	108000cc 	andi	r2,r2,3
   872cc:	1007883a 	mov	r3,r2
   872d0:	008002b4 	movhi	r2,10
   872d4:	1085f104 	addi	r2,r2,6084
   872d8:	10c001c5 	stb	r3,7(r2)
    AviInfo.pktbyte.AVI_DB[5] = 0 ;
   872dc:	008002b4 	movhi	r2,10
   872e0:	1085f104 	addi	r2,r2,6084
   872e4:	10000205 	stb	zero,8(r2)
    AviInfo.pktbyte.AVI_DB[6] = 0 ;
   872e8:	008002b4 	movhi	r2,10
   872ec:	1085f104 	addi	r2,r2,6084
   872f0:	10000245 	stb	zero,9(r2)
    AviInfo.pktbyte.AVI_DB[7] = 0 ;
   872f4:	008002b4 	movhi	r2,10
   872f8:	1085f104 	addi	r2,r2,6084
   872fc:	10000285 	stb	zero,10(r2)
    AviInfo.pktbyte.AVI_DB[8] = 0 ;
   87300:	008002b4 	movhi	r2,10
   87304:	1085f104 	addi	r2,r2,6084
   87308:	100002c5 	stb	zero,11(r2)
    AviInfo.pktbyte.AVI_DB[9] = 0 ;
   8730c:	008002b4 	movhi	r2,10
   87310:	1085f104 	addi	r2,r2,6084
   87314:	10000305 	stb	zero,12(r2)
    AviInfo.pktbyte.AVI_DB[10] = 0 ;
   87318:	008002b4 	movhi	r2,10
   8731c:	1085f104 	addi	r2,r2,6084
   87320:	10000345 	stb	zero,13(r2)
    AviInfo.pktbyte.AVI_DB[11] = 0 ;
   87324:	008002b4 	movhi	r2,10
   87328:	1085f104 	addi	r2,r2,6084
   8732c:	10000385 	stb	zero,14(r2)
    AviInfo.pktbyte.AVI_DB[12] = 0 ;
   87330:	008002b4 	movhi	r2,10
   87334:	1085f104 	addi	r2,r2,6084
   87338:	100003c5 	stb	zero,15(r2)

    EnableAVIInfoFrame(TRUE, (unsigned char *)&AviInfo) ;
   8733c:	014002b4 	movhi	r5,10
   87340:	2945f104 	addi	r5,r5,6084
   87344:	01000044 	movi	r4,1
   87348:	0081f280 	call	81f28 <EnableAVIInfoFrame>
}
   8734c:	0001883a 	nop
   87350:	e037883a 	mov	sp,fp
   87354:	dfc00117 	ldw	ra,4(sp)
   87358:	df000017 	ldw	fp,0(sp)
   8735c:	dec00204 	addi	sp,sp,8
   87360:	f800283a 	ret

00087364 <ConfigAudioInfoFrm>:
// Side-Effect:
////////////////////////////////////////////////////////////////////////////////

void
ConfigAudioInfoFrm()
{
   87364:	defffd04 	addi	sp,sp,-12
   87368:	dfc00215 	stw	ra,8(sp)
   8736c:	df000115 	stw	fp,4(sp)
   87370:	df000104 	addi	fp,sp,4
    int i ;
    ErrorF("ConfigAudioInfoFrm(%d)\n",2) ;
   87374:	01400084 	movi	r5,2
   87378:	010002b4 	movhi	r4,10
   8737c:	2130b104 	addi	r4,r4,-15676
   87380:	00877a40 	call	877a4 <ErrorF>

    AudioInfo.pktbyte.AUD_HB[0] = AUDIO_INFOFRAME_TYPE ;
   87384:	008002b4 	movhi	r2,10
   87388:	1085af04 	addi	r2,r2,5820
   8738c:	00c00104 	movi	r3,4
   87390:	10c00005 	stb	r3,0(r2)
    AudioInfo.pktbyte.AUD_HB[1] = 1 ;
   87394:	008002b4 	movhi	r2,10
   87398:	1085af04 	addi	r2,r2,5820
   8739c:	00c00044 	movi	r3,1
   873a0:	10c00045 	stb	r3,1(r2)
    AudioInfo.pktbyte.AUD_HB[2] = AUDIO_INFOFRAME_LEN ;
   873a4:	008002b4 	movhi	r2,10
   873a8:	1085af04 	addi	r2,r2,5820
   873ac:	00c00284 	movi	r3,10
   873b0:	10c00085 	stb	r3,2(r2)
    AudioInfo.pktbyte.AUD_DB[0] = 1 ;
   873b4:	008002b4 	movhi	r2,10
   873b8:	1085af04 	addi	r2,r2,5820
   873bc:	00c00044 	movi	r3,1
   873c0:	10c000c5 	stb	r3,3(r2)
    for( i = 1 ;i < AUDIO_INFOFRAME_LEN ; i++ )
   873c4:	00800044 	movi	r2,1
   873c8:	e0bfff15 	stw	r2,-4(fp)
   873cc:	00000906 	br	873f4 <ConfigAudioInfoFrm+0x90>
    {
        AudioInfo.pktbyte.AUD_DB[i] = 0 ;
   873d0:	008002b4 	movhi	r2,10
   873d4:	1085af04 	addi	r2,r2,5820
   873d8:	e0ffff17 	ldw	r3,-4(fp)
   873dc:	10c5883a 	add	r2,r2,r3
   873e0:	108000c4 	addi	r2,r2,3
   873e4:	10000005 	stb	zero,0(r2)

    AudioInfo.pktbyte.AUD_HB[0] = AUDIO_INFOFRAME_TYPE ;
    AudioInfo.pktbyte.AUD_HB[1] = 1 ;
    AudioInfo.pktbyte.AUD_HB[2] = AUDIO_INFOFRAME_LEN ;
    AudioInfo.pktbyte.AUD_DB[0] = 1 ;
    for( i = 1 ;i < AUDIO_INFOFRAME_LEN ; i++ )
   873e8:	e0bfff17 	ldw	r2,-4(fp)
   873ec:	10800044 	addi	r2,r2,1
   873f0:	e0bfff15 	stw	r2,-4(fp)
   873f4:	e0bfff17 	ldw	r2,-4(fp)
   873f8:	10800290 	cmplti	r2,r2,10
   873fc:	103ff41e 	bne	r2,zero,873d0 <__alt_data_end+0xfffb7510>
    {
        AudioInfo.pktbyte.AUD_DB[i] = 0 ;
    }
    EnableAudioInfoFrame(TRUE, (unsigned char *)&AudioInfo) ;
   87400:	014002b4 	movhi	r5,10
   87404:	2945af04 	addi	r5,r5,5820
   87408:	01000044 	movi	r4,1
   8740c:	0081f840 	call	81f84 <EnableAudioInfoFrame>
}
   87410:	0001883a 	nop
   87414:	e037883a 	mov	sp,fp
   87418:	dfc00117 	ldw	ra,4(sp)
   8741c:	df000017 	ldw	fp,0(sp)
   87420:	dec00204 	addi	sp,sp,8
   87424:	f800283a 	ret

00087428 <ParseEDID>:
// Check EDID check sum and EDID 1.3 extended segment.
/////////////////////////////////////////////////////////////////////

BOOL
ParseEDID()
{
   87428:	defffa04 	addi	sp,sp,-24
   8742c:	dfc00515 	stw	ra,20(sp)
   87430:	df000415 	stw	fp,16(sp)
   87434:	df000404 	addi	fp,sp,16
    // collect the EDID ucdata of segment 0
    BYTE CheckSum ;
    BYTE BlockCount ;
    BOOL err ;
    BOOL bValidCEA = FALSE ;
   87438:	e03ffe15 	stw	zero,-8(fp)
    int i ;

    RxCapability.ValidCEA = FALSE ;
   8743c:	008002b4 	movhi	r2,10
   87440:	1085b304 	addi	r2,r2,5836
   87444:	11003d83 	ldbu	r4,246(r2)
   87448:	00ffff84 	movi	r3,-2
   8744c:	20c6703a 	and	r3,r4,r3
   87450:	10c03d85 	stb	r3,246(r2)
	
    // richard GetEDIDData(0, EDID_Buf);
    if (!GetEDIDData(0, EDID_Buf))
   87454:	014002b4 	movhi	r5,10
   87458:	29458104 	addi	r5,r5,5636
   8745c:	0009883a 	mov	r4,zero
   87460:	0081a4c0 	call	81a4c <GetEDIDData>
   87464:	1000021e 	bne	r2,zero,87470 <ParseEDID+0x48>
        return FALSE;
   87468:	0005883a 	mov	r2,zero
   8746c:	00008e06 	br	876a8 <ParseEDID+0x280>


    for( i = 0, CheckSum = 0 ; i < 128 ; i++ )
   87470:	e03fff15 	stw	zero,-4(fp)
   87474:	e03ffc05 	stb	zero,-16(fp)
   87478:	00000b06 	br	874a8 <ParseEDID+0x80>
    {
        CheckSum += EDID_Buf[i] ; CheckSum &= 0xFF ;
   8747c:	008002b4 	movhi	r2,10
   87480:	10858104 	addi	r2,r2,5636
   87484:	e0ffff17 	ldw	r3,-4(fp)
   87488:	10c5883a 	add	r2,r2,r3
   8748c:	10c00003 	ldbu	r3,0(r2)
   87490:	e0bffc03 	ldbu	r2,-16(fp)
   87494:	1885883a 	add	r2,r3,r2
   87498:	e0bffc05 	stb	r2,-16(fp)
    // richard GetEDIDData(0, EDID_Buf);
    if (!GetEDIDData(0, EDID_Buf))
        return FALSE;


    for( i = 0, CheckSum = 0 ; i < 128 ; i++ )
   8749c:	e0bfff17 	ldw	r2,-4(fp)
   874a0:	10800044 	addi	r2,r2,1
   874a4:	e0bfff15 	stw	r2,-4(fp)
   874a8:	e0bfff17 	ldw	r2,-4(fp)
   874ac:	10802010 	cmplti	r2,r2,128
   874b0:	103ff21e 	bne	r2,zero,8747c <__alt_data_end+0xfffb75bc>
    {
        CheckSum += EDID_Buf[i] ; CheckSum &= 0xFF ;
    }
	
			//Eep_Write(0x80, 0x80, EDID_Buf) ;
	if( CheckSum != 0 )	// 128-byte EDID sum shall equal zero
   874b4:	e0bffc03 	ldbu	r2,-16(fp)
   874b8:	10000226 	beq	r2,zero,874c4 <ParseEDID+0x9c>
	{
		return FALSE ;
   874bc:	0005883a 	mov	r2,zero
   874c0:	00007906 	br	876a8 <ParseEDID+0x280>
	}
	
	// check EDID Header
	if( EDID_Buf[0] != 0x00 ||
   874c4:	008002b4 	movhi	r2,10
   874c8:	10858104 	addi	r2,r2,5636
   874cc:	10800003 	ldbu	r2,0(r2)
   874d0:	10803fcc 	andi	r2,r2,255
   874d4:	1000291e 	bne	r2,zero,8757c <ParseEDID+0x154>
	    EDID_Buf[1] != 0xFF ||
   874d8:	008002b4 	movhi	r2,10
   874dc:	10858104 	addi	r2,r2,5636
   874e0:	10800043 	ldbu	r2,1(r2)
	{
		return FALSE ;
	}
	
	// check EDID Header
	if( EDID_Buf[0] != 0x00 ||
   874e4:	10803fcc 	andi	r2,r2,255
   874e8:	10803fd8 	cmpnei	r2,r2,255
   874ec:	1000231e 	bne	r2,zero,8757c <ParseEDID+0x154>
	    EDID_Buf[1] != 0xFF ||
	    EDID_Buf[2] != 0xFF ||
   874f0:	008002b4 	movhi	r2,10
   874f4:	10858104 	addi	r2,r2,5636
   874f8:	10800083 	ldbu	r2,2(r2)
		return FALSE ;
	}
	
	// check EDID Header
	if( EDID_Buf[0] != 0x00 ||
	    EDID_Buf[1] != 0xFF ||
   874fc:	10803fcc 	andi	r2,r2,255
   87500:	10803fd8 	cmpnei	r2,r2,255
   87504:	10001d1e 	bne	r2,zero,8757c <ParseEDID+0x154>
	    EDID_Buf[2] != 0xFF ||
	    EDID_Buf[3] != 0xFF ||
   87508:	008002b4 	movhi	r2,10
   8750c:	10858104 	addi	r2,r2,5636
   87510:	108000c3 	ldbu	r2,3(r2)
	}
	
	// check EDID Header
	if( EDID_Buf[0] != 0x00 ||
	    EDID_Buf[1] != 0xFF ||
	    EDID_Buf[2] != 0xFF ||
   87514:	10803fcc 	andi	r2,r2,255
   87518:	10803fd8 	cmpnei	r2,r2,255
   8751c:	1000171e 	bne	r2,zero,8757c <ParseEDID+0x154>
	    EDID_Buf[3] != 0xFF ||
	    EDID_Buf[4] != 0xFF ||
   87520:	008002b4 	movhi	r2,10
   87524:	10858104 	addi	r2,r2,5636
   87528:	10800103 	ldbu	r2,4(r2)
	
	// check EDID Header
	if( EDID_Buf[0] != 0x00 ||
	    EDID_Buf[1] != 0xFF ||
	    EDID_Buf[2] != 0xFF ||
	    EDID_Buf[3] != 0xFF ||
   8752c:	10803fcc 	andi	r2,r2,255
   87530:	10803fd8 	cmpnei	r2,r2,255
   87534:	1000111e 	bne	r2,zero,8757c <ParseEDID+0x154>
	    EDID_Buf[4] != 0xFF ||
	    EDID_Buf[5] != 0xFF ||
   87538:	008002b4 	movhi	r2,10
   8753c:	10858104 	addi	r2,r2,5636
   87540:	10800143 	ldbu	r2,5(r2)
	// check EDID Header
	if( EDID_Buf[0] != 0x00 ||
	    EDID_Buf[1] != 0xFF ||
	    EDID_Buf[2] != 0xFF ||
	    EDID_Buf[3] != 0xFF ||
	    EDID_Buf[4] != 0xFF ||
   87544:	10803fcc 	andi	r2,r2,255
   87548:	10803fd8 	cmpnei	r2,r2,255
   8754c:	10000b1e 	bne	r2,zero,8757c <ParseEDID+0x154>
	    EDID_Buf[5] != 0xFF ||
	    EDID_Buf[6] != 0xFF ||
   87550:	008002b4 	movhi	r2,10
   87554:	10858104 	addi	r2,r2,5636
   87558:	10800183 	ldbu	r2,6(r2)
	if( EDID_Buf[0] != 0x00 ||
	    EDID_Buf[1] != 0xFF ||
	    EDID_Buf[2] != 0xFF ||
	    EDID_Buf[3] != 0xFF ||
	    EDID_Buf[4] != 0xFF ||
	    EDID_Buf[5] != 0xFF ||
   8755c:	10803fcc 	andi	r2,r2,255
   87560:	10803fd8 	cmpnei	r2,r2,255
   87564:	1000051e 	bne	r2,zero,8757c <ParseEDID+0x154>
	    EDID_Buf[6] != 0xFF ||
	    EDID_Buf[7] != 0x00)
   87568:	008002b4 	movhi	r2,10
   8756c:	10858104 	addi	r2,r2,5636
   87570:	108001c3 	ldbu	r2,7(r2)
	    EDID_Buf[1] != 0xFF ||
	    EDID_Buf[2] != 0xFF ||
	    EDID_Buf[3] != 0xFF ||
	    EDID_Buf[4] != 0xFF ||
	    EDID_Buf[5] != 0xFF ||
	    EDID_Buf[6] != 0xFF ||
   87574:	10803fcc 	andi	r2,r2,255
   87578:	10000226 	beq	r2,zero,87584 <ParseEDID+0x15c>
	    EDID_Buf[7] != 0x00)
    {
        return FALSE ;
   8757c:	0005883a 	mov	r2,zero
   87580:	00004906 	br	876a8 <ParseEDID+0x280>
    }


    BlockCount = EDID_Buf[0x7E] ;  // Extention Flash: Number of 128-byte EDID extesion blocks to follow
   87584:	008002b4 	movhi	r2,10
   87588:	10858104 	addi	r2,r2,5636
   8758c:	10801f83 	ldbu	r2,126(r2)
   87590:	e0bffc45 	stb	r2,-15(fp)

    if( BlockCount == 0 )
   87594:	e0bffc43 	ldbu	r2,-15(fp)
   87598:	1000021e 	bne	r2,zero,875a4 <ParseEDID+0x17c>
    {
        return TRUE ; // do nothing.
   8759c:	00800044 	movi	r2,1
   875a0:	00004106 	br	876a8 <ParseEDID+0x280>
    }
    else if ( BlockCount > 4 )
   875a4:	e0bffc43 	ldbu	r2,-15(fp)
   875a8:	10800170 	cmpltui	r2,r2,5
   875ac:	1000021e 	bne	r2,zero,875b8 <ParseEDID+0x190>
    {
        BlockCount = 4 ;
   875b0:	00800104 	movi	r2,4
   875b4:	e0bffc45 	stb	r2,-15(fp)
    }
        	
     // read all segment for test
    for( i = 1 ; i <= BlockCount ; i++ )
   875b8:	00800044 	movi	r2,1
   875bc:	e0bfff15 	stw	r2,-4(fp)
   875c0:	00003306 	br	87690 <ParseEDID+0x268>
    {
        err = GetEDIDData(i, EDID_Buf) ;
   875c4:	014002b4 	movhi	r5,10
   875c8:	29458104 	addi	r5,r5,5636
   875cc:	e13fff17 	ldw	r4,-4(fp)
   875d0:	0081a4c0 	call	81a4c <GetEDIDData>
   875d4:	e0bffd15 	stw	r2,-12(fp)

        if( err )
   875d8:	e0bffd17 	ldw	r2,-12(fp)
   875dc:	10002926 	beq	r2,zero,87684 <ParseEDID+0x25c>
        {  
           if( !bValidCEA && EDID_Buf[0] == 0x2 && EDID_Buf[1] == 0x3 )  //EDID_Buf[0] == 0x2  ==> Additional timing data type 2
   875e0:	e0bffe17 	ldw	r2,-8(fp)
   875e4:	1000271e 	bne	r2,zero,87684 <ParseEDID+0x25c>
   875e8:	008002b4 	movhi	r2,10
   875ec:	10858104 	addi	r2,r2,5636
   875f0:	10800003 	ldbu	r2,0(r2)
   875f4:	10803fcc 	andi	r2,r2,255
   875f8:	10800098 	cmpnei	r2,r2,2
   875fc:	1000211e 	bne	r2,zero,87684 <ParseEDID+0x25c>
   87600:	008002b4 	movhi	r2,10
   87604:	10858104 	addi	r2,r2,5636
   87608:	10800043 	ldbu	r2,1(r2)
   8760c:	10803fcc 	andi	r2,r2,255
   87610:	108000d8 	cmpnei	r2,r2,3
   87614:	10001b1e 	bne	r2,zero,87684 <ParseEDID+0x25c>
            {
                // richard change
                //err = ParseCEAEDID(EDID_Buf) ;
                err = ParseCEAEDID(EDID_Buf, &RxCapability);
   87618:	014002b4 	movhi	r5,10
   8761c:	2945b304 	addi	r5,r5,5836
   87620:	010002b4 	movhi	r4,10
   87624:	21058104 	addi	r4,r4,5636
   87628:	00803f80 	call	803f8 <ParseCEAEDID>
   8762c:	e0bffd15 	stw	r2,-12(fp)
                if( err )
   87630:	e0bffd17 	ldw	r2,-12(fp)
   87634:	10001326 	beq	r2,zero,87684 <ParseEDID+0x25c>
                {
 
				    if(RxCapability.IEEEOUI==0x0c03)
   87638:	008002b4 	movhi	r2,10
   8763c:	1085b304 	addi	r2,r2,5836
   87640:	10803a17 	ldw	r2,232(r2)
   87644:	108300d8 	cmpnei	r2,r2,3075
   87648:	1000081e 	bne	r2,zero,8766c <ParseEDID+0x244>
				    {
				    	RxCapability.ValidHDMI = TRUE ;
   8764c:	008002b4 	movhi	r2,10
   87650:	1085b304 	addi	r2,r2,5836
   87654:	10c03d83 	ldbu	r3,246(r2)
   87658:	18c00094 	ori	r3,r3,2
   8765c:	10c03d85 	stb	r3,246(r2)
				    	bValidCEA = TRUE ;
   87660:	00800044 	movi	r2,1
   87664:	e0bffe15 	stw	r2,-8(fp)
   87668:	00000606 	br	87684 <ParseEDID+0x25c>
					}
				    else
				    {
				    	RxCapability.ValidHDMI = FALSE ;
   8766c:	008002b4 	movhi	r2,10
   87670:	1085b304 	addi	r2,r2,5836
   87674:	11003d83 	ldbu	r4,246(r2)
   87678:	00ffff44 	movi	r3,-3
   8767c:	20c6703a 	and	r3,r4,r3
   87680:	10c03d85 	stb	r3,246(r2)
    {
        BlockCount = 4 ;
    }
        	
     // read all segment for test
    for( i = 1 ; i <= BlockCount ; i++ )
   87684:	e0bfff17 	ldw	r2,-4(fp)
   87688:	10800044 	addi	r2,r2,1
   8768c:	e0bfff15 	stw	r2,-4(fp)
   87690:	e0fffc43 	ldbu	r3,-15(fp)
   87694:	e0bfff17 	ldw	r2,-4(fp)
   87698:	18bfca0e 	bge	r3,r2,875c4 <__alt_data_end+0xfffb7704>
                }
            }
        }
    }

    return err?FALSE:TRUE ;  // richard modify
   8769c:	e0bffd17 	ldw	r2,-12(fp)
   876a0:	1005003a 	cmpeq	r2,r2,zero
   876a4:	10803fcc 	andi	r2,r2,255

}
   876a8:	e037883a 	mov	sp,fp
   876ac:	dfc00117 	ldw	ra,4(sp)
   876b0:	df000017 	ldw	fp,0(sp)
   876b4:	dec00204 	addi	sp,sp,8
   876b8:	f800283a 	ret

000876bc <OS_DelayMS>:
#define Switch_HDMITX_Bank(x)   HDMITX_WriteI2C_Byte(0x0f,(x)&1)


static BOOL bEnableErrorF =  FALSE; //TRUE;

void OS_DelayMS(unsigned short ms){
   876bc:	defffd04 	addi	sp,sp,-12
   876c0:	dfc00215 	stw	ra,8(sp)
   876c4:	df000115 	stw	fp,4(sp)
   876c8:	df000104 	addi	fp,sp,4
   876cc:	2005883a 	mov	r2,r4
   876d0:	e0bfff0d 	sth	r2,-4(fp)
    DelayMS(ms);
   876d4:	e0bfff0b 	ldhu	r2,-4(fp)
   876d8:	1009883a 	mov	r4,r2
   876dc:	00877380 	call	87738 <DelayMS>
}
   876e0:	0001883a 	nop
   876e4:	e037883a 	mov	sp,fp
   876e8:	dfc00117 	ldw	ra,4(sp)
   876ec:	df000017 	ldw	fp,0(sp)
   876f0:	dec00204 	addi	sp,sp,8
   876f4:	f800283a 	ret

000876f8 <OS_GetTicks>:

OS_TICK OS_GetTicks(void){
   876f8:	deffff04 	addi	sp,sp,-4
   876fc:	df000015 	stw	fp,0(sp)
   87700:	d839883a 	mov	fp,sp
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   87704:	d0a9b017 	ldw	r2,-22848(gp)
    return alt_nticks();
}
   87708:	e037883a 	mov	sp,fp
   8770c:	df000017 	ldw	fp,0(sp)
   87710:	dec00104 	addi	sp,sp,4
   87714:	f800283a 	ret

00087718 <OS_TicksPerSecond>:

OS_TICK OS_TicksPerSecond(void){
   87718:	deffff04 	addi	sp,sp,-4
   8771c:	df000015 	stw	fp,0(sp)
   87720:	d839883a 	mov	fp,sp
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   87724:	d0a9af17 	ldw	r2,-22852(gp)
    return alt_ticks_per_second();
}
   87728:	e037883a 	mov	sp,fp
   8772c:	df000017 	ldw	fp,0(sp)
   87730:	dec00104 	addi	sp,sp,4
   87734:	f800283a 	ret

00087738 <DelayMS>:


void
DelayMS(unsigned short ms) 
{
   87738:	defffd04 	addi	sp,sp,-12
   8773c:	dfc00215 	stw	ra,8(sp)
   87740:	df000115 	stw	fp,4(sp)
   87744:	df000104 	addi	fp,sp,4
   87748:	2005883a 	mov	r2,r4
   8774c:	e0bfff0d 	sth	r2,-4(fp)
#if 1
    usleep(ms*1000);  
   87750:	e0bfff0b 	ldhu	r2,-4(fp)
   87754:	1080fa24 	muli	r2,r2,1000
   87758:	1009883a 	mov	r4,r2
   8775c:	00998c00 	call	998c0 <usleep>
    {
        QueryPerformanceCounter(&Counter) ;
    }
#endif    

    return ;
   87760:	0001883a 	nop
}
   87764:	e037883a 	mov	sp,fp
   87768:	dfc00117 	ldw	ra,4(sp)
   8776c:	df000017 	ldw	fp,0(sp)
   87770:	dec00204 	addi	sp,sp,8
   87774:	f800283a 	ret

00087778 <EnableDebugMessage>:

void
EnableDebugMessage(BOOL bEnable)
{
   87778:	defffe04 	addi	sp,sp,-8
   8777c:	df000115 	stw	fp,4(sp)
   87780:	df000104 	addi	fp,sp,4
   87784:	e13fff15 	stw	r4,-4(fp)
	bEnableErrorF = bEnable ;
   87788:	e0bfff17 	ldw	r2,-4(fp)
   8778c:	d0a9a015 	stw	r2,-22912(gp)
}
   87790:	0001883a 	nop
   87794:	e037883a 	mov	sp,fp
   87798:	df000017 	ldw	fp,0(sp)
   8779c:	dec00104 	addi	sp,sp,4
   877a0:	f800283a 	ret

000877a4 <ErrorF>:


void
ErrorF(char *fmt,...)
{
   877a4:	defff904 	addi	sp,sp,-28
   877a8:	dfc00315 	stw	ra,12(sp)
   877ac:	df000215 	stw	fp,8(sp)
   877b0:	df000204 	addi	fp,sp,8
   877b4:	e13fff15 	stw	r4,-4(fp)
   877b8:	e1400215 	stw	r5,8(fp)
   877bc:	e1800315 	stw	r6,12(fp)
   877c0:	e1c00415 	stw	r7,16(fp)
    va_list argp ;
	if(bEnableErrorF == 1)
   877c4:	d0a9a017 	ldw	r2,-22912(gp)
   877c8:	10800058 	cmpnei	r2,r2,1
   877cc:	1000091e 	bne	r2,zero,877f4 <ErrorF+0x50>
	{
	    va_start(argp,fmt) ;
   877d0:	e0800204 	addi	r2,fp,8
   877d4:	e0bffe15 	stw	r2,-8(fp)
	    vfprintf(stdout,fmt,argp) ;
   877d8:	d0a00517 	ldw	r2,-32748(gp)
   877dc:	10800217 	ldw	r2,8(r2)
   877e0:	e0fffe17 	ldw	r3,-8(fp)
   877e4:	180d883a 	mov	r6,r3
   877e8:	e17fff17 	ldw	r5,-4(fp)
   877ec:	1009883a 	mov	r4,r2
   877f0:	008d6f40 	call	8d6f4 <vfprintf>
	    // vprintf(fmt,argp) ;
	    va_end(argp) ;
    }
}
   877f4:	0001883a 	nop
   877f8:	e037883a 	mov	sp,fp
   877fc:	dfc00117 	ldw	ra,4(sp)
   87800:	df000017 	ldw	fp,0(sp)
   87804:	dec00504 	addi	sp,sp,20
   87808:	f800283a 	ret

0008780c <OS_PRINTF>:

void OS_PRINTF(char *fmt,...){
   8780c:	defff704 	addi	sp,sp,-36
   87810:	dfc00515 	stw	ra,20(sp)
   87814:	df000415 	stw	fp,16(sp)
   87818:	dc000315 	stw	r16,12(sp)
   8781c:	df000404 	addi	fp,sp,16
   87820:	e13ffe15 	stw	r4,-8(fp)
   87824:	e1400215 	stw	r5,8(fp)
   87828:	e1800315 	stw	r6,12(fp)
   8782c:	e1c00415 	stw	r7,16(fp)
    static alt_u32 BootTime = 0;
    alt_u32 TimeStamp;
    va_list argp ;
  //  if(bEnableErrorF == 1)
    {
        va_start(argp,fmt) ;
   87830:	e0800204 	addi	r2,fp,8
   87834:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   87838:	d0e9b017 	ldw	r3,-22848(gp)
        TimeStamp = alt_nticks() - BootTime;
   8783c:	d0a9a117 	ldw	r2,-22908(gp)
   87840:	1885c83a 	sub	r2,r3,r2
   87844:	e0bffc15 	stw	r2,-16(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   87848:	d0a9af17 	ldw	r2,-22852(gp)
        printf("[TERASIC-%05d.%03d]", (int)(TimeStamp/alt_ticks_per_second()), (int)(TimeStamp%alt_ticks_per_second()));
   8784c:	100b883a 	mov	r5,r2
   87850:	e13ffc17 	ldw	r4,-16(fp)
   87854:	0088d8c0 	call	88d8c <__udivsi3>
   87858:	1021883a 	mov	r16,r2
   8785c:	d0e9af17 	ldw	r3,-22852(gp)
   87860:	e0bffc17 	ldw	r2,-16(fp)
   87864:	180b883a 	mov	r5,r3
   87868:	1009883a 	mov	r4,r2
   8786c:	0088df00 	call	88df0 <__umodsi3>
   87870:	100d883a 	mov	r6,r2
   87874:	800b883a 	mov	r5,r16
   87878:	010002b4 	movhi	r4,10
   8787c:	2130b704 	addi	r4,r4,-15652
   87880:	0088fc00 	call	88fc0 <printf>
        vfprintf(stdout,fmt,argp) ;
   87884:	d0a00517 	ldw	r2,-32748(gp)
   87888:	10800217 	ldw	r2,8(r2)
   8788c:	e0fffd17 	ldw	r3,-12(fp)
   87890:	180d883a 	mov	r6,r3
   87894:	e17ffe17 	ldw	r5,-8(fp)
   87898:	1009883a 	mov	r4,r2
   8789c:	008d6f40 	call	8d6f4 <vfprintf>
        // vprintf(fmt,argp) ;
        va_end(argp) ;
    }    
}
   878a0:	0001883a 	nop
   878a4:	e6ffff04 	addi	sp,fp,-4
   878a8:	dfc00217 	ldw	ra,8(sp)
   878ac:	df000117 	ldw	fp,4(sp)
   878b0:	dc000017 	ldw	r16,0(sp)
   878b4:	dec00604 	addi	sp,sp,24
   878b8:	f800283a 	ret

000878bc <HDMITX_Reset>:


void HDMITX_Reset(void){
   878bc:	defffe04 	addi	sp,sp,-8
   878c0:	dfc00115 	stw	ra,4(sp)
   878c4:	df000015 	stw	fp,0(sp)
   878c8:	d839883a 	mov	fp,sp
    OS_PRINTF("TX hardware Reset\n");
   878cc:	010002b4 	movhi	r4,10
   878d0:	2130bc04 	addi	r4,r4,-15632
   878d4:	008780c0 	call	8780c <OS_PRINTF>
    IOWR(HDMI_TX_RST_N_BASE, 0, 1);
   878d8:	00c00044 	movi	r3,1
   878dc:	00800434 	movhi	r2,16
   878e0:	10842004 	addi	r2,r2,4224
   878e4:	10c00035 	stwio	r3,0(r2)
    usleep(20*1000);
   878e8:	01138804 	movi	r4,20000
   878ec:	00998c00 	call	998c0 <usleep>
    IOWR(HDMI_TX_RST_N_BASE, 0, 0);
   878f0:	0007883a 	mov	r3,zero
   878f4:	00800434 	movhi	r2,16
   878f8:	10842004 	addi	r2,r2,4224
   878fc:	10c00035 	stwio	r3,0(r2)
    usleep(20*1000);
   87900:	01138804 	movi	r4,20000
   87904:	00998c00 	call	998c0 <usleep>
    IOWR(HDMI_TX_RST_N_BASE, 0, 1);
   87908:	00c00044 	movi	r3,1
   8790c:	00800434 	movhi	r2,16
   87910:	10842004 	addi	r2,r2,4224
   87914:	10c00035 	stwio	r3,0(r2)
    usleep(20*1000);
   87918:	01138804 	movi	r4,20000
   8791c:	00998c00 	call	998c0 <usleep>
}
   87920:	0001883a 	nop
   87924:	e037883a 	mov	sp,fp
   87928:	dfc00117 	ldw	ra,4(sp)
   8792c:	df000017 	ldw	fp,0(sp)
   87930:	dec00204 	addi	sp,sp,8
   87934:	f800283a 	ret

00087938 <HDMITX_DumpAllReg>:


void HDMITX_DumpAllReg(void){
   87938:	defffc04 	addi	sp,sp,-16
   8793c:	dfc00315 	stw	ra,12(sp)
   87940:	df000215 	stw	fp,8(sp)
   87944:	df000204 	addi	fp,sp,8
    
    alt_u8 data;
    int i;
//    for(i=0x10;i<=0x19;i++){
    for(i=0;i< 256;i++){
   87948:	e03ffe15 	stw	zero,-8(fp)
   8794c:	00001006 	br	87990 <HDMITX_DumpAllReg+0x58>
        data = HDMITX_ReadI2C_Byte(i);
   87950:	e0bffe17 	ldw	r2,-8(fp)
   87954:	10803fcc 	andi	r2,r2,255
   87958:	1009883a 	mov	r4,r2
   8795c:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   87960:	e0bfff05 	stb	r2,-4(fp)
        OS_PRINTF("TX Reg[%02Xh] = %02Xh\n", i, data);
   87964:	e0bfff03 	ldbu	r2,-4(fp)
   87968:	100d883a 	mov	r6,r2
   8796c:	e17ffe17 	ldw	r5,-8(fp)
   87970:	010002b4 	movhi	r4,10
   87974:	2130c104 	addi	r4,r4,-15612
   87978:	008780c0 	call	8780c <OS_PRINTF>
        usleep(20*1000);  // wait uart dump finish
   8797c:	01138804 	movi	r4,20000
   87980:	00998c00 	call	998c0 <usleep>
void HDMITX_DumpAllReg(void){
    
    alt_u8 data;
    int i;
//    for(i=0x10;i<=0x19;i++){
    for(i=0;i< 256;i++){
   87984:	e0bffe17 	ldw	r2,-8(fp)
   87988:	10800044 	addi	r2,r2,1
   8798c:	e0bffe15 	stw	r2,-8(fp)
   87990:	e0bffe17 	ldw	r2,-8(fp)
   87994:	10804010 	cmplti	r2,r2,256
   87998:	103fed1e 	bne	r2,zero,87950 <__alt_data_end+0xfffb7a90>
        data = HDMITX_ReadI2C_Byte(i);
        OS_PRINTF("TX Reg[%02Xh] = %02Xh\n", i, data);
        usleep(20*1000);  // wait uart dump finish
    }        
}
   8799c:	0001883a 	nop
   879a0:	e037883a 	mov	sp,fp
   879a4:	dfc00117 	ldw	ra,4(sp)
   879a8:	df000017 	ldw	fp,0(sp)
   879ac:	dec00204 	addi	sp,sp,8
   879b0:	f800283a 	ret

000879b4 <HDMITX_DumpReg>:

void HDMITX_DumpReg(int RegIndex){
   879b4:	defffc04 	addi	sp,sp,-16
   879b8:	dfc00315 	stw	ra,12(sp)
   879bc:	df000215 	stw	fp,8(sp)
   879c0:	df000204 	addi	fp,sp,8
   879c4:	e13fff15 	stw	r4,-4(fp)
    alt_u8 data;
    if (RegIndex >= 0x130){
   879c8:	e0bfff17 	ldw	r2,-4(fp)
   879cc:	10804c10 	cmplti	r2,r2,304
   879d0:	1000131e 	bne	r2,zero,87a20 <HDMITX_DumpReg+0x6c>
        alt_u8 MappedReg = RegIndex;
   879d4:	e0bfff17 	ldw	r2,-4(fp)
   879d8:	e0bffe05 	stb	r2,-8(fp)
        Switch_HDMITX_Bank(1);
   879dc:	01400044 	movi	r5,1
   879e0:	010003c4 	movi	r4,15
   879e4:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        data = HDMITX_ReadI2C_Byte(MappedReg);
   879e8:	e0bffe03 	ldbu	r2,-8(fp)
   879ec:	1009883a 	mov	r4,r2
   879f0:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   879f4:	e0bffe45 	stb	r2,-7(fp)
        Switch_HDMITX_Bank(0);
   879f8:	000b883a 	mov	r5,zero
   879fc:	010003c4 	movi	r4,15
   87a00:	0087aa80 	call	87aa8 <HDMITX_WriteI2C_Byte>
        OS_PRINTF("TX Reg[%03Xh] = %02Xh\n", RegIndex, data);
   87a04:	e0bffe43 	ldbu	r2,-7(fp)
   87a08:	100d883a 	mov	r6,r2
   87a0c:	e17fff17 	ldw	r5,-4(fp)
   87a10:	010002b4 	movhi	r4,10
   87a14:	2130c704 	addi	r4,r4,-15588
   87a18:	008780c0 	call	8780c <OS_PRINTF>
    }else{
        data = HDMITX_ReadI2C_Byte(RegIndex);
        OS_PRINTF("TX Reg[%02Xh] = %02Xh\n", RegIndex, data);
    }        
}
   87a1c:	00000b06 	br	87a4c <HDMITX_DumpReg+0x98>
        Switch_HDMITX_Bank(1);
        data = HDMITX_ReadI2C_Byte(MappedReg);
        Switch_HDMITX_Bank(0);
        OS_PRINTF("TX Reg[%03Xh] = %02Xh\n", RegIndex, data);
    }else{
        data = HDMITX_ReadI2C_Byte(RegIndex);
   87a20:	e0bfff17 	ldw	r2,-4(fp)
   87a24:	10803fcc 	andi	r2,r2,255
   87a28:	1009883a 	mov	r4,r2
   87a2c:	0087a640 	call	87a64 <HDMITX_ReadI2C_Byte>
   87a30:	e0bffe45 	stb	r2,-7(fp)
        OS_PRINTF("TX Reg[%02Xh] = %02Xh\n", RegIndex, data);
   87a34:	e0bffe43 	ldbu	r2,-7(fp)
   87a38:	100d883a 	mov	r6,r2
   87a3c:	e17fff17 	ldw	r5,-4(fp)
   87a40:	010002b4 	movhi	r4,10
   87a44:	2130c104 	addi	r4,r4,-15612
   87a48:	008780c0 	call	8780c <OS_PRINTF>
    }        
}
   87a4c:	0001883a 	nop
   87a50:	e037883a 	mov	sp,fp
   87a54:	dfc00117 	ldw	ra,4(sp)
   87a58:	df000017 	ldw	fp,0(sp)
   87a5c:	dec00204 	addi	sp,sp,8
   87a60:	f800283a 	ret

00087a64 <HDMITX_ReadI2C_Byte>:


BYTE
HDMITX_ReadI2C_Byte(BYTE RegAddr)
{
   87a64:	defffc04 	addi	sp,sp,-16
   87a68:	dfc00315 	stw	ra,12(sp)
   87a6c:	df000215 	stw	fp,8(sp)
   87a70:	df000204 	addi	fp,sp,8
   87a74:	2005883a 	mov	r2,r4
   87a78:	e0bfff05 	stb	r2,-4(fp)
	//return I2C_Read_Byte(HDMI_TX_I2C_SLAVE_ADDR,RegAddr) ;
    BYTE Value;
    HDMITX_ReadI2C_ByteN(RegAddr, &Value, 1);
   87a7c:	e0bfff03 	ldbu	r2,-4(fp)
   87a80:	01800044 	movi	r6,1
   87a84:	e17ffe04 	addi	r5,fp,-8
   87a88:	1009883a 	mov	r4,r2
   87a8c:	0087af40 	call	87af4 <HDMITX_ReadI2C_ByteN>
    return Value;    
   87a90:	e0bffe03 	ldbu	r2,-8(fp)
}
   87a94:	e037883a 	mov	sp,fp
   87a98:	dfc00117 	ldw	ra,4(sp)
   87a9c:	df000017 	ldw	fp,0(sp)
   87aa0:	dec00204 	addi	sp,sp,8
   87aa4:	f800283a 	ret

00087aa8 <HDMITX_WriteI2C_Byte>:

SYS_STATUS
HDMITX_WriteI2C_Byte(BYTE RegAddr,BYTE Data)
{
   87aa8:	defffc04 	addi	sp,sp,-16
   87aac:	dfc00315 	stw	ra,12(sp)
   87ab0:	df000215 	stw	fp,8(sp)
   87ab4:	df000204 	addi	fp,sp,8
   87ab8:	2007883a 	mov	r3,r4
   87abc:	2805883a 	mov	r2,r5
   87ac0:	e0fffe05 	stb	r3,-8(fp)
   87ac4:	e0bfff05 	stb	r2,-4(fp)
   // if ((RegAddr >= 0xE0 && RegAddr <= 0xE6) || (RegAddr >= 0x191 && RegAddr <= 0x199)){
    //    OS_PRINTF("audio ------------------ Write Reg[%02Xh]=%02Xh\n", RegAddr, Data);
    //}        
	//return I2C_Write_Byte(HDMI_TX_I2C_SLAVE_ADDR,RegAddr,Data) ;
    return HDMITX_WriteI2C_ByteN(RegAddr, &Data, 1);
   87ac8:	e0bffe03 	ldbu	r2,-8(fp)
   87acc:	e0ffff04 	addi	r3,fp,-4
   87ad0:	01800044 	movi	r6,1
   87ad4:	180b883a 	mov	r5,r3
   87ad8:	1009883a 	mov	r4,r2
   87adc:	0087ba80 	call	87ba8 <HDMITX_WriteI2C_ByteN>
}
   87ae0:	e037883a 	mov	sp,fp
   87ae4:	dfc00117 	ldw	ra,4(sp)
   87ae8:	df000017 	ldw	fp,0(sp)
   87aec:	dec00204 	addi	sp,sp,8
   87af0:	f800283a 	ret

00087af4 <HDMITX_ReadI2C_ByteN>:

SYS_STATUS
HDMITX_ReadI2C_ByteN(BYTE RegAddr,BYTE *pData,int N)
{
   87af4:	defff804 	addi	sp,sp,-32
   87af8:	dfc00715 	stw	ra,28(sp)
   87afc:	df000615 	stw	fp,24(sp)
   87b00:	df000604 	addi	fp,sp,24
   87b04:	2005883a 	mov	r2,r4
   87b08:	e17ffe15 	stw	r5,-8(fp)
   87b0c:	e1bfff15 	stw	r6,-4(fp)
   87b10:	e0bffd05 	stb	r2,-12(fp)
	//return I2C_Read_ByteN(HDMI_TX_I2C_SLAVE_ADDR,RegAddr,pData,N) ;
    bool bSuccess = TRUE;
   87b14:	00800044 	movi	r2,1
   87b18:	e0bffb15 	stw	r2,-20(fp)
    int i;
    for(i=0;i<N && bSuccess;i++){
   87b1c:	e03ffc15 	stw	zero,-16(fp)
   87b20:	00001406 	br	87b74 <HDMITX_ReadI2C_ByteN+0x80>
        bSuccess = I2C_Read(HDMI_TX_I2C_CLOCK, HDMI_TX_I2C_DATA, HDMI_TX_I2C_SLAVE_ADDR, RegAddr+i, (alt_u8 *)(pData+i));
   87b24:	e0bffc17 	ldw	r2,-16(fp)
   87b28:	1007883a 	mov	r3,r2
   87b2c:	e0bffd03 	ldbu	r2,-12(fp)
   87b30:	1885883a 	add	r2,r3,r2
   87b34:	11003fcc 	andi	r4,r2,255
   87b38:	e0bffc17 	ldw	r2,-16(fp)
   87b3c:	e0fffe17 	ldw	r3,-8(fp)
   87b40:	1885883a 	add	r2,r3,r2
   87b44:	d8800015 	stw	r2,0(sp)
   87b48:	200f883a 	mov	r7,r4
   87b4c:	01bfe604 	movi	r6,-104
   87b50:	01400434 	movhi	r5,16
   87b54:	29441c04 	addi	r5,r5,4208
   87b58:	01000434 	movhi	r4,16
   87b5c:	21042404 	addi	r4,r4,4240
   87b60:	00884fc0 	call	884fc <I2C_Read>
   87b64:	e0bffb15 	stw	r2,-20(fp)
HDMITX_ReadI2C_ByteN(BYTE RegAddr,BYTE *pData,int N)
{
	//return I2C_Read_ByteN(HDMI_TX_I2C_SLAVE_ADDR,RegAddr,pData,N) ;
    bool bSuccess = TRUE;
    int i;
    for(i=0;i<N && bSuccess;i++){
   87b68:	e0bffc17 	ldw	r2,-16(fp)
   87b6c:	10800044 	addi	r2,r2,1
   87b70:	e0bffc15 	stw	r2,-16(fp)
   87b74:	e0fffc17 	ldw	r3,-16(fp)
   87b78:	e0bfff17 	ldw	r2,-4(fp)
   87b7c:	1880020e 	bge	r3,r2,87b88 <HDMITX_ReadI2C_ByteN+0x94>
   87b80:	e0bffb17 	ldw	r2,-20(fp)
   87b84:	103fe71e 	bne	r2,zero,87b24 <__alt_data_end+0xfffb7c64>
        bSuccess = I2C_Read(HDMI_TX_I2C_CLOCK, HDMI_TX_I2C_DATA, HDMI_TX_I2C_SLAVE_ADDR, RegAddr+i, (alt_u8 *)(pData+i));
        //usleep(50); // wait
    }      
    return bSuccess?ER_SUCCESS:ER_FAIL;    
   87b88:	e0bffb17 	ldw	r2,-20(fp)
   87b8c:	1005003a 	cmpeq	r2,r2,zero
   87b90:	10803fcc 	andi	r2,r2,255
}
   87b94:	e037883a 	mov	sp,fp
   87b98:	dfc00117 	ldw	ra,4(sp)
   87b9c:	df000017 	ldw	fp,0(sp)
   87ba0:	dec00204 	addi	sp,sp,8
   87ba4:	f800283a 	ret

00087ba8 <HDMITX_WriteI2C_ByteN>:

SYS_STATUS
HDMITX_WriteI2C_ByteN(BYTE RegAddr,BYTE *pData,int N)
{
   87ba8:	defff804 	addi	sp,sp,-32
   87bac:	dfc00715 	stw	ra,28(sp)
   87bb0:	df000615 	stw	fp,24(sp)
   87bb4:	df000604 	addi	fp,sp,24
   87bb8:	2005883a 	mov	r2,r4
   87bbc:	e17ffe15 	stw	r5,-8(fp)
   87bc0:	e1bfff15 	stw	r6,-4(fp)
   87bc4:	e0bffd05 	stb	r2,-12(fp)
	//return I2C_Write_ByteN(HDMI_TX_I2C_SLAVE_ADDR,RegAddr,pData,N) ;
    BOOL bSuccess = TRUE;
   87bc8:	00800044 	movi	r2,1
   87bcc:	e0bffb15 	stw	r2,-20(fp)
    int i;
    for(i=0;i<N && bSuccess;i++){
   87bd0:	e03ffc15 	stw	zero,-16(fp)
   87bd4:	00001606 	br	87c30 <HDMITX_WriteI2C_ByteN+0x88>
        bSuccess = I2C_Write(HDMI_TX_I2C_CLOCK, HDMI_TX_I2C_DATA, HDMI_TX_I2C_SLAVE_ADDR, RegAddr+i, *(pData+i));
   87bd8:	e0bffc17 	ldw	r2,-16(fp)
   87bdc:	1007883a 	mov	r3,r2
   87be0:	e0bffd03 	ldbu	r2,-12(fp)
   87be4:	1885883a 	add	r2,r3,r2
   87be8:	11003fcc 	andi	r4,r2,255
   87bec:	e0bffc17 	ldw	r2,-16(fp)
   87bf0:	e0fffe17 	ldw	r3,-8(fp)
   87bf4:	1885883a 	add	r2,r3,r2
   87bf8:	10800003 	ldbu	r2,0(r2)
   87bfc:	10803fcc 	andi	r2,r2,255
   87c00:	d8800015 	stw	r2,0(sp)
   87c04:	200f883a 	mov	r7,r4
   87c08:	01bfe604 	movi	r6,-104
   87c0c:	01400434 	movhi	r5,16
   87c10:	29441c04 	addi	r5,r5,4208
   87c14:	01000434 	movhi	r4,16
   87c18:	21042404 	addi	r4,r4,4240
   87c1c:	00884180 	call	88418 <I2C_Write>
   87c20:	e0bffb15 	stw	r2,-20(fp)
HDMITX_WriteI2C_ByteN(BYTE RegAddr,BYTE *pData,int N)
{
	//return I2C_Write_ByteN(HDMI_TX_I2C_SLAVE_ADDR,RegAddr,pData,N) ;
    BOOL bSuccess = TRUE;
    int i;
    for(i=0;i<N && bSuccess;i++){
   87c24:	e0bffc17 	ldw	r2,-16(fp)
   87c28:	10800044 	addi	r2,r2,1
   87c2c:	e0bffc15 	stw	r2,-16(fp)
   87c30:	e0fffc17 	ldw	r3,-16(fp)
   87c34:	e0bfff17 	ldw	r2,-4(fp)
   87c38:	1880020e 	bge	r3,r2,87c44 <HDMITX_WriteI2C_ByteN+0x9c>
   87c3c:	e0bffb17 	ldw	r2,-20(fp)
   87c40:	103fe51e 	bne	r2,zero,87bd8 <__alt_data_end+0xfffb7d18>
        bSuccess = I2C_Write(HDMI_TX_I2C_CLOCK, HDMI_TX_I2C_DATA, HDMI_TX_I2C_SLAVE_ADDR, RegAddr+i, *(pData+i));
    }        
    return bSuccess?ER_SUCCESS:ER_FAIL;       
   87c44:	e0bffb17 	ldw	r2,-20(fp)
   87c48:	1005003a 	cmpeq	r2,r2,zero
   87c4c:	10803fcc 	andi	r2,r2,255
}
   87c50:	e037883a 	mov	sp,fp
   87c54:	dfc00117 	ldw	ra,4(sp)
   87c58:	df000017 	ldw	fp,0(sp)
   87c5c:	dec00204 	addi	sp,sp,8
   87c60:	f800283a 	ret

00087c64 <I2C_Read_Byte>:
#endif


BYTE
I2C_Read_Byte(BYTE Addr,BYTE RegAddr)
{
   87c64:	defffb04 	addi	sp,sp,-20
   87c68:	dfc00415 	stw	ra,16(sp)
   87c6c:	df000315 	stw	fp,12(sp)
   87c70:	df000304 	addi	fp,sp,12
   87c74:	2007883a 	mov	r3,r4
   87c78:	2805883a 	mov	r2,r5
   87c7c:	e0fffe05 	stb	r3,-8(fp)
   87c80:	e0bfff05 	stb	r2,-4(fp)
    BYTE data ;
    I2C_Read_ByteN(Addr,RegAddr,&data,1)  ;
   87c84:	e0bffe03 	ldbu	r2,-8(fp)
   87c88:	e0ffff03 	ldbu	r3,-4(fp)
   87c8c:	01c00044 	movi	r7,1
   87c90:	e1bffd04 	addi	r6,fp,-12
   87c94:	180b883a 	mov	r5,r3
   87c98:	1009883a 	mov	r4,r2
   87c9c:	0087d100 	call	87d10 <I2C_Read_ByteN>
    return data ;
   87ca0:	e0bffd03 	ldbu	r2,-12(fp)
}
   87ca4:	e037883a 	mov	sp,fp
   87ca8:	dfc00117 	ldw	ra,4(sp)
   87cac:	df000017 	ldw	fp,0(sp)
   87cb0:	dec00204 	addi	sp,sp,8
   87cb4:	f800283a 	ret

00087cb8 <I2C_Write_Byte>:

SYS_STATUS
I2C_Write_Byte(BYTE Addr,BYTE RegAddr,BYTE Data)
{
   87cb8:	defffb04 	addi	sp,sp,-20
   87cbc:	dfc00415 	stw	ra,16(sp)
   87cc0:	df000315 	stw	fp,12(sp)
   87cc4:	df000304 	addi	fp,sp,12
   87cc8:	2807883a 	mov	r3,r5
   87ccc:	3005883a 	mov	r2,r6
   87cd0:	e13ffd05 	stb	r4,-12(fp)
   87cd4:	e0fffe05 	stb	r3,-8(fp)
   87cd8:	e0bfff05 	stb	r2,-4(fp)
    return I2C_Write_ByteN(Addr,RegAddr,&Data,1) ;
   87cdc:	e0bffd03 	ldbu	r2,-12(fp)
   87ce0:	e0fffe03 	ldbu	r3,-8(fp)
   87ce4:	e13fff04 	addi	r4,fp,-4
   87ce8:	01c00044 	movi	r7,1
   87cec:	200d883a 	mov	r6,r4
   87cf0:	180b883a 	mov	r5,r3
   87cf4:	1009883a 	mov	r4,r2
   87cf8:	0087ddc0 	call	87ddc <I2C_Write_ByteN>
}
   87cfc:	e037883a 	mov	sp,fp
   87d00:	dfc00117 	ldw	ra,4(sp)
   87d04:	df000017 	ldw	fp,0(sp)
   87d08:	dec00204 	addi	sp,sp,8
   87d0c:	f800283a 	ret

00087d10 <I2C_Read_ByteN>:

SYS_STATUS
I2C_Read_ByteN(BYTE Addr,BYTE RegAddr,BYTE *pData,int N)
{
   87d10:	defff704 	addi	sp,sp,-36
   87d14:	dfc00815 	stw	ra,32(sp)
   87d18:	df000715 	stw	fp,28(sp)
   87d1c:	df000704 	addi	fp,sp,28
   87d20:	2007883a 	mov	r3,r4
   87d24:	2805883a 	mov	r2,r5
   87d28:	e1bffe15 	stw	r6,-8(fp)
   87d2c:	e1ffff15 	stw	r7,-4(fp)
   87d30:	e0fffc05 	stb	r3,-16(fp)
   87d34:	e0bffd05 	stb	r2,-12(fp)
#if 1
    BOOL bSuccess = TRUE;
   87d38:	00800044 	movi	r2,1
   87d3c:	e0bffa15 	stw	r2,-24(fp)
    #if 1
        int i;
        for(i=0;i<N && bSuccess;i++){
   87d40:	e03ffb15 	stw	zero,-20(fp)
   87d44:	00001806 	br	87da8 <I2C_Read_ByteN+0x98>
            bSuccess = I2C_Read(HDMI_TX_I2C_CLOCK, HDMI_TX_I2C_DATA, Addr, RegAddr+i, (alt_u8 *)(pData+i));
   87d48:	e0bffc03 	ldbu	r2,-16(fp)
   87d4c:	11003fcc 	andi	r4,r2,255
   87d50:	2100201c 	xori	r4,r4,128
   87d54:	213fe004 	addi	r4,r4,-128
   87d58:	e0bffb17 	ldw	r2,-20(fp)
   87d5c:	1007883a 	mov	r3,r2
   87d60:	e0bffd03 	ldbu	r2,-12(fp)
   87d64:	1885883a 	add	r2,r3,r2
   87d68:	11403fcc 	andi	r5,r2,255
   87d6c:	e0bffb17 	ldw	r2,-20(fp)
   87d70:	e0fffe17 	ldw	r3,-8(fp)
   87d74:	1885883a 	add	r2,r3,r2
   87d78:	d8800015 	stw	r2,0(sp)
   87d7c:	280f883a 	mov	r7,r5
   87d80:	200d883a 	mov	r6,r4
   87d84:	01400434 	movhi	r5,16
   87d88:	29441c04 	addi	r5,r5,4208
   87d8c:	01000434 	movhi	r4,16
   87d90:	21042404 	addi	r4,r4,4240
   87d94:	00884fc0 	call	884fc <I2C_Read>
   87d98:	e0bffa15 	stw	r2,-24(fp)
{
#if 1
    BOOL bSuccess = TRUE;
    #if 1
        int i;
        for(i=0;i<N && bSuccess;i++){
   87d9c:	e0bffb17 	ldw	r2,-20(fp)
   87da0:	10800044 	addi	r2,r2,1
   87da4:	e0bffb15 	stw	r2,-20(fp)
   87da8:	e0fffb17 	ldw	r3,-20(fp)
   87dac:	e0bfff17 	ldw	r2,-4(fp)
   87db0:	1880020e 	bge	r3,r2,87dbc <I2C_Read_ByteN+0xac>
   87db4:	e0bffa17 	ldw	r2,-24(fp)
   87db8:	103fe31e 	bne	r2,zero,87d48 <__alt_data_end+0xfffb7e88>
            //usleep(50); // wait
        }    
    #else
        bSuccess = I2C_MultipleRead(HDMI_TX_I2C_CLOCK, HDMI_TX_I2C_DATA, Addr, RegAddr, (alt_u8 *)pData, (alt_u16)N);
    #endif
    return bSuccess?ER_SUCCESS:ER_FAIL;
   87dbc:	e0bffa17 	ldw	r2,-24(fp)
   87dc0:	1005003a 	cmpeq	r2,r2,zero
   87dc4:	10803fcc 	andi	r2,r2,255

    CloseHandle (hDevice);

    return err ;
#endif    
}
   87dc8:	e037883a 	mov	sp,fp
   87dcc:	dfc00117 	ldw	ra,4(sp)
   87dd0:	df000017 	ldw	fp,0(sp)
   87dd4:	dec00204 	addi	sp,sp,8
   87dd8:	f800283a 	ret

00087ddc <I2C_Write_ByteN>:

SYS_STATUS
I2C_Write_ByteN(BYTE Addr,BYTE RegAddr,BYTE *pData,int N)
{
   87ddc:	defff704 	addi	sp,sp,-36
   87de0:	dfc00815 	stw	ra,32(sp)
   87de4:	df000715 	stw	fp,28(sp)
   87de8:	df000704 	addi	fp,sp,28
   87dec:	2007883a 	mov	r3,r4
   87df0:	2805883a 	mov	r2,r5
   87df4:	e1bffe15 	stw	r6,-8(fp)
   87df8:	e1ffff15 	stw	r7,-4(fp)
   87dfc:	e0fffc05 	stb	r3,-16(fp)
   87e00:	e0bffd05 	stb	r2,-12(fp)
#if 1
    BOOL bSuccess = TRUE;
   87e04:	00800044 	movi	r2,1
   87e08:	e0bffa15 	stw	r2,-24(fp)
    int i;
    for(i=0;i<N && bSuccess;i++){
   87e0c:	e03ffb15 	stw	zero,-20(fp)
   87e10:	00001606 	br	87e6c <I2C_Write_ByteN+0x90>
        bSuccess = I2C_Write(HDMI_TX_I2C_CLOCK, HDMI_TX_I2C_DATA, Addr, RegAddr, *(pData+i));
   87e14:	e0bffc03 	ldbu	r2,-16(fp)
   87e18:	11003fcc 	andi	r4,r2,255
   87e1c:	2100201c 	xori	r4,r4,128
   87e20:	213fe004 	addi	r4,r4,-128
   87e24:	e17ffd03 	ldbu	r5,-12(fp)
   87e28:	e0bffb17 	ldw	r2,-20(fp)
   87e2c:	e0fffe17 	ldw	r3,-8(fp)
   87e30:	1885883a 	add	r2,r3,r2
   87e34:	10800003 	ldbu	r2,0(r2)
   87e38:	10803fcc 	andi	r2,r2,255
   87e3c:	d8800015 	stw	r2,0(sp)
   87e40:	280f883a 	mov	r7,r5
   87e44:	200d883a 	mov	r6,r4
   87e48:	01400434 	movhi	r5,16
   87e4c:	29441c04 	addi	r5,r5,4208
   87e50:	01000434 	movhi	r4,16
   87e54:	21042404 	addi	r4,r4,4240
   87e58:	00884180 	call	88418 <I2C_Write>
   87e5c:	e0bffa15 	stw	r2,-24(fp)
I2C_Write_ByteN(BYTE Addr,BYTE RegAddr,BYTE *pData,int N)
{
#if 1
    BOOL bSuccess = TRUE;
    int i;
    for(i=0;i<N && bSuccess;i++){
   87e60:	e0bffb17 	ldw	r2,-20(fp)
   87e64:	10800044 	addi	r2,r2,1
   87e68:	e0bffb15 	stw	r2,-20(fp)
   87e6c:	e0fffb17 	ldw	r3,-20(fp)
   87e70:	e0bfff17 	ldw	r2,-4(fp)
   87e74:	1880020e 	bge	r3,r2,87e80 <I2C_Write_ByteN+0xa4>
   87e78:	e0bffa17 	ldw	r2,-24(fp)
   87e7c:	103fe51e 	bne	r2,zero,87e14 <__alt_data_end+0xfffb7f54>
        bSuccess = I2C_Write(HDMI_TX_I2C_CLOCK, HDMI_TX_I2C_DATA, Addr, RegAddr, *(pData+i));
    }        
    return bSuccess?ER_SUCCESS:ER_FAIL;
   87e80:	e0bffa17 	ldw	r2,-24(fp)
   87e84:	1005003a 	cmpeq	r2,r2,zero
   87e88:	10803fcc 	andi	r2,r2,255
    }

    CloseHandle (hDevice);
    return err ;
#endif    
}
   87e8c:	e037883a 	mov	sp,fp
   87e90:	dfc00117 	ldw	ra,4(sp)
   87e94:	df000017 	ldw	fp,0(sp)
   87e98:	dec00204 	addi	sp,sp,8
   87e9c:	f800283a 	ret

00087ea0 <FindVIC>:
//=========================================================================
// TX video formation control
//=========================================================================

void FindVIC(VPG_MODE Mode, alt_u8 *vic, bool *pb16x9)
{
   87ea0:	defffc04 	addi	sp,sp,-16
   87ea4:	df000315 	stw	fp,12(sp)
   87ea8:	df000304 	addi	fp,sp,12
   87eac:	e13ffd15 	stw	r4,-12(fp)
   87eb0:	e17ffe15 	stw	r5,-8(fp)
   87eb4:	e1bfff15 	stw	r6,-4(fp)
    switch(Mode)
   87eb8:	e0bffd17 	ldw	r2,-12(fp)
   87ebc:	108002e8 	cmpgeui	r2,r2,11
   87ec0:	1000321e 	bne	r2,zero,87f8c <FindVIC+0xec>
   87ec4:	e0bffd17 	ldw	r2,-12(fp)
   87ec8:	100690ba 	slli	r3,r2,2
   87ecc:	00800234 	movhi	r2,8
   87ed0:	109fb804 	addi	r2,r2,32480
   87ed4:	1885883a 	add	r2,r3,r2
   87ed8:	10800017 	ldw	r2,0(r2)
   87edc:	1000683a 	jmp	r2
   87ee0:	00087f0c 	andi	zero,zero,8700
   87ee4:	00087f8c 	andi	zero,zero,8702
   87ee8:	00087f1c 	xori	zero,zero,8700
   87eec:	00087f2c 	andhi	zero,zero,8700
   87ef0:	00087f8c 	andi	zero,zero,8702
   87ef4:	00087f3c 	xorhi	zero,zero,8700
   87ef8:	00087f4c 	andi	zero,zero,8701
   87efc:	00087f5c 	xori	zero,zero,8701
   87f00:	00087f6c 	andhi	zero,zero,8701
   87f04:	00087f8c 	andi	zero,zero,8702
   87f08:	00087f7c 	xorhi	zero,zero,8701
        {
            case MODE_720x480:       *vic = 3;  break;
   87f0c:	e0bffe17 	ldw	r2,-8(fp)
   87f10:	00c000c4 	movi	r3,3
   87f14:	10c00005 	stb	r3,0(r2)
   87f18:	00001e06 	br	87f94 <FindVIC+0xf4>
            case MODE_1280x720p50:   *vic = 19; break;
   87f1c:	e0bffe17 	ldw	r2,-8(fp)
   87f20:	00c004c4 	movi	r3,19
   87f24:	10c00005 	stb	r3,0(r2)
   87f28:	00001a06 	br	87f94 <FindVIC+0xf4>
            case MODE_1280x720:      *vic = 4;  break;
   87f2c:	e0bffe17 	ldw	r2,-8(fp)
   87f30:	00c00104 	movi	r3,4
   87f34:	10c00005 	stb	r3,0(r2)
   87f38:	00001606 	br	87f94 <FindVIC+0xf4>
            case MODE_1920x1080i:    *vic = 5;  break;
   87f3c:	e0bffe17 	ldw	r2,-8(fp)
   87f40:	00c00144 	movi	r3,5
   87f44:	10c00005 	stb	r3,0(r2)
   87f48:	00001206 	br	87f94 <FindVIC+0xf4>
            case MODE_1920x1080i50:  *vic = 20; break;
   87f4c:	e0bffe17 	ldw	r2,-8(fp)
   87f50:	00c00504 	movi	r3,20
   87f54:	10c00005 	stb	r3,0(r2)
   87f58:	00000e06 	br	87f94 <FindVIC+0xf4>
            case MODE_1920x1080:     *vic = 16; break;
   87f5c:	e0bffe17 	ldw	r2,-8(fp)
   87f60:	00c00404 	movi	r3,16
   87f64:	10c00005 	stb	r3,0(r2)
   87f68:	00000a06 	br	87f94 <FindVIC+0xf4>
            case MODE_1920x1080p50:  *vic = 31; break;
   87f6c:	e0bffe17 	ldw	r2,-8(fp)
   87f70:	00c007c4 	movi	r3,31
   87f74:	10c00005 	stb	r3,0(r2)
   87f78:	00000606 	br	87f94 <FindVIC+0xf4>
            case MODE_1920x1080i120: *vic = 46; break;
   87f7c:	e0bffe17 	ldw	r2,-8(fp)
   87f80:	00c00b84 	movi	r3,46
   87f84:	10c00005 	stb	r3,0(r2)
   87f88:	00000206 	br	87f94 <FindVIC+0xf4>
            default:
            *vic = 0;
   87f8c:	e0bffe17 	ldw	r2,-8(fp)
   87f90:	10000005 	stb	zero,0(r2)
        }
    if (*vic != 0)
   87f94:	e0bffe17 	ldw	r2,-8(fp)
   87f98:	10800003 	ldbu	r2,0(r2)
   87f9c:	10803fcc 	andi	r2,r2,255
   87fa0:	10000426 	beq	r2,zero,87fb4 <FindVIC+0x114>
        *pb16x9 = TRUE;
   87fa4:	e0bfff17 	ldw	r2,-4(fp)
   87fa8:	00c00044 	movi	r3,1
   87fac:	10c00015 	stw	r3,0(r2)
    else
        *pb16x9 = FALSE;
}
   87fb0:	00000206 	br	87fbc <FindVIC+0x11c>
            *vic = 0;
        }
    if (*vic != 0)
        *pb16x9 = TRUE;
    else
        *pb16x9 = FALSE;
   87fb4:	e0bfff17 	ldw	r2,-4(fp)
   87fb8:	10000015 	stw	zero,0(r2)
}
   87fbc:	0001883a 	nop
   87fc0:	e037883a 	mov	sp,fp
   87fc4:	df000017 	ldw	fp,0(sp)
   87fc8:	dec00104 	addi	sp,sp,4
   87fcc:	f800283a 	ret

00087fd0 <SetupTxVIC>:

void SetupTxVIC(VPG_MODE Mode)
{
   87fd0:	defffb04 	addi	sp,sp,-20
   87fd4:	dfc00415 	stw	ra,16(sp)
   87fd8:	df000315 	stw	fp,12(sp)
   87fdc:	df000304 	addi	fp,sp,12
   87fe0:	e13fff15 	stw	r4,-4(fp)
    alt_u8 tx_vic;
    bool b16x9;
    FindVIC(Mode, &tx_vic, &b16x9);
   87fe4:	e0bffe04 	addi	r2,fp,-8
   87fe8:	100d883a 	mov	r6,r2
   87fec:	e17ffd04 	addi	r5,fp,-12
   87ff0:	e13fff17 	ldw	r4,-4(fp)
   87ff4:	0087ea00 	call	87ea0 <FindVIC>
    HDMITX_ChangeVideoTiming(tx_vic);
   87ff8:	e0bffd03 	ldbu	r2,-12(fp)
   87ffc:	10803fcc 	andi	r2,r2,255
   88000:	1009883a 	mov	r4,r2
   88004:	0080e700 	call	80e70 <HDMITX_ChangeVideoTiming>
}
   88008:	0001883a 	nop
   8800c:	e037883a 	mov	sp,fp
   88010:	dfc00117 	ldw	ra,4(sp)
   88014:	df000017 	ldw	fp,0(sp)
   88018:	dec00204 	addi	sp,sp,8
   8801c:	f800283a 	ret

00088020 <VPG_Config>:


void VPG_Config(VPG_MODE Mode, COLOR_TYPE Color)
{
   88020:	defffc04 	addi	sp,sp,-16
   88024:	dfc00315 	stw	ra,12(sp)
   88028:	df000215 	stw	fp,8(sp)
   8802c:	df000204 	addi	fp,sp,8
   88030:	e13ffe15 	stw	r4,-8(fp)
   88034:	e17fff15 	stw	r5,-4(fp)
    #ifndef TX_DISABLED
    //===== check whether vpg function is active
    if (!HDMITX_HPD())
   88038:	0080cb80 	call	80cb8 <HDMITX_HPD>
   8803c:	10003326 	beq	r2,zero,8810c <VPG_Config+0xec>
    if (HDMIRX_IsVideoOn())
        return;
    #endif //RX_DISABLED


    OS_PRINTF("===> Pattern Generator Mode: %d (%s)\n", gVpgMode, gszVicText[gVpgMode]);
   88040:	d129a317 	ldw	r4,-22900(gp)
   88044:	d0a9a317 	ldw	r2,-22900(gp)
   88048:	100691ba 	slli	r3,r2,6
   8804c:	008002b4 	movhi	r2,10
   88050:	10b3fc04 	addi	r2,r2,-12304
   88054:	1885883a 	add	r2,r3,r2
   88058:	100d883a 	mov	r6,r2
   8805c:	200b883a 	mov	r5,r4
   88060:	010002b4 	movhi	r4,10
   88064:	2130cd04 	addi	r4,r4,-15564
   88068:	008780c0 	call	8780c <OS_PRINTF>

    //===== updagte vpg mode & color
    IOWR(HDMI_TX_MODE_CHANGE_BASE, 0, 0);
   8806c:	0007883a 	mov	r3,zero
   88070:	00800434 	movhi	r2,16
   88074:	10841804 	addi	r2,r2,4192
   88078:	10c00035 	stwio	r3,0(r2)
        // change color mode of VPG
        if (gVpgColor == COLOR_RGB444)
   8807c:	d0a9a417 	ldw	r2,-22896(gp)
   88080:	1000051e 	bne	r2,zero,88098 <VPG_Config+0x78>
            IOWR(HDMI_TX_VPG_COLOR_BASE, 0, VPG_RGB444);  // RGB444
   88084:	0007883a 	mov	r3,zero
   88088:	00800434 	movhi	r2,16
   8808c:	10841404 	addi	r2,r2,4176
   88090:	10c00035 	stwio	r3,0(r2)
   88094:	00000f06 	br	880d4 <VPG_Config+0xb4>
        else if (gVpgColor == COLOR_YUV422)
   88098:	d0a9a417 	ldw	r2,-22896(gp)
   8809c:	10800058 	cmpnei	r2,r2,1
   880a0:	1000051e 	bne	r2,zero,880b8 <VPG_Config+0x98>
            IOWR(HDMI_TX_VPG_COLOR_BASE, 0, VPG_YUV422);  // YUV422
   880a4:	00c00044 	movi	r3,1
   880a8:	00800434 	movhi	r2,16
   880ac:	10841404 	addi	r2,r2,4176
   880b0:	10c00035 	stwio	r3,0(r2)
   880b4:	00000706 	br	880d4 <VPG_Config+0xb4>
        else if (gVpgColor == COLOR_YUV444)
   880b8:	d0a9a417 	ldw	r2,-22896(gp)
   880bc:	10800098 	cmpnei	r2,r2,2
   880c0:	1000041e 	bne	r2,zero,880d4 <VPG_Config+0xb4>
            IOWR(HDMI_TX_VPG_COLOR_BASE, 0, VPG_YUV444);  // YUV444
   880c4:	00c00084 	movi	r3,2
   880c8:	00800434 	movhi	r2,16
   880cc:	10841404 	addi	r2,r2,4176
   880d0:	10c00035 	stwio	r3,0(r2)

    IOWR(HDMI_TX_DISP_MODE_BASE, 0, gVpgMode);
   880d4:	d0a9a317 	ldw	r2,-22900(gp)
   880d8:	1007883a 	mov	r3,r2
   880dc:	00800434 	movhi	r2,16
   880e0:	10841004 	addi	r2,r2,4160
   880e4:	10c00035 	stwio	r3,0(r2)
    IOWR(HDMI_TX_MODE_CHANGE_BASE, 0, 1);
   880e8:	00c00044 	movi	r3,1
   880ec:	00800434 	movhi	r2,16
   880f0:	10841804 	addi	r2,r2,4192
   880f4:	10c00035 	stwio	r3,0(r2)
    IOWR(HDMI_TX_MODE_CHANGE_BASE, 0, 0);
   880f8:	0007883a 	mov	r3,zero
   880fc:	00800434 	movhi	r2,16
   88100:	10841804 	addi	r2,r2,4192
   88104:	10c00035 	stwio	r3,0(r2)
   88108:	00000106 	br	88110 <VPG_Config+0xf0>
void VPG_Config(VPG_MODE Mode, COLOR_TYPE Color)
{
    #ifndef TX_DISABLED
    //===== check whether vpg function is active
    if (!HDMITX_HPD())
        return;
   8810c:	0001883a 	nop
    IOWR(HDMI_TX_MODE_CHANGE_BASE, 0, 0);
    //
    //HDMITX_EnableVideoOutput();

#endif //#ifndef TX_DISABLED
}
   88110:	e037883a 	mov	sp,fp
   88114:	dfc00117 	ldw	ra,4(sp)
   88118:	df000017 	ldw	fp,0(sp)
   8811c:	dec00204 	addi	sp,sp,8
   88120:	f800283a 	ret

00088124 <SetupColorSpace>:




bool SetupColorSpace(void)
{
   88124:	deffe204 	addi	sp,sp,-120
   88128:	dfc01d15 	stw	ra,116(sp)
   8812c:	df001c15 	stw	fp,112(sp)
   88130:	df001c04 	addi	fp,sp,112
    char szColor[][32] = {"RGB444", "YUV422", "YUV444"};
   88134:	008002b4 	movhi	r2,10
   88138:	10b0ea44 	addi	r2,r2,-15447
   8813c:	e0ffe804 	addi	r3,fp,-96
   88140:	1009883a 	mov	r4,r2
   88144:	00801804 	movi	r2,96
   88148:	100d883a 	mov	r6,r2
   8814c:	200b883a 	mov	r5,r4
   88150:	1809883a 	mov	r4,r3
   88154:	0088e480 	call	88e48 <memcpy>
    bool bSuccess = TRUE;
   88158:	00800044 	movi	r2,1
   8815c:	e0bfe515 	stw	r2,-108(fp)
    bRxVideoOn = HDMIRX_IsVideoOn();
#endif // RX_DISABLED


#ifndef TX_DISABLED
    if (gDemoMode == DEMO_TX_ONLY){
   88160:	d0a9a217 	ldw	r2,-22904(gp)
   88164:	10800058 	cmpnei	r2,r2,1
   88168:	10000b1e 	bne	r2,zero,88198 <SetupColorSpace+0x74>
            // Transmittor: output color == input color
            TxInputColor = gVpgColor;
            TxOutputColor = gVpgColor;
        #else
            // Trasmitter: output color is fixed as RGB
            TxInputColor = gVpgColor;
   8816c:	d0a9a417 	ldw	r2,-22896(gp)
   88170:	e0bfe615 	stw	r2,-104(fp)
            TxOutputColor = COLOR_RGB444;
   88174:	e03fe715 	stw	zero,-100(fp)

    }else{
        return TRUE;
    }

    HDMITX_SetColorSpace(TxInputColor, TxOutputColor);
   88178:	e17fe717 	ldw	r5,-100(fp)
   8817c:	e13fe617 	ldw	r4,-104(fp)
   88180:	0080fc80 	call	80fc8 <HDMITX_SetColorSpace>


    // set TX color depth
    int ColorDepth = 24; // defualt
   88184:	00800604 	movi	r2,24
   88188:	e0bfe415 	stw	r2,-112(fp)
    if (gEnableColorDepth){
   8818c:	d0a00217 	ldw	r2,-32760(gp)
   88190:	10000c26 	beq	r2,zero,881c4 <SetupColorSpace+0xa0>
   88194:	00000206 	br	881a0 <SetupColorSpace+0x7c>
            TxOutputColor = COLOR_RGB444;
        #endif


    }else{
        return TRUE;
   88198:	00800044 	movi	r2,1
   8819c:	00002506 	br	88234 <SetupColorSpace+0x110>


    // set TX color depth
    int ColorDepth = 24; // defualt
    if (gEnableColorDepth){
        if (HDMITX_IsSinkSupportColorDepth36())
   881a0:	00811000 	call	81100 <HDMITX_IsSinkSupportColorDepth36>
   881a4:	10000326 	beq	r2,zero,881b4 <SetupColorSpace+0x90>
            ColorDepth = 36;
   881a8:	00800904 	movi	r2,36
   881ac:	e0bfe415 	stw	r2,-112(fp)
   881b0:	00000406 	br	881c4 <SetupColorSpace+0xa0>
        else if (HDMITX_IsSinkSupportColorDepth30())
   881b4:	008117c0 	call	8117c <HDMITX_IsSinkSupportColorDepth30>
   881b8:	10000226 	beq	r2,zero,881c4 <SetupColorSpace+0xa0>
            ColorDepth = 30;
   881bc:	00800784 	movi	r2,30
   881c0:	e0bfe415 	stw	r2,-112(fp)
    }
    HDMITX_SetOutputColorDepth(ColorDepth);
   881c4:	e13fe417 	ldw	r4,-112(fp)
   881c8:	00811f80 	call	811f8 <HDMITX_SetOutputColorDepth>

    OS_PRINTF("Set Tx Color Depth: %d bits %s\n", ColorDepth, gEnableColorDepth?"":"(default)");
   881cc:	d0a00217 	ldw	r2,-32760(gp)
   881d0:	10000326 	beq	r2,zero,881e0 <SetupColorSpace+0xbc>
   881d4:	008002b4 	movhi	r2,10
   881d8:	10b0d704 	addi	r2,r2,-15524
   881dc:	00000206 	br	881e8 <SetupColorSpace+0xc4>
   881e0:	008002b4 	movhi	r2,10
   881e4:	10b0d804 	addi	r2,r2,-15520
   881e8:	100d883a 	mov	r6,r2
   881ec:	e17fe417 	ldw	r5,-112(fp)
   881f0:	010002b4 	movhi	r4,10
   881f4:	2130db04 	addi	r4,r4,-15508
   881f8:	008780c0 	call	8780c <OS_PRINTF>
    OS_PRINTF("Set Tx Color Convert:%s->%s\n", szColor[TxInputColor], szColor[TxOutputColor]);
   881fc:	e0ffe804 	addi	r3,fp,-96
   88200:	e0bfe617 	ldw	r2,-104(fp)
   88204:	1004917a 	slli	r2,r2,5
   88208:	1889883a 	add	r4,r3,r2
   8820c:	e0ffe804 	addi	r3,fp,-96
   88210:	e0bfe717 	ldw	r2,-100(fp)
   88214:	1004917a 	slli	r2,r2,5
   88218:	1885883a 	add	r2,r3,r2
   8821c:	100d883a 	mov	r6,r2
   88220:	200b883a 	mov	r5,r4
   88224:	010002b4 	movhi	r4,10
   88228:	2130e304 	addi	r4,r4,-15476
   8822c:	008780c0 	call	8780c <OS_PRINTF>
            HDMITX_DumpReg(i);
        HDMITX_DumpReg(0x158);
    #endif

#endif //TX_DISABLED
    return bSuccess;
   88230:	e0bfe517 	ldw	r2,-108(fp)
}
   88234:	e037883a 	mov	sp,fp
   88238:	dfc00117 	ldw	ra,4(sp)
   8823c:	df000017 	ldw	fp,0(sp)
   88240:	dec00204 	addi	sp,sp,8
   88244:	f800283a 	ret

00088248 <main>:
// Main Function
//=========================================================================


int main()
{
   88248:	defff804 	addi	sp,sp,-32
   8824c:	dfc00715 	stw	ra,28(sp)
   88250:	df000615 	stw	fp,24(sp)
   88254:	df000604 	addi	fp,sp,24
    bool bRxVideoOn = FALSE, bTxSinkOn = FALSE, bRxModeChanged = FALSE;
   88258:	e03ffc15 	stw	zero,-16(fp)
   8825c:	e03ffd15 	stw	zero,-12(fp)
   88260:	e03ffe15 	stw	zero,-8(fp)
    alt_u8 led_mask;
    alt_u32 BlinkTime;
    bool bHwNg = FALSE;
   88264:	e03fff15 	stw	zero,-4(fp)

    // disable color depth if button1 is pressed when system boot.
   // gEnableColorDepth = ((~IORD(PIO_BUTTON_BASE,0)) & 0x02)?0:1;

    OS_PRINTF("\n======== HDMI Demo ==============\n");
   88268:	010002b4 	movhi	r4,10
   8826c:	21310304 	addi	r4,r4,-15348
   88270:	008780c0 	call	8780c <OS_PRINTF>

    //-------------------------------
    // HDMI TX init
    //-------------------------------
    if (!HDMITX_Init()){
   88274:	0080c500 	call	80c50 <HDMITX_Init>
   88278:	1000051e 	bne	r2,zero,88290 <main+0x48>
        printf("Failed to find CAT6613 HDMI-TX Chip.\n");
   8827c:	010002b4 	movhi	r4,10
   88280:	21310c04 	addi	r4,r4,-15312
   88284:	00890dc0 	call	890dc <puts>
        bHwNg = TRUE;
   88288:	00800044 	movi	r2,1
   8828c:	e0bfff15 	stw	r2,-4(fp)
    //-------------------------------

    while(1){

        //========== TX
        if (HDMITX_DevLoopProc() || bRxModeChanged){
   88290:	00812380 	call	81238 <HDMITX_DevLoopProc>
   88294:	1000021e 	bne	r2,zero,882a0 <main+0x58>
   88298:	e0bffe17 	ldw	r2,-8(fp)
   8829c:	10001a26 	beq	r2,zero,88308 <main+0xc0>
            bTxSinkOn = HDMITX_HPD();
   882a0:	0080cb80 	call	80cb8 <HDMITX_HPD>
   882a4:	e0bffd15 	stw	r2,-12(fp)
            if (bTxSinkOn){
   882a8:	e0bffd17 	ldw	r2,-12(fp)
   882ac:	10001526 	beq	r2,zero,88304 <main+0xbc>
                // update state
                gDemoMode = bRxVideoOn?DEMO_LOOPBACK: DEMO_TX_ONLY;
   882b0:	e0bffc17 	ldw	r2,-16(fp)
   882b4:	10000226 	beq	r2,zero,882c0 <main+0x78>
   882b8:	00800084 	movi	r2,2
   882bc:	00000106 	br	882c4 <main+0x7c>
   882c0:	00800044 	movi	r2,1
   882c4:	d0a9a215 	stw	r2,-22904(gp)
                //
                HDMITX_DisableVideoOutput();
   882c8:	0080f700 	call	80f70 <HDMITX_DisableVideoOutput>
                if (gDemoMode == DEMO_TX_ONLY){
   882cc:	d0a9a217 	ldw	r2,-22904(gp)
   882d0:	10800058 	cmpnei	r2,r2,1
   882d4:	1000081e 	bne	r2,zero,882f8 <main+0xb0>
                    // tx-only
                    VPG_Config(gVpgMode, gVpgColor);
   882d8:	d0a9a317 	ldw	r2,-22900(gp)
   882dc:	d0e9a417 	ldw	r3,-22896(gp)
   882e0:	180b883a 	mov	r5,r3
   882e4:	1009883a 	mov	r4,r2
   882e8:	00880200 	call	88020 <VPG_Config>
                    SetupTxVIC(gVpgMode);
   882ec:	d0a9a317 	ldw	r2,-22900(gp)
   882f0:	1009883a 	mov	r4,r2
   882f4:	0087fd00 	call	87fd0 <SetupTxVIC>
                }
                SetupColorSpace();
   882f8:	00881240 	call	88124 <SetupColorSpace>
                HDMITX_EnableVideoOutput();
   882fc:	0080f9c0 	call	80f9c <HDMITX_EnableVideoOutput>
   88300:	00000106 	br	88308 <main+0xc0>
            }else{
                HDMITX_DisableVideoOutput();
   88304:	0080f700 	call	80f70 <HDMITX_DisableVideoOutput>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   88308:	d0a9b017 	ldw	r2,-22848(gp)
        }



        //===== LED indication
        if (alt_nticks() > BlinkTime){
   8830c:	e0fffb17 	ldw	r3,-20(fp)
   88310:	18bfdf2e 	bgeu	r3,r2,88290 <__alt_data_end+0xfffb83d0>
            led_mask ^= 0x03;
   88314:	e0bffa03 	ldbu	r2,-24(fp)
   88318:	108000dc 	xori	r2,r2,3
   8831c:	e0bffa05 	stb	r2,-24(fp)
            led_mask |= ~0x03;
   88320:	e0fffa03 	ldbu	r3,-24(fp)
   88324:	00bfff04 	movi	r2,-4
   88328:	1884b03a 	or	r2,r3,r2
   8832c:	e0bffa05 	stb	r2,-24(fp)
            if (HDMITX_HPD())
   88330:	0080cb80 	call	80cb8 <HDMITX_HPD>
   88334:	10000426 	beq	r2,zero,88348 <main+0x100>
                led_mask &= ~0x04;  // rx-source available (led is low-active)
   88338:	e0fffa03 	ldbu	r3,-24(fp)
   8833c:	00bffec4 	movi	r2,-5
   88340:	1884703a 	and	r2,r3,r2
   88344:	e0bffa05 	stb	r2,-24(fp)
            if (bRxVideoOn)
   88348:	e0bffc17 	ldw	r2,-16(fp)
   8834c:	10000426 	beq	r2,zero,88360 <main+0x118>
                led_mask &= ~0x08;  // rx-source available (led is low-active)
   88350:	e0fffa03 	ldbu	r3,-24(fp)
   88354:	00bffdc4 	movi	r2,-9
   88358:	1884703a 	and	r2,r3,r2
   8835c:	e0bffa05 	stb	r2,-24(fp)
   88360:	d0e9b017 	ldw	r3,-22848(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   88364:	d0a9af17 	ldw	r2,-22852(gp)

  //          IOWR(PIO_LED_BASE, 0, led_mask);
            //led_mask ^= 0xFF;

            BlinkTime = alt_nticks() + alt_ticks_per_second()/4;
   88368:	1004d0ba 	srli	r2,r2,2
   8836c:	1885883a 	add	r2,r3,r2
   88370:	e0bffb15 	stw	r2,-20(fp)
        if ((mask & 0x01)  == 0x01){               // BUTTON[0]
            HDMITX_DumpAllReg();
            HDMIRX_DumpAllReg();
        }
#endif
    }
   88374:	003fc606 	br	88290 <__alt_data_end+0xfffb83d0>

00088378 <I2C_Open>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

void I2C_Open(alt_u32 clk_base, alt_u32 data_base){
   88378:	defffd04 	addi	sp,sp,-12
   8837c:	df000215 	stw	fp,8(sp)
   88380:	df000204 	addi	fp,sp,8
   88384:	e13ffe15 	stw	r4,-8(fp)
   88388:	e17fff15 	stw	r5,-4(fp)
    SDA_DIR_IN(data_base);
   8838c:	e0bfff17 	ldw	r2,-4(fp)
   88390:	10800104 	addi	r2,r2,4
   88394:	0007883a 	mov	r3,zero
   88398:	10c00035 	stwio	r3,0(r2)
    SCL_DIR_OUT(clk_base);
   8839c:	e0bffe17 	ldw	r2,-8(fp)
   883a0:	10800104 	addi	r2,r2,4
   883a4:	1007883a 	mov	r3,r2
   883a8:	00800044 	movi	r2,1
   883ac:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); 
   883b0:	e0bffe17 	ldw	r2,-8(fp)
   883b4:	00c00044 	movi	r3,1
   883b8:	10c00035 	stwio	r3,0(r2)
}
   883bc:	0001883a 	nop
   883c0:	e037883a 	mov	sp,fp
   883c4:	df000017 	ldw	fp,0(sp)
   883c8:	dec00104 	addi	sp,sp,4
   883cc:	f800283a 	ret

000883d0 <I2C_Close>:

void I2C_Close(alt_u32 clk_base, alt_u32 data_base){
   883d0:	defffd04 	addi	sp,sp,-12
   883d4:	df000215 	stw	fp,8(sp)
   883d8:	df000204 	addi	fp,sp,8
   883dc:	e13ffe15 	stw	r4,-8(fp)
   883e0:	e17fff15 	stw	r5,-4(fp)
    SCL_DIR_IN(clk_base);
   883e4:	e0bffe17 	ldw	r2,-8(fp)
   883e8:	10800104 	addi	r2,r2,4
   883ec:	0007883a 	mov	r3,zero
   883f0:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_IN(data_base);
   883f4:	e0bfff17 	ldw	r2,-4(fp)
   883f8:	10800104 	addi	r2,r2,4
   883fc:	0007883a 	mov	r3,zero
   88400:	10c00035 	stwio	r3,0(r2)
}
   88404:	0001883a 	nop
   88408:	e037883a 	mov	sp,fp
   8840c:	df000017 	ldw	fp,0(sp)
   88410:	dec00104 	addi	sp,sp,4
   88414:	f800283a 	ret

00088418 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
   88418:	defff804 	addi	sp,sp,-32
   8841c:	dfc00715 	stw	ra,28(sp)
   88420:	df000615 	stw	fp,24(sp)
   88424:	df000604 	addi	fp,sp,24
   88428:	e13ffb15 	stw	r4,-20(fp)
   8842c:	e17ffc15 	stw	r5,-16(fp)
   88430:	3009883a 	mov	r4,r6
   88434:	3807883a 	mov	r3,r7
   88438:	e0800217 	ldw	r2,8(fp)
   8843c:	e13ffd05 	stb	r4,-12(fp)
   88440:	e0fffe05 	stb	r3,-8(fp)
   88444:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   88448:	00800044 	movi	r2,1
   8844c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   88450:	e17ffc17 	ldw	r5,-16(fp)
   88454:	e13ffb17 	ldw	r4,-20(fp)
   88458:	00887580 	call	88758 <i2c_start>
    DeviceAddr = DeviceAddr << 1;
   8845c:	e0bffd07 	ldb	r2,-12(fp)
   88460:	1085883a 	add	r2,r2,r2
   88464:	e0bffd05 	stb	r2,-12(fp)
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   88468:	e0bffd03 	ldbu	r2,-12(fp)
   8846c:	10803fcc 	andi	r2,r2,255
   88470:	100d883a 	mov	r6,r2
   88474:	e17ffc17 	ldw	r5,-16(fp)
   88478:	e13ffb17 	ldw	r4,-20(fp)
   8847c:	008885c0 	call	8885c <i2c_write>
   88480:	1000011e 	bne	r2,zero,88488 <I2C_Write+0x70>
        bSuccess = FALSE;
   88484:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   88488:	e0bffa17 	ldw	r2,-24(fp)
   8848c:	10000726 	beq	r2,zero,884ac <I2C_Write+0x94>
   88490:	e0bffe03 	ldbu	r2,-8(fp)
   88494:	100d883a 	mov	r6,r2
   88498:	e17ffc17 	ldw	r5,-16(fp)
   8849c:	e13ffb17 	ldw	r4,-20(fp)
   884a0:	008885c0 	call	8885c <i2c_write>
   884a4:	1000011e 	bne	r2,zero,884ac <I2C_Write+0x94>
        bSuccess = FALSE;
   884a8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
   884ac:	e0bffa17 	ldw	r2,-24(fp)
   884b0:	10000726 	beq	r2,zero,884d0 <I2C_Write+0xb8>
   884b4:	e0bfff03 	ldbu	r2,-4(fp)
   884b8:	100d883a 	mov	r6,r2
   884bc:	e17ffc17 	ldw	r5,-16(fp)
   884c0:	e13ffb17 	ldw	r4,-20(fp)
   884c4:	008885c0 	call	8885c <i2c_write>
   884c8:	1000011e 	bne	r2,zero,884d0 <I2C_Write+0xb8>
        bSuccess = FALSE;
   884cc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
   884d0:	e17ffc17 	ldw	r5,-16(fp)
   884d4:	e13ffb17 	ldw	r4,-20(fp)
   884d8:	00887e40 	call	887e4 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   884dc:	0106d604 	movi	r4,7000
   884e0:	00998c00 	call	998c0 <usleep>
    
    return bSuccess;
   884e4:	e0bffa17 	ldw	r2,-24(fp)

    
}
   884e8:	e037883a 	mov	sp,fp
   884ec:	dfc00117 	ldw	ra,4(sp)
   884f0:	df000017 	ldw	fp,0(sp)
   884f4:	dec00204 	addi	sp,sp,8
   884f8:	f800283a 	ret

000884fc <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
   884fc:	defff904 	addi	sp,sp,-28
   88500:	dfc00615 	stw	ra,24(sp)
   88504:	df000515 	stw	fp,20(sp)
   88508:	df000504 	addi	fp,sp,20
   8850c:	e13ffc15 	stw	r4,-16(fp)
   88510:	e17ffd15 	stw	r5,-12(fp)
   88514:	3007883a 	mov	r3,r6
   88518:	3805883a 	mov	r2,r7
   8851c:	e0fffe05 	stb	r3,-8(fp)
   88520:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   88524:	00800044 	movi	r2,1
   88528:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    i2c_start(clk_base, data_base);
   8852c:	e17ffd17 	ldw	r5,-12(fp)
   88530:	e13ffc17 	ldw	r4,-16(fp)
   88534:	00887580 	call	88758 <i2c_start>
   // alt_8 wr_data = (DeviceAddr << 1);
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   88538:	e0bffe03 	ldbu	r2,-8(fp)
   8853c:	10803fcc 	andi	r2,r2,255
   88540:	100d883a 	mov	r6,r2
   88544:	e17ffd17 	ldw	r5,-12(fp)
   88548:	e13ffc17 	ldw	r4,-16(fp)
   8854c:	008885c0 	call	8885c <i2c_write>
   88550:	1000041e 	bne	r2,zero,88564 <I2C_Read+0x68>
        bSuccess = FALSE;
   88554:	e03ffb15 	stw	zero,-20(fp)
        printf("Fail to NACK\n");
   88558:	010002b4 	movhi	r4,10
   8855c:	21311604 	addi	r4,r4,-15272
   88560:	00890dc0 	call	890dc <puts>
        I2C_DEBUG(("I2C Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   88564:	e0bffb17 	ldw	r2,-20(fp)
   88568:	10000726 	beq	r2,zero,88588 <I2C_Read+0x8c>
   8856c:	e0bfff03 	ldbu	r2,-4(fp)
   88570:	100d883a 	mov	r6,r2
   88574:	e17ffd17 	ldw	r5,-12(fp)
   88578:	e13ffc17 	ldw	r4,-16(fp)
   8857c:	008885c0 	call	8885c <i2c_write>
   88580:	1000011e 	bne	r2,zero,88588 <I2C_Read+0x8c>
        bSuccess = FALSE;
   88584:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
   88588:	e17ffd17 	ldw	r5,-12(fp)
   8858c:	e13ffc17 	ldw	r4,-16(fp)
   88590:	00887580 	call	88758 <i2c_start>
   DeviceAddr |= 1; // Read
   88594:	e0bffe03 	ldbu	r2,-8(fp)
   88598:	10800054 	ori	r2,r2,1
   8859c:	e0bffe05 	stb	r2,-8(fp)
    //DeviceAddr = (DeviceAddr << 1) | 0x01; // Read
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   885a0:	e0bffb17 	ldw	r2,-20(fp)
   885a4:	10000826 	beq	r2,zero,885c8 <I2C_Read+0xcc>
   885a8:	e0bffe03 	ldbu	r2,-8(fp)
   885ac:	10803fcc 	andi	r2,r2,255
   885b0:	100d883a 	mov	r6,r2
   885b4:	e17ffd17 	ldw	r5,-12(fp)
   885b8:	e13ffc17 	ldw	r4,-16(fp)
   885bc:	008885c0 	call	8885c <i2c_write>
   885c0:	1000011e 	bne	r2,zero,885c8 <I2C_Read+0xcc>
        bSuccess = FALSE;
   885c4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
   885c8:	e0bffb17 	ldw	r2,-20(fp)
   885cc:	10000526 	beq	r2,zero,885e4 <I2C_Read+0xe8>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   885d0:	000f883a 	mov	r7,zero
   885d4:	e1800217 	ldw	r6,8(fp)
   885d8:	e17ffd17 	ldw	r5,-12(fp)
   885dc:	e13ffc17 	ldw	r4,-16(fp)
   885e0:	008898c0 	call	8898c <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
   885e4:	e17ffd17 	ldw	r5,-12(fp)
   885e8:	e13ffc17 	ldw	r4,-16(fp)
   885ec:	00887e40 	call	887e4 <i2c_stop>
    
    return bSuccess;
   885f0:	e0bffb17 	ldw	r2,-20(fp)
}
   885f4:	e037883a 	mov	sp,fp
   885f8:	dfc00117 	ldw	ra,4(sp)
   885fc:	df000017 	ldw	fp,0(sp)
   88600:	dec00204 	addi	sp,sp,8
   88604:	f800283a 	ret

00088608 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_u8 DeviceAddr, alt_u8 RegAddr, alt_u8 szData[], alt_u16 len){
   88608:	defff704 	addi	sp,sp,-36
   8860c:	dfc00815 	stw	ra,32(sp)
   88610:	df000715 	stw	fp,28(sp)
   88614:	df000704 	addi	fp,sp,28
   88618:	e13ffb15 	stw	r4,-20(fp)
   8861c:	e17ffc15 	stw	r5,-16(fp)
   88620:	3009883a 	mov	r4,r6
   88624:	3807883a 	mov	r3,r7
   88628:	e0800317 	ldw	r2,12(fp)
   8862c:	e13ffd05 	stb	r4,-12(fp)
   88630:	e0fffe05 	stb	r3,-8(fp)
   88634:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
   88638:	00800044 	movi	r2,1
   8863c:	e0bffa15 	stw	r2,-24(fp)

    i2c_start(clk_base, data_base);
   88640:	e17ffc17 	ldw	r5,-16(fp)
   88644:	e13ffb17 	ldw	r4,-20(fp)
   88648:	00887580 	call	88758 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8864c:	e0bffd03 	ldbu	r2,-12(fp)
   88650:	100d883a 	mov	r6,r2
   88654:	e17ffc17 	ldw	r5,-16(fp)
   88658:	e13ffb17 	ldw	r4,-20(fp)
   8865c:	008885c0 	call	8885c <i2c_write>
   88660:	1000011e 	bne	r2,zero,88668 <I2C_MultipleRead+0x60>
        bSuccess = FALSE;
   88664:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, RegAddr)){ // send sub-address
   88668:	e0bffa17 	ldw	r2,-24(fp)
   8866c:	10000726 	beq	r2,zero,8868c <I2C_MultipleRead+0x84>
   88670:	e0bffe03 	ldbu	r2,-8(fp)
   88674:	100d883a 	mov	r6,r2
   88678:	e17ffc17 	ldw	r5,-16(fp)
   8867c:	e13ffb17 	ldw	r4,-20(fp)
   88680:	008885c0 	call	8885c <i2c_write>
   88684:	1000011e 	bne	r2,zero,8868c <I2C_MultipleRead+0x84>
        bSuccess = FALSE;
   88688:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
   8868c:	e0bffa17 	ldw	r2,-24(fp)
   88690:	10000326 	beq	r2,zero,886a0 <I2C_MultipleRead+0x98>
        i2c_start(clk_base, data_base);  // restart
   88694:	e17ffc17 	ldw	r5,-16(fp)
   88698:	e13ffb17 	ldw	r4,-20(fp)
   8869c:	00887580 	call	88758 <i2c_start>
    DeviceAddr |= 1; // Read
   886a0:	e0bffd03 	ldbu	r2,-12(fp)
   886a4:	10800054 	ori	r2,r2,1
   886a8:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   886ac:	e0bffa17 	ldw	r2,-24(fp)
   886b0:	10000726 	beq	r2,zero,886d0 <I2C_MultipleRead+0xc8>
   886b4:	e0bffd03 	ldbu	r2,-12(fp)
   886b8:	100d883a 	mov	r6,r2
   886bc:	e17ffc17 	ldw	r5,-16(fp)
   886c0:	e13ffb17 	ldw	r4,-20(fp)
   886c4:	008885c0 	call	8885c <i2c_write>
   886c8:	1000011e 	bne	r2,zero,886d0 <I2C_MultipleRead+0xc8>
        bSuccess = FALSE;
   886cc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
   886d0:	e0bffa17 	ldw	r2,-24(fp)
   886d4:	10001726 	beq	r2,zero,88734 <I2C_MultipleRead+0x12c>
        for(i=0;i<len && bSuccess;i++){
   886d8:	e03ff915 	stw	zero,-28(fp)
   886dc:	00001006 	br	88720 <I2C_MultipleRead+0x118>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   886e0:	e0bff917 	ldw	r2,-28(fp)
   886e4:	e0c00217 	ldw	r3,8(fp)
   886e8:	1889883a 	add	r4,r3,r2
   886ec:	e0bfff0b 	ldhu	r2,-4(fp)
   886f0:	10ffffc4 	addi	r3,r2,-1
   886f4:	e0bff917 	ldw	r2,-28(fp)
   886f8:	1884c03a 	cmpne	r2,r3,r2
   886fc:	10803fcc 	andi	r2,r2,255
   88700:	100f883a 	mov	r7,r2
   88704:	200d883a 	mov	r6,r4
   88708:	e17ffc17 	ldw	r5,-16(fp)
   8870c:	e13ffb17 	ldw	r4,-20(fp)
   88710:	008898c0 	call	8898c <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   88714:	e0bff917 	ldw	r2,-28(fp)
   88718:	10800044 	addi	r2,r2,1
   8871c:	e0bff915 	stw	r2,-28(fp)
   88720:	e0bfff0b 	ldhu	r2,-4(fp)
   88724:	e0fff917 	ldw	r3,-28(fp)
   88728:	1880020e 	bge	r3,r2,88734 <I2C_MultipleRead+0x12c>
   8872c:	e0bffa17 	ldw	r2,-24(fp)
   88730:	103feb1e 	bne	r2,zero,886e0 <__alt_data_end+0xfffb8820>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
   88734:	e17ffc17 	ldw	r5,-16(fp)
   88738:	e13ffb17 	ldw	r4,-20(fp)
   8873c:	00887e40 	call	887e4 <i2c_stop>
    
    return bSuccess;    
   88740:	e0bffa17 	ldw	r2,-24(fp)
    
}
   88744:	e037883a 	mov	sp,fp
   88748:	dfc00117 	ldw	ra,4(sp)
   8874c:	df000017 	ldw	fp,0(sp)
   88750:	dec00204 	addi	sp,sp,8
   88754:	f800283a 	ret

00088758 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
   88758:	defffc04 	addi	sp,sp,-16
   8875c:	dfc00315 	stw	ra,12(sp)
   88760:	df000215 	stw	fp,8(sp)
   88764:	df000204 	addi	fp,sp,8
   88768:	e13ffe15 	stw	r4,-8(fp)
   8876c:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
   88770:	e0bfff17 	ldw	r2,-4(fp)
   88774:	10800104 	addi	r2,r2,4
   88778:	1007883a 	mov	r3,r2
   8877c:	00800044 	movi	r2,1
   88780:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
   88784:	e0bfff17 	ldw	r2,-4(fp)
   88788:	00c00044 	movi	r3,1
   8878c:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
   88790:	e0bffe17 	ldw	r2,-8(fp)
   88794:	00c00044 	movi	r3,1
   88798:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   8879c:	01000284 	movi	r4,10
   887a0:	00998c00 	call	998c0 <usleep>
     
    SDA_LOW(data_base); // data low
   887a4:	e0bfff17 	ldw	r2,-4(fp)
   887a8:	0007883a 	mov	r3,zero
   887ac:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
   887b0:	01000284 	movi	r4,10
   887b4:	00998c00 	call	998c0 <usleep>
    SCL_LOW(clk_base); // clock low
   887b8:	e0bffe17 	ldw	r2,-8(fp)
   887bc:	0007883a 	mov	r3,zero
   887c0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   887c4:	01000284 	movi	r4,10
   887c8:	00998c00 	call	998c0 <usleep>
}
   887cc:	0001883a 	nop
   887d0:	e037883a 	mov	sp,fp
   887d4:	dfc00117 	ldw	ra,4(sp)
   887d8:	df000017 	ldw	fp,0(sp)
   887dc:	dec00204 	addi	sp,sp,8
   887e0:	f800283a 	ret

000887e4 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
   887e4:	defffc04 	addi	sp,sp,-16
   887e8:	dfc00315 	stw	ra,12(sp)
   887ec:	df000215 	stw	fp,8(sp)
   887f0:	df000204 	addi	fp,sp,8
   887f4:	e13ffe15 	stw	r4,-8(fp)
   887f8:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
   887fc:	e0bfff17 	ldw	r2,-4(fp)
   88800:	10800104 	addi	r2,r2,4
   88804:	1007883a 	mov	r3,r2
   88808:	00800044 	movi	r2,1
   8880c:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
   88810:	e0bfff17 	ldw	r2,-4(fp)
   88814:	0007883a 	mov	r3,zero
   88818:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
   8881c:	e0bffe17 	ldw	r2,-8(fp)
   88820:	00c00044 	movi	r3,1
   88824:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
   88828:	01000284 	movi	r4,10
   8882c:	00998c00 	call	998c0 <usleep>
    SDA_HIGH(data_base); // data high
   88830:	e0bfff17 	ldw	r2,-4(fp)
   88834:	00c00044 	movi	r3,1
   88838:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
   8883c:	01000284 	movi	r4,10
   88840:	00998c00 	call	998c0 <usleep>
    

    
}
   88844:	0001883a 	nop
   88848:	e037883a 	mov	sp,fp
   8884c:	dfc00117 	ldw	ra,4(sp)
   88850:	df000017 	ldw	fp,0(sp)
   88854:	dec00204 	addi	sp,sp,8
   88858:	f800283a 	ret

0008885c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
   8885c:	defff804 	addi	sp,sp,-32
   88860:	dfc00715 	stw	ra,28(sp)
   88864:	df000615 	stw	fp,24(sp)
   88868:	df000604 	addi	fp,sp,24
   8886c:	e13ffd15 	stw	r4,-12(fp)
   88870:	e17ffe15 	stw	r5,-8(fp)
   88874:	3005883a 	mov	r2,r6
   88878:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
   8887c:	00bfe004 	movi	r2,-128
   88880:	e0bffa05 	stb	r2,-24(fp)
    // Chunije add
    //alt_u8 wr_data = (Data << 1) | 0x00;
   // printf("Wr_data is %x.\n", wr_data);
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
   88884:	e0bffe17 	ldw	r2,-8(fp)
   88888:	10800104 	addi	r2,r2,4
   8888c:	1007883a 	mov	r3,r2
   88890:	00800044 	movi	r2,1
   88894:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
   88898:	e03ffb15 	stw	zero,-20(fp)
   8889c:	00001f06 	br	8891c <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
   888a0:	e0bffd17 	ldw	r2,-12(fp)
   888a4:	0007883a 	mov	r3,zero
   888a8:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
   888ac:	e0ffff03 	ldbu	r3,-4(fp)
   888b0:	e0bffa03 	ldbu	r2,-24(fp)
   888b4:	1884703a 	and	r2,r3,r2
   888b8:	10803fcc 	andi	r2,r2,255
   888bc:	10000426 	beq	r2,zero,888d0 <i2c_write+0x74>
            SDA_HIGH(data_base);
   888c0:	e0bffe17 	ldw	r2,-8(fp)
   888c4:	00c00044 	movi	r3,1
   888c8:	10c00035 	stwio	r3,0(r2)
   888cc:	00000306 	br	888dc <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
   888d0:	e0bffe17 	ldw	r2,-8(fp)
   888d4:	0007883a 	mov	r3,zero
   888d8:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
   888dc:	e0bffa03 	ldbu	r2,-24(fp)
   888e0:	1004d07a 	srli	r2,r2,1
   888e4:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
   888e8:	e0bffd17 	ldw	r2,-12(fp)
   888ec:	00c00044 	movi	r3,1
   888f0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   888f4:	01000284 	movi	r4,10
   888f8:	00998c00 	call	998c0 <usleep>
        SCL_LOW(clk_base);
   888fc:	e0bffd17 	ldw	r2,-12(fp)
   88900:	0007883a 	mov	r3,zero
   88904:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   88908:	01000284 	movi	r4,10
   8890c:	00998c00 	call	998c0 <usleep>
   // printf("Wr_data is %x.\n", wr_data);
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
   88910:	e0bffb17 	ldw	r2,-20(fp)
   88914:	10800044 	addi	r2,r2,1
   88918:	e0bffb15 	stw	r2,-20(fp)
   8891c:	e0bffb17 	ldw	r2,-20(fp)
   88920:	10800210 	cmplti	r2,r2,8
   88924:	103fde1e 	bne	r2,zero,888a0 <__alt_data_end+0xfffb89e0>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
   88928:	e0bffe17 	ldw	r2,-8(fp)
   8892c:	10800104 	addi	r2,r2,4
   88930:	0007883a 	mov	r3,zero
   88934:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
   88938:	e0bffd17 	ldw	r2,-12(fp)
   8893c:	00c00044 	movi	r3,1
   88940:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
   88944:	01000284 	movi	r4,10
   88948:	00998c00 	call	998c0 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
   8894c:	e0bffe17 	ldw	r2,-8(fp)
   88950:	10800037 	ldwio	r2,0(r2)
   88954:	1005003a 	cmpeq	r2,r2,zero
   88958:	10803fcc 	andi	r2,r2,255
   8895c:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
   88960:	e0bffd17 	ldw	r2,-12(fp)
   88964:	0007883a 	mov	r3,zero
   88968:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   8896c:	01000284 	movi	r4,10
   88970:	00998c00 	call	998c0 <usleep>
    return bAck;
   88974:	e0bffc17 	ldw	r2,-16(fp)
}    
   88978:	e037883a 	mov	sp,fp
   8897c:	dfc00117 	ldw	ra,4(sp)
   88980:	df000017 	ldw	fp,0(sp)
   88984:	dec00204 	addi	sp,sp,8
   88988:	f800283a 	ret

0008898c <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
   8898c:	defff704 	addi	sp,sp,-36
   88990:	dfc00815 	stw	ra,32(sp)
   88994:	df000715 	stw	fp,28(sp)
   88998:	df000704 	addi	fp,sp,28
   8899c:	e13ffc15 	stw	r4,-16(fp)
   889a0:	e17ffd15 	stw	r5,-12(fp)
   889a4:	e1bffe15 	stw	r6,-8(fp)
   889a8:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
   889ac:	e03ff905 	stb	zero,-28(fp)
    int i;
    
    // assume SCL = low
    // Chunije add
    alt_u8 wr_data = (Data << 1) | 0x01;
   889b0:	e0bff903 	ldbu	r2,-28(fp)
   889b4:	1085883a 	add	r2,r2,r2
   889b8:	10800054 	ori	r2,r2,1
   889bc:	e0bffb05 	stb	r2,-20(fp)
    
    SDA_DIR_IN(data_base);  // set data read mode
   889c0:	e0bffd17 	ldw	r2,-12(fp)
   889c4:	10800104 	addi	r2,r2,4
   889c8:	0007883a 	mov	r3,zero
   889cc:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
   889d0:	e0bffc17 	ldw	r2,-16(fp)
   889d4:	0007883a 	mov	r3,zero
   889d8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   889dc:	01000284 	movi	r4,10
   889e0:	00998c00 	call	998c0 <usleep>

    for(i=0;i<8;i++){
   889e4:	e03ffa15 	stw	zero,-24(fp)
   889e8:	00001606 	br	88a44 <i2c_read+0xb8>
        Data <<= 1;
   889ec:	e0bff903 	ldbu	r2,-28(fp)
   889f0:	1085883a 	add	r2,r2,r2
   889f4:	e0bff905 	stb	r2,-28(fp)
        SCL_HIGH(clk_base);  // clock high
   889f8:	e0bffc17 	ldw	r2,-16(fp)
   889fc:	00c00044 	movi	r3,1
   88a00:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   88a04:	01000284 	movi	r4,10
   88a08:	00998c00 	call	998c0 <usleep>
        if (SDA_READ(data_base))  // read data   
   88a0c:	e0bffd17 	ldw	r2,-12(fp)
   88a10:	10800037 	ldwio	r2,0(r2)
   88a14:	10000326 	beq	r2,zero,88a24 <i2c_read+0x98>
            Data |= 0x01;
   88a18:	e0bff903 	ldbu	r2,-28(fp)
   88a1c:	10800054 	ori	r2,r2,1
   88a20:	e0bff905 	stb	r2,-28(fp)
        SCL_LOW(clk_base);  // clock log  
   88a24:	e0bffc17 	ldw	r2,-16(fp)
   88a28:	0007883a 	mov	r3,zero
   88a2c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   88a30:	01000284 	movi	r4,10
   88a34:	00998c00 	call	998c0 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
   88a38:	e0bffa17 	ldw	r2,-24(fp)
   88a3c:	10800044 	addi	r2,r2,1
   88a40:	e0bffa15 	stw	r2,-24(fp)
   88a44:	e0bffa17 	ldw	r2,-24(fp)
   88a48:	10800210 	cmplti	r2,r2,8
   88a4c:	103fe71e 	bne	r2,zero,889ec <__alt_data_end+0xfffb8b2c>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
   88a50:	e0bffc17 	ldw	r2,-16(fp)
   88a54:	0007883a 	mov	r3,zero
   88a58:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
   88a5c:	e0bffd17 	ldw	r2,-12(fp)
   88a60:	10800104 	addi	r2,r2,4
   88a64:	1007883a 	mov	r3,r2
   88a68:	00800044 	movi	r2,1
   88a6c:	18800035 	stwio	r2,0(r3)
    if (bAck)
   88a70:	e0bfff17 	ldw	r2,-4(fp)
   88a74:	10000426 	beq	r2,zero,88a88 <i2c_read+0xfc>
        SDA_LOW(data_base);
   88a78:	e0bffd17 	ldw	r2,-12(fp)
   88a7c:	0007883a 	mov	r3,zero
   88a80:	10c00035 	stwio	r3,0(r2)
   88a84:	00000306 	br	88a94 <i2c_read+0x108>
    else
        SDA_HIGH(data_base);
   88a88:	e0bffd17 	ldw	r2,-12(fp)
   88a8c:	00c00044 	movi	r3,1
   88a90:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
   88a94:	e0bffc17 	ldw	r2,-16(fp)
   88a98:	00c00044 	movi	r3,1
   88a9c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
   88aa0:	01000284 	movi	r4,10
   88aa4:	00998c00 	call	998c0 <usleep>
    SCL_LOW(clk_base); // clock low
   88aa8:	e0bffc17 	ldw	r2,-16(fp)
   88aac:	0007883a 	mov	r3,zero
   88ab0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   88ab4:	01000284 	movi	r4,10
   88ab8:	00998c00 	call	998c0 <usleep>
    SDA_LOW(data_base);  // data low
   88abc:	e0bffd17 	ldw	r2,-12(fp)
   88ac0:	0007883a 	mov	r3,zero
   88ac4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
   88ac8:	01000284 	movi	r4,10
   88acc:	00998c00 	call	998c0 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
   88ad0:	e0bffe17 	ldw	r2,-8(fp)
   88ad4:	e0fff903 	ldbu	r3,-28(fp)
   88ad8:	10c00005 	stb	r3,0(r2)
}
   88adc:	0001883a 	nop
   88ae0:	e037883a 	mov	sp,fp
   88ae4:	dfc00117 	ldw	ra,4(sp)
   88ae8:	df000017 	ldw	fp,0(sp)
   88aec:	dec00204 	addi	sp,sp,8
   88af0:	f800283a 	ret

00088af4 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
   88af4:	defffd04 	addi	sp,sp,-12
   88af8:	dfc00215 	stw	ra,8(sp)
   88afc:	df000115 	stw	fp,4(sp)
   88b00:	df000104 	addi	fp,sp,4
   88b04:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
   88b08:	e13fff17 	ldw	r4,-4(fp)
   88b0c:	0088fc00 	call	88fc0 <printf>
}
   88b10:	0001883a 	nop
   88b14:	e037883a 	mov	sp,fp
   88b18:	dfc00117 	ldw	ra,4(sp)
   88b1c:	df000017 	ldw	fp,0(sp)
   88b20:	dec00204 	addi	sp,sp,8
   88b24:	f800283a 	ret

00088b28 <myprintf>:





int myprintf(char *format, ...){
   88b28:	deff7804 	addi	sp,sp,-544
   88b2c:	dfc08415 	stw	ra,528(sp)
   88b30:	df008315 	stw	fp,524(sp)
   88b34:	df008304 	addi	fp,sp,524
   88b38:	e13fff15 	stw	r4,-4(fp)
   88b3c:	e1400215 	stw	r5,8(fp)
   88b40:	e1800315 	stw	r6,12(fp)
   88b44:	e1c00415 	stw	r7,16(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
   88b48:	e0800204 	addi	r2,fp,8
   88b4c:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
   88b50:	e0fffe17 	ldw	r3,-8(fp)
   88b54:	e0bf7e04 	addi	r2,fp,-520
   88b58:	180f883a 	mov	r7,r3
   88b5c:	e1bfff17 	ldw	r6,-4(fp)
   88b60:	01408004 	movi	r5,512
   88b64:	1009883a 	mov	r4,r2
   88b68:	008d7e80 	call	8d7e8 <vsnprintf>
   88b6c:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
   88b70:	e0bf7e04 	addi	r2,fp,-520
   88b74:	1009883a 	mov	r4,r2
   88b78:	0088af40 	call	88af4 <debug_output>

    return rc;    
   88b7c:	e0bf7d17 	ldw	r2,-524(fp)
}
   88b80:	e037883a 	mov	sp,fp
   88b84:	dfc00117 	ldw	ra,4(sp)
   88b88:	df000017 	ldw	fp,0(sp)
   88b8c:	dec00504 	addi	sp,sp,20
   88b90:	f800283a 	ret

00088b94 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
   88b94:	defff704 	addi	sp,sp,-36
   88b98:	dfc00815 	stw	ra,32(sp)
   88b9c:	df000715 	stw	fp,28(sp)
   88ba0:	df000704 	addi	fp,sp,28
   88ba4:	e13ffe15 	stw	r4,-8(fp)
   88ba8:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   88bac:	e03ff915 	stw	zero,-28(fp)
   88bb0:	00000e06 	br	88bec <myprintf_hexarray+0x58>
        sprintf(szText, "[%02X]", *(pHex+i));
   88bb4:	e0bff917 	ldw	r2,-28(fp)
   88bb8:	e0fffe17 	ldw	r3,-8(fp)
   88bbc:	1885883a 	add	r2,r3,r2
   88bc0:	10800003 	ldbu	r2,0(r2)
   88bc4:	10c03fcc 	andi	r3,r2,255
   88bc8:	e0bffa04 	addi	r2,fp,-24
   88bcc:	180d883a 	mov	r6,r3
   88bd0:	014002b4 	movhi	r5,10
   88bd4:	29711a04 	addi	r5,r5,-15256
   88bd8:	1009883a 	mov	r4,r2
   88bdc:	00891480 	call	89148 <sprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   88be0:	e0bff917 	ldw	r2,-28(fp)
   88be4:	10800044 	addi	r2,r2,1
   88be8:	e0bff915 	stw	r2,-28(fp)
   88bec:	e0fff917 	ldw	r3,-28(fp)
   88bf0:	e0bfff17 	ldw	r2,-4(fp)
   88bf4:	18bfef16 	blt	r3,r2,88bb4 <__alt_data_end+0xfffb8cf4>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
   88bf8:	e0bfff17 	ldw	r2,-4(fp)
}
   88bfc:	e037883a 	mov	sp,fp
   88c00:	dfc00117 	ldw	ra,4(sp)
   88c04:	df000017 	ldw	fp,0(sp)
   88c08:	dec00204 	addi	sp,sp,8
   88c0c:	f800283a 	ret

00088c10 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
   88c10:	defff704 	addi	sp,sp,-36
   88c14:	dfc00815 	stw	ra,32(sp)
   88c18:	df000715 	stw	fp,28(sp)
   88c1c:	df000704 	addi	fp,sp,28
   88c20:	e13ffe15 	stw	r4,-8(fp)
   88c24:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   88c28:	e03ff915 	stw	zero,-28(fp)
   88c2c:	00001006 	br	88c70 <myprintf_dwordarray+0x60>
        sprintf(szText, "[%08X]", *(pArray+i));
   88c30:	e0bff917 	ldw	r2,-28(fp)
   88c34:	1085883a 	add	r2,r2,r2
   88c38:	1085883a 	add	r2,r2,r2
   88c3c:	1007883a 	mov	r3,r2
   88c40:	e0bffe17 	ldw	r2,-8(fp)
   88c44:	10c5883a 	add	r2,r2,r3
   88c48:	10c00017 	ldw	r3,0(r2)
   88c4c:	e0bffa04 	addi	r2,fp,-24
   88c50:	180d883a 	mov	r6,r3
   88c54:	014002b4 	movhi	r5,10
   88c58:	29711c04 	addi	r5,r5,-15248
   88c5c:	1009883a 	mov	r4,r2
   88c60:	00891480 	call	89148 <sprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   88c64:	e0bff917 	ldw	r2,-28(fp)
   88c68:	10800044 	addi	r2,r2,1
   88c6c:	e0bff915 	stw	r2,-28(fp)
   88c70:	e0fff917 	ldw	r3,-28(fp)
   88c74:	e0bfff17 	ldw	r2,-4(fp)
   88c78:	18bfed16 	blt	r3,r2,88c30 <__alt_data_end+0xfffb8d70>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
   88c7c:	e0bfff17 	ldw	r2,-4(fp)
}
   88c80:	e037883a 	mov	sp,fp
   88c84:	dfc00117 	ldw	ra,4(sp)
   88c88:	df000017 	ldw	fp,0(sp)
   88c8c:	dec00204 	addi	sp,sp,8
   88c90:	f800283a 	ret

00088c94 <__divsi3>:
   88c94:	20001b16 	blt	r4,zero,88d04 <__divsi3+0x70>
   88c98:	000f883a 	mov	r7,zero
   88c9c:	28001616 	blt	r5,zero,88cf8 <__divsi3+0x64>
   88ca0:	200d883a 	mov	r6,r4
   88ca4:	29001a2e 	bgeu	r5,r4,88d10 <__divsi3+0x7c>
   88ca8:	00800804 	movi	r2,32
   88cac:	00c00044 	movi	r3,1
   88cb0:	00000106 	br	88cb8 <__divsi3+0x24>
   88cb4:	10000d26 	beq	r2,zero,88cec <__divsi3+0x58>
   88cb8:	294b883a 	add	r5,r5,r5
   88cbc:	10bfffc4 	addi	r2,r2,-1
   88cc0:	18c7883a 	add	r3,r3,r3
   88cc4:	293ffb36 	bltu	r5,r4,88cb4 <__alt_data_end+0xfffb8df4>
   88cc8:	0005883a 	mov	r2,zero
   88ccc:	18000726 	beq	r3,zero,88cec <__divsi3+0x58>
   88cd0:	0005883a 	mov	r2,zero
   88cd4:	31400236 	bltu	r6,r5,88ce0 <__divsi3+0x4c>
   88cd8:	314dc83a 	sub	r6,r6,r5
   88cdc:	10c4b03a 	or	r2,r2,r3
   88ce0:	1806d07a 	srli	r3,r3,1
   88ce4:	280ad07a 	srli	r5,r5,1
   88ce8:	183ffa1e 	bne	r3,zero,88cd4 <__alt_data_end+0xfffb8e14>
   88cec:	38000126 	beq	r7,zero,88cf4 <__divsi3+0x60>
   88cf0:	0085c83a 	sub	r2,zero,r2
   88cf4:	f800283a 	ret
   88cf8:	014bc83a 	sub	r5,zero,r5
   88cfc:	39c0005c 	xori	r7,r7,1
   88d00:	003fe706 	br	88ca0 <__alt_data_end+0xfffb8de0>
   88d04:	0109c83a 	sub	r4,zero,r4
   88d08:	01c00044 	movi	r7,1
   88d0c:	003fe306 	br	88c9c <__alt_data_end+0xfffb8ddc>
   88d10:	00c00044 	movi	r3,1
   88d14:	003fee06 	br	88cd0 <__alt_data_end+0xfffb8e10>

00088d18 <__modsi3>:
   88d18:	20001716 	blt	r4,zero,88d78 <__modsi3+0x60>
   88d1c:	000f883a 	mov	r7,zero
   88d20:	2005883a 	mov	r2,r4
   88d24:	28001216 	blt	r5,zero,88d70 <__modsi3+0x58>
   88d28:	2900162e 	bgeu	r5,r4,88d84 <__modsi3+0x6c>
   88d2c:	01800804 	movi	r6,32
   88d30:	00c00044 	movi	r3,1
   88d34:	00000106 	br	88d3c <__modsi3+0x24>
   88d38:	30000a26 	beq	r6,zero,88d64 <__modsi3+0x4c>
   88d3c:	294b883a 	add	r5,r5,r5
   88d40:	31bfffc4 	addi	r6,r6,-1
   88d44:	18c7883a 	add	r3,r3,r3
   88d48:	293ffb36 	bltu	r5,r4,88d38 <__alt_data_end+0xfffb8e78>
   88d4c:	18000526 	beq	r3,zero,88d64 <__modsi3+0x4c>
   88d50:	1806d07a 	srli	r3,r3,1
   88d54:	11400136 	bltu	r2,r5,88d5c <__modsi3+0x44>
   88d58:	1145c83a 	sub	r2,r2,r5
   88d5c:	280ad07a 	srli	r5,r5,1
   88d60:	183ffb1e 	bne	r3,zero,88d50 <__alt_data_end+0xfffb8e90>
   88d64:	38000126 	beq	r7,zero,88d6c <__modsi3+0x54>
   88d68:	0085c83a 	sub	r2,zero,r2
   88d6c:	f800283a 	ret
   88d70:	014bc83a 	sub	r5,zero,r5
   88d74:	003fec06 	br	88d28 <__alt_data_end+0xfffb8e68>
   88d78:	0109c83a 	sub	r4,zero,r4
   88d7c:	01c00044 	movi	r7,1
   88d80:	003fe706 	br	88d20 <__alt_data_end+0xfffb8e60>
   88d84:	00c00044 	movi	r3,1
   88d88:	003ff106 	br	88d50 <__alt_data_end+0xfffb8e90>

00088d8c <__udivsi3>:
   88d8c:	200d883a 	mov	r6,r4
   88d90:	2900152e 	bgeu	r5,r4,88de8 <__udivsi3+0x5c>
   88d94:	28001416 	blt	r5,zero,88de8 <__udivsi3+0x5c>
   88d98:	00800804 	movi	r2,32
   88d9c:	00c00044 	movi	r3,1
   88da0:	00000206 	br	88dac <__udivsi3+0x20>
   88da4:	10000e26 	beq	r2,zero,88de0 <__udivsi3+0x54>
   88da8:	28000516 	blt	r5,zero,88dc0 <__udivsi3+0x34>
   88dac:	294b883a 	add	r5,r5,r5
   88db0:	10bfffc4 	addi	r2,r2,-1
   88db4:	18c7883a 	add	r3,r3,r3
   88db8:	293ffa36 	bltu	r5,r4,88da4 <__alt_data_end+0xfffb8ee4>
   88dbc:	18000826 	beq	r3,zero,88de0 <__udivsi3+0x54>
   88dc0:	0005883a 	mov	r2,zero
   88dc4:	31400236 	bltu	r6,r5,88dd0 <__udivsi3+0x44>
   88dc8:	314dc83a 	sub	r6,r6,r5
   88dcc:	10c4b03a 	or	r2,r2,r3
   88dd0:	1806d07a 	srli	r3,r3,1
   88dd4:	280ad07a 	srli	r5,r5,1
   88dd8:	183ffa1e 	bne	r3,zero,88dc4 <__alt_data_end+0xfffb8f04>
   88ddc:	f800283a 	ret
   88de0:	0005883a 	mov	r2,zero
   88de4:	f800283a 	ret
   88de8:	00c00044 	movi	r3,1
   88dec:	003ff406 	br	88dc0 <__alt_data_end+0xfffb8f00>

00088df0 <__umodsi3>:
   88df0:	2005883a 	mov	r2,r4
   88df4:	2900122e 	bgeu	r5,r4,88e40 <__umodsi3+0x50>
   88df8:	28001116 	blt	r5,zero,88e40 <__umodsi3+0x50>
   88dfc:	01800804 	movi	r6,32
   88e00:	00c00044 	movi	r3,1
   88e04:	00000206 	br	88e10 <__umodsi3+0x20>
   88e08:	30000c26 	beq	r6,zero,88e3c <__umodsi3+0x4c>
   88e0c:	28000516 	blt	r5,zero,88e24 <__umodsi3+0x34>
   88e10:	294b883a 	add	r5,r5,r5
   88e14:	31bfffc4 	addi	r6,r6,-1
   88e18:	18c7883a 	add	r3,r3,r3
   88e1c:	293ffa36 	bltu	r5,r4,88e08 <__alt_data_end+0xfffb8f48>
   88e20:	18000626 	beq	r3,zero,88e3c <__umodsi3+0x4c>
   88e24:	1806d07a 	srli	r3,r3,1
   88e28:	11400136 	bltu	r2,r5,88e30 <__umodsi3+0x40>
   88e2c:	1145c83a 	sub	r2,r2,r5
   88e30:	280ad07a 	srli	r5,r5,1
   88e34:	183ffb1e 	bne	r3,zero,88e24 <__alt_data_end+0xfffb8f64>
   88e38:	f800283a 	ret
   88e3c:	f800283a 	ret
   88e40:	00c00044 	movi	r3,1
   88e44:	003ff706 	br	88e24 <__alt_data_end+0xfffb8f64>

00088e48 <memcpy>:
   88e48:	defffd04 	addi	sp,sp,-12
   88e4c:	dfc00215 	stw	ra,8(sp)
   88e50:	dc400115 	stw	r17,4(sp)
   88e54:	dc000015 	stw	r16,0(sp)
   88e58:	00c003c4 	movi	r3,15
   88e5c:	2005883a 	mov	r2,r4
   88e60:	1980452e 	bgeu	r3,r6,88f78 <memcpy+0x130>
   88e64:	2906b03a 	or	r3,r5,r4
   88e68:	18c000cc 	andi	r3,r3,3
   88e6c:	1800441e 	bne	r3,zero,88f80 <memcpy+0x138>
   88e70:	347ffc04 	addi	r17,r6,-16
   88e74:	8822d13a 	srli	r17,r17,4
   88e78:	28c00104 	addi	r3,r5,4
   88e7c:	23400104 	addi	r13,r4,4
   88e80:	8820913a 	slli	r16,r17,4
   88e84:	2b000204 	addi	r12,r5,8
   88e88:	22c00204 	addi	r11,r4,8
   88e8c:	84000504 	addi	r16,r16,20
   88e90:	2a800304 	addi	r10,r5,12
   88e94:	22400304 	addi	r9,r4,12
   88e98:	2c21883a 	add	r16,r5,r16
   88e9c:	2811883a 	mov	r8,r5
   88ea0:	200f883a 	mov	r7,r4
   88ea4:	41000017 	ldw	r4,0(r8)
   88ea8:	1fc00017 	ldw	ra,0(r3)
   88eac:	63c00017 	ldw	r15,0(r12)
   88eb0:	39000015 	stw	r4,0(r7)
   88eb4:	53800017 	ldw	r14,0(r10)
   88eb8:	6fc00015 	stw	ra,0(r13)
   88ebc:	5bc00015 	stw	r15,0(r11)
   88ec0:	4b800015 	stw	r14,0(r9)
   88ec4:	18c00404 	addi	r3,r3,16
   88ec8:	39c00404 	addi	r7,r7,16
   88ecc:	42000404 	addi	r8,r8,16
   88ed0:	6b400404 	addi	r13,r13,16
   88ed4:	63000404 	addi	r12,r12,16
   88ed8:	5ac00404 	addi	r11,r11,16
   88edc:	52800404 	addi	r10,r10,16
   88ee0:	4a400404 	addi	r9,r9,16
   88ee4:	1c3fef1e 	bne	r3,r16,88ea4 <__alt_data_end+0xfffb8fe4>
   88ee8:	89c00044 	addi	r7,r17,1
   88eec:	380e913a 	slli	r7,r7,4
   88ef0:	310003cc 	andi	r4,r6,15
   88ef4:	02c000c4 	movi	r11,3
   88ef8:	11c7883a 	add	r3,r2,r7
   88efc:	29cb883a 	add	r5,r5,r7
   88f00:	5900212e 	bgeu	r11,r4,88f88 <memcpy+0x140>
   88f04:	1813883a 	mov	r9,r3
   88f08:	2811883a 	mov	r8,r5
   88f0c:	200f883a 	mov	r7,r4
   88f10:	42800017 	ldw	r10,0(r8)
   88f14:	4a400104 	addi	r9,r9,4
   88f18:	39ffff04 	addi	r7,r7,-4
   88f1c:	4abfff15 	stw	r10,-4(r9)
   88f20:	42000104 	addi	r8,r8,4
   88f24:	59fffa36 	bltu	r11,r7,88f10 <__alt_data_end+0xfffb9050>
   88f28:	213fff04 	addi	r4,r4,-4
   88f2c:	2008d0ba 	srli	r4,r4,2
   88f30:	318000cc 	andi	r6,r6,3
   88f34:	21000044 	addi	r4,r4,1
   88f38:	2109883a 	add	r4,r4,r4
   88f3c:	2109883a 	add	r4,r4,r4
   88f40:	1907883a 	add	r3,r3,r4
   88f44:	290b883a 	add	r5,r5,r4
   88f48:	30000626 	beq	r6,zero,88f64 <memcpy+0x11c>
   88f4c:	198d883a 	add	r6,r3,r6
   88f50:	29c00003 	ldbu	r7,0(r5)
   88f54:	18c00044 	addi	r3,r3,1
   88f58:	29400044 	addi	r5,r5,1
   88f5c:	19ffffc5 	stb	r7,-1(r3)
   88f60:	19bffb1e 	bne	r3,r6,88f50 <__alt_data_end+0xfffb9090>
   88f64:	dfc00217 	ldw	ra,8(sp)
   88f68:	dc400117 	ldw	r17,4(sp)
   88f6c:	dc000017 	ldw	r16,0(sp)
   88f70:	dec00304 	addi	sp,sp,12
   88f74:	f800283a 	ret
   88f78:	2007883a 	mov	r3,r4
   88f7c:	003ff206 	br	88f48 <__alt_data_end+0xfffb9088>
   88f80:	2007883a 	mov	r3,r4
   88f84:	003ff106 	br	88f4c <__alt_data_end+0xfffb908c>
   88f88:	200d883a 	mov	r6,r4
   88f8c:	003fee06 	br	88f48 <__alt_data_end+0xfffb9088>

00088f90 <_printf_r>:
   88f90:	defffd04 	addi	sp,sp,-12
   88f94:	2805883a 	mov	r2,r5
   88f98:	dfc00015 	stw	ra,0(sp)
   88f9c:	d9800115 	stw	r6,4(sp)
   88fa0:	d9c00215 	stw	r7,8(sp)
   88fa4:	21400217 	ldw	r5,8(r4)
   88fa8:	d9c00104 	addi	r7,sp,4
   88fac:	100d883a 	mov	r6,r2
   88fb0:	008b4240 	call	8b424 <___vfprintf_internal_r>
   88fb4:	dfc00017 	ldw	ra,0(sp)
   88fb8:	dec00304 	addi	sp,sp,12
   88fbc:	f800283a 	ret

00088fc0 <printf>:
   88fc0:	defffc04 	addi	sp,sp,-16
   88fc4:	dfc00015 	stw	ra,0(sp)
   88fc8:	d9400115 	stw	r5,4(sp)
   88fcc:	d9800215 	stw	r6,8(sp)
   88fd0:	d9c00315 	stw	r7,12(sp)
   88fd4:	008002b4 	movhi	r2,10
   88fd8:	10bb5c04 	addi	r2,r2,-4752
   88fdc:	10800017 	ldw	r2,0(r2)
   88fe0:	200b883a 	mov	r5,r4
   88fe4:	d9800104 	addi	r6,sp,4
   88fe8:	11000217 	ldw	r4,8(r2)
   88fec:	008d61c0 	call	8d61c <__vfprintf_internal>
   88ff0:	dfc00017 	ldw	ra,0(sp)
   88ff4:	dec00404 	addi	sp,sp,16
   88ff8:	f800283a 	ret

00088ffc <_putchar_r>:
   88ffc:	21800217 	ldw	r6,8(r4)
   89000:	00920c01 	jmpi	920c0 <_putc_r>

00089004 <putchar>:
   89004:	008002b4 	movhi	r2,10
   89008:	10bb5c04 	addi	r2,r2,-4752
   8900c:	200b883a 	mov	r5,r4
   89010:	11000017 	ldw	r4,0(r2)
   89014:	21800217 	ldw	r6,8(r4)
   89018:	00920c01 	jmpi	920c0 <_putc_r>

0008901c <_puts_r>:
   8901c:	defff604 	addi	sp,sp,-40
   89020:	dc000715 	stw	r16,28(sp)
   89024:	2021883a 	mov	r16,r4
   89028:	2809883a 	mov	r4,r5
   8902c:	dc400815 	stw	r17,32(sp)
   89030:	dfc00915 	stw	ra,36(sp)
   89034:	2823883a 	mov	r17,r5
   89038:	00891b40 	call	891b4 <strlen>
   8903c:	10c00044 	addi	r3,r2,1
   89040:	d8800115 	stw	r2,4(sp)
   89044:	008002b4 	movhi	r2,10
   89048:	10b11f04 	addi	r2,r2,-15236
   8904c:	d8800215 	stw	r2,8(sp)
   89050:	00800044 	movi	r2,1
   89054:	d8800315 	stw	r2,12(sp)
   89058:	00800084 	movi	r2,2
   8905c:	dc400015 	stw	r17,0(sp)
   89060:	d8c00615 	stw	r3,24(sp)
   89064:	dec00415 	stw	sp,16(sp)
   89068:	d8800515 	stw	r2,20(sp)
   8906c:	80000226 	beq	r16,zero,89078 <_puts_r+0x5c>
   89070:	80800e17 	ldw	r2,56(r16)
   89074:	10001426 	beq	r2,zero,890c8 <_puts_r+0xac>
   89078:	81400217 	ldw	r5,8(r16)
   8907c:	2880030b 	ldhu	r2,12(r5)
   89080:	10c8000c 	andi	r3,r2,8192
   89084:	1800061e 	bne	r3,zero,890a0 <_puts_r+0x84>
   89088:	29001917 	ldw	r4,100(r5)
   8908c:	00f7ffc4 	movi	r3,-8193
   89090:	10880014 	ori	r2,r2,8192
   89094:	20c6703a 	and	r3,r4,r3
   89098:	2880030d 	sth	r2,12(r5)
   8909c:	28c01915 	stw	r3,100(r5)
   890a0:	d9800404 	addi	r6,sp,16
   890a4:	8009883a 	mov	r4,r16
   890a8:	008fc740 	call	8fc74 <__sfvwrite_r>
   890ac:	1000091e 	bne	r2,zero,890d4 <_puts_r+0xb8>
   890b0:	00800284 	movi	r2,10
   890b4:	dfc00917 	ldw	ra,36(sp)
   890b8:	dc400817 	ldw	r17,32(sp)
   890bc:	dc000717 	ldw	r16,28(sp)
   890c0:	dec00a04 	addi	sp,sp,40
   890c4:	f800283a 	ret
   890c8:	8009883a 	mov	r4,r16
   890cc:	008f7f00 	call	8f7f0 <__sinit>
   890d0:	003fe906 	br	89078 <__alt_data_end+0xfffb91b8>
   890d4:	00bfffc4 	movi	r2,-1
   890d8:	003ff606 	br	890b4 <__alt_data_end+0xfffb91f4>

000890dc <puts>:
   890dc:	008002b4 	movhi	r2,10
   890e0:	10bb5c04 	addi	r2,r2,-4752
   890e4:	200b883a 	mov	r5,r4
   890e8:	11000017 	ldw	r4,0(r2)
   890ec:	008901c1 	jmpi	8901c <_puts_r>

000890f0 <_sprintf_r>:
   890f0:	deffe404 	addi	sp,sp,-112
   890f4:	2807883a 	mov	r3,r5
   890f8:	dfc01a15 	stw	ra,104(sp)
   890fc:	d9c01b15 	stw	r7,108(sp)
   89100:	00a00034 	movhi	r2,32768
   89104:	10bfffc4 	addi	r2,r2,-1
   89108:	02008204 	movi	r8,520
   8910c:	d8800215 	stw	r2,8(sp)
   89110:	d8800515 	stw	r2,20(sp)
   89114:	d9c01b04 	addi	r7,sp,108
   89118:	d80b883a 	mov	r5,sp
   8911c:	00bfffc4 	movi	r2,-1
   89120:	d8c00015 	stw	r3,0(sp)
   89124:	d8c00415 	stw	r3,16(sp)
   89128:	da00030d 	sth	r8,12(sp)
   8912c:	d880038d 	sth	r2,14(sp)
   89130:	008924c0 	call	8924c <___svfprintf_internal_r>
   89134:	d8c00017 	ldw	r3,0(sp)
   89138:	18000005 	stb	zero,0(r3)
   8913c:	dfc01a17 	ldw	ra,104(sp)
   89140:	dec01c04 	addi	sp,sp,112
   89144:	f800283a 	ret

00089148 <sprintf>:
   89148:	deffe304 	addi	sp,sp,-116
   8914c:	2007883a 	mov	r3,r4
   89150:	dfc01a15 	stw	ra,104(sp)
   89154:	d9801b15 	stw	r6,108(sp)
   89158:	d9c01c15 	stw	r7,112(sp)
   8915c:	010002b4 	movhi	r4,10
   89160:	213b5c04 	addi	r4,r4,-4752
   89164:	21000017 	ldw	r4,0(r4)
   89168:	00a00034 	movhi	r2,32768
   8916c:	10bfffc4 	addi	r2,r2,-1
   89170:	280d883a 	mov	r6,r5
   89174:	02008204 	movi	r8,520
   89178:	d8800215 	stw	r2,8(sp)
   8917c:	d8800515 	stw	r2,20(sp)
   89180:	d9c01b04 	addi	r7,sp,108
   89184:	d80b883a 	mov	r5,sp
   89188:	00bfffc4 	movi	r2,-1
   8918c:	d8c00015 	stw	r3,0(sp)
   89190:	d8c00415 	stw	r3,16(sp)
   89194:	da00030d 	sth	r8,12(sp)
   89198:	d880038d 	sth	r2,14(sp)
   8919c:	008924c0 	call	8924c <___svfprintf_internal_r>
   891a0:	d8c00017 	ldw	r3,0(sp)
   891a4:	18000005 	stb	zero,0(r3)
   891a8:	dfc01a17 	ldw	ra,104(sp)
   891ac:	dec01d04 	addi	sp,sp,116
   891b0:	f800283a 	ret

000891b4 <strlen>:
   891b4:	208000cc 	andi	r2,r4,3
   891b8:	10002026 	beq	r2,zero,8923c <strlen+0x88>
   891bc:	20800007 	ldb	r2,0(r4)
   891c0:	10002026 	beq	r2,zero,89244 <strlen+0x90>
   891c4:	2005883a 	mov	r2,r4
   891c8:	00000206 	br	891d4 <strlen+0x20>
   891cc:	10c00007 	ldb	r3,0(r2)
   891d0:	18001826 	beq	r3,zero,89234 <strlen+0x80>
   891d4:	10800044 	addi	r2,r2,1
   891d8:	10c000cc 	andi	r3,r2,3
   891dc:	183ffb1e 	bne	r3,zero,891cc <__alt_data_end+0xfffb930c>
   891e0:	10c00017 	ldw	r3,0(r2)
   891e4:	01ffbff4 	movhi	r7,65279
   891e8:	39ffbfc4 	addi	r7,r7,-257
   891ec:	00ca303a 	nor	r5,zero,r3
   891f0:	01a02074 	movhi	r6,32897
   891f4:	19c7883a 	add	r3,r3,r7
   891f8:	31a02004 	addi	r6,r6,-32640
   891fc:	1946703a 	and	r3,r3,r5
   89200:	1986703a 	and	r3,r3,r6
   89204:	1800091e 	bne	r3,zero,8922c <strlen+0x78>
   89208:	10800104 	addi	r2,r2,4
   8920c:	10c00017 	ldw	r3,0(r2)
   89210:	19cb883a 	add	r5,r3,r7
   89214:	00c6303a 	nor	r3,zero,r3
   89218:	28c6703a 	and	r3,r5,r3
   8921c:	1986703a 	and	r3,r3,r6
   89220:	183ff926 	beq	r3,zero,89208 <__alt_data_end+0xfffb9348>
   89224:	00000106 	br	8922c <strlen+0x78>
   89228:	10800044 	addi	r2,r2,1
   8922c:	10c00007 	ldb	r3,0(r2)
   89230:	183ffd1e 	bne	r3,zero,89228 <__alt_data_end+0xfffb9368>
   89234:	1105c83a 	sub	r2,r2,r4
   89238:	f800283a 	ret
   8923c:	2005883a 	mov	r2,r4
   89240:	003fe706 	br	891e0 <__alt_data_end+0xfffb9320>
   89244:	0005883a 	mov	r2,zero
   89248:	f800283a 	ret

0008924c <___svfprintf_internal_r>:
   8924c:	deffb704 	addi	sp,sp,-292
   89250:	dfc04815 	stw	ra,288(sp)
   89254:	ddc04615 	stw	r23,280(sp)
   89258:	d9402c15 	stw	r5,176(sp)
   8925c:	d9003915 	stw	r4,228(sp)
   89260:	302f883a 	mov	r23,r6
   89264:	d9c02d15 	stw	r7,180(sp)
   89268:	df004715 	stw	fp,284(sp)
   8926c:	dd804515 	stw	r22,276(sp)
   89270:	dd404415 	stw	r21,272(sp)
   89274:	dd004315 	stw	r20,268(sp)
   89278:	dcc04215 	stw	r19,264(sp)
   8927c:	dc804115 	stw	r18,260(sp)
   89280:	dc404015 	stw	r17,256(sp)
   89284:	dc003f15 	stw	r16,252(sp)
   89288:	00903640 	call	90364 <_localeconv_r>
   8928c:	10800017 	ldw	r2,0(r2)
   89290:	1009883a 	mov	r4,r2
   89294:	d8803415 	stw	r2,208(sp)
   89298:	00891b40 	call	891b4 <strlen>
   8929c:	d8c02c17 	ldw	r3,176(sp)
   892a0:	d8803815 	stw	r2,224(sp)
   892a4:	1880030b 	ldhu	r2,12(r3)
   892a8:	1080200c 	andi	r2,r2,128
   892ac:	10000226 	beq	r2,zero,892b8 <___svfprintf_internal_r+0x6c>
   892b0:	18800417 	ldw	r2,16(r3)
   892b4:	10067f26 	beq	r2,zero,8acb4 <___svfprintf_internal_r+0x1a68>
   892b8:	dcc03917 	ldw	r19,228(sp)
   892bc:	d8c00404 	addi	r3,sp,16
   892c0:	054002b4 	movhi	r21,10
   892c4:	d9001e04 	addi	r4,sp,120
   892c8:	ad713084 	addi	r21,r21,-15166
   892cc:	d8c01e15 	stw	r3,120(sp)
   892d0:	d8002015 	stw	zero,128(sp)
   892d4:	d8001f15 	stw	zero,124(sp)
   892d8:	d8003315 	stw	zero,204(sp)
   892dc:	d8003615 	stw	zero,216(sp)
   892e0:	d8003715 	stw	zero,220(sp)
   892e4:	1811883a 	mov	r8,r3
   892e8:	d8003a15 	stw	zero,232(sp)
   892ec:	d8003b15 	stw	zero,236(sp)
   892f0:	d8002f15 	stw	zero,188(sp)
   892f4:	d9002815 	stw	r4,160(sp)
   892f8:	b8800007 	ldb	r2,0(r23)
   892fc:	10026726 	beq	r2,zero,89c9c <___svfprintf_internal_r+0xa50>
   89300:	00c00944 	movi	r3,37
   89304:	b821883a 	mov	r16,r23
   89308:	10c0021e 	bne	r2,r3,89314 <___svfprintf_internal_r+0xc8>
   8930c:	00001406 	br	89360 <___svfprintf_internal_r+0x114>
   89310:	10c00326 	beq	r2,r3,89320 <___svfprintf_internal_r+0xd4>
   89314:	84000044 	addi	r16,r16,1
   89318:	80800007 	ldb	r2,0(r16)
   8931c:	103ffc1e 	bne	r2,zero,89310 <__alt_data_end+0xfffb9450>
   89320:	85e3c83a 	sub	r17,r16,r23
   89324:	88000e26 	beq	r17,zero,89360 <___svfprintf_internal_r+0x114>
   89328:	d8c02017 	ldw	r3,128(sp)
   8932c:	d8801f17 	ldw	r2,124(sp)
   89330:	45c00015 	stw	r23,0(r8)
   89334:	1c47883a 	add	r3,r3,r17
   89338:	10800044 	addi	r2,r2,1
   8933c:	d8c02015 	stw	r3,128(sp)
   89340:	44400115 	stw	r17,4(r8)
   89344:	d8801f15 	stw	r2,124(sp)
   89348:	00c001c4 	movi	r3,7
   8934c:	18809716 	blt	r3,r2,895ac <___svfprintf_internal_r+0x360>
   89350:	42000204 	addi	r8,r8,8
   89354:	d9402f17 	ldw	r5,188(sp)
   89358:	2c4b883a 	add	r5,r5,r17
   8935c:	d9402f15 	stw	r5,188(sp)
   89360:	80800007 	ldb	r2,0(r16)
   89364:	10009826 	beq	r2,zero,895c8 <___svfprintf_internal_r+0x37c>
   89368:	84400047 	ldb	r17,1(r16)
   8936c:	00bfffc4 	movi	r2,-1
   89370:	85c00044 	addi	r23,r16,1
   89374:	d8002785 	stb	zero,158(sp)
   89378:	0007883a 	mov	r3,zero
   8937c:	000f883a 	mov	r7,zero
   89380:	d8802915 	stw	r2,164(sp)
   89384:	d8003115 	stw	zero,196(sp)
   89388:	0025883a 	mov	r18,zero
   8938c:	01401604 	movi	r5,88
   89390:	01800244 	movi	r6,9
   89394:	02800a84 	movi	r10,42
   89398:	02401b04 	movi	r9,108
   8939c:	bdc00044 	addi	r23,r23,1
   893a0:	88bff804 	addi	r2,r17,-32
   893a4:	2882f036 	bltu	r5,r2,89f68 <___svfprintf_internal_r+0xd1c>
   893a8:	100490ba 	slli	r2,r2,2
   893ac:	01000274 	movhi	r4,9
   893b0:	2124f004 	addi	r4,r4,-27712
   893b4:	1105883a 	add	r2,r2,r4
   893b8:	10800017 	ldw	r2,0(r2)
   893bc:	1000683a 	jmp	r2
   893c0:	00089ed0 	cmplti	zero,zero,8827
   893c4:	00089f68 	cmpgeui	zero,zero,8829
   893c8:	00089f68 	cmpgeui	zero,zero,8829
   893cc:	00089ec4 	movi	zero,8827
   893d0:	00089f68 	cmpgeui	zero,zero,8829
   893d4:	00089f68 	cmpgeui	zero,zero,8829
   893d8:	00089f68 	cmpgeui	zero,zero,8829
   893dc:	00089f68 	cmpgeui	zero,zero,8829
   893e0:	00089f68 	cmpgeui	zero,zero,8829
   893e4:	00089f68 	cmpgeui	zero,zero,8829
   893e8:	00089624 	muli	zero,zero,8792
   893ec:	00089e00 	call	89e0 <__reset-0x77620>
   893f0:	00089f68 	cmpgeui	zero,zero,8829
   893f4:	00089534 	movhi	zero,8788
   893f8:	0008964c 	andi	zero,zero,8793
   893fc:	00089f68 	cmpgeui	zero,zero,8829
   89400:	000896c0 	call	896c <__reset-0x77694>
   89404:	0008968c 	andi	zero,zero,8794
   89408:	0008968c 	andi	zero,zero,8794
   8940c:	0008968c 	andi	zero,zero,8794
   89410:	0008968c 	andi	zero,zero,8794
   89414:	0008968c 	andi	zero,zero,8794
   89418:	0008968c 	andi	zero,zero,8794
   8941c:	0008968c 	andi	zero,zero,8794
   89420:	0008968c 	andi	zero,zero,8794
   89424:	0008968c 	andi	zero,zero,8794
   89428:	00089f68 	cmpgeui	zero,zero,8829
   8942c:	00089f68 	cmpgeui	zero,zero,8829
   89430:	00089f68 	cmpgeui	zero,zero,8829
   89434:	00089f68 	cmpgeui	zero,zero,8829
   89438:	00089f68 	cmpgeui	zero,zero,8829
   8943c:	00089f68 	cmpgeui	zero,zero,8829
   89440:	00089f68 	cmpgeui	zero,zero,8829
   89444:	00089f68 	cmpgeui	zero,zero,8829
   89448:	00089f68 	cmpgeui	zero,zero,8829
   8944c:	00089f68 	cmpgeui	zero,zero,8829
   89450:	00089778 	rdprs	zero,zero,8797
   89454:	000896cc 	andi	zero,zero,8795
   89458:	00089f68 	cmpgeui	zero,zero,8829
   8945c:	000896cc 	andi	zero,zero,8795
   89460:	00089f68 	cmpgeui	zero,zero,8829
   89464:	00089f68 	cmpgeui	zero,zero,8829
   89468:	00089f68 	cmpgeui	zero,zero,8829
   8946c:	00089f68 	cmpgeui	zero,zero,8829
   89470:	0008976c 	andhi	zero,zero,8797
   89474:	00089f68 	cmpgeui	zero,zero,8829
   89478:	00089f68 	cmpgeui	zero,zero,8829
   8947c:	00089834 	movhi	zero,8800
   89480:	00089f68 	cmpgeui	zero,zero,8829
   89484:	00089f68 	cmpgeui	zero,zero,8829
   89488:	00089f68 	cmpgeui	zero,zero,8829
   8948c:	00089f68 	cmpgeui	zero,zero,8829
   89490:	00089f68 	cmpgeui	zero,zero,8829
   89494:	00089ca4 	muli	zero,zero,8818
   89498:	00089f68 	cmpgeui	zero,zero,8829
   8949c:	00089f68 	cmpgeui	zero,zero,8829
   894a0:	00089d04 	movi	zero,8820
   894a4:	00089f68 	cmpgeui	zero,zero,8829
   894a8:	00089f68 	cmpgeui	zero,zero,8829
   894ac:	00089f68 	cmpgeui	zero,zero,8829
   894b0:	00089f68 	cmpgeui	zero,zero,8829
   894b4:	00089f68 	cmpgeui	zero,zero,8829
   894b8:	00089f68 	cmpgeui	zero,zero,8829
   894bc:	00089f68 	cmpgeui	zero,zero,8829
   894c0:	00089f68 	cmpgeui	zero,zero,8829
   894c4:	00089f68 	cmpgeui	zero,zero,8829
   894c8:	00089f68 	cmpgeui	zero,zero,8829
   894cc:	00089db4 	movhi	zero,8822
   894d0:	00089ef0 	cmpltui	zero,zero,8827
   894d4:	000896cc 	andi	zero,zero,8795
   894d8:	000896cc 	andi	zero,zero,8795
   894dc:	000896cc 	andi	zero,zero,8795
   894e0:	00089f44 	movi	zero,8829
   894e4:	00089ef0 	cmpltui	zero,zero,8827
   894e8:	00089f68 	cmpgeui	zero,zero,8829
   894ec:	00089f68 	cmpgeui	zero,zero,8829
   894f0:	00089f00 	call	89f0 <__reset-0x77610>
   894f4:	00089f68 	cmpgeui	zero,zero,8829
   894f8:	00089f10 	cmplti	zero,zero,8828
   894fc:	00089df0 	cmpltui	zero,zero,8823
   89500:	00089540 	call	8954 <__reset-0x776ac>
   89504:	00089e10 	cmplti	zero,zero,8824
   89508:	00089f68 	cmpgeui	zero,zero,8829
   8950c:	00089e1c 	xori	zero,zero,8824
   89510:	00089f68 	cmpgeui	zero,zero,8829
   89514:	00089e78 	rdprs	zero,zero,8825
   89518:	00089f68 	cmpgeui	zero,zero,8829
   8951c:	00089f68 	cmpgeui	zero,zero,8829
   89520:	00089e88 	cmpgei	zero,zero,8826
   89524:	d9003117 	ldw	r4,196(sp)
   89528:	d8802d15 	stw	r2,180(sp)
   8952c:	0109c83a 	sub	r4,zero,r4
   89530:	d9003115 	stw	r4,196(sp)
   89534:	94800114 	ori	r18,r18,4
   89538:	bc400007 	ldb	r17,0(r23)
   8953c:	003f9706 	br	8939c <__alt_data_end+0xfffb94dc>
   89540:	00800c04 	movi	r2,48
   89544:	d9002d17 	ldw	r4,180(sp)
   89548:	d9402917 	ldw	r5,164(sp)
   8954c:	d8802705 	stb	r2,156(sp)
   89550:	00801e04 	movi	r2,120
   89554:	d8802745 	stb	r2,157(sp)
   89558:	d8002785 	stb	zero,158(sp)
   8955c:	20c00104 	addi	r3,r4,4
   89560:	25000017 	ldw	r20,0(r4)
   89564:	002d883a 	mov	r22,zero
   89568:	90800094 	ori	r2,r18,2
   8956c:	28028616 	blt	r5,zero,89f88 <___svfprintf_internal_r+0xd3c>
   89570:	00bfdfc4 	movi	r2,-129
   89574:	90a4703a 	and	r18,r18,r2
   89578:	d8c02d15 	stw	r3,180(sp)
   8957c:	94800094 	ori	r18,r18,2
   89580:	a002731e 	bne	r20,zero,89f50 <___svfprintf_internal_r+0xd04>
   89584:	008002b4 	movhi	r2,10
   89588:	10b12904 	addi	r2,r2,-15196
   8958c:	d8803a15 	stw	r2,232(sp)
   89590:	04401e04 	movi	r17,120
   89594:	d8c02917 	ldw	r3,164(sp)
   89598:	0039883a 	mov	fp,zero
   8959c:	1801d526 	beq	r3,zero,89cf4 <___svfprintf_internal_r+0xaa8>
   895a0:	0029883a 	mov	r20,zero
   895a4:	002d883a 	mov	r22,zero
   895a8:	0001f106 	br	89d70 <___svfprintf_internal_r+0xb24>
   895ac:	d9402c17 	ldw	r5,176(sp)
   895b0:	d9801e04 	addi	r6,sp,120
   895b4:	9809883a 	mov	r4,r19
   895b8:	0092a6c0 	call	92a6c <__ssprint_r>
   895bc:	1000081e 	bne	r2,zero,895e0 <___svfprintf_internal_r+0x394>
   895c0:	da000404 	addi	r8,sp,16
   895c4:	003f6306 	br	89354 <__alt_data_end+0xfffb9494>
   895c8:	d8802017 	ldw	r2,128(sp)
   895cc:	10000426 	beq	r2,zero,895e0 <___svfprintf_internal_r+0x394>
   895d0:	d9402c17 	ldw	r5,176(sp)
   895d4:	d9003917 	ldw	r4,228(sp)
   895d8:	d9801e04 	addi	r6,sp,120
   895dc:	0092a6c0 	call	92a6c <__ssprint_r>
   895e0:	d8802c17 	ldw	r2,176(sp)
   895e4:	10c0030b 	ldhu	r3,12(r2)
   895e8:	d8802f17 	ldw	r2,188(sp)
   895ec:	18c0100c 	andi	r3,r3,64
   895f0:	1805f51e 	bne	r3,zero,8adc8 <___svfprintf_internal_r+0x1b7c>
   895f4:	dfc04817 	ldw	ra,288(sp)
   895f8:	df004717 	ldw	fp,284(sp)
   895fc:	ddc04617 	ldw	r23,280(sp)
   89600:	dd804517 	ldw	r22,276(sp)
   89604:	dd404417 	ldw	r21,272(sp)
   89608:	dd004317 	ldw	r20,268(sp)
   8960c:	dcc04217 	ldw	r19,264(sp)
   89610:	dc804117 	ldw	r18,260(sp)
   89614:	dc404017 	ldw	r17,256(sp)
   89618:	dc003f17 	ldw	r16,252(sp)
   8961c:	dec04904 	addi	sp,sp,292
   89620:	f800283a 	ret
   89624:	d8802d17 	ldw	r2,180(sp)
   89628:	d9002d17 	ldw	r4,180(sp)
   8962c:	10800017 	ldw	r2,0(r2)
   89630:	d8803115 	stw	r2,196(sp)
   89634:	20800104 	addi	r2,r4,4
   89638:	d9003117 	ldw	r4,196(sp)
   8963c:	203fb916 	blt	r4,zero,89524 <__alt_data_end+0xfffb9664>
   89640:	d8802d15 	stw	r2,180(sp)
   89644:	bc400007 	ldb	r17,0(r23)
   89648:	003f5406 	br	8939c <__alt_data_end+0xfffb94dc>
   8964c:	bc400007 	ldb	r17,0(r23)
   89650:	bac00044 	addi	r11,r23,1
   89654:	8a873926 	beq	r17,r10,8b33c <___svfprintf_internal_r+0x20f0>
   89658:	88bff404 	addi	r2,r17,-48
   8965c:	0009883a 	mov	r4,zero
   89660:	30868836 	bltu	r6,r2,8b084 <___svfprintf_internal_r+0x1e38>
   89664:	5c400007 	ldb	r17,0(r11)
   89668:	210002a4 	muli	r4,r4,10
   8966c:	5dc00044 	addi	r23,r11,1
   89670:	b817883a 	mov	r11,r23
   89674:	2089883a 	add	r4,r4,r2
   89678:	88bff404 	addi	r2,r17,-48
   8967c:	30bff92e 	bgeu	r6,r2,89664 <__alt_data_end+0xfffb97a4>
   89680:	2005d716 	blt	r4,zero,8ade0 <___svfprintf_internal_r+0x1b94>
   89684:	d9002915 	stw	r4,164(sp)
   89688:	003f4506 	br	893a0 <__alt_data_end+0xfffb94e0>
   8968c:	b809883a 	mov	r4,r23
   89690:	d8003115 	stw	zero,196(sp)
   89694:	88bff404 	addi	r2,r17,-48
   89698:	0017883a 	mov	r11,zero
   8969c:	24400007 	ldb	r17,0(r4)
   896a0:	5ac002a4 	muli	r11,r11,10
   896a4:	bdc00044 	addi	r23,r23,1
   896a8:	b809883a 	mov	r4,r23
   896ac:	12d7883a 	add	r11,r2,r11
   896b0:	88bff404 	addi	r2,r17,-48
   896b4:	30bff92e 	bgeu	r6,r2,8969c <__alt_data_end+0xfffb97dc>
   896b8:	dac03115 	stw	r11,196(sp)
   896bc:	003f3806 	br	893a0 <__alt_data_end+0xfffb94e0>
   896c0:	94802014 	ori	r18,r18,128
   896c4:	bc400007 	ldb	r17,0(r23)
   896c8:	003f3406 	br	8939c <__alt_data_end+0xfffb94dc>
   896cc:	18c03fcc 	andi	r3,r3,255
   896d0:	1807471e 	bne	r3,zero,8b3f0 <___svfprintf_internal_r+0x21a4>
   896d4:	9080020c 	andi	r2,r18,8
   896d8:	10047d26 	beq	r2,zero,8a8d0 <___svfprintf_internal_r+0x1684>
   896dc:	d8c02d17 	ldw	r3,180(sp)
   896e0:	d9002d17 	ldw	r4,180(sp)
   896e4:	d9402d17 	ldw	r5,180(sp)
   896e8:	18c00017 	ldw	r3,0(r3)
   896ec:	21000117 	ldw	r4,4(r4)
   896f0:	29400204 	addi	r5,r5,8
   896f4:	d8c03615 	stw	r3,216(sp)
   896f8:	d9003715 	stw	r4,220(sp)
   896fc:	d9402d15 	stw	r5,180(sp)
   89700:	d9003617 	ldw	r4,216(sp)
   89704:	d9403717 	ldw	r5,220(sp)
   89708:	da003e15 	stw	r8,248(sp)
   8970c:	04000044 	movi	r16,1
   89710:	009278c0 	call	9278c <__fpclassifyd>
   89714:	da003e17 	ldw	r8,248(sp)
   89718:	14044b1e 	bne	r2,r16,8a848 <___svfprintf_internal_r+0x15fc>
   8971c:	d9003617 	ldw	r4,216(sp)
   89720:	d9403717 	ldw	r5,220(sp)
   89724:	000d883a 	mov	r6,zero
   89728:	000f883a 	mov	r7,zero
   8972c:	0097b9c0 	call	97b9c <__ledf2>
   89730:	da003e17 	ldw	r8,248(sp)
   89734:	1005f316 	blt	r2,zero,8af04 <___svfprintf_internal_r+0x1cb8>
   89738:	df002783 	ldbu	fp,158(sp)
   8973c:	008011c4 	movi	r2,71
   89740:	1445590e 	bge	r2,r17,8aca8 <___svfprintf_internal_r+0x1a5c>
   89744:	040002b4 	movhi	r16,10
   89748:	84312104 	addi	r16,r16,-15228
   8974c:	00c000c4 	movi	r3,3
   89750:	00bfdfc4 	movi	r2,-129
   89754:	d8c02a15 	stw	r3,168(sp)
   89758:	90a4703a 	and	r18,r18,r2
   8975c:	d8c02e15 	stw	r3,184(sp)
   89760:	d8002915 	stw	zero,164(sp)
   89764:	d8003215 	stw	zero,200(sp)
   89768:	00006606 	br	89904 <___svfprintf_internal_r+0x6b8>
   8976c:	94800214 	ori	r18,r18,8
   89770:	bc400007 	ldb	r17,0(r23)
   89774:	003f0906 	br	8939c <__alt_data_end+0xfffb94dc>
   89778:	18c03fcc 	andi	r3,r3,255
   8977c:	1807181e 	bne	r3,zero,8b3e0 <___svfprintf_internal_r+0x2194>
   89780:	94800414 	ori	r18,r18,16
   89784:	9080080c 	andi	r2,r18,32
   89788:	10039626 	beq	r2,zero,8a5e4 <___svfprintf_internal_r+0x1398>
   8978c:	d9402d17 	ldw	r5,180(sp)
   89790:	28800117 	ldw	r2,4(r5)
   89794:	2d000017 	ldw	r20,0(r5)
   89798:	29400204 	addi	r5,r5,8
   8979c:	d9402d15 	stw	r5,180(sp)
   897a0:	102d883a 	mov	r22,r2
   897a4:	10039816 	blt	r2,zero,8a608 <___svfprintf_internal_r+0x13bc>
   897a8:	d9402917 	ldw	r5,164(sp)
   897ac:	df002783 	ldbu	fp,158(sp)
   897b0:	2803ab16 	blt	r5,zero,8a660 <___svfprintf_internal_r+0x1414>
   897b4:	00ffdfc4 	movi	r3,-129
   897b8:	a584b03a 	or	r2,r20,r22
   897bc:	90e4703a 	and	r18,r18,r3
   897c0:	10014a26 	beq	r2,zero,89cec <___svfprintf_internal_r+0xaa0>
   897c4:	b0034b26 	beq	r22,zero,8a4f4 <___svfprintf_internal_r+0x12a8>
   897c8:	dc402a15 	stw	r17,168(sp)
   897cc:	dc001e04 	addi	r16,sp,120
   897d0:	b023883a 	mov	r17,r22
   897d4:	402d883a 	mov	r22,r8
   897d8:	a009883a 	mov	r4,r20
   897dc:	880b883a 	mov	r5,r17
   897e0:	01800284 	movi	r6,10
   897e4:	000f883a 	mov	r7,zero
   897e8:	009636c0 	call	9636c <__umoddi3>
   897ec:	10800c04 	addi	r2,r2,48
   897f0:	843fffc4 	addi	r16,r16,-1
   897f4:	a009883a 	mov	r4,r20
   897f8:	880b883a 	mov	r5,r17
   897fc:	80800005 	stb	r2,0(r16)
   89800:	01800284 	movi	r6,10
   89804:	000f883a 	mov	r7,zero
   89808:	0095df40 	call	95df4 <__udivdi3>
   8980c:	1029883a 	mov	r20,r2
   89810:	10c4b03a 	or	r2,r2,r3
   89814:	1823883a 	mov	r17,r3
   89818:	103fef1e 	bne	r2,zero,897d8 <__alt_data_end+0xfffb9918>
   8981c:	d8c02817 	ldw	r3,160(sp)
   89820:	dc402a17 	ldw	r17,168(sp)
   89824:	b011883a 	mov	r8,r22
   89828:	1c07c83a 	sub	r3,r3,r16
   8982c:	d8c02e15 	stw	r3,184(sp)
   89830:	00002e06 	br	898ec <___svfprintf_internal_r+0x6a0>
   89834:	18c03fcc 	andi	r3,r3,255
   89838:	1806e71e 	bne	r3,zero,8b3d8 <___svfprintf_internal_r+0x218c>
   8983c:	94800414 	ori	r18,r18,16
   89840:	9080080c 	andi	r2,r18,32
   89844:	1002d426 	beq	r2,zero,8a398 <___svfprintf_internal_r+0x114c>
   89848:	d9402d17 	ldw	r5,180(sp)
   8984c:	d8c02917 	ldw	r3,164(sp)
   89850:	d8002785 	stb	zero,158(sp)
   89854:	28800204 	addi	r2,r5,8
   89858:	2d000017 	ldw	r20,0(r5)
   8985c:	2d800117 	ldw	r22,4(r5)
   89860:	18041516 	blt	r3,zero,8a8b8 <___svfprintf_internal_r+0x166c>
   89864:	013fdfc4 	movi	r4,-129
   89868:	a586b03a 	or	r3,r20,r22
   8986c:	d8802d15 	stw	r2,180(sp)
   89870:	9124703a 	and	r18,r18,r4
   89874:	1802d51e 	bne	r3,zero,8a3cc <___svfprintf_internal_r+0x1180>
   89878:	d9402917 	ldw	r5,164(sp)
   8987c:	0039883a 	mov	fp,zero
   89880:	2806be26 	beq	r5,zero,8b37c <___svfprintf_internal_r+0x2130>
   89884:	0029883a 	mov	r20,zero
   89888:	002d883a 	mov	r22,zero
   8988c:	dc001e04 	addi	r16,sp,120
   89890:	a006d0fa 	srli	r3,r20,3
   89894:	b008977a 	slli	r4,r22,29
   89898:	b02cd0fa 	srli	r22,r22,3
   8989c:	a50001cc 	andi	r20,r20,7
   898a0:	a0800c04 	addi	r2,r20,48
   898a4:	843fffc4 	addi	r16,r16,-1
   898a8:	20e8b03a 	or	r20,r4,r3
   898ac:	80800005 	stb	r2,0(r16)
   898b0:	a586b03a 	or	r3,r20,r22
   898b4:	183ff61e 	bne	r3,zero,89890 <__alt_data_end+0xfffb99d0>
   898b8:	90c0004c 	andi	r3,r18,1
   898bc:	18013926 	beq	r3,zero,89da4 <___svfprintf_internal_r+0xb58>
   898c0:	10803fcc 	andi	r2,r2,255
   898c4:	1080201c 	xori	r2,r2,128
   898c8:	10bfe004 	addi	r2,r2,-128
   898cc:	00c00c04 	movi	r3,48
   898d0:	10c13426 	beq	r2,r3,89da4 <___svfprintf_internal_r+0xb58>
   898d4:	80ffffc5 	stb	r3,-1(r16)
   898d8:	d8c02817 	ldw	r3,160(sp)
   898dc:	80bfffc4 	addi	r2,r16,-1
   898e0:	1021883a 	mov	r16,r2
   898e4:	1887c83a 	sub	r3,r3,r2
   898e8:	d8c02e15 	stw	r3,184(sp)
   898ec:	d8802e17 	ldw	r2,184(sp)
   898f0:	d9002917 	ldw	r4,164(sp)
   898f4:	1100010e 	bge	r2,r4,898fc <___svfprintf_internal_r+0x6b0>
   898f8:	2005883a 	mov	r2,r4
   898fc:	d8802a15 	stw	r2,168(sp)
   89900:	d8003215 	stw	zero,200(sp)
   89904:	e7003fcc 	andi	fp,fp,255
   89908:	e700201c 	xori	fp,fp,128
   8990c:	e73fe004 	addi	fp,fp,-128
   89910:	e0000326 	beq	fp,zero,89920 <___svfprintf_internal_r+0x6d4>
   89914:	d8c02a17 	ldw	r3,168(sp)
   89918:	18c00044 	addi	r3,r3,1
   8991c:	d8c02a15 	stw	r3,168(sp)
   89920:	90c0008c 	andi	r3,r18,2
   89924:	d8c02b15 	stw	r3,172(sp)
   89928:	18000326 	beq	r3,zero,89938 <___svfprintf_internal_r+0x6ec>
   8992c:	d8c02a17 	ldw	r3,168(sp)
   89930:	18c00084 	addi	r3,r3,2
   89934:	d8c02a15 	stw	r3,168(sp)
   89938:	90c0210c 	andi	r3,r18,132
   8993c:	d8c03015 	stw	r3,192(sp)
   89940:	1801a11e 	bne	r3,zero,89fc8 <___svfprintf_internal_r+0xd7c>
   89944:	d9003117 	ldw	r4,196(sp)
   89948:	d8c02a17 	ldw	r3,168(sp)
   8994c:	20e9c83a 	sub	r20,r4,r3
   89950:	05019d0e 	bge	zero,r20,89fc8 <___svfprintf_internal_r+0xd7c>
   89954:	02400404 	movi	r9,16
   89958:	d8c02017 	ldw	r3,128(sp)
   8995c:	d8801f17 	ldw	r2,124(sp)
   89960:	4d051b0e 	bge	r9,r20,8add0 <___svfprintf_internal_r+0x1b84>
   89964:	014002b4 	movhi	r5,10
   89968:	29713484 	addi	r5,r5,-15150
   8996c:	dc403c15 	stw	r17,240(sp)
   89970:	d9403515 	stw	r5,212(sp)
   89974:	a023883a 	mov	r17,r20
   89978:	482d883a 	mov	r22,r9
   8997c:	9029883a 	mov	r20,r18
   89980:	070001c4 	movi	fp,7
   89984:	8025883a 	mov	r18,r16
   89988:	dc002c17 	ldw	r16,176(sp)
   8998c:	00000306 	br	8999c <___svfprintf_internal_r+0x750>
   89990:	8c7ffc04 	addi	r17,r17,-16
   89994:	42000204 	addi	r8,r8,8
   89998:	b440130e 	bge	r22,r17,899e8 <___svfprintf_internal_r+0x79c>
   8999c:	010002b4 	movhi	r4,10
   899a0:	18c00404 	addi	r3,r3,16
   899a4:	10800044 	addi	r2,r2,1
   899a8:	21313484 	addi	r4,r4,-15150
   899ac:	41000015 	stw	r4,0(r8)
   899b0:	45800115 	stw	r22,4(r8)
   899b4:	d8c02015 	stw	r3,128(sp)
   899b8:	d8801f15 	stw	r2,124(sp)
   899bc:	e0bff40e 	bge	fp,r2,89990 <__alt_data_end+0xfffb9ad0>
   899c0:	d9801e04 	addi	r6,sp,120
   899c4:	800b883a 	mov	r5,r16
   899c8:	9809883a 	mov	r4,r19
   899cc:	0092a6c0 	call	92a6c <__ssprint_r>
   899d0:	103f031e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   899d4:	8c7ffc04 	addi	r17,r17,-16
   899d8:	d8c02017 	ldw	r3,128(sp)
   899dc:	d8801f17 	ldw	r2,124(sp)
   899e0:	da000404 	addi	r8,sp,16
   899e4:	b47fed16 	blt	r22,r17,8999c <__alt_data_end+0xfffb9adc>
   899e8:	9021883a 	mov	r16,r18
   899ec:	a025883a 	mov	r18,r20
   899f0:	8829883a 	mov	r20,r17
   899f4:	dc403c17 	ldw	r17,240(sp)
   899f8:	d9403517 	ldw	r5,212(sp)
   899fc:	a0c7883a 	add	r3,r20,r3
   89a00:	10800044 	addi	r2,r2,1
   89a04:	41400015 	stw	r5,0(r8)
   89a08:	45000115 	stw	r20,4(r8)
   89a0c:	d8c02015 	stw	r3,128(sp)
   89a10:	d8801f15 	stw	r2,124(sp)
   89a14:	010001c4 	movi	r4,7
   89a18:	20829f16 	blt	r4,r2,8a498 <___svfprintf_internal_r+0x124c>
   89a1c:	df002787 	ldb	fp,158(sp)
   89a20:	42000204 	addi	r8,r8,8
   89a24:	e0000c26 	beq	fp,zero,89a58 <___svfprintf_internal_r+0x80c>
   89a28:	d8801f17 	ldw	r2,124(sp)
   89a2c:	d9002784 	addi	r4,sp,158
   89a30:	18c00044 	addi	r3,r3,1
   89a34:	10800044 	addi	r2,r2,1
   89a38:	41000015 	stw	r4,0(r8)
   89a3c:	01000044 	movi	r4,1
   89a40:	41000115 	stw	r4,4(r8)
   89a44:	d8c02015 	stw	r3,128(sp)
   89a48:	d8801f15 	stw	r2,124(sp)
   89a4c:	010001c4 	movi	r4,7
   89a50:	20823816 	blt	r4,r2,8a334 <___svfprintf_internal_r+0x10e8>
   89a54:	42000204 	addi	r8,r8,8
   89a58:	d8802b17 	ldw	r2,172(sp)
   89a5c:	10000c26 	beq	r2,zero,89a90 <___svfprintf_internal_r+0x844>
   89a60:	d8801f17 	ldw	r2,124(sp)
   89a64:	d9002704 	addi	r4,sp,156
   89a68:	18c00084 	addi	r3,r3,2
   89a6c:	10800044 	addi	r2,r2,1
   89a70:	41000015 	stw	r4,0(r8)
   89a74:	01000084 	movi	r4,2
   89a78:	41000115 	stw	r4,4(r8)
   89a7c:	d8c02015 	stw	r3,128(sp)
   89a80:	d8801f15 	stw	r2,124(sp)
   89a84:	010001c4 	movi	r4,7
   89a88:	20823216 	blt	r4,r2,8a354 <___svfprintf_internal_r+0x1108>
   89a8c:	42000204 	addi	r8,r8,8
   89a90:	d9003017 	ldw	r4,192(sp)
   89a94:	00802004 	movi	r2,128
   89a98:	20819726 	beq	r4,r2,8a0f8 <___svfprintf_internal_r+0xeac>
   89a9c:	d9402917 	ldw	r5,164(sp)
   89aa0:	d8802e17 	ldw	r2,184(sp)
   89aa4:	28adc83a 	sub	r22,r5,r2
   89aa8:	05802f0e 	bge	zero,r22,89b68 <___svfprintf_internal_r+0x91c>
   89aac:	07000404 	movi	fp,16
   89ab0:	d8801f17 	ldw	r2,124(sp)
   89ab4:	e583c00e 	bge	fp,r22,8a9b8 <___svfprintf_internal_r+0x176c>
   89ab8:	014002b4 	movhi	r5,10
   89abc:	29713084 	addi	r5,r5,-15166
   89ac0:	dc402915 	stw	r17,164(sp)
   89ac4:	d9402b15 	stw	r5,172(sp)
   89ac8:	b023883a 	mov	r17,r22
   89acc:	050001c4 	movi	r20,7
   89ad0:	902d883a 	mov	r22,r18
   89ad4:	8025883a 	mov	r18,r16
   89ad8:	dc002c17 	ldw	r16,176(sp)
   89adc:	00000306 	br	89aec <___svfprintf_internal_r+0x8a0>
   89ae0:	8c7ffc04 	addi	r17,r17,-16
   89ae4:	42000204 	addi	r8,r8,8
   89ae8:	e440110e 	bge	fp,r17,89b30 <___svfprintf_internal_r+0x8e4>
   89aec:	18c00404 	addi	r3,r3,16
   89af0:	10800044 	addi	r2,r2,1
   89af4:	45400015 	stw	r21,0(r8)
   89af8:	47000115 	stw	fp,4(r8)
   89afc:	d8c02015 	stw	r3,128(sp)
   89b00:	d8801f15 	stw	r2,124(sp)
   89b04:	a0bff60e 	bge	r20,r2,89ae0 <__alt_data_end+0xfffb9c20>
   89b08:	d9801e04 	addi	r6,sp,120
   89b0c:	800b883a 	mov	r5,r16
   89b10:	9809883a 	mov	r4,r19
   89b14:	0092a6c0 	call	92a6c <__ssprint_r>
   89b18:	103eb11e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   89b1c:	8c7ffc04 	addi	r17,r17,-16
   89b20:	d8c02017 	ldw	r3,128(sp)
   89b24:	d8801f17 	ldw	r2,124(sp)
   89b28:	da000404 	addi	r8,sp,16
   89b2c:	e47fef16 	blt	fp,r17,89aec <__alt_data_end+0xfffb9c2c>
   89b30:	9021883a 	mov	r16,r18
   89b34:	b025883a 	mov	r18,r22
   89b38:	882d883a 	mov	r22,r17
   89b3c:	dc402917 	ldw	r17,164(sp)
   89b40:	d9002b17 	ldw	r4,172(sp)
   89b44:	1d87883a 	add	r3,r3,r22
   89b48:	10800044 	addi	r2,r2,1
   89b4c:	41000015 	stw	r4,0(r8)
   89b50:	45800115 	stw	r22,4(r8)
   89b54:	d8c02015 	stw	r3,128(sp)
   89b58:	d8801f15 	stw	r2,124(sp)
   89b5c:	010001c4 	movi	r4,7
   89b60:	2081ec16 	blt	r4,r2,8a314 <___svfprintf_internal_r+0x10c8>
   89b64:	42000204 	addi	r8,r8,8
   89b68:	9080400c 	andi	r2,r18,256
   89b6c:	1001181e 	bne	r2,zero,89fd0 <___svfprintf_internal_r+0xd84>
   89b70:	d9402e17 	ldw	r5,184(sp)
   89b74:	d8801f17 	ldw	r2,124(sp)
   89b78:	44000015 	stw	r16,0(r8)
   89b7c:	1947883a 	add	r3,r3,r5
   89b80:	10800044 	addi	r2,r2,1
   89b84:	41400115 	stw	r5,4(r8)
   89b88:	d8c02015 	stw	r3,128(sp)
   89b8c:	d8801f15 	stw	r2,124(sp)
   89b90:	010001c4 	movi	r4,7
   89b94:	2081d116 	blt	r4,r2,8a2dc <___svfprintf_internal_r+0x1090>
   89b98:	42000204 	addi	r8,r8,8
   89b9c:	9480010c 	andi	r18,r18,4
   89ba0:	90003226 	beq	r18,zero,89c6c <___svfprintf_internal_r+0xa20>
   89ba4:	d9403117 	ldw	r5,196(sp)
   89ba8:	d8802a17 	ldw	r2,168(sp)
   89bac:	28a1c83a 	sub	r16,r5,r2
   89bb0:	04002e0e 	bge	zero,r16,89c6c <___svfprintf_internal_r+0xa20>
   89bb4:	04400404 	movi	r17,16
   89bb8:	d8801f17 	ldw	r2,124(sp)
   89bbc:	8c04b90e 	bge	r17,r16,8aea4 <___svfprintf_internal_r+0x1c58>
   89bc0:	014002b4 	movhi	r5,10
   89bc4:	29713484 	addi	r5,r5,-15150
   89bc8:	d9403515 	stw	r5,212(sp)
   89bcc:	048001c4 	movi	r18,7
   89bd0:	dd002c17 	ldw	r20,176(sp)
   89bd4:	00000306 	br	89be4 <___svfprintf_internal_r+0x998>
   89bd8:	843ffc04 	addi	r16,r16,-16
   89bdc:	42000204 	addi	r8,r8,8
   89be0:	8c00130e 	bge	r17,r16,89c30 <___svfprintf_internal_r+0x9e4>
   89be4:	010002b4 	movhi	r4,10
   89be8:	18c00404 	addi	r3,r3,16
   89bec:	10800044 	addi	r2,r2,1
   89bf0:	21313484 	addi	r4,r4,-15150
   89bf4:	41000015 	stw	r4,0(r8)
   89bf8:	44400115 	stw	r17,4(r8)
   89bfc:	d8c02015 	stw	r3,128(sp)
   89c00:	d8801f15 	stw	r2,124(sp)
   89c04:	90bff40e 	bge	r18,r2,89bd8 <__alt_data_end+0xfffb9d18>
   89c08:	d9801e04 	addi	r6,sp,120
   89c0c:	a00b883a 	mov	r5,r20
   89c10:	9809883a 	mov	r4,r19
   89c14:	0092a6c0 	call	92a6c <__ssprint_r>
   89c18:	103e711e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   89c1c:	843ffc04 	addi	r16,r16,-16
   89c20:	d8c02017 	ldw	r3,128(sp)
   89c24:	d8801f17 	ldw	r2,124(sp)
   89c28:	da000404 	addi	r8,sp,16
   89c2c:	8c3fed16 	blt	r17,r16,89be4 <__alt_data_end+0xfffb9d24>
   89c30:	d9403517 	ldw	r5,212(sp)
   89c34:	1c07883a 	add	r3,r3,r16
   89c38:	10800044 	addi	r2,r2,1
   89c3c:	41400015 	stw	r5,0(r8)
   89c40:	44000115 	stw	r16,4(r8)
   89c44:	d8c02015 	stw	r3,128(sp)
   89c48:	d8801f15 	stw	r2,124(sp)
   89c4c:	010001c4 	movi	r4,7
   89c50:	2080060e 	bge	r4,r2,89c6c <___svfprintf_internal_r+0xa20>
   89c54:	d9402c17 	ldw	r5,176(sp)
   89c58:	d9801e04 	addi	r6,sp,120
   89c5c:	9809883a 	mov	r4,r19
   89c60:	0092a6c0 	call	92a6c <__ssprint_r>
   89c64:	103e5e1e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   89c68:	d8c02017 	ldw	r3,128(sp)
   89c6c:	d8803117 	ldw	r2,196(sp)
   89c70:	d9002a17 	ldw	r4,168(sp)
   89c74:	1100010e 	bge	r2,r4,89c7c <___svfprintf_internal_r+0xa30>
   89c78:	2005883a 	mov	r2,r4
   89c7c:	d9402f17 	ldw	r5,188(sp)
   89c80:	288b883a 	add	r5,r5,r2
   89c84:	d9402f15 	stw	r5,188(sp)
   89c88:	18019c1e 	bne	r3,zero,8a2fc <___svfprintf_internal_r+0x10b0>
   89c8c:	b8800007 	ldb	r2,0(r23)
   89c90:	d8001f15 	stw	zero,124(sp)
   89c94:	da000404 	addi	r8,sp,16
   89c98:	103d991e 	bne	r2,zero,89300 <__alt_data_end+0xfffb9440>
   89c9c:	b821883a 	mov	r16,r23
   89ca0:	003daf06 	br	89360 <__alt_data_end+0xfffb94a0>
   89ca4:	18c03fcc 	andi	r3,r3,255
   89ca8:	1805c71e 	bne	r3,zero,8b3c8 <___svfprintf_internal_r+0x217c>
   89cac:	94800414 	ori	r18,r18,16
   89cb0:	9080080c 	andi	r2,r18,32
   89cb4:	10020126 	beq	r2,zero,8a4bc <___svfprintf_internal_r+0x1270>
   89cb8:	d8802d17 	ldw	r2,180(sp)
   89cbc:	d9002917 	ldw	r4,164(sp)
   89cc0:	d8002785 	stb	zero,158(sp)
   89cc4:	10c00204 	addi	r3,r2,8
   89cc8:	15000017 	ldw	r20,0(r2)
   89ccc:	15800117 	ldw	r22,4(r2)
   89cd0:	20038e16 	blt	r4,zero,8ab0c <___svfprintf_internal_r+0x18c0>
   89cd4:	013fdfc4 	movi	r4,-129
   89cd8:	a584b03a 	or	r2,r20,r22
   89cdc:	d8c02d15 	stw	r3,180(sp)
   89ce0:	9124703a 	and	r18,r18,r4
   89ce4:	0039883a 	mov	fp,zero
   89ce8:	103eb61e 	bne	r2,zero,897c4 <__alt_data_end+0xfffb9904>
   89cec:	d8802917 	ldw	r2,164(sp)
   89cf0:	1002c81e 	bne	r2,zero,8a814 <___svfprintf_internal_r+0x15c8>
   89cf4:	d8002915 	stw	zero,164(sp)
   89cf8:	d8002e15 	stw	zero,184(sp)
   89cfc:	dc001e04 	addi	r16,sp,120
   89d00:	003efa06 	br	898ec <__alt_data_end+0xfffb9a2c>
   89d04:	18c03fcc 	andi	r3,r3,255
   89d08:	1805ad1e 	bne	r3,zero,8b3c0 <___svfprintf_internal_r+0x2174>
   89d0c:	014002b4 	movhi	r5,10
   89d10:	29712404 	addi	r5,r5,-15216
   89d14:	d9403a15 	stw	r5,232(sp)
   89d18:	9080080c 	andi	r2,r18,32
   89d1c:	10006126 	beq	r2,zero,89ea4 <___svfprintf_internal_r+0xc58>
   89d20:	d8802d17 	ldw	r2,180(sp)
   89d24:	15000017 	ldw	r20,0(r2)
   89d28:	15800117 	ldw	r22,4(r2)
   89d2c:	10800204 	addi	r2,r2,8
   89d30:	d8802d15 	stw	r2,180(sp)
   89d34:	9080004c 	andi	r2,r18,1
   89d38:	10018e26 	beq	r2,zero,8a374 <___svfprintf_internal_r+0x1128>
   89d3c:	a584b03a 	or	r2,r20,r22
   89d40:	10030926 	beq	r2,zero,8a968 <___svfprintf_internal_r+0x171c>
   89d44:	d8c02917 	ldw	r3,164(sp)
   89d48:	00800c04 	movi	r2,48
   89d4c:	d8802705 	stb	r2,156(sp)
   89d50:	dc402745 	stb	r17,157(sp)
   89d54:	d8002785 	stb	zero,158(sp)
   89d58:	90800094 	ori	r2,r18,2
   89d5c:	18048716 	blt	r3,zero,8af7c <___svfprintf_internal_r+0x1d30>
   89d60:	00bfdfc4 	movi	r2,-129
   89d64:	90a4703a 	and	r18,r18,r2
   89d68:	94800094 	ori	r18,r18,2
   89d6c:	0039883a 	mov	fp,zero
   89d70:	d9003a17 	ldw	r4,232(sp)
   89d74:	dc001e04 	addi	r16,sp,120
   89d78:	a08003cc 	andi	r2,r20,15
   89d7c:	b006973a 	slli	r3,r22,28
   89d80:	2085883a 	add	r2,r4,r2
   89d84:	a028d13a 	srli	r20,r20,4
   89d88:	10800003 	ldbu	r2,0(r2)
   89d8c:	b02cd13a 	srli	r22,r22,4
   89d90:	843fffc4 	addi	r16,r16,-1
   89d94:	1d28b03a 	or	r20,r3,r20
   89d98:	80800005 	stb	r2,0(r16)
   89d9c:	a584b03a 	or	r2,r20,r22
   89da0:	103ff51e 	bne	r2,zero,89d78 <__alt_data_end+0xfffb9eb8>
   89da4:	d8c02817 	ldw	r3,160(sp)
   89da8:	1c07c83a 	sub	r3,r3,r16
   89dac:	d8c02e15 	stw	r3,184(sp)
   89db0:	003ece06 	br	898ec <__alt_data_end+0xfffb9a2c>
   89db4:	d8c02d17 	ldw	r3,180(sp)
   89db8:	d9002d17 	ldw	r4,180(sp)
   89dbc:	d8002785 	stb	zero,158(sp)
   89dc0:	18800017 	ldw	r2,0(r3)
   89dc4:	21000104 	addi	r4,r4,4
   89dc8:	00c00044 	movi	r3,1
   89dcc:	d8c02a15 	stw	r3,168(sp)
   89dd0:	d8801405 	stb	r2,80(sp)
   89dd4:	d9002d15 	stw	r4,180(sp)
   89dd8:	d8c02e15 	stw	r3,184(sp)
   89ddc:	d8002915 	stw	zero,164(sp)
   89de0:	d8003215 	stw	zero,200(sp)
   89de4:	dc001404 	addi	r16,sp,80
   89de8:	0039883a 	mov	fp,zero
   89dec:	003ecc06 	br	89920 <__alt_data_end+0xfffb9a60>
   89df0:	18c03fcc 	andi	r3,r3,255
   89df4:	183e9226 	beq	r3,zero,89840 <__alt_data_end+0xfffb9980>
   89df8:	d9c02785 	stb	r7,158(sp)
   89dfc:	003e9006 	br	89840 <__alt_data_end+0xfffb9980>
   89e00:	00c00044 	movi	r3,1
   89e04:	01c00ac4 	movi	r7,43
   89e08:	bc400007 	ldb	r17,0(r23)
   89e0c:	003d6306 	br	8939c <__alt_data_end+0xfffb94dc>
   89e10:	94800814 	ori	r18,r18,32
   89e14:	bc400007 	ldb	r17,0(r23)
   89e18:	003d6006 	br	8939c <__alt_data_end+0xfffb94dc>
   89e1c:	d8c02d17 	ldw	r3,180(sp)
   89e20:	d8002785 	stb	zero,158(sp)
   89e24:	1c000017 	ldw	r16,0(r3)
   89e28:	1d000104 	addi	r20,r3,4
   89e2c:	80040f26 	beq	r16,zero,8ae6c <___svfprintf_internal_r+0x1c20>
   89e30:	d9002917 	ldw	r4,164(sp)
   89e34:	2003dc16 	blt	r4,zero,8ada8 <___svfprintf_internal_r+0x1b5c>
   89e38:	200d883a 	mov	r6,r4
   89e3c:	000b883a 	mov	r5,zero
   89e40:	8009883a 	mov	r4,r16
   89e44:	da003e15 	stw	r8,248(sp)
   89e48:	0090d5c0 	call	90d5c <memchr>
   89e4c:	da003e17 	ldw	r8,248(sp)
   89e50:	10045826 	beq	r2,zero,8afb4 <___svfprintf_internal_r+0x1d68>
   89e54:	1405c83a 	sub	r2,r2,r16
   89e58:	d8802e15 	stw	r2,184(sp)
   89e5c:	1003d816 	blt	r2,zero,8adc0 <___svfprintf_internal_r+0x1b74>
   89e60:	df002783 	ldbu	fp,158(sp)
   89e64:	d8802a15 	stw	r2,168(sp)
   89e68:	dd002d15 	stw	r20,180(sp)
   89e6c:	d8002915 	stw	zero,164(sp)
   89e70:	d8003215 	stw	zero,200(sp)
   89e74:	003ea306 	br	89904 <__alt_data_end+0xfffb9a44>
   89e78:	18c03fcc 	andi	r3,r3,255
   89e7c:	183f8c26 	beq	r3,zero,89cb0 <__alt_data_end+0xfffb9df0>
   89e80:	d9c02785 	stb	r7,158(sp)
   89e84:	003f8a06 	br	89cb0 <__alt_data_end+0xfffb9df0>
   89e88:	18c03fcc 	andi	r3,r3,255
   89e8c:	1805631e 	bne	r3,zero,8b41c <___svfprintf_internal_r+0x21d0>
   89e90:	014002b4 	movhi	r5,10
   89e94:	29712904 	addi	r5,r5,-15196
   89e98:	d9403a15 	stw	r5,232(sp)
   89e9c:	9080080c 	andi	r2,r18,32
   89ea0:	103f9f1e 	bne	r2,zero,89d20 <__alt_data_end+0xfffb9e60>
   89ea4:	9080040c 	andi	r2,r18,16
   89ea8:	10029c26 	beq	r2,zero,8a91c <___svfprintf_internal_r+0x16d0>
   89eac:	d8c02d17 	ldw	r3,180(sp)
   89eb0:	002d883a 	mov	r22,zero
   89eb4:	1d000017 	ldw	r20,0(r3)
   89eb8:	18c00104 	addi	r3,r3,4
   89ebc:	d8c02d15 	stw	r3,180(sp)
   89ec0:	003f9c06 	br	89d34 <__alt_data_end+0xfffb9e74>
   89ec4:	94800054 	ori	r18,r18,1
   89ec8:	bc400007 	ldb	r17,0(r23)
   89ecc:	003d3306 	br	8939c <__alt_data_end+0xfffb94dc>
   89ed0:	38803fcc 	andi	r2,r7,255
   89ed4:	1080201c 	xori	r2,r2,128
   89ed8:	10bfe004 	addi	r2,r2,-128
   89edc:	1002971e 	bne	r2,zero,8a93c <___svfprintf_internal_r+0x16f0>
   89ee0:	00c00044 	movi	r3,1
   89ee4:	01c00804 	movi	r7,32
   89ee8:	bc400007 	ldb	r17,0(r23)
   89eec:	003d2b06 	br	8939c <__alt_data_end+0xfffb94dc>
   89ef0:	18c03fcc 	andi	r3,r3,255
   89ef4:	183e2326 	beq	r3,zero,89784 <__alt_data_end+0xfffb98c4>
   89ef8:	d9c02785 	stb	r7,158(sp)
   89efc:	003e2106 	br	89784 <__alt_data_end+0xfffb98c4>
   89f00:	bc400007 	ldb	r17,0(r23)
   89f04:	8a430426 	beq	r17,r9,8ab18 <___svfprintf_internal_r+0x18cc>
   89f08:	94800414 	ori	r18,r18,16
   89f0c:	003d2306 	br	8939c <__alt_data_end+0xfffb94dc>
   89f10:	18c03fcc 	andi	r3,r3,255
   89f14:	18053f1e 	bne	r3,zero,8b414 <___svfprintf_internal_r+0x21c8>
   89f18:	9080080c 	andi	r2,r18,32
   89f1c:	10028926 	beq	r2,zero,8a944 <___svfprintf_internal_r+0x16f8>
   89f20:	d9402d17 	ldw	r5,180(sp)
   89f24:	d9002f17 	ldw	r4,188(sp)
   89f28:	28800017 	ldw	r2,0(r5)
   89f2c:	2007d7fa 	srai	r3,r4,31
   89f30:	29400104 	addi	r5,r5,4
   89f34:	d9402d15 	stw	r5,180(sp)
   89f38:	11000015 	stw	r4,0(r2)
   89f3c:	10c00115 	stw	r3,4(r2)
   89f40:	003ced06 	br	892f8 <__alt_data_end+0xfffb9438>
   89f44:	94801014 	ori	r18,r18,64
   89f48:	bc400007 	ldb	r17,0(r23)
   89f4c:	003d1306 	br	8939c <__alt_data_end+0xfffb94dc>
   89f50:	010002b4 	movhi	r4,10
   89f54:	21312904 	addi	r4,r4,-15196
   89f58:	0039883a 	mov	fp,zero
   89f5c:	d9003a15 	stw	r4,232(sp)
   89f60:	04401e04 	movi	r17,120
   89f64:	003f8206 	br	89d70 <__alt_data_end+0xfffb9eb0>
   89f68:	18c03fcc 	andi	r3,r3,255
   89f6c:	1805221e 	bne	r3,zero,8b3f8 <___svfprintf_internal_r+0x21ac>
   89f70:	883d9526 	beq	r17,zero,895c8 <__alt_data_end+0xfffb9708>
   89f74:	00c00044 	movi	r3,1
   89f78:	d8c02a15 	stw	r3,168(sp)
   89f7c:	dc401405 	stb	r17,80(sp)
   89f80:	d8002785 	stb	zero,158(sp)
   89f84:	003f9406 	br	89dd8 <__alt_data_end+0xfffb9f18>
   89f88:	010002b4 	movhi	r4,10
   89f8c:	21312904 	addi	r4,r4,-15196
   89f90:	d9003a15 	stw	r4,232(sp)
   89f94:	d8c02d15 	stw	r3,180(sp)
   89f98:	1025883a 	mov	r18,r2
   89f9c:	04401e04 	movi	r17,120
   89fa0:	a584b03a 	or	r2,r20,r22
   89fa4:	1000fa1e 	bne	r2,zero,8a390 <___svfprintf_internal_r+0x1144>
   89fa8:	0039883a 	mov	fp,zero
   89fac:	00800084 	movi	r2,2
   89fb0:	10803fcc 	andi	r2,r2,255
   89fb4:	00c00044 	movi	r3,1
   89fb8:	10c21626 	beq	r2,r3,8a814 <___svfprintf_internal_r+0x15c8>
   89fbc:	00c00084 	movi	r3,2
   89fc0:	10fe301e 	bne	r2,r3,89884 <__alt_data_end+0xfffb99c4>
   89fc4:	003d7606 	br	895a0 <__alt_data_end+0xfffb96e0>
   89fc8:	d8c02017 	ldw	r3,128(sp)
   89fcc:	003e9506 	br	89a24 <__alt_data_end+0xfffb9b64>
   89fd0:	00801944 	movi	r2,101
   89fd4:	14407c0e 	bge	r2,r17,8a1c8 <___svfprintf_internal_r+0xf7c>
   89fd8:	d9003617 	ldw	r4,216(sp)
   89fdc:	d9403717 	ldw	r5,220(sp)
   89fe0:	000d883a 	mov	r6,zero
   89fe4:	000f883a 	mov	r7,zero
   89fe8:	d8c03d15 	stw	r3,244(sp)
   89fec:	da003e15 	stw	r8,248(sp)
   89ff0:	0097a380 	call	97a38 <__eqdf2>
   89ff4:	d8c03d17 	ldw	r3,244(sp)
   89ff8:	da003e17 	ldw	r8,248(sp)
   89ffc:	1000f51e 	bne	r2,zero,8a3d4 <___svfprintf_internal_r+0x1188>
   8a000:	d8801f17 	ldw	r2,124(sp)
   8a004:	010002b4 	movhi	r4,10
   8a008:	21313004 	addi	r4,r4,-15168
   8a00c:	18c00044 	addi	r3,r3,1
   8a010:	10800044 	addi	r2,r2,1
   8a014:	41000015 	stw	r4,0(r8)
   8a018:	01000044 	movi	r4,1
   8a01c:	41000115 	stw	r4,4(r8)
   8a020:	d8c02015 	stw	r3,128(sp)
   8a024:	d8801f15 	stw	r2,124(sp)
   8a028:	010001c4 	movi	r4,7
   8a02c:	20826616 	blt	r4,r2,8a9c8 <___svfprintf_internal_r+0x177c>
   8a030:	42000204 	addi	r8,r8,8
   8a034:	d8802617 	ldw	r2,152(sp)
   8a038:	d9403317 	ldw	r5,204(sp)
   8a03c:	11400216 	blt	r2,r5,8a048 <___svfprintf_internal_r+0xdfc>
   8a040:	9080004c 	andi	r2,r18,1
   8a044:	103ed526 	beq	r2,zero,89b9c <__alt_data_end+0xfffb9cdc>
   8a048:	d8803817 	ldw	r2,224(sp)
   8a04c:	d9003417 	ldw	r4,208(sp)
   8a050:	d9403817 	ldw	r5,224(sp)
   8a054:	1887883a 	add	r3,r3,r2
   8a058:	d8801f17 	ldw	r2,124(sp)
   8a05c:	41000015 	stw	r4,0(r8)
   8a060:	41400115 	stw	r5,4(r8)
   8a064:	10800044 	addi	r2,r2,1
   8a068:	d8c02015 	stw	r3,128(sp)
   8a06c:	d8801f15 	stw	r2,124(sp)
   8a070:	010001c4 	movi	r4,7
   8a074:	2082af16 	blt	r4,r2,8ab34 <___svfprintf_internal_r+0x18e8>
   8a078:	42000204 	addi	r8,r8,8
   8a07c:	d8803317 	ldw	r2,204(sp)
   8a080:	143fffc4 	addi	r16,r2,-1
   8a084:	043ec50e 	bge	zero,r16,89b9c <__alt_data_end+0xfffb9cdc>
   8a088:	04400404 	movi	r17,16
   8a08c:	d8801f17 	ldw	r2,124(sp)
   8a090:	8c00860e 	bge	r17,r16,8a2ac <___svfprintf_internal_r+0x1060>
   8a094:	014002b4 	movhi	r5,10
   8a098:	29713084 	addi	r5,r5,-15166
   8a09c:	d9402b15 	stw	r5,172(sp)
   8a0a0:	058001c4 	movi	r22,7
   8a0a4:	dd002c17 	ldw	r20,176(sp)
   8a0a8:	00000306 	br	8a0b8 <___svfprintf_internal_r+0xe6c>
   8a0ac:	42000204 	addi	r8,r8,8
   8a0b0:	843ffc04 	addi	r16,r16,-16
   8a0b4:	8c00800e 	bge	r17,r16,8a2b8 <___svfprintf_internal_r+0x106c>
   8a0b8:	18c00404 	addi	r3,r3,16
   8a0bc:	10800044 	addi	r2,r2,1
   8a0c0:	45400015 	stw	r21,0(r8)
   8a0c4:	44400115 	stw	r17,4(r8)
   8a0c8:	d8c02015 	stw	r3,128(sp)
   8a0cc:	d8801f15 	stw	r2,124(sp)
   8a0d0:	b0bff60e 	bge	r22,r2,8a0ac <__alt_data_end+0xfffba1ec>
   8a0d4:	d9801e04 	addi	r6,sp,120
   8a0d8:	a00b883a 	mov	r5,r20
   8a0dc:	9809883a 	mov	r4,r19
   8a0e0:	0092a6c0 	call	92a6c <__ssprint_r>
   8a0e4:	103d3e1e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a0e8:	d8c02017 	ldw	r3,128(sp)
   8a0ec:	d8801f17 	ldw	r2,124(sp)
   8a0f0:	da000404 	addi	r8,sp,16
   8a0f4:	003fee06 	br	8a0b0 <__alt_data_end+0xfffba1f0>
   8a0f8:	d9403117 	ldw	r5,196(sp)
   8a0fc:	d8802a17 	ldw	r2,168(sp)
   8a100:	28adc83a 	sub	r22,r5,r2
   8a104:	05be650e 	bge	zero,r22,89a9c <__alt_data_end+0xfffb9bdc>
   8a108:	07000404 	movi	fp,16
   8a10c:	d8801f17 	ldw	r2,124(sp)
   8a110:	e583a20e 	bge	fp,r22,8af9c <___svfprintf_internal_r+0x1d50>
   8a114:	014002b4 	movhi	r5,10
   8a118:	29713084 	addi	r5,r5,-15166
   8a11c:	dc403015 	stw	r17,192(sp)
   8a120:	d9402b15 	stw	r5,172(sp)
   8a124:	b023883a 	mov	r17,r22
   8a128:	050001c4 	movi	r20,7
   8a12c:	902d883a 	mov	r22,r18
   8a130:	8025883a 	mov	r18,r16
   8a134:	dc002c17 	ldw	r16,176(sp)
   8a138:	00000306 	br	8a148 <___svfprintf_internal_r+0xefc>
   8a13c:	8c7ffc04 	addi	r17,r17,-16
   8a140:	42000204 	addi	r8,r8,8
   8a144:	e440110e 	bge	fp,r17,8a18c <___svfprintf_internal_r+0xf40>
   8a148:	18c00404 	addi	r3,r3,16
   8a14c:	10800044 	addi	r2,r2,1
   8a150:	45400015 	stw	r21,0(r8)
   8a154:	47000115 	stw	fp,4(r8)
   8a158:	d8c02015 	stw	r3,128(sp)
   8a15c:	d8801f15 	stw	r2,124(sp)
   8a160:	a0bff60e 	bge	r20,r2,8a13c <__alt_data_end+0xfffba27c>
   8a164:	d9801e04 	addi	r6,sp,120
   8a168:	800b883a 	mov	r5,r16
   8a16c:	9809883a 	mov	r4,r19
   8a170:	0092a6c0 	call	92a6c <__ssprint_r>
   8a174:	103d1a1e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a178:	8c7ffc04 	addi	r17,r17,-16
   8a17c:	d8c02017 	ldw	r3,128(sp)
   8a180:	d8801f17 	ldw	r2,124(sp)
   8a184:	da000404 	addi	r8,sp,16
   8a188:	e47fef16 	blt	fp,r17,8a148 <__alt_data_end+0xfffba288>
   8a18c:	9021883a 	mov	r16,r18
   8a190:	b025883a 	mov	r18,r22
   8a194:	882d883a 	mov	r22,r17
   8a198:	dc403017 	ldw	r17,192(sp)
   8a19c:	d9002b17 	ldw	r4,172(sp)
   8a1a0:	1d87883a 	add	r3,r3,r22
   8a1a4:	10800044 	addi	r2,r2,1
   8a1a8:	41000015 	stw	r4,0(r8)
   8a1ac:	45800115 	stw	r22,4(r8)
   8a1b0:	d8c02015 	stw	r3,128(sp)
   8a1b4:	d8801f15 	stw	r2,124(sp)
   8a1b8:	010001c4 	movi	r4,7
   8a1bc:	20819a16 	blt	r4,r2,8a828 <___svfprintf_internal_r+0x15dc>
   8a1c0:	42000204 	addi	r8,r8,8
   8a1c4:	003e3506 	br	89a9c <__alt_data_end+0xfffb9bdc>
   8a1c8:	d9403317 	ldw	r5,204(sp)
   8a1cc:	00800044 	movi	r2,1
   8a1d0:	18c00044 	addi	r3,r3,1
   8a1d4:	1141710e 	bge	r2,r5,8a79c <___svfprintf_internal_r+0x1550>
   8a1d8:	dc401f17 	ldw	r17,124(sp)
   8a1dc:	00800044 	movi	r2,1
   8a1e0:	40800115 	stw	r2,4(r8)
   8a1e4:	8c400044 	addi	r17,r17,1
   8a1e8:	44000015 	stw	r16,0(r8)
   8a1ec:	d8c02015 	stw	r3,128(sp)
   8a1f0:	dc401f15 	stw	r17,124(sp)
   8a1f4:	008001c4 	movi	r2,7
   8a1f8:	14417416 	blt	r2,r17,8a7cc <___svfprintf_internal_r+0x1580>
   8a1fc:	42000204 	addi	r8,r8,8
   8a200:	d8803817 	ldw	r2,224(sp)
   8a204:	d9003417 	ldw	r4,208(sp)
   8a208:	8c400044 	addi	r17,r17,1
   8a20c:	10c7883a 	add	r3,r2,r3
   8a210:	40800115 	stw	r2,4(r8)
   8a214:	41000015 	stw	r4,0(r8)
   8a218:	d8c02015 	stw	r3,128(sp)
   8a21c:	dc401f15 	stw	r17,124(sp)
   8a220:	008001c4 	movi	r2,7
   8a224:	14417216 	blt	r2,r17,8a7f0 <___svfprintf_internal_r+0x15a4>
   8a228:	45800204 	addi	r22,r8,8
   8a22c:	d9003617 	ldw	r4,216(sp)
   8a230:	d9403717 	ldw	r5,220(sp)
   8a234:	000d883a 	mov	r6,zero
   8a238:	000f883a 	mov	r7,zero
   8a23c:	d8c03d15 	stw	r3,244(sp)
   8a240:	0097a380 	call	97a38 <__eqdf2>
   8a244:	d8c03d17 	ldw	r3,244(sp)
   8a248:	1000b326 	beq	r2,zero,8a518 <___svfprintf_internal_r+0x12cc>
   8a24c:	d9403317 	ldw	r5,204(sp)
   8a250:	84000044 	addi	r16,r16,1
   8a254:	8c400044 	addi	r17,r17,1
   8a258:	28bfffc4 	addi	r2,r5,-1
   8a25c:	1887883a 	add	r3,r3,r2
   8a260:	b0800115 	stw	r2,4(r22)
   8a264:	b4000015 	stw	r16,0(r22)
   8a268:	d8c02015 	stw	r3,128(sp)
   8a26c:	dc401f15 	stw	r17,124(sp)
   8a270:	008001c4 	movi	r2,7
   8a274:	1440d216 	blt	r2,r17,8a5c0 <___svfprintf_internal_r+0x1374>
   8a278:	b5800204 	addi	r22,r22,8
   8a27c:	d9003b17 	ldw	r4,236(sp)
   8a280:	df0022c4 	addi	fp,sp,139
   8a284:	8c400044 	addi	r17,r17,1
   8a288:	20c7883a 	add	r3,r4,r3
   8a28c:	b7000015 	stw	fp,0(r22)
   8a290:	b1000115 	stw	r4,4(r22)
   8a294:	d8c02015 	stw	r3,128(sp)
   8a298:	dc401f15 	stw	r17,124(sp)
   8a29c:	008001c4 	movi	r2,7
   8a2a0:	14400e16 	blt	r2,r17,8a2dc <___svfprintf_internal_r+0x1090>
   8a2a4:	b2000204 	addi	r8,r22,8
   8a2a8:	003e3c06 	br	89b9c <__alt_data_end+0xfffb9cdc>
   8a2ac:	010002b4 	movhi	r4,10
   8a2b0:	21313084 	addi	r4,r4,-15166
   8a2b4:	d9002b15 	stw	r4,172(sp)
   8a2b8:	d9002b17 	ldw	r4,172(sp)
   8a2bc:	1c07883a 	add	r3,r3,r16
   8a2c0:	44000115 	stw	r16,4(r8)
   8a2c4:	41000015 	stw	r4,0(r8)
   8a2c8:	10800044 	addi	r2,r2,1
   8a2cc:	d8c02015 	stw	r3,128(sp)
   8a2d0:	d8801f15 	stw	r2,124(sp)
   8a2d4:	010001c4 	movi	r4,7
   8a2d8:	20be2f0e 	bge	r4,r2,89b98 <__alt_data_end+0xfffb9cd8>
   8a2dc:	d9402c17 	ldw	r5,176(sp)
   8a2e0:	d9801e04 	addi	r6,sp,120
   8a2e4:	9809883a 	mov	r4,r19
   8a2e8:	0092a6c0 	call	92a6c <__ssprint_r>
   8a2ec:	103cbc1e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a2f0:	d8c02017 	ldw	r3,128(sp)
   8a2f4:	da000404 	addi	r8,sp,16
   8a2f8:	003e2806 	br	89b9c <__alt_data_end+0xfffb9cdc>
   8a2fc:	d9402c17 	ldw	r5,176(sp)
   8a300:	d9801e04 	addi	r6,sp,120
   8a304:	9809883a 	mov	r4,r19
   8a308:	0092a6c0 	call	92a6c <__ssprint_r>
   8a30c:	103e5f26 	beq	r2,zero,89c8c <__alt_data_end+0xfffb9dcc>
   8a310:	003cb306 	br	895e0 <__alt_data_end+0xfffb9720>
   8a314:	d9402c17 	ldw	r5,176(sp)
   8a318:	d9801e04 	addi	r6,sp,120
   8a31c:	9809883a 	mov	r4,r19
   8a320:	0092a6c0 	call	92a6c <__ssprint_r>
   8a324:	103cae1e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a328:	d8c02017 	ldw	r3,128(sp)
   8a32c:	da000404 	addi	r8,sp,16
   8a330:	003e0d06 	br	89b68 <__alt_data_end+0xfffb9ca8>
   8a334:	d9402c17 	ldw	r5,176(sp)
   8a338:	d9801e04 	addi	r6,sp,120
   8a33c:	9809883a 	mov	r4,r19
   8a340:	0092a6c0 	call	92a6c <__ssprint_r>
   8a344:	103ca61e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a348:	d8c02017 	ldw	r3,128(sp)
   8a34c:	da000404 	addi	r8,sp,16
   8a350:	003dc106 	br	89a58 <__alt_data_end+0xfffb9b98>
   8a354:	d9402c17 	ldw	r5,176(sp)
   8a358:	d9801e04 	addi	r6,sp,120
   8a35c:	9809883a 	mov	r4,r19
   8a360:	0092a6c0 	call	92a6c <__ssprint_r>
   8a364:	103c9e1e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a368:	d8c02017 	ldw	r3,128(sp)
   8a36c:	da000404 	addi	r8,sp,16
   8a370:	003dc706 	br	89a90 <__alt_data_end+0xfffb9bd0>
   8a374:	d8802917 	ldw	r2,164(sp)
   8a378:	d8002785 	stb	zero,158(sp)
   8a37c:	103f0816 	blt	r2,zero,89fa0 <__alt_data_end+0xfffba0e0>
   8a380:	00ffdfc4 	movi	r3,-129
   8a384:	a584b03a 	or	r2,r20,r22
   8a388:	90e4703a 	and	r18,r18,r3
   8a38c:	103c8126 	beq	r2,zero,89594 <__alt_data_end+0xfffb96d4>
   8a390:	0039883a 	mov	fp,zero
   8a394:	003e7606 	br	89d70 <__alt_data_end+0xfffb9eb0>
   8a398:	9080040c 	andi	r2,r18,16
   8a39c:	10013d26 	beq	r2,zero,8a894 <___svfprintf_internal_r+0x1648>
   8a3a0:	d9002d17 	ldw	r4,180(sp)
   8a3a4:	d9402917 	ldw	r5,164(sp)
   8a3a8:	d8002785 	stb	zero,158(sp)
   8a3ac:	20800104 	addi	r2,r4,4
   8a3b0:	25000017 	ldw	r20,0(r4)
   8a3b4:	002d883a 	mov	r22,zero
   8a3b8:	28013f16 	blt	r5,zero,8a8b8 <___svfprintf_internal_r+0x166c>
   8a3bc:	00ffdfc4 	movi	r3,-129
   8a3c0:	d8802d15 	stw	r2,180(sp)
   8a3c4:	90e4703a 	and	r18,r18,r3
   8a3c8:	a03d2b26 	beq	r20,zero,89878 <__alt_data_end+0xfffb99b8>
   8a3cc:	0039883a 	mov	fp,zero
   8a3d0:	003d2e06 	br	8988c <__alt_data_end+0xfffb99cc>
   8a3d4:	dc402617 	ldw	r17,152(sp)
   8a3d8:	0441830e 	bge	zero,r17,8a9e8 <___svfprintf_internal_r+0x179c>
   8a3dc:	dc403217 	ldw	r17,200(sp)
   8a3e0:	d8803317 	ldw	r2,204(sp)
   8a3e4:	1440010e 	bge	r2,r17,8a3ec <___svfprintf_internal_r+0x11a0>
   8a3e8:	1023883a 	mov	r17,r2
   8a3ec:	04400a0e 	bge	zero,r17,8a418 <___svfprintf_internal_r+0x11cc>
   8a3f0:	d8801f17 	ldw	r2,124(sp)
   8a3f4:	1c47883a 	add	r3,r3,r17
   8a3f8:	44000015 	stw	r16,0(r8)
   8a3fc:	10800044 	addi	r2,r2,1
   8a400:	44400115 	stw	r17,4(r8)
   8a404:	d8c02015 	stw	r3,128(sp)
   8a408:	d8801f15 	stw	r2,124(sp)
   8a40c:	010001c4 	movi	r4,7
   8a410:	20827516 	blt	r4,r2,8ade8 <___svfprintf_internal_r+0x1b9c>
   8a414:	42000204 	addi	r8,r8,8
   8a418:	88027b16 	blt	r17,zero,8ae08 <___svfprintf_internal_r+0x1bbc>
   8a41c:	d9003217 	ldw	r4,200(sp)
   8a420:	2463c83a 	sub	r17,r4,r17
   8a424:	0440990e 	bge	zero,r17,8a68c <___svfprintf_internal_r+0x1440>
   8a428:	05800404 	movi	r22,16
   8a42c:	d8801f17 	ldw	r2,124(sp)
   8a430:	b441530e 	bge	r22,r17,8a980 <___svfprintf_internal_r+0x1734>
   8a434:	010002b4 	movhi	r4,10
   8a438:	21313084 	addi	r4,r4,-15166
   8a43c:	d9002b15 	stw	r4,172(sp)
   8a440:	070001c4 	movi	fp,7
   8a444:	dd002c17 	ldw	r20,176(sp)
   8a448:	00000306 	br	8a458 <___svfprintf_internal_r+0x120c>
   8a44c:	42000204 	addi	r8,r8,8
   8a450:	8c7ffc04 	addi	r17,r17,-16
   8a454:	b4414d0e 	bge	r22,r17,8a98c <___svfprintf_internal_r+0x1740>
   8a458:	18c00404 	addi	r3,r3,16
   8a45c:	10800044 	addi	r2,r2,1
   8a460:	45400015 	stw	r21,0(r8)
   8a464:	45800115 	stw	r22,4(r8)
   8a468:	d8c02015 	stw	r3,128(sp)
   8a46c:	d8801f15 	stw	r2,124(sp)
   8a470:	e0bff60e 	bge	fp,r2,8a44c <__alt_data_end+0xfffba58c>
   8a474:	d9801e04 	addi	r6,sp,120
   8a478:	a00b883a 	mov	r5,r20
   8a47c:	9809883a 	mov	r4,r19
   8a480:	0092a6c0 	call	92a6c <__ssprint_r>
   8a484:	103c561e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a488:	d8c02017 	ldw	r3,128(sp)
   8a48c:	d8801f17 	ldw	r2,124(sp)
   8a490:	da000404 	addi	r8,sp,16
   8a494:	003fee06 	br	8a450 <__alt_data_end+0xfffba590>
   8a498:	d9402c17 	ldw	r5,176(sp)
   8a49c:	d9801e04 	addi	r6,sp,120
   8a4a0:	9809883a 	mov	r4,r19
   8a4a4:	0092a6c0 	call	92a6c <__ssprint_r>
   8a4a8:	103c4d1e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a4ac:	d8c02017 	ldw	r3,128(sp)
   8a4b0:	df002787 	ldb	fp,158(sp)
   8a4b4:	da000404 	addi	r8,sp,16
   8a4b8:	003d5a06 	br	89a24 <__alt_data_end+0xfffb9b64>
   8a4bc:	9080040c 	andi	r2,r18,16
   8a4c0:	10005c26 	beq	r2,zero,8a634 <___svfprintf_internal_r+0x13e8>
   8a4c4:	d9402d17 	ldw	r5,180(sp)
   8a4c8:	d8c02917 	ldw	r3,164(sp)
   8a4cc:	d8002785 	stb	zero,158(sp)
   8a4d0:	28800104 	addi	r2,r5,4
   8a4d4:	2d000017 	ldw	r20,0(r5)
   8a4d8:	002d883a 	mov	r22,zero
   8a4dc:	18005e16 	blt	r3,zero,8a658 <___svfprintf_internal_r+0x140c>
   8a4e0:	00ffdfc4 	movi	r3,-129
   8a4e4:	d8802d15 	stw	r2,180(sp)
   8a4e8:	90e4703a 	and	r18,r18,r3
   8a4ec:	0039883a 	mov	fp,zero
   8a4f0:	a03dfe26 	beq	r20,zero,89cec <__alt_data_end+0xfffb9e2c>
   8a4f4:	00800244 	movi	r2,9
   8a4f8:	153cb336 	bltu	r2,r20,897c8 <__alt_data_end+0xfffb9908>
   8a4fc:	a5000c04 	addi	r20,r20,48
   8a500:	dc001dc4 	addi	r16,sp,119
   8a504:	dd001dc5 	stb	r20,119(sp)
   8a508:	d8c02817 	ldw	r3,160(sp)
   8a50c:	1c07c83a 	sub	r3,r3,r16
   8a510:	d8c02e15 	stw	r3,184(sp)
   8a514:	003cf506 	br	898ec <__alt_data_end+0xfffb9a2c>
   8a518:	d8803317 	ldw	r2,204(sp)
   8a51c:	143fffc4 	addi	r16,r2,-1
   8a520:	043f560e 	bge	zero,r16,8a27c <__alt_data_end+0xfffba3bc>
   8a524:	07000404 	movi	fp,16
   8a528:	e403530e 	bge	fp,r16,8b278 <___svfprintf_internal_r+0x202c>
   8a52c:	014002b4 	movhi	r5,10
   8a530:	29713084 	addi	r5,r5,-15166
   8a534:	d9402b15 	stw	r5,172(sp)
   8a538:	01c001c4 	movi	r7,7
   8a53c:	dd002c17 	ldw	r20,176(sp)
   8a540:	00000306 	br	8a550 <___svfprintf_internal_r+0x1304>
   8a544:	843ffc04 	addi	r16,r16,-16
   8a548:	b5800204 	addi	r22,r22,8
   8a54c:	e400130e 	bge	fp,r16,8a59c <___svfprintf_internal_r+0x1350>
   8a550:	18c00404 	addi	r3,r3,16
   8a554:	8c400044 	addi	r17,r17,1
   8a558:	b5400015 	stw	r21,0(r22)
   8a55c:	b7000115 	stw	fp,4(r22)
   8a560:	d8c02015 	stw	r3,128(sp)
   8a564:	dc401f15 	stw	r17,124(sp)
   8a568:	3c7ff60e 	bge	r7,r17,8a544 <__alt_data_end+0xfffba684>
   8a56c:	d9801e04 	addi	r6,sp,120
   8a570:	a00b883a 	mov	r5,r20
   8a574:	9809883a 	mov	r4,r19
   8a578:	d9c03d15 	stw	r7,244(sp)
   8a57c:	0092a6c0 	call	92a6c <__ssprint_r>
   8a580:	d9c03d17 	ldw	r7,244(sp)
   8a584:	103c161e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a588:	843ffc04 	addi	r16,r16,-16
   8a58c:	d8c02017 	ldw	r3,128(sp)
   8a590:	dc401f17 	ldw	r17,124(sp)
   8a594:	dd800404 	addi	r22,sp,16
   8a598:	e43fed16 	blt	fp,r16,8a550 <__alt_data_end+0xfffba690>
   8a59c:	d8802b17 	ldw	r2,172(sp)
   8a5a0:	1c07883a 	add	r3,r3,r16
   8a5a4:	8c400044 	addi	r17,r17,1
   8a5a8:	b0800015 	stw	r2,0(r22)
   8a5ac:	b4000115 	stw	r16,4(r22)
   8a5b0:	d8c02015 	stw	r3,128(sp)
   8a5b4:	dc401f15 	stw	r17,124(sp)
   8a5b8:	008001c4 	movi	r2,7
   8a5bc:	147f2e0e 	bge	r2,r17,8a278 <__alt_data_end+0xfffba3b8>
   8a5c0:	d9402c17 	ldw	r5,176(sp)
   8a5c4:	d9801e04 	addi	r6,sp,120
   8a5c8:	9809883a 	mov	r4,r19
   8a5cc:	0092a6c0 	call	92a6c <__ssprint_r>
   8a5d0:	103c031e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a5d4:	d8c02017 	ldw	r3,128(sp)
   8a5d8:	dc401f17 	ldw	r17,124(sp)
   8a5dc:	dd800404 	addi	r22,sp,16
   8a5e0:	003f2606 	br	8a27c <__alt_data_end+0xfffba3bc>
   8a5e4:	9080040c 	andi	r2,r18,16
   8a5e8:	1000c326 	beq	r2,zero,8a8f8 <___svfprintf_internal_r+0x16ac>
   8a5ec:	d8802d17 	ldw	r2,180(sp)
   8a5f0:	15000017 	ldw	r20,0(r2)
   8a5f4:	10800104 	addi	r2,r2,4
   8a5f8:	d8802d15 	stw	r2,180(sp)
   8a5fc:	a02dd7fa 	srai	r22,r20,31
   8a600:	b005883a 	mov	r2,r22
   8a604:	103c680e 	bge	r2,zero,897a8 <__alt_data_end+0xfffb98e8>
   8a608:	0529c83a 	sub	r20,zero,r20
   8a60c:	a004c03a 	cmpne	r2,r20,zero
   8a610:	05adc83a 	sub	r22,zero,r22
   8a614:	b0adc83a 	sub	r22,r22,r2
   8a618:	d8802917 	ldw	r2,164(sp)
   8a61c:	07000b44 	movi	fp,45
   8a620:	df002785 	stb	fp,158(sp)
   8a624:	10022e16 	blt	r2,zero,8aee0 <___svfprintf_internal_r+0x1c94>
   8a628:	00bfdfc4 	movi	r2,-129
   8a62c:	90a4703a 	and	r18,r18,r2
   8a630:	003c6406 	br	897c4 <__alt_data_end+0xfffb9904>
   8a634:	9080100c 	andi	r2,r18,64
   8a638:	d8002785 	stb	zero,158(sp)
   8a63c:	10012526 	beq	r2,zero,8aad4 <___svfprintf_internal_r+0x1888>
   8a640:	d9002d17 	ldw	r4,180(sp)
   8a644:	d9402917 	ldw	r5,164(sp)
   8a648:	002d883a 	mov	r22,zero
   8a64c:	20800104 	addi	r2,r4,4
   8a650:	2500000b 	ldhu	r20,0(r4)
   8a654:	283fa20e 	bge	r5,zero,8a4e0 <__alt_data_end+0xfffba620>
   8a658:	d8802d15 	stw	r2,180(sp)
   8a65c:	0039883a 	mov	fp,zero
   8a660:	a584b03a 	or	r2,r20,r22
   8a664:	103c571e 	bne	r2,zero,897c4 <__alt_data_end+0xfffb9904>
   8a668:	00800044 	movi	r2,1
   8a66c:	003e5006 	br	89fb0 <__alt_data_end+0xfffba0f0>
   8a670:	d9402c17 	ldw	r5,176(sp)
   8a674:	d9801e04 	addi	r6,sp,120
   8a678:	9809883a 	mov	r4,r19
   8a67c:	0092a6c0 	call	92a6c <__ssprint_r>
   8a680:	103bd71e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a684:	d8c02017 	ldw	r3,128(sp)
   8a688:	da000404 	addi	r8,sp,16
   8a68c:	d9003217 	ldw	r4,200(sp)
   8a690:	d8802617 	ldw	r2,152(sp)
   8a694:	d9403317 	ldw	r5,204(sp)
   8a698:	8123883a 	add	r17,r16,r4
   8a69c:	11400216 	blt	r2,r5,8a6a8 <___svfprintf_internal_r+0x145c>
   8a6a0:	9100004c 	andi	r4,r18,1
   8a6a4:	20000d26 	beq	r4,zero,8a6dc <___svfprintf_internal_r+0x1490>
   8a6a8:	d9003817 	ldw	r4,224(sp)
   8a6ac:	d9403417 	ldw	r5,208(sp)
   8a6b0:	1907883a 	add	r3,r3,r4
   8a6b4:	d9001f17 	ldw	r4,124(sp)
   8a6b8:	41400015 	stw	r5,0(r8)
   8a6bc:	d9403817 	ldw	r5,224(sp)
   8a6c0:	21000044 	addi	r4,r4,1
   8a6c4:	d8c02015 	stw	r3,128(sp)
   8a6c8:	41400115 	stw	r5,4(r8)
   8a6cc:	d9001f15 	stw	r4,124(sp)
   8a6d0:	014001c4 	movi	r5,7
   8a6d4:	2901dc16 	blt	r5,r4,8ae48 <___svfprintf_internal_r+0x1bfc>
   8a6d8:	42000204 	addi	r8,r8,8
   8a6dc:	d9003317 	ldw	r4,204(sp)
   8a6e0:	8121883a 	add	r16,r16,r4
   8a6e4:	2085c83a 	sub	r2,r4,r2
   8a6e8:	8461c83a 	sub	r16,r16,r17
   8a6ec:	1400010e 	bge	r2,r16,8a6f4 <___svfprintf_internal_r+0x14a8>
   8a6f0:	1021883a 	mov	r16,r2
   8a6f4:	04000a0e 	bge	zero,r16,8a720 <___svfprintf_internal_r+0x14d4>
   8a6f8:	d9001f17 	ldw	r4,124(sp)
   8a6fc:	1c07883a 	add	r3,r3,r16
   8a700:	44400015 	stw	r17,0(r8)
   8a704:	21000044 	addi	r4,r4,1
   8a708:	44000115 	stw	r16,4(r8)
   8a70c:	d8c02015 	stw	r3,128(sp)
   8a710:	d9001f15 	stw	r4,124(sp)
   8a714:	014001c4 	movi	r5,7
   8a718:	2901e616 	blt	r5,r4,8aeb4 <___svfprintf_internal_r+0x1c68>
   8a71c:	42000204 	addi	r8,r8,8
   8a720:	8001f616 	blt	r16,zero,8aefc <___svfprintf_internal_r+0x1cb0>
   8a724:	1421c83a 	sub	r16,r2,r16
   8a728:	043d1c0e 	bge	zero,r16,89b9c <__alt_data_end+0xfffb9cdc>
   8a72c:	04400404 	movi	r17,16
   8a730:	d8801f17 	ldw	r2,124(sp)
   8a734:	8c3edd0e 	bge	r17,r16,8a2ac <__alt_data_end+0xfffba3ec>
   8a738:	014002b4 	movhi	r5,10
   8a73c:	29713084 	addi	r5,r5,-15166
   8a740:	d9402b15 	stw	r5,172(sp)
   8a744:	058001c4 	movi	r22,7
   8a748:	dd002c17 	ldw	r20,176(sp)
   8a74c:	00000306 	br	8a75c <___svfprintf_internal_r+0x1510>
   8a750:	42000204 	addi	r8,r8,8
   8a754:	843ffc04 	addi	r16,r16,-16
   8a758:	8c3ed70e 	bge	r17,r16,8a2b8 <__alt_data_end+0xfffba3f8>
   8a75c:	18c00404 	addi	r3,r3,16
   8a760:	10800044 	addi	r2,r2,1
   8a764:	45400015 	stw	r21,0(r8)
   8a768:	44400115 	stw	r17,4(r8)
   8a76c:	d8c02015 	stw	r3,128(sp)
   8a770:	d8801f15 	stw	r2,124(sp)
   8a774:	b0bff60e 	bge	r22,r2,8a750 <__alt_data_end+0xfffba890>
   8a778:	d9801e04 	addi	r6,sp,120
   8a77c:	a00b883a 	mov	r5,r20
   8a780:	9809883a 	mov	r4,r19
   8a784:	0092a6c0 	call	92a6c <__ssprint_r>
   8a788:	103b951e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a78c:	d8c02017 	ldw	r3,128(sp)
   8a790:	d8801f17 	ldw	r2,124(sp)
   8a794:	da000404 	addi	r8,sp,16
   8a798:	003fee06 	br	8a754 <__alt_data_end+0xfffba894>
   8a79c:	9088703a 	and	r4,r18,r2
   8a7a0:	203e8d1e 	bne	r4,zero,8a1d8 <__alt_data_end+0xfffba318>
   8a7a4:	dc401f17 	ldw	r17,124(sp)
   8a7a8:	40800115 	stw	r2,4(r8)
   8a7ac:	44000015 	stw	r16,0(r8)
   8a7b0:	8c400044 	addi	r17,r17,1
   8a7b4:	d8c02015 	stw	r3,128(sp)
   8a7b8:	dc401f15 	stw	r17,124(sp)
   8a7bc:	008001c4 	movi	r2,7
   8a7c0:	147f7f16 	blt	r2,r17,8a5c0 <__alt_data_end+0xfffba700>
   8a7c4:	45800204 	addi	r22,r8,8
   8a7c8:	003eac06 	br	8a27c <__alt_data_end+0xfffba3bc>
   8a7cc:	d9402c17 	ldw	r5,176(sp)
   8a7d0:	d9801e04 	addi	r6,sp,120
   8a7d4:	9809883a 	mov	r4,r19
   8a7d8:	0092a6c0 	call	92a6c <__ssprint_r>
   8a7dc:	103b801e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a7e0:	d8c02017 	ldw	r3,128(sp)
   8a7e4:	dc401f17 	ldw	r17,124(sp)
   8a7e8:	da000404 	addi	r8,sp,16
   8a7ec:	003e8406 	br	8a200 <__alt_data_end+0xfffba340>
   8a7f0:	d9402c17 	ldw	r5,176(sp)
   8a7f4:	d9801e04 	addi	r6,sp,120
   8a7f8:	9809883a 	mov	r4,r19
   8a7fc:	0092a6c0 	call	92a6c <__ssprint_r>
   8a800:	103b771e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a804:	d8c02017 	ldw	r3,128(sp)
   8a808:	dc401f17 	ldw	r17,124(sp)
   8a80c:	dd800404 	addi	r22,sp,16
   8a810:	003e8606 	br	8a22c <__alt_data_end+0xfffba36c>
   8a814:	0029883a 	mov	r20,zero
   8a818:	a5000c04 	addi	r20,r20,48
   8a81c:	dc001dc4 	addi	r16,sp,119
   8a820:	dd001dc5 	stb	r20,119(sp)
   8a824:	003f3806 	br	8a508 <__alt_data_end+0xfffba648>
   8a828:	d9402c17 	ldw	r5,176(sp)
   8a82c:	d9801e04 	addi	r6,sp,120
   8a830:	9809883a 	mov	r4,r19
   8a834:	0092a6c0 	call	92a6c <__ssprint_r>
   8a838:	103b691e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a83c:	d8c02017 	ldw	r3,128(sp)
   8a840:	da000404 	addi	r8,sp,16
   8a844:	003c9506 	br	89a9c <__alt_data_end+0xfffb9bdc>
   8a848:	d9003617 	ldw	r4,216(sp)
   8a84c:	d9403717 	ldw	r5,220(sp)
   8a850:	da003e15 	stw	r8,248(sp)
   8a854:	009278c0 	call	9278c <__fpclassifyd>
   8a858:	da003e17 	ldw	r8,248(sp)
   8a85c:	1000bd1e 	bne	r2,zero,8ab54 <___svfprintf_internal_r+0x1908>
   8a860:	008011c4 	movi	r2,71
   8a864:	14411e0e 	bge	r2,r17,8ace0 <___svfprintf_internal_r+0x1a94>
   8a868:	040002b4 	movhi	r16,10
   8a86c:	84312304 	addi	r16,r16,-15220
   8a870:	00c000c4 	movi	r3,3
   8a874:	00bfdfc4 	movi	r2,-129
   8a878:	d8c02a15 	stw	r3,168(sp)
   8a87c:	90a4703a 	and	r18,r18,r2
   8a880:	df002783 	ldbu	fp,158(sp)
   8a884:	d8c02e15 	stw	r3,184(sp)
   8a888:	d8002915 	stw	zero,164(sp)
   8a88c:	d8003215 	stw	zero,200(sp)
   8a890:	003c1c06 	br	89904 <__alt_data_end+0xfffb9a44>
   8a894:	9080100c 	andi	r2,r18,64
   8a898:	d8002785 	stb	zero,158(sp)
   8a89c:	10009426 	beq	r2,zero,8aaf0 <___svfprintf_internal_r+0x18a4>
   8a8a0:	d8c02d17 	ldw	r3,180(sp)
   8a8a4:	d9002917 	ldw	r4,164(sp)
   8a8a8:	002d883a 	mov	r22,zero
   8a8ac:	18800104 	addi	r2,r3,4
   8a8b0:	1d00000b 	ldhu	r20,0(r3)
   8a8b4:	203ec10e 	bge	r4,zero,8a3bc <__alt_data_end+0xfffba4fc>
   8a8b8:	a586b03a 	or	r3,r20,r22
   8a8bc:	d8802d15 	stw	r2,180(sp)
   8a8c0:	183ec21e 	bne	r3,zero,8a3cc <__alt_data_end+0xfffba50c>
   8a8c4:	0039883a 	mov	fp,zero
   8a8c8:	0005883a 	mov	r2,zero
   8a8cc:	003db806 	br	89fb0 <__alt_data_end+0xfffba0f0>
   8a8d0:	d8802d17 	ldw	r2,180(sp)
   8a8d4:	d8c02d17 	ldw	r3,180(sp)
   8a8d8:	d9002d17 	ldw	r4,180(sp)
   8a8dc:	10800017 	ldw	r2,0(r2)
   8a8e0:	18c00117 	ldw	r3,4(r3)
   8a8e4:	21000204 	addi	r4,r4,8
   8a8e8:	d8803615 	stw	r2,216(sp)
   8a8ec:	d8c03715 	stw	r3,220(sp)
   8a8f0:	d9002d15 	stw	r4,180(sp)
   8a8f4:	003b8206 	br	89700 <__alt_data_end+0xfffb9840>
   8a8f8:	9080100c 	andi	r2,r18,64
   8a8fc:	10010726 	beq	r2,zero,8ad1c <___svfprintf_internal_r+0x1ad0>
   8a900:	d8c02d17 	ldw	r3,180(sp)
   8a904:	1d00000f 	ldh	r20,0(r3)
   8a908:	18c00104 	addi	r3,r3,4
   8a90c:	d8c02d15 	stw	r3,180(sp)
   8a910:	a02dd7fa 	srai	r22,r20,31
   8a914:	b005883a 	mov	r2,r22
   8a918:	003ba206 	br	897a4 <__alt_data_end+0xfffb98e4>
   8a91c:	9080100c 	andi	r2,r18,64
   8a920:	10010526 	beq	r2,zero,8ad38 <___svfprintf_internal_r+0x1aec>
   8a924:	d9002d17 	ldw	r4,180(sp)
   8a928:	002d883a 	mov	r22,zero
   8a92c:	2500000b 	ldhu	r20,0(r4)
   8a930:	21000104 	addi	r4,r4,4
   8a934:	d9002d15 	stw	r4,180(sp)
   8a938:	003cfe06 	br	89d34 <__alt_data_end+0xfffb9e74>
   8a93c:	bc400007 	ldb	r17,0(r23)
   8a940:	003a9606 	br	8939c <__alt_data_end+0xfffb94dc>
   8a944:	9080040c 	andi	r2,r18,16
   8a948:	10010126 	beq	r2,zero,8ad50 <___svfprintf_internal_r+0x1b04>
   8a94c:	d9402d17 	ldw	r5,180(sp)
   8a950:	d8c02f17 	ldw	r3,188(sp)
   8a954:	28800017 	ldw	r2,0(r5)
   8a958:	29400104 	addi	r5,r5,4
   8a95c:	d9402d15 	stw	r5,180(sp)
   8a960:	10c00015 	stw	r3,0(r2)
   8a964:	003a6406 	br	892f8 <__alt_data_end+0xfffb9438>
   8a968:	d9002917 	ldw	r4,164(sp)
   8a96c:	d8002785 	stb	zero,158(sp)
   8a970:	203d8d16 	blt	r4,zero,89fa8 <__alt_data_end+0xfffba0e8>
   8a974:	00bfdfc4 	movi	r2,-129
   8a978:	90a4703a 	and	r18,r18,r2
   8a97c:	003b0506 	br	89594 <__alt_data_end+0xfffb96d4>
   8a980:	014002b4 	movhi	r5,10
   8a984:	29713084 	addi	r5,r5,-15166
   8a988:	d9402b15 	stw	r5,172(sp)
   8a98c:	d9402b17 	ldw	r5,172(sp)
   8a990:	1c47883a 	add	r3,r3,r17
   8a994:	10800044 	addi	r2,r2,1
   8a998:	41400015 	stw	r5,0(r8)
   8a99c:	44400115 	stw	r17,4(r8)
   8a9a0:	d8c02015 	stw	r3,128(sp)
   8a9a4:	d8801f15 	stw	r2,124(sp)
   8a9a8:	010001c4 	movi	r4,7
   8a9ac:	20bf3016 	blt	r4,r2,8a670 <__alt_data_end+0xfffba7b0>
   8a9b0:	42000204 	addi	r8,r8,8
   8a9b4:	003f3506 	br	8a68c <__alt_data_end+0xfffba7cc>
   8a9b8:	010002b4 	movhi	r4,10
   8a9bc:	21313084 	addi	r4,r4,-15166
   8a9c0:	d9002b15 	stw	r4,172(sp)
   8a9c4:	003c5e06 	br	89b40 <__alt_data_end+0xfffb9c80>
   8a9c8:	d9402c17 	ldw	r5,176(sp)
   8a9cc:	d9801e04 	addi	r6,sp,120
   8a9d0:	9809883a 	mov	r4,r19
   8a9d4:	0092a6c0 	call	92a6c <__ssprint_r>
   8a9d8:	103b011e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8a9dc:	d8c02017 	ldw	r3,128(sp)
   8a9e0:	da000404 	addi	r8,sp,16
   8a9e4:	003d9306 	br	8a034 <__alt_data_end+0xfffba174>
   8a9e8:	d8801f17 	ldw	r2,124(sp)
   8a9ec:	014002b4 	movhi	r5,10
   8a9f0:	01000044 	movi	r4,1
   8a9f4:	18c00044 	addi	r3,r3,1
   8a9f8:	10800044 	addi	r2,r2,1
   8a9fc:	29713004 	addi	r5,r5,-15168
   8aa00:	41000115 	stw	r4,4(r8)
   8aa04:	41400015 	stw	r5,0(r8)
   8aa08:	d8c02015 	stw	r3,128(sp)
   8aa0c:	d8801f15 	stw	r2,124(sp)
   8aa10:	010001c4 	movi	r4,7
   8aa14:	2080b516 	blt	r4,r2,8acec <___svfprintf_internal_r+0x1aa0>
   8aa18:	42000204 	addi	r8,r8,8
   8aa1c:	8800041e 	bne	r17,zero,8aa30 <___svfprintf_internal_r+0x17e4>
   8aa20:	d8803317 	ldw	r2,204(sp)
   8aa24:	1000021e 	bne	r2,zero,8aa30 <___svfprintf_internal_r+0x17e4>
   8aa28:	9080004c 	andi	r2,r18,1
   8aa2c:	103c5b26 	beq	r2,zero,89b9c <__alt_data_end+0xfffb9cdc>
   8aa30:	d9003817 	ldw	r4,224(sp)
   8aa34:	d8801f17 	ldw	r2,124(sp)
   8aa38:	d9403417 	ldw	r5,208(sp)
   8aa3c:	20c7883a 	add	r3,r4,r3
   8aa40:	10800044 	addi	r2,r2,1
   8aa44:	41000115 	stw	r4,4(r8)
   8aa48:	41400015 	stw	r5,0(r8)
   8aa4c:	d8c02015 	stw	r3,128(sp)
   8aa50:	d8801f15 	stw	r2,124(sp)
   8aa54:	010001c4 	movi	r4,7
   8aa58:	20818016 	blt	r4,r2,8b05c <___svfprintf_internal_r+0x1e10>
   8aa5c:	42000204 	addi	r8,r8,8
   8aa60:	0463c83a 	sub	r17,zero,r17
   8aa64:	0440cb0e 	bge	zero,r17,8ad94 <___svfprintf_internal_r+0x1b48>
   8aa68:	05800404 	movi	r22,16
   8aa6c:	b440e80e 	bge	r22,r17,8ae10 <___svfprintf_internal_r+0x1bc4>
   8aa70:	014002b4 	movhi	r5,10
   8aa74:	29713084 	addi	r5,r5,-15166
   8aa78:	d9402b15 	stw	r5,172(sp)
   8aa7c:	070001c4 	movi	fp,7
   8aa80:	dd002c17 	ldw	r20,176(sp)
   8aa84:	00000306 	br	8aa94 <___svfprintf_internal_r+0x1848>
   8aa88:	42000204 	addi	r8,r8,8
   8aa8c:	8c7ffc04 	addi	r17,r17,-16
   8aa90:	b440e20e 	bge	r22,r17,8ae1c <___svfprintf_internal_r+0x1bd0>
   8aa94:	18c00404 	addi	r3,r3,16
   8aa98:	10800044 	addi	r2,r2,1
   8aa9c:	45400015 	stw	r21,0(r8)
   8aaa0:	45800115 	stw	r22,4(r8)
   8aaa4:	d8c02015 	stw	r3,128(sp)
   8aaa8:	d8801f15 	stw	r2,124(sp)
   8aaac:	e0bff60e 	bge	fp,r2,8aa88 <__alt_data_end+0xfffbabc8>
   8aab0:	d9801e04 	addi	r6,sp,120
   8aab4:	a00b883a 	mov	r5,r20
   8aab8:	9809883a 	mov	r4,r19
   8aabc:	0092a6c0 	call	92a6c <__ssprint_r>
   8aac0:	103ac71e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8aac4:	d8c02017 	ldw	r3,128(sp)
   8aac8:	d8801f17 	ldw	r2,124(sp)
   8aacc:	da000404 	addi	r8,sp,16
   8aad0:	003fee06 	br	8aa8c <__alt_data_end+0xfffbabcc>
   8aad4:	d8c02d17 	ldw	r3,180(sp)
   8aad8:	d9002917 	ldw	r4,164(sp)
   8aadc:	002d883a 	mov	r22,zero
   8aae0:	18800104 	addi	r2,r3,4
   8aae4:	1d000017 	ldw	r20,0(r3)
   8aae8:	203e7d0e 	bge	r4,zero,8a4e0 <__alt_data_end+0xfffba620>
   8aaec:	003eda06 	br	8a658 <__alt_data_end+0xfffba798>
   8aaf0:	d9402d17 	ldw	r5,180(sp)
   8aaf4:	d8c02917 	ldw	r3,164(sp)
   8aaf8:	002d883a 	mov	r22,zero
   8aafc:	28800104 	addi	r2,r5,4
   8ab00:	2d000017 	ldw	r20,0(r5)
   8ab04:	183e2d0e 	bge	r3,zero,8a3bc <__alt_data_end+0xfffba4fc>
   8ab08:	003f6b06 	br	8a8b8 <__alt_data_end+0xfffba9f8>
   8ab0c:	d8c02d15 	stw	r3,180(sp)
   8ab10:	0039883a 	mov	fp,zero
   8ab14:	003ed206 	br	8a660 <__alt_data_end+0xfffba7a0>
   8ab18:	bc400043 	ldbu	r17,1(r23)
   8ab1c:	94800814 	ori	r18,r18,32
   8ab20:	bdc00044 	addi	r23,r23,1
   8ab24:	8c403fcc 	andi	r17,r17,255
   8ab28:	8c40201c 	xori	r17,r17,128
   8ab2c:	8c7fe004 	addi	r17,r17,-128
   8ab30:	003a1a06 	br	8939c <__alt_data_end+0xfffb94dc>
   8ab34:	d9402c17 	ldw	r5,176(sp)
   8ab38:	d9801e04 	addi	r6,sp,120
   8ab3c:	9809883a 	mov	r4,r19
   8ab40:	0092a6c0 	call	92a6c <__ssprint_r>
   8ab44:	103aa61e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8ab48:	d8c02017 	ldw	r3,128(sp)
   8ab4c:	da000404 	addi	r8,sp,16
   8ab50:	003d4a06 	br	8a07c <__alt_data_end+0xfffba1bc>
   8ab54:	d9002917 	ldw	r4,164(sp)
   8ab58:	05bff7c4 	movi	r22,-33
   8ab5c:	00bfffc4 	movi	r2,-1
   8ab60:	8dac703a 	and	r22,r17,r22
   8ab64:	20806a26 	beq	r4,r2,8ad10 <___svfprintf_internal_r+0x1ac4>
   8ab68:	008011c4 	movi	r2,71
   8ab6c:	b0813726 	beq	r22,r2,8b04c <___svfprintf_internal_r+0x1e00>
   8ab70:	d9003717 	ldw	r4,220(sp)
   8ab74:	90c04014 	ori	r3,r18,256
   8ab78:	d8c02b15 	stw	r3,172(sp)
   8ab7c:	20015d16 	blt	r4,zero,8b0f4 <___svfprintf_internal_r+0x1ea8>
   8ab80:	dd003717 	ldw	r20,220(sp)
   8ab84:	d8002a05 	stb	zero,168(sp)
   8ab88:	00801984 	movi	r2,102
   8ab8c:	88814026 	beq	r17,r2,8b090 <___svfprintf_internal_r+0x1e44>
   8ab90:	00801184 	movi	r2,70
   8ab94:	88817126 	beq	r17,r2,8b15c <___svfprintf_internal_r+0x1f10>
   8ab98:	00801144 	movi	r2,69
   8ab9c:	b0816226 	beq	r22,r2,8b128 <___svfprintf_internal_r+0x1edc>
   8aba0:	d8c02917 	ldw	r3,164(sp)
   8aba4:	d8802104 	addi	r2,sp,132
   8aba8:	d8800315 	stw	r2,12(sp)
   8abac:	d9403617 	ldw	r5,216(sp)
   8abb0:	d8802504 	addi	r2,sp,148
   8abb4:	d8800215 	stw	r2,8(sp)
   8abb8:	d8802604 	addi	r2,sp,152
   8abbc:	d8c00015 	stw	r3,0(sp)
   8abc0:	d8800115 	stw	r2,4(sp)
   8abc4:	01c00084 	movi	r7,2
   8abc8:	a00d883a 	mov	r6,r20
   8abcc:	9809883a 	mov	r4,r19
   8abd0:	d8c03d15 	stw	r3,244(sp)
   8abd4:	da003e15 	stw	r8,248(sp)
   8abd8:	008db700 	call	8db70 <_dtoa_r>
   8abdc:	1021883a 	mov	r16,r2
   8abe0:	008019c4 	movi	r2,103
   8abe4:	d8c03d17 	ldw	r3,244(sp)
   8abe8:	da003e17 	ldw	r8,248(sp)
   8abec:	8880e726 	beq	r17,r2,8af8c <___svfprintf_internal_r+0x1d40>
   8abf0:	008011c4 	movi	r2,71
   8abf4:	8880d426 	beq	r17,r2,8af48 <___svfprintf_internal_r+0x1cfc>
   8abf8:	80f9883a 	add	fp,r16,r3
   8abfc:	d9003617 	ldw	r4,216(sp)
   8ac00:	000d883a 	mov	r6,zero
   8ac04:	000f883a 	mov	r7,zero
   8ac08:	a00b883a 	mov	r5,r20
   8ac0c:	da003e15 	stw	r8,248(sp)
   8ac10:	0097a380 	call	97a38 <__eqdf2>
   8ac14:	da003e17 	ldw	r8,248(sp)
   8ac18:	1000e426 	beq	r2,zero,8afac <___svfprintf_internal_r+0x1d60>
   8ac1c:	d8802117 	ldw	r2,132(sp)
   8ac20:	1700062e 	bgeu	r2,fp,8ac3c <___svfprintf_internal_r+0x19f0>
   8ac24:	01000c04 	movi	r4,48
   8ac28:	10c00044 	addi	r3,r2,1
   8ac2c:	d8c02115 	stw	r3,132(sp)
   8ac30:	11000005 	stb	r4,0(r2)
   8ac34:	d8802117 	ldw	r2,132(sp)
   8ac38:	173ffb36 	bltu	r2,fp,8ac28 <__alt_data_end+0xfffbad68>
   8ac3c:	1405c83a 	sub	r2,r2,r16
   8ac40:	d8803315 	stw	r2,204(sp)
   8ac44:	008011c4 	movi	r2,71
   8ac48:	b080c526 	beq	r22,r2,8af60 <___svfprintf_internal_r+0x1d14>
   8ac4c:	00801944 	movi	r2,101
   8ac50:	1441d90e 	bge	r2,r17,8b3b8 <___svfprintf_internal_r+0x216c>
   8ac54:	d8c02617 	ldw	r3,152(sp)
   8ac58:	00801984 	movi	r2,102
   8ac5c:	d8c03215 	stw	r3,200(sp)
   8ac60:	88813426 	beq	r17,r2,8b134 <___svfprintf_internal_r+0x1ee8>
   8ac64:	d8c03217 	ldw	r3,200(sp)
   8ac68:	d9003317 	ldw	r4,204(sp)
   8ac6c:	19012516 	blt	r3,r4,8b104 <___svfprintf_internal_r+0x1eb8>
   8ac70:	9480004c 	andi	r18,r18,1
   8ac74:	9001841e 	bne	r18,zero,8b288 <___svfprintf_internal_r+0x203c>
   8ac78:	1805883a 	mov	r2,r3
   8ac7c:	1801cc16 	blt	r3,zero,8b3b0 <___svfprintf_internal_r+0x2164>
   8ac80:	d8c03217 	ldw	r3,200(sp)
   8ac84:	044019c4 	movi	r17,103
   8ac88:	d8c02e15 	stw	r3,184(sp)
   8ac8c:	df002a07 	ldb	fp,168(sp)
   8ac90:	e000a61e 	bne	fp,zero,8af2c <___svfprintf_internal_r+0x1ce0>
   8ac94:	df002783 	ldbu	fp,158(sp)
   8ac98:	d8802a15 	stw	r2,168(sp)
   8ac9c:	dc802b17 	ldw	r18,172(sp)
   8aca0:	d8002915 	stw	zero,164(sp)
   8aca4:	003b1706 	br	89904 <__alt_data_end+0xfffb9a44>
   8aca8:	040002b4 	movhi	r16,10
   8acac:	84312004 	addi	r16,r16,-15232
   8acb0:	003aa606 	br	8974c <__alt_data_end+0xfffb988c>
   8acb4:	d9003917 	ldw	r4,228(sp)
   8acb8:	04001004 	movi	r16,64
   8acbc:	800b883a 	mov	r5,r16
   8acc0:	00905500 	call	90550 <_malloc_r>
   8acc4:	d9002c17 	ldw	r4,176(sp)
   8acc8:	20800015 	stw	r2,0(r4)
   8accc:	20800415 	stw	r2,16(r4)
   8acd0:	1001cb26 	beq	r2,zero,8b400 <___svfprintf_internal_r+0x21b4>
   8acd4:	d8802c17 	ldw	r2,176(sp)
   8acd8:	14000515 	stw	r16,20(r2)
   8acdc:	00397606 	br	892b8 <__alt_data_end+0xfffb93f8>
   8ace0:	040002b4 	movhi	r16,10
   8ace4:	84312204 	addi	r16,r16,-15224
   8ace8:	003ee106 	br	8a870 <__alt_data_end+0xfffba9b0>
   8acec:	d9402c17 	ldw	r5,176(sp)
   8acf0:	d9801e04 	addi	r6,sp,120
   8acf4:	9809883a 	mov	r4,r19
   8acf8:	0092a6c0 	call	92a6c <__ssprint_r>
   8acfc:	103a381e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8ad00:	dc402617 	ldw	r17,152(sp)
   8ad04:	d8c02017 	ldw	r3,128(sp)
   8ad08:	da000404 	addi	r8,sp,16
   8ad0c:	003f4306 	br	8aa1c <__alt_data_end+0xfffbab5c>
   8ad10:	01400184 	movi	r5,6
   8ad14:	d9402915 	stw	r5,164(sp)
   8ad18:	003f9506 	br	8ab70 <__alt_data_end+0xfffbacb0>
   8ad1c:	d9002d17 	ldw	r4,180(sp)
   8ad20:	25000017 	ldw	r20,0(r4)
   8ad24:	21000104 	addi	r4,r4,4
   8ad28:	d9002d15 	stw	r4,180(sp)
   8ad2c:	a02dd7fa 	srai	r22,r20,31
   8ad30:	b005883a 	mov	r2,r22
   8ad34:	003a9b06 	br	897a4 <__alt_data_end+0xfffb98e4>
   8ad38:	d9402d17 	ldw	r5,180(sp)
   8ad3c:	002d883a 	mov	r22,zero
   8ad40:	2d000017 	ldw	r20,0(r5)
   8ad44:	29400104 	addi	r5,r5,4
   8ad48:	d9402d15 	stw	r5,180(sp)
   8ad4c:	003bf906 	br	89d34 <__alt_data_end+0xfffb9e74>
   8ad50:	9480100c 	andi	r18,r18,64
   8ad54:	90006e26 	beq	r18,zero,8af10 <___svfprintf_internal_r+0x1cc4>
   8ad58:	d9002d17 	ldw	r4,180(sp)
   8ad5c:	d9402f17 	ldw	r5,188(sp)
   8ad60:	20800017 	ldw	r2,0(r4)
   8ad64:	21000104 	addi	r4,r4,4
   8ad68:	d9002d15 	stw	r4,180(sp)
   8ad6c:	1140000d 	sth	r5,0(r2)
   8ad70:	00396106 	br	892f8 <__alt_data_end+0xfffb9438>
   8ad74:	d9402c17 	ldw	r5,176(sp)
   8ad78:	d9801e04 	addi	r6,sp,120
   8ad7c:	9809883a 	mov	r4,r19
   8ad80:	0092a6c0 	call	92a6c <__ssprint_r>
   8ad84:	103a161e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8ad88:	d8c02017 	ldw	r3,128(sp)
   8ad8c:	d8801f17 	ldw	r2,124(sp)
   8ad90:	da000404 	addi	r8,sp,16
   8ad94:	d9403317 	ldw	r5,204(sp)
   8ad98:	10800044 	addi	r2,r2,1
   8ad9c:	44000015 	stw	r16,0(r8)
   8ada0:	28c7883a 	add	r3,r5,r3
   8ada4:	003b7706 	br	89b84 <__alt_data_end+0xfffb9cc4>
   8ada8:	8009883a 	mov	r4,r16
   8adac:	da003e15 	stw	r8,248(sp)
   8adb0:	00891b40 	call	891b4 <strlen>
   8adb4:	d8802e15 	stw	r2,184(sp)
   8adb8:	da003e17 	ldw	r8,248(sp)
   8adbc:	103c280e 	bge	r2,zero,89e60 <__alt_data_end+0xfffb9fa0>
   8adc0:	0005883a 	mov	r2,zero
   8adc4:	003c2606 	br	89e60 <__alt_data_end+0xfffb9fa0>
   8adc8:	00bfffc4 	movi	r2,-1
   8adcc:	003a0906 	br	895f4 <__alt_data_end+0xfffb9734>
   8add0:	010002b4 	movhi	r4,10
   8add4:	21313484 	addi	r4,r4,-15150
   8add8:	d9003515 	stw	r4,212(sp)
   8addc:	003b0606 	br	899f8 <__alt_data_end+0xfffb9b38>
   8ade0:	013fffc4 	movi	r4,-1
   8ade4:	003a2706 	br	89684 <__alt_data_end+0xfffb97c4>
   8ade8:	d9402c17 	ldw	r5,176(sp)
   8adec:	d9801e04 	addi	r6,sp,120
   8adf0:	9809883a 	mov	r4,r19
   8adf4:	0092a6c0 	call	92a6c <__ssprint_r>
   8adf8:	1039f91e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8adfc:	d8c02017 	ldw	r3,128(sp)
   8ae00:	da000404 	addi	r8,sp,16
   8ae04:	003d8406 	br	8a418 <__alt_data_end+0xfffba558>
   8ae08:	0023883a 	mov	r17,zero
   8ae0c:	003d8306 	br	8a41c <__alt_data_end+0xfffba55c>
   8ae10:	010002b4 	movhi	r4,10
   8ae14:	21313084 	addi	r4,r4,-15166
   8ae18:	d9002b15 	stw	r4,172(sp)
   8ae1c:	d9002b17 	ldw	r4,172(sp)
   8ae20:	1c47883a 	add	r3,r3,r17
   8ae24:	10800044 	addi	r2,r2,1
   8ae28:	41000015 	stw	r4,0(r8)
   8ae2c:	44400115 	stw	r17,4(r8)
   8ae30:	d8c02015 	stw	r3,128(sp)
   8ae34:	d8801f15 	stw	r2,124(sp)
   8ae38:	010001c4 	movi	r4,7
   8ae3c:	20bfcd16 	blt	r4,r2,8ad74 <__alt_data_end+0xfffbaeb4>
   8ae40:	42000204 	addi	r8,r8,8
   8ae44:	003fd306 	br	8ad94 <__alt_data_end+0xfffbaed4>
   8ae48:	d9402c17 	ldw	r5,176(sp)
   8ae4c:	d9801e04 	addi	r6,sp,120
   8ae50:	9809883a 	mov	r4,r19
   8ae54:	0092a6c0 	call	92a6c <__ssprint_r>
   8ae58:	1039e11e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8ae5c:	d8802617 	ldw	r2,152(sp)
   8ae60:	d8c02017 	ldw	r3,128(sp)
   8ae64:	da000404 	addi	r8,sp,16
   8ae68:	003e1c06 	br	8a6dc <__alt_data_end+0xfffba81c>
   8ae6c:	d8802917 	ldw	r2,164(sp)
   8ae70:	00c00184 	movi	r3,6
   8ae74:	1880012e 	bgeu	r3,r2,8ae7c <___svfprintf_internal_r+0x1c30>
   8ae78:	1805883a 	mov	r2,r3
   8ae7c:	d8802e15 	stw	r2,184(sp)
   8ae80:	1000f316 	blt	r2,zero,8b250 <___svfprintf_internal_r+0x2004>
   8ae84:	040002b4 	movhi	r16,10
   8ae88:	d8802a15 	stw	r2,168(sp)
   8ae8c:	dd002d15 	stw	r20,180(sp)
   8ae90:	d8002915 	stw	zero,164(sp)
   8ae94:	d8003215 	stw	zero,200(sp)
   8ae98:	84312e04 	addi	r16,r16,-15176
   8ae9c:	0039883a 	mov	fp,zero
   8aea0:	003a9f06 	br	89920 <__alt_data_end+0xfffb9a60>
   8aea4:	010002b4 	movhi	r4,10
   8aea8:	21313484 	addi	r4,r4,-15150
   8aeac:	d9003515 	stw	r4,212(sp)
   8aeb0:	003b5f06 	br	89c30 <__alt_data_end+0xfffb9d70>
   8aeb4:	d9402c17 	ldw	r5,176(sp)
   8aeb8:	d9801e04 	addi	r6,sp,120
   8aebc:	9809883a 	mov	r4,r19
   8aec0:	0092a6c0 	call	92a6c <__ssprint_r>
   8aec4:	1039c61e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8aec8:	d8802617 	ldw	r2,152(sp)
   8aecc:	d9403317 	ldw	r5,204(sp)
   8aed0:	d8c02017 	ldw	r3,128(sp)
   8aed4:	da000404 	addi	r8,sp,16
   8aed8:	2885c83a 	sub	r2,r5,r2
   8aedc:	003e1006 	br	8a720 <__alt_data_end+0xfffba860>
   8aee0:	00800044 	movi	r2,1
   8aee4:	10803fcc 	andi	r2,r2,255
   8aee8:	00c00044 	movi	r3,1
   8aeec:	10fa3526 	beq	r2,r3,897c4 <__alt_data_end+0xfffb9904>
   8aef0:	00c00084 	movi	r3,2
   8aef4:	10fb9e26 	beq	r2,r3,89d70 <__alt_data_end+0xfffb9eb0>
   8aef8:	003a6406 	br	8988c <__alt_data_end+0xfffb99cc>
   8aefc:	0021883a 	mov	r16,zero
   8af00:	003e0806 	br	8a724 <__alt_data_end+0xfffba864>
   8af04:	07000b44 	movi	fp,45
   8af08:	df002785 	stb	fp,158(sp)
   8af0c:	003a0b06 	br	8973c <__alt_data_end+0xfffb987c>
   8af10:	d8c02d17 	ldw	r3,180(sp)
   8af14:	d9002f17 	ldw	r4,188(sp)
   8af18:	18800017 	ldw	r2,0(r3)
   8af1c:	18c00104 	addi	r3,r3,4
   8af20:	d8c02d15 	stw	r3,180(sp)
   8af24:	11000015 	stw	r4,0(r2)
   8af28:	0038f306 	br	892f8 <__alt_data_end+0xfffb9438>
   8af2c:	00c00b44 	movi	r3,45
   8af30:	d8c02785 	stb	r3,158(sp)
   8af34:	d8802a15 	stw	r2,168(sp)
   8af38:	dc802b17 	ldw	r18,172(sp)
   8af3c:	d8002915 	stw	zero,164(sp)
   8af40:	07000b44 	movi	fp,45
   8af44:	003a7306 	br	89914 <__alt_data_end+0xfffb9a54>
   8af48:	9080004c 	andi	r2,r18,1
   8af4c:	1000941e 	bne	r2,zero,8b1a0 <___svfprintf_internal_r+0x1f54>
   8af50:	d8802117 	ldw	r2,132(sp)
   8af54:	1405c83a 	sub	r2,r2,r16
   8af58:	d8803315 	stw	r2,204(sp)
   8af5c:	b441161e 	bne	r22,r17,8b3b8 <___svfprintf_internal_r+0x216c>
   8af60:	dd802617 	ldw	r22,152(sp)
   8af64:	00bfff44 	movi	r2,-3
   8af68:	b0801a16 	blt	r22,r2,8afd4 <___svfprintf_internal_r+0x1d88>
   8af6c:	d9402917 	ldw	r5,164(sp)
   8af70:	2d801816 	blt	r5,r22,8afd4 <___svfprintf_internal_r+0x1d88>
   8af74:	dd803215 	stw	r22,200(sp)
   8af78:	003f3a06 	br	8ac64 <__alt_data_end+0xfffbada4>
   8af7c:	1025883a 	mov	r18,r2
   8af80:	0039883a 	mov	fp,zero
   8af84:	00800084 	movi	r2,2
   8af88:	003fd606 	br	8aee4 <__alt_data_end+0xfffbb024>
   8af8c:	9080004c 	andi	r2,r18,1
   8af90:	103f191e 	bne	r2,zero,8abf8 <__alt_data_end+0xfffbad38>
   8af94:	d8802117 	ldw	r2,132(sp)
   8af98:	003f2806 	br	8ac3c <__alt_data_end+0xfffbad7c>
   8af9c:	010002b4 	movhi	r4,10
   8afa0:	21313084 	addi	r4,r4,-15166
   8afa4:	d9002b15 	stw	r4,172(sp)
   8afa8:	003c7c06 	br	8a19c <__alt_data_end+0xfffba2dc>
   8afac:	e005883a 	mov	r2,fp
   8afb0:	003f2206 	br	8ac3c <__alt_data_end+0xfffbad7c>
   8afb4:	d9402917 	ldw	r5,164(sp)
   8afb8:	df002783 	ldbu	fp,158(sp)
   8afbc:	dd002d15 	stw	r20,180(sp)
   8afc0:	d9402a15 	stw	r5,168(sp)
   8afc4:	d9402e15 	stw	r5,184(sp)
   8afc8:	d8002915 	stw	zero,164(sp)
   8afcc:	d8003215 	stw	zero,200(sp)
   8afd0:	003a4c06 	br	89904 <__alt_data_end+0xfffb9a44>
   8afd4:	8c7fff84 	addi	r17,r17,-2
   8afd8:	b5bfffc4 	addi	r22,r22,-1
   8afdc:	dd802615 	stw	r22,152(sp)
   8afe0:	dc4022c5 	stb	r17,139(sp)
   8afe4:	b000c316 	blt	r22,zero,8b2f4 <___svfprintf_internal_r+0x20a8>
   8afe8:	00800ac4 	movi	r2,43
   8afec:	d8802305 	stb	r2,140(sp)
   8aff0:	00800244 	movi	r2,9
   8aff4:	15806e16 	blt	r2,r22,8b1b0 <___svfprintf_internal_r+0x1f64>
   8aff8:	00800c04 	movi	r2,48
   8affc:	b5800c04 	addi	r22,r22,48
   8b000:	d8802345 	stb	r2,141(sp)
   8b004:	dd802385 	stb	r22,142(sp)
   8b008:	d88023c4 	addi	r2,sp,143
   8b00c:	df0022c4 	addi	fp,sp,139
   8b010:	d8c03317 	ldw	r3,204(sp)
   8b014:	1739c83a 	sub	fp,r2,fp
   8b018:	d9003317 	ldw	r4,204(sp)
   8b01c:	e0c7883a 	add	r3,fp,r3
   8b020:	df003b15 	stw	fp,236(sp)
   8b024:	d8c02e15 	stw	r3,184(sp)
   8b028:	00800044 	movi	r2,1
   8b02c:	1100b70e 	bge	r2,r4,8b30c <___svfprintf_internal_r+0x20c0>
   8b030:	d8c02e17 	ldw	r3,184(sp)
   8b034:	18c00044 	addi	r3,r3,1
   8b038:	d8c02e15 	stw	r3,184(sp)
   8b03c:	1805883a 	mov	r2,r3
   8b040:	1800b016 	blt	r3,zero,8b304 <___svfprintf_internal_r+0x20b8>
   8b044:	d8003215 	stw	zero,200(sp)
   8b048:	003f1006 	br	8ac8c <__alt_data_end+0xfffbadcc>
   8b04c:	d8802917 	ldw	r2,164(sp)
   8b050:	103ec71e 	bne	r2,zero,8ab70 <__alt_data_end+0xfffbacb0>
   8b054:	dc002915 	stw	r16,164(sp)
   8b058:	003ec506 	br	8ab70 <__alt_data_end+0xfffbacb0>
   8b05c:	d9402c17 	ldw	r5,176(sp)
   8b060:	d9801e04 	addi	r6,sp,120
   8b064:	9809883a 	mov	r4,r19
   8b068:	0092a6c0 	call	92a6c <__ssprint_r>
   8b06c:	10395c1e 	bne	r2,zero,895e0 <__alt_data_end+0xfffb9720>
   8b070:	dc402617 	ldw	r17,152(sp)
   8b074:	d8c02017 	ldw	r3,128(sp)
   8b078:	d8801f17 	ldw	r2,124(sp)
   8b07c:	da000404 	addi	r8,sp,16
   8b080:	003e7706 	br	8aa60 <__alt_data_end+0xfffbaba0>
   8b084:	582f883a 	mov	r23,r11
   8b088:	d8002915 	stw	zero,164(sp)
   8b08c:	0038c406 	br	893a0 <__alt_data_end+0xfffb94e0>
   8b090:	d8c02917 	ldw	r3,164(sp)
   8b094:	d8802104 	addi	r2,sp,132
   8b098:	d8800315 	stw	r2,12(sp)
   8b09c:	d9403617 	ldw	r5,216(sp)
   8b0a0:	d8802504 	addi	r2,sp,148
   8b0a4:	d8800215 	stw	r2,8(sp)
   8b0a8:	d8802604 	addi	r2,sp,152
   8b0ac:	d8c00015 	stw	r3,0(sp)
   8b0b0:	9809883a 	mov	r4,r19
   8b0b4:	d8800115 	stw	r2,4(sp)
   8b0b8:	01c000c4 	movi	r7,3
   8b0bc:	a00d883a 	mov	r6,r20
   8b0c0:	da003e15 	stw	r8,248(sp)
   8b0c4:	008db700 	call	8db70 <_dtoa_r>
   8b0c8:	d9002917 	ldw	r4,164(sp)
   8b0cc:	da003e17 	ldw	r8,248(sp)
   8b0d0:	1021883a 	mov	r16,r2
   8b0d4:	1139883a 	add	fp,r2,r4
   8b0d8:	2007883a 	mov	r3,r4
   8b0dc:	81000007 	ldb	r4,0(r16)
   8b0e0:	00800c04 	movi	r2,48
   8b0e4:	20806f26 	beq	r4,r2,8b2a4 <___svfprintf_internal_r+0x2058>
   8b0e8:	d8c02617 	ldw	r3,152(sp)
   8b0ec:	e0f9883a 	add	fp,fp,r3
   8b0f0:	003ec206 	br	8abfc <__alt_data_end+0xfffbad3c>
   8b0f4:	00c00b44 	movi	r3,45
   8b0f8:	2520003c 	xorhi	r20,r4,32768
   8b0fc:	d8c02a05 	stb	r3,168(sp)
   8b100:	003ea106 	br	8ab88 <__alt_data_end+0xfffbacc8>
   8b104:	d8c03217 	ldw	r3,200(sp)
   8b108:	00c0890e 	bge	zero,r3,8b330 <___svfprintf_internal_r+0x20e4>
   8b10c:	00800044 	movi	r2,1
   8b110:	d9003317 	ldw	r4,204(sp)
   8b114:	1105883a 	add	r2,r2,r4
   8b118:	d8802e15 	stw	r2,184(sp)
   8b11c:	10005f16 	blt	r2,zero,8b29c <___svfprintf_internal_r+0x2050>
   8b120:	044019c4 	movi	r17,103
   8b124:	003ed906 	br	8ac8c <__alt_data_end+0xfffbadcc>
   8b128:	d9002917 	ldw	r4,164(sp)
   8b12c:	20c00044 	addi	r3,r4,1
   8b130:	003e9c06 	br	8aba4 <__alt_data_end+0xfffbace4>
   8b134:	d9002917 	ldw	r4,164(sp)
   8b138:	00c0680e 	bge	zero,r3,8b2dc <___svfprintf_internal_r+0x2090>
   8b13c:	2000461e 	bne	r4,zero,8b258 <___svfprintf_internal_r+0x200c>
   8b140:	9480004c 	andi	r18,r18,1
   8b144:	9000441e 	bne	r18,zero,8b258 <___svfprintf_internal_r+0x200c>
   8b148:	1805883a 	mov	r2,r3
   8b14c:	1800a016 	blt	r3,zero,8b3d0 <___svfprintf_internal_r+0x2184>
   8b150:	d8c03217 	ldw	r3,200(sp)
   8b154:	d8c02e15 	stw	r3,184(sp)
   8b158:	003ecc06 	br	8ac8c <__alt_data_end+0xfffbadcc>
   8b15c:	d9402917 	ldw	r5,164(sp)
   8b160:	d8802104 	addi	r2,sp,132
   8b164:	d8800315 	stw	r2,12(sp)
   8b168:	d9400015 	stw	r5,0(sp)
   8b16c:	d8802504 	addi	r2,sp,148
   8b170:	d9403617 	ldw	r5,216(sp)
   8b174:	d8800215 	stw	r2,8(sp)
   8b178:	d8802604 	addi	r2,sp,152
   8b17c:	d8800115 	stw	r2,4(sp)
   8b180:	01c000c4 	movi	r7,3
   8b184:	a00d883a 	mov	r6,r20
   8b188:	9809883a 	mov	r4,r19
   8b18c:	da003e15 	stw	r8,248(sp)
   8b190:	008db700 	call	8db70 <_dtoa_r>
   8b194:	d8c02917 	ldw	r3,164(sp)
   8b198:	da003e17 	ldw	r8,248(sp)
   8b19c:	1021883a 	mov	r16,r2
   8b1a0:	00801184 	movi	r2,70
   8b1a4:	80f9883a 	add	fp,r16,r3
   8b1a8:	88bfcc26 	beq	r17,r2,8b0dc <__alt_data_end+0xfffbb21c>
   8b1ac:	003e9306 	br	8abfc <__alt_data_end+0xfffbad3c>
   8b1b0:	df0022c4 	addi	fp,sp,139
   8b1b4:	dc002915 	stw	r16,164(sp)
   8b1b8:	9829883a 	mov	r20,r19
   8b1bc:	e021883a 	mov	r16,fp
   8b1c0:	4027883a 	mov	r19,r8
   8b1c4:	b009883a 	mov	r4,r22
   8b1c8:	01400284 	movi	r5,10
   8b1cc:	0088d180 	call	88d18 <__modsi3>
   8b1d0:	10800c04 	addi	r2,r2,48
   8b1d4:	843fffc4 	addi	r16,r16,-1
   8b1d8:	b009883a 	mov	r4,r22
   8b1dc:	01400284 	movi	r5,10
   8b1e0:	80800005 	stb	r2,0(r16)
   8b1e4:	0088c940 	call	88c94 <__divsi3>
   8b1e8:	102d883a 	mov	r22,r2
   8b1ec:	00800244 	movi	r2,9
   8b1f0:	15bff416 	blt	r2,r22,8b1c4 <__alt_data_end+0xfffbb304>
   8b1f4:	9811883a 	mov	r8,r19
   8b1f8:	b0800c04 	addi	r2,r22,48
   8b1fc:	a027883a 	mov	r19,r20
   8b200:	8029883a 	mov	r20,r16
   8b204:	a17fffc4 	addi	r5,r20,-1
   8b208:	a0bfffc5 	stb	r2,-1(r20)
   8b20c:	dc002917 	ldw	r16,164(sp)
   8b210:	2f00752e 	bgeu	r5,fp,8b3e8 <___svfprintf_internal_r+0x219c>
   8b214:	d9c02384 	addi	r7,sp,142
   8b218:	3d0fc83a 	sub	r7,r7,r20
   8b21c:	d9002344 	addi	r4,sp,141
   8b220:	e1cf883a 	add	r7,fp,r7
   8b224:	00000106 	br	8b22c <___svfprintf_internal_r+0x1fe0>
   8b228:	28800003 	ldbu	r2,0(r5)
   8b22c:	20800005 	stb	r2,0(r4)
   8b230:	21000044 	addi	r4,r4,1
   8b234:	29400044 	addi	r5,r5,1
   8b238:	21fffb1e 	bne	r4,r7,8b228 <__alt_data_end+0xfffbb368>
   8b23c:	d8802304 	addi	r2,sp,140
   8b240:	1505c83a 	sub	r2,r2,r20
   8b244:	d8c02344 	addi	r3,sp,141
   8b248:	1885883a 	add	r2,r3,r2
   8b24c:	003f7006 	br	8b010 <__alt_data_end+0xfffbb150>
   8b250:	0005883a 	mov	r2,zero
   8b254:	003f0b06 	br	8ae84 <__alt_data_end+0xfffbafc4>
   8b258:	d9002917 	ldw	r4,164(sp)
   8b25c:	d8c03217 	ldw	r3,200(sp)
   8b260:	20800044 	addi	r2,r4,1
   8b264:	1885883a 	add	r2,r3,r2
   8b268:	d8802e15 	stw	r2,184(sp)
   8b26c:	103e870e 	bge	r2,zero,8ac8c <__alt_data_end+0xfffbadcc>
   8b270:	0005883a 	mov	r2,zero
   8b274:	003e8506 	br	8ac8c <__alt_data_end+0xfffbadcc>
   8b278:	010002b4 	movhi	r4,10
   8b27c:	21313084 	addi	r4,r4,-15166
   8b280:	d9002b15 	stw	r4,172(sp)
   8b284:	003cc506 	br	8a59c <__alt_data_end+0xfffba6dc>
   8b288:	d8c03217 	ldw	r3,200(sp)
   8b28c:	18c00044 	addi	r3,r3,1
   8b290:	d8c02e15 	stw	r3,184(sp)
   8b294:	1805883a 	mov	r2,r3
   8b298:	183fa10e 	bge	r3,zero,8b120 <__alt_data_end+0xfffbb260>
   8b29c:	0005883a 	mov	r2,zero
   8b2a0:	003f9f06 	br	8b120 <__alt_data_end+0xfffbb260>
   8b2a4:	d9003617 	ldw	r4,216(sp)
   8b2a8:	000d883a 	mov	r6,zero
   8b2ac:	000f883a 	mov	r7,zero
   8b2b0:	a00b883a 	mov	r5,r20
   8b2b4:	d8c03d15 	stw	r3,244(sp)
   8b2b8:	da003e15 	stw	r8,248(sp)
   8b2bc:	0097a380 	call	97a38 <__eqdf2>
   8b2c0:	d8c03d17 	ldw	r3,244(sp)
   8b2c4:	da003e17 	ldw	r8,248(sp)
   8b2c8:	103f8726 	beq	r2,zero,8b0e8 <__alt_data_end+0xfffbb228>
   8b2cc:	00800044 	movi	r2,1
   8b2d0:	10c7c83a 	sub	r3,r2,r3
   8b2d4:	d8c02615 	stw	r3,152(sp)
   8b2d8:	003f8406 	br	8b0ec <__alt_data_end+0xfffbb22c>
   8b2dc:	20000e1e 	bne	r4,zero,8b318 <___svfprintf_internal_r+0x20cc>
   8b2e0:	9480004c 	andi	r18,r18,1
   8b2e4:	90000c1e 	bne	r18,zero,8b318 <___svfprintf_internal_r+0x20cc>
   8b2e8:	00800044 	movi	r2,1
   8b2ec:	d8802e15 	stw	r2,184(sp)
   8b2f0:	003e6606 	br	8ac8c <__alt_data_end+0xfffbadcc>
   8b2f4:	00800b44 	movi	r2,45
   8b2f8:	05adc83a 	sub	r22,zero,r22
   8b2fc:	d8802305 	stb	r2,140(sp)
   8b300:	003f3b06 	br	8aff0 <__alt_data_end+0xfffbb130>
   8b304:	0005883a 	mov	r2,zero
   8b308:	003f4e06 	br	8b044 <__alt_data_end+0xfffbb184>
   8b30c:	90a4703a 	and	r18,r18,r2
   8b310:	903f4a26 	beq	r18,zero,8b03c <__alt_data_end+0xfffbb17c>
   8b314:	003f4606 	br	8b030 <__alt_data_end+0xfffbb170>
   8b318:	d8c02917 	ldw	r3,164(sp)
   8b31c:	18c00084 	addi	r3,r3,2
   8b320:	d8c02e15 	stw	r3,184(sp)
   8b324:	1805883a 	mov	r2,r3
   8b328:	183e580e 	bge	r3,zero,8ac8c <__alt_data_end+0xfffbadcc>
   8b32c:	003fd006 	br	8b270 <__alt_data_end+0xfffbb3b0>
   8b330:	00800084 	movi	r2,2
   8b334:	10c5c83a 	sub	r2,r2,r3
   8b338:	003f7506 	br	8b110 <__alt_data_end+0xfffbb250>
   8b33c:	d8802d17 	ldw	r2,180(sp)
   8b340:	d9002d17 	ldw	r4,180(sp)
   8b344:	bc400043 	ldbu	r17,1(r23)
   8b348:	10800017 	ldw	r2,0(r2)
   8b34c:	582f883a 	mov	r23,r11
   8b350:	d8802915 	stw	r2,164(sp)
   8b354:	20800104 	addi	r2,r4,4
   8b358:	d9002917 	ldw	r4,164(sp)
   8b35c:	d8802d15 	stw	r2,180(sp)
   8b360:	203df00e 	bge	r4,zero,8ab24 <__alt_data_end+0xfffbac64>
   8b364:	8c403fcc 	andi	r17,r17,255
   8b368:	00bfffc4 	movi	r2,-1
   8b36c:	8c40201c 	xori	r17,r17,128
   8b370:	d8802915 	stw	r2,164(sp)
   8b374:	8c7fe004 	addi	r17,r17,-128
   8b378:	00380806 	br	8939c <__alt_data_end+0xfffb94dc>
   8b37c:	9080004c 	andi	r2,r18,1
   8b380:	0039883a 	mov	fp,zero
   8b384:	10000726 	beq	r2,zero,8b3a4 <___svfprintf_internal_r+0x2158>
   8b388:	d8c02817 	ldw	r3,160(sp)
   8b38c:	dc001dc4 	addi	r16,sp,119
   8b390:	00800c04 	movi	r2,48
   8b394:	1c07c83a 	sub	r3,r3,r16
   8b398:	d8801dc5 	stb	r2,119(sp)
   8b39c:	d8c02e15 	stw	r3,184(sp)
   8b3a0:	00395206 	br	898ec <__alt_data_end+0xfffb9a2c>
   8b3a4:	d8002e15 	stw	zero,184(sp)
   8b3a8:	dc001e04 	addi	r16,sp,120
   8b3ac:	00394f06 	br	898ec <__alt_data_end+0xfffb9a2c>
   8b3b0:	0005883a 	mov	r2,zero
   8b3b4:	003e3206 	br	8ac80 <__alt_data_end+0xfffbadc0>
   8b3b8:	dd802617 	ldw	r22,152(sp)
   8b3bc:	003f0606 	br	8afd8 <__alt_data_end+0xfffbb118>
   8b3c0:	d9c02785 	stb	r7,158(sp)
   8b3c4:	003a5106 	br	89d0c <__alt_data_end+0xfffb9e4c>
   8b3c8:	d9c02785 	stb	r7,158(sp)
   8b3cc:	003a3706 	br	89cac <__alt_data_end+0xfffb9dec>
   8b3d0:	0005883a 	mov	r2,zero
   8b3d4:	003f5e06 	br	8b150 <__alt_data_end+0xfffbb290>
   8b3d8:	d9c02785 	stb	r7,158(sp)
   8b3dc:	00391706 	br	8983c <__alt_data_end+0xfffb997c>
   8b3e0:	d9c02785 	stb	r7,158(sp)
   8b3e4:	0038e606 	br	89780 <__alt_data_end+0xfffb98c0>
   8b3e8:	d8802344 	addi	r2,sp,141
   8b3ec:	003f0806 	br	8b010 <__alt_data_end+0xfffbb150>
   8b3f0:	d9c02785 	stb	r7,158(sp)
   8b3f4:	0038b706 	br	896d4 <__alt_data_end+0xfffb9814>
   8b3f8:	d9c02785 	stb	r7,158(sp)
   8b3fc:	003adc06 	br	89f70 <__alt_data_end+0xfffba0b0>
   8b400:	d9403917 	ldw	r5,228(sp)
   8b404:	00800304 	movi	r2,12
   8b408:	28800015 	stw	r2,0(r5)
   8b40c:	00bfffc4 	movi	r2,-1
   8b410:	00387806 	br	895f4 <__alt_data_end+0xfffb9734>
   8b414:	d9c02785 	stb	r7,158(sp)
   8b418:	003abf06 	br	89f18 <__alt_data_end+0xfffba058>
   8b41c:	d9c02785 	stb	r7,158(sp)
   8b420:	003a9b06 	br	89e90 <__alt_data_end+0xfffb9fd0>

0008b424 <___vfprintf_internal_r>:
   8b424:	deffb804 	addi	sp,sp,-288
   8b428:	dfc04715 	stw	ra,284(sp)
   8b42c:	ddc04515 	stw	r23,276(sp)
   8b430:	dd404315 	stw	r21,268(sp)
   8b434:	d9002c15 	stw	r4,176(sp)
   8b438:	282f883a 	mov	r23,r5
   8b43c:	302b883a 	mov	r21,r6
   8b440:	d9c02d15 	stw	r7,180(sp)
   8b444:	df004615 	stw	fp,280(sp)
   8b448:	dd804415 	stw	r22,272(sp)
   8b44c:	dd004215 	stw	r20,264(sp)
   8b450:	dcc04115 	stw	r19,260(sp)
   8b454:	dc804015 	stw	r18,256(sp)
   8b458:	dc403f15 	stw	r17,252(sp)
   8b45c:	dc003e15 	stw	r16,248(sp)
   8b460:	00903640 	call	90364 <_localeconv_r>
   8b464:	10800017 	ldw	r2,0(r2)
   8b468:	1009883a 	mov	r4,r2
   8b46c:	d8803415 	stw	r2,208(sp)
   8b470:	00891b40 	call	891b4 <strlen>
   8b474:	d8803715 	stw	r2,220(sp)
   8b478:	d8802c17 	ldw	r2,176(sp)
   8b47c:	10000226 	beq	r2,zero,8b488 <___vfprintf_internal_r+0x64>
   8b480:	10800e17 	ldw	r2,56(r2)
   8b484:	1000f926 	beq	r2,zero,8b86c <___vfprintf_internal_r+0x448>
   8b488:	b880030b 	ldhu	r2,12(r23)
   8b48c:	10c8000c 	andi	r3,r2,8192
   8b490:	1800061e 	bne	r3,zero,8b4ac <___vfprintf_internal_r+0x88>
   8b494:	b9001917 	ldw	r4,100(r23)
   8b498:	00f7ffc4 	movi	r3,-8193
   8b49c:	10880014 	ori	r2,r2,8192
   8b4a0:	20c6703a 	and	r3,r4,r3
   8b4a4:	b880030d 	sth	r2,12(r23)
   8b4a8:	b8c01915 	stw	r3,100(r23)
   8b4ac:	10c0020c 	andi	r3,r2,8
   8b4b0:	1800c126 	beq	r3,zero,8b7b8 <___vfprintf_internal_r+0x394>
   8b4b4:	b8c00417 	ldw	r3,16(r23)
   8b4b8:	1800bf26 	beq	r3,zero,8b7b8 <___vfprintf_internal_r+0x394>
   8b4bc:	1080068c 	andi	r2,r2,26
   8b4c0:	00c00284 	movi	r3,10
   8b4c4:	10c0c426 	beq	r2,r3,8b7d8 <___vfprintf_internal_r+0x3b4>
   8b4c8:	d8c00404 	addi	r3,sp,16
   8b4cc:	050002b4 	movhi	r20,10
   8b4d0:	d9001e04 	addi	r4,sp,120
   8b4d4:	a5313884 	addi	r20,r20,-15134
   8b4d8:	d8c01e15 	stw	r3,120(sp)
   8b4dc:	d8002015 	stw	zero,128(sp)
   8b4e0:	d8001f15 	stw	zero,124(sp)
   8b4e4:	d8003315 	stw	zero,204(sp)
   8b4e8:	d8003615 	stw	zero,216(sp)
   8b4ec:	d8003815 	stw	zero,224(sp)
   8b4f0:	1811883a 	mov	r8,r3
   8b4f4:	d8003915 	stw	zero,228(sp)
   8b4f8:	d8003a15 	stw	zero,232(sp)
   8b4fc:	d8002f15 	stw	zero,188(sp)
   8b500:	d9002815 	stw	r4,160(sp)
   8b504:	a8800007 	ldb	r2,0(r21)
   8b508:	10027b26 	beq	r2,zero,8bef8 <___vfprintf_internal_r+0xad4>
   8b50c:	00c00944 	movi	r3,37
   8b510:	a821883a 	mov	r16,r21
   8b514:	10c0021e 	bne	r2,r3,8b520 <___vfprintf_internal_r+0xfc>
   8b518:	00001406 	br	8b56c <___vfprintf_internal_r+0x148>
   8b51c:	10c00326 	beq	r2,r3,8b52c <___vfprintf_internal_r+0x108>
   8b520:	84000044 	addi	r16,r16,1
   8b524:	80800007 	ldb	r2,0(r16)
   8b528:	103ffc1e 	bne	r2,zero,8b51c <__alt_data_end+0xfffbb65c>
   8b52c:	8563c83a 	sub	r17,r16,r21
   8b530:	88000e26 	beq	r17,zero,8b56c <___vfprintf_internal_r+0x148>
   8b534:	d8c02017 	ldw	r3,128(sp)
   8b538:	d8801f17 	ldw	r2,124(sp)
   8b53c:	45400015 	stw	r21,0(r8)
   8b540:	1c47883a 	add	r3,r3,r17
   8b544:	10800044 	addi	r2,r2,1
   8b548:	d8c02015 	stw	r3,128(sp)
   8b54c:	44400115 	stw	r17,4(r8)
   8b550:	d8801f15 	stw	r2,124(sp)
   8b554:	00c001c4 	movi	r3,7
   8b558:	1880a716 	blt	r3,r2,8b7f8 <___vfprintf_internal_r+0x3d4>
   8b55c:	42000204 	addi	r8,r8,8
   8b560:	d9402f17 	ldw	r5,188(sp)
   8b564:	2c4b883a 	add	r5,r5,r17
   8b568:	d9402f15 	stw	r5,188(sp)
   8b56c:	80800007 	ldb	r2,0(r16)
   8b570:	1000a826 	beq	r2,zero,8b814 <___vfprintf_internal_r+0x3f0>
   8b574:	84400047 	ldb	r17,1(r16)
   8b578:	00bfffc4 	movi	r2,-1
   8b57c:	85400044 	addi	r21,r16,1
   8b580:	d8002785 	stb	zero,158(sp)
   8b584:	0007883a 	mov	r3,zero
   8b588:	000f883a 	mov	r7,zero
   8b58c:	d8802915 	stw	r2,164(sp)
   8b590:	d8003115 	stw	zero,196(sp)
   8b594:	0025883a 	mov	r18,zero
   8b598:	01401604 	movi	r5,88
   8b59c:	01800244 	movi	r6,9
   8b5a0:	02800a84 	movi	r10,42
   8b5a4:	02401b04 	movi	r9,108
   8b5a8:	ad400044 	addi	r21,r21,1
   8b5ac:	88bff804 	addi	r2,r17,-32
   8b5b0:	28830436 	bltu	r5,r2,8c1c4 <___vfprintf_internal_r+0xda0>
   8b5b4:	100490ba 	slli	r2,r2,2
   8b5b8:	01000274 	movhi	r4,9
   8b5bc:	212d7304 	addi	r4,r4,-18996
   8b5c0:	1105883a 	add	r2,r2,r4
   8b5c4:	10800017 	ldw	r2,0(r2)
   8b5c8:	1000683a 	jmp	r2
   8b5cc:	0008c0e4 	muli	zero,zero,8963
   8b5d0:	0008c1c4 	movi	zero,8967
   8b5d4:	0008c1c4 	movi	zero,8967
   8b5d8:	0008c104 	movi	zero,8964
   8b5dc:	0008c1c4 	movi	zero,8967
   8b5e0:	0008c1c4 	movi	zero,8967
   8b5e4:	0008c1c4 	movi	zero,8967
   8b5e8:	0008c1c4 	movi	zero,8967
   8b5ec:	0008c1c4 	movi	zero,8967
   8b5f0:	0008c1c4 	movi	zero,8967
   8b5f4:	0008b878 	rdprs	zero,zero,8929
   8b5f8:	0008c020 	cmpeqi	zero,zero,8960
   8b5fc:	0008c1c4 	movi	zero,8967
   8b600:	0008b740 	call	8b74 <__reset-0x7748c>
   8b604:	0008b8a0 	cmpeqi	zero,zero,8930
   8b608:	0008c1c4 	movi	zero,8967
   8b60c:	0008b8e0 	cmpeqi	zero,zero,8931
   8b610:	0008b8ec 	andhi	zero,zero,8931
   8b614:	0008b8ec 	andhi	zero,zero,8931
   8b618:	0008b8ec 	andhi	zero,zero,8931
   8b61c:	0008b8ec 	andhi	zero,zero,8931
   8b620:	0008b8ec 	andhi	zero,zero,8931
   8b624:	0008b8ec 	andhi	zero,zero,8931
   8b628:	0008b8ec 	andhi	zero,zero,8931
   8b62c:	0008b8ec 	andhi	zero,zero,8931
   8b630:	0008b8ec 	andhi	zero,zero,8931
   8b634:	0008c1c4 	movi	zero,8967
   8b638:	0008c1c4 	movi	zero,8967
   8b63c:	0008c1c4 	movi	zero,8967
   8b640:	0008c1c4 	movi	zero,8967
   8b644:	0008c1c4 	movi	zero,8967
   8b648:	0008c1c4 	movi	zero,8967
   8b64c:	0008c1c4 	movi	zero,8967
   8b650:	0008c1c4 	movi	zero,8967
   8b654:	0008c1c4 	movi	zero,8967
   8b658:	0008c1c4 	movi	zero,8967
   8b65c:	0008b920 	cmpeqi	zero,zero,8932
   8b660:	0008b9dc 	xori	zero,zero,8935
   8b664:	0008c1c4 	movi	zero,8967
   8b668:	0008b9dc 	xori	zero,zero,8935
   8b66c:	0008c1c4 	movi	zero,8967
   8b670:	0008c1c4 	movi	zero,8967
   8b674:	0008c1c4 	movi	zero,8967
   8b678:	0008c1c4 	movi	zero,8967
   8b67c:	0008ba7c 	xorhi	zero,zero,8937
   8b680:	0008c1c4 	movi	zero,8967
   8b684:	0008c1c4 	movi	zero,8967
   8b688:	0008ba88 	cmpgei	zero,zero,8938
   8b68c:	0008c1c4 	movi	zero,8967
   8b690:	0008c1c4 	movi	zero,8967
   8b694:	0008c1c4 	movi	zero,8967
   8b698:	0008c1c4 	movi	zero,8967
   8b69c:	0008c1c4 	movi	zero,8967
   8b6a0:	0008bf00 	call	8bf0 <__reset-0x77410>
   8b6a4:	0008c1c4 	movi	zero,8967
   8b6a8:	0008c1c4 	movi	zero,8967
   8b6ac:	0008bf60 	cmpeqi	zero,zero,8957
   8b6b0:	0008c1c4 	movi	zero,8967
   8b6b4:	0008c1c4 	movi	zero,8967
   8b6b8:	0008c1c4 	movi	zero,8967
   8b6bc:	0008c1c4 	movi	zero,8967
   8b6c0:	0008c1c4 	movi	zero,8967
   8b6c4:	0008c1c4 	movi	zero,8967
   8b6c8:	0008c1c4 	movi	zero,8967
   8b6cc:	0008c1c4 	movi	zero,8967
   8b6d0:	0008c1c4 	movi	zero,8967
   8b6d4:	0008c1c4 	movi	zero,8967
   8b6d8:	0008c170 	cmpltui	zero,zero,8965
   8b6dc:	0008c110 	cmplti	zero,zero,8964
   8b6e0:	0008b9dc 	xori	zero,zero,8935
   8b6e4:	0008b9dc 	xori	zero,zero,8935
   8b6e8:	0008b9dc 	xori	zero,zero,8935
   8b6ec:	0008c120 	cmpeqi	zero,zero,8964
   8b6f0:	0008c110 	cmplti	zero,zero,8964
   8b6f4:	0008c1c4 	movi	zero,8967
   8b6f8:	0008c1c4 	movi	zero,8967
   8b6fc:	0008c12c 	andhi	zero,zero,8964
   8b700:	0008c1c4 	movi	zero,8967
   8b704:	0008c13c 	xorhi	zero,zero,8964
   8b708:	0008c010 	cmplti	zero,zero,8960
   8b70c:	0008b74c 	andi	zero,zero,8925
   8b710:	0008c030 	cmpltui	zero,zero,8960
   8b714:	0008c1c4 	movi	zero,8967
   8b718:	0008c03c 	xorhi	zero,zero,8960
   8b71c:	0008c1c4 	movi	zero,8967
   8b720:	0008c098 	cmpnei	zero,zero,8962
   8b724:	0008c1c4 	movi	zero,8967
   8b728:	0008c1c4 	movi	zero,8967
   8b72c:	0008c0a8 	cmpgeui	zero,zero,8962
   8b730:	d9003117 	ldw	r4,196(sp)
   8b734:	d8802d15 	stw	r2,180(sp)
   8b738:	0109c83a 	sub	r4,zero,r4
   8b73c:	d9003115 	stw	r4,196(sp)
   8b740:	94800114 	ori	r18,r18,4
   8b744:	ac400007 	ldb	r17,0(r21)
   8b748:	003f9706 	br	8b5a8 <__alt_data_end+0xfffbb6e8>
   8b74c:	00800c04 	movi	r2,48
   8b750:	d9002d17 	ldw	r4,180(sp)
   8b754:	d9402917 	ldw	r5,164(sp)
   8b758:	d8802705 	stb	r2,156(sp)
   8b75c:	00801e04 	movi	r2,120
   8b760:	d8802745 	stb	r2,157(sp)
   8b764:	d8002785 	stb	zero,158(sp)
   8b768:	20c00104 	addi	r3,r4,4
   8b76c:	24c00017 	ldw	r19,0(r4)
   8b770:	002d883a 	mov	r22,zero
   8b774:	90800094 	ori	r2,r18,2
   8b778:	28029a16 	blt	r5,zero,8c1e4 <___vfprintf_internal_r+0xdc0>
   8b77c:	00bfdfc4 	movi	r2,-129
   8b780:	90a4703a 	and	r18,r18,r2
   8b784:	d8c02d15 	stw	r3,180(sp)
   8b788:	94800094 	ori	r18,r18,2
   8b78c:	9802871e 	bne	r19,zero,8c1ac <___vfprintf_internal_r+0xd88>
   8b790:	008002b4 	movhi	r2,10
   8b794:	10b12904 	addi	r2,r2,-15196
   8b798:	d8803915 	stw	r2,228(sp)
   8b79c:	04401e04 	movi	r17,120
   8b7a0:	d8802917 	ldw	r2,164(sp)
   8b7a4:	0039883a 	mov	fp,zero
   8b7a8:	1001e926 	beq	r2,zero,8bf50 <___vfprintf_internal_r+0xb2c>
   8b7ac:	0027883a 	mov	r19,zero
   8b7b0:	002d883a 	mov	r22,zero
   8b7b4:	00020506 	br	8bfcc <___vfprintf_internal_r+0xba8>
   8b7b8:	d9002c17 	ldw	r4,176(sp)
   8b7bc:	b80b883a 	mov	r5,r23
   8b7c0:	008d81c0 	call	8d81c <__swsetup_r>
   8b7c4:	1005ac1e 	bne	r2,zero,8ce78 <___vfprintf_internal_r+0x1a54>
   8b7c8:	b880030b 	ldhu	r2,12(r23)
   8b7cc:	00c00284 	movi	r3,10
   8b7d0:	1080068c 	andi	r2,r2,26
   8b7d4:	10ff3c1e 	bne	r2,r3,8b4c8 <__alt_data_end+0xfffbb608>
   8b7d8:	b880038f 	ldh	r2,14(r23)
   8b7dc:	103f3a16 	blt	r2,zero,8b4c8 <__alt_data_end+0xfffbb608>
   8b7e0:	d9c02d17 	ldw	r7,180(sp)
   8b7e4:	d9002c17 	ldw	r4,176(sp)
   8b7e8:	a80d883a 	mov	r6,r21
   8b7ec:	b80b883a 	mov	r5,r23
   8b7f0:	008d6380 	call	8d638 <__sbprintf>
   8b7f4:	00001106 	br	8b83c <___vfprintf_internal_r+0x418>
   8b7f8:	d9002c17 	ldw	r4,176(sp)
   8b7fc:	d9801e04 	addi	r6,sp,120
   8b800:	b80b883a 	mov	r5,r23
   8b804:	0093f740 	call	93f74 <__sprint_r>
   8b808:	1000081e 	bne	r2,zero,8b82c <___vfprintf_internal_r+0x408>
   8b80c:	da000404 	addi	r8,sp,16
   8b810:	003f5306 	br	8b560 <__alt_data_end+0xfffbb6a0>
   8b814:	d8802017 	ldw	r2,128(sp)
   8b818:	10000426 	beq	r2,zero,8b82c <___vfprintf_internal_r+0x408>
   8b81c:	d9002c17 	ldw	r4,176(sp)
   8b820:	d9801e04 	addi	r6,sp,120
   8b824:	b80b883a 	mov	r5,r23
   8b828:	0093f740 	call	93f74 <__sprint_r>
   8b82c:	b880030b 	ldhu	r2,12(r23)
   8b830:	1080100c 	andi	r2,r2,64
   8b834:	1005901e 	bne	r2,zero,8ce78 <___vfprintf_internal_r+0x1a54>
   8b838:	d8802f17 	ldw	r2,188(sp)
   8b83c:	dfc04717 	ldw	ra,284(sp)
   8b840:	df004617 	ldw	fp,280(sp)
   8b844:	ddc04517 	ldw	r23,276(sp)
   8b848:	dd804417 	ldw	r22,272(sp)
   8b84c:	dd404317 	ldw	r21,268(sp)
   8b850:	dd004217 	ldw	r20,264(sp)
   8b854:	dcc04117 	ldw	r19,260(sp)
   8b858:	dc804017 	ldw	r18,256(sp)
   8b85c:	dc403f17 	ldw	r17,252(sp)
   8b860:	dc003e17 	ldw	r16,248(sp)
   8b864:	dec04804 	addi	sp,sp,288
   8b868:	f800283a 	ret
   8b86c:	d9002c17 	ldw	r4,176(sp)
   8b870:	008f7f00 	call	8f7f0 <__sinit>
   8b874:	003f0406 	br	8b488 <__alt_data_end+0xfffbb5c8>
   8b878:	d8802d17 	ldw	r2,180(sp)
   8b87c:	d9002d17 	ldw	r4,180(sp)
   8b880:	10800017 	ldw	r2,0(r2)
   8b884:	d8803115 	stw	r2,196(sp)
   8b888:	20800104 	addi	r2,r4,4
   8b88c:	d9003117 	ldw	r4,196(sp)
   8b890:	203fa716 	blt	r4,zero,8b730 <__alt_data_end+0xfffbb870>
   8b894:	d8802d15 	stw	r2,180(sp)
   8b898:	ac400007 	ldb	r17,0(r21)
   8b89c:	003f4206 	br	8b5a8 <__alt_data_end+0xfffbb6e8>
   8b8a0:	ac400007 	ldb	r17,0(r21)
   8b8a4:	aac00044 	addi	r11,r21,1
   8b8a8:	8a872826 	beq	r17,r10,8d54c <___vfprintf_internal_r+0x2128>
   8b8ac:	88bff404 	addi	r2,r17,-48
   8b8b0:	0009883a 	mov	r4,zero
   8b8b4:	30867d36 	bltu	r6,r2,8d2ac <___vfprintf_internal_r+0x1e88>
   8b8b8:	5c400007 	ldb	r17,0(r11)
   8b8bc:	210002a4 	muli	r4,r4,10
   8b8c0:	5d400044 	addi	r21,r11,1
   8b8c4:	a817883a 	mov	r11,r21
   8b8c8:	2089883a 	add	r4,r4,r2
   8b8cc:	88bff404 	addi	r2,r17,-48
   8b8d0:	30bff92e 	bgeu	r6,r2,8b8b8 <__alt_data_end+0xfffbb9f8>
   8b8d4:	2005c916 	blt	r4,zero,8cffc <___vfprintf_internal_r+0x1bd8>
   8b8d8:	d9002915 	stw	r4,164(sp)
   8b8dc:	003f3306 	br	8b5ac <__alt_data_end+0xfffbb6ec>
   8b8e0:	94802014 	ori	r18,r18,128
   8b8e4:	ac400007 	ldb	r17,0(r21)
   8b8e8:	003f2f06 	br	8b5a8 <__alt_data_end+0xfffbb6e8>
   8b8ec:	a809883a 	mov	r4,r21
   8b8f0:	d8003115 	stw	zero,196(sp)
   8b8f4:	88bff404 	addi	r2,r17,-48
   8b8f8:	0017883a 	mov	r11,zero
   8b8fc:	24400007 	ldb	r17,0(r4)
   8b900:	5ac002a4 	muli	r11,r11,10
   8b904:	ad400044 	addi	r21,r21,1
   8b908:	a809883a 	mov	r4,r21
   8b90c:	12d7883a 	add	r11,r2,r11
   8b910:	88bff404 	addi	r2,r17,-48
   8b914:	30bff92e 	bgeu	r6,r2,8b8fc <__alt_data_end+0xfffbba3c>
   8b918:	dac03115 	stw	r11,196(sp)
   8b91c:	003f2306 	br	8b5ac <__alt_data_end+0xfffbb6ec>
   8b920:	18c03fcc 	andi	r3,r3,255
   8b924:	18072b1e 	bne	r3,zero,8d5d4 <___vfprintf_internal_r+0x21b0>
   8b928:	94800414 	ori	r18,r18,16
   8b92c:	9080080c 	andi	r2,r18,32
   8b930:	10037b26 	beq	r2,zero,8c720 <___vfprintf_internal_r+0x12fc>
   8b934:	d9402d17 	ldw	r5,180(sp)
   8b938:	28800117 	ldw	r2,4(r5)
   8b93c:	2cc00017 	ldw	r19,0(r5)
   8b940:	29400204 	addi	r5,r5,8
   8b944:	d9402d15 	stw	r5,180(sp)
   8b948:	102d883a 	mov	r22,r2
   8b94c:	10044b16 	blt	r2,zero,8ca7c <___vfprintf_internal_r+0x1658>
   8b950:	d9402917 	ldw	r5,164(sp)
   8b954:	df002783 	ldbu	fp,158(sp)
   8b958:	2803bc16 	blt	r5,zero,8c84c <___vfprintf_internal_r+0x1428>
   8b95c:	00ffdfc4 	movi	r3,-129
   8b960:	9d84b03a 	or	r2,r19,r22
   8b964:	90e4703a 	and	r18,r18,r3
   8b968:	10017726 	beq	r2,zero,8bf48 <___vfprintf_internal_r+0xb24>
   8b96c:	b0038326 	beq	r22,zero,8c77c <___vfprintf_internal_r+0x1358>
   8b970:	dc402a15 	stw	r17,168(sp)
   8b974:	dc001e04 	addi	r16,sp,120
   8b978:	b023883a 	mov	r17,r22
   8b97c:	402d883a 	mov	r22,r8
   8b980:	9809883a 	mov	r4,r19
   8b984:	880b883a 	mov	r5,r17
   8b988:	01800284 	movi	r6,10
   8b98c:	000f883a 	mov	r7,zero
   8b990:	009636c0 	call	9636c <__umoddi3>
   8b994:	10800c04 	addi	r2,r2,48
   8b998:	843fffc4 	addi	r16,r16,-1
   8b99c:	9809883a 	mov	r4,r19
   8b9a0:	880b883a 	mov	r5,r17
   8b9a4:	80800005 	stb	r2,0(r16)
   8b9a8:	01800284 	movi	r6,10
   8b9ac:	000f883a 	mov	r7,zero
   8b9b0:	0095df40 	call	95df4 <__udivdi3>
   8b9b4:	1027883a 	mov	r19,r2
   8b9b8:	10c4b03a 	or	r2,r2,r3
   8b9bc:	1823883a 	mov	r17,r3
   8b9c0:	103fef1e 	bne	r2,zero,8b980 <__alt_data_end+0xfffbbac0>
   8b9c4:	d8c02817 	ldw	r3,160(sp)
   8b9c8:	dc402a17 	ldw	r17,168(sp)
   8b9cc:	b011883a 	mov	r8,r22
   8b9d0:	1c07c83a 	sub	r3,r3,r16
   8b9d4:	d8c02e15 	stw	r3,184(sp)
   8b9d8:	00005906 	br	8bb40 <___vfprintf_internal_r+0x71c>
   8b9dc:	18c03fcc 	andi	r3,r3,255
   8b9e0:	1806fa1e 	bne	r3,zero,8d5cc <___vfprintf_internal_r+0x21a8>
   8b9e4:	9080020c 	andi	r2,r18,8
   8b9e8:	10048a26 	beq	r2,zero,8cc14 <___vfprintf_internal_r+0x17f0>
   8b9ec:	d8c02d17 	ldw	r3,180(sp)
   8b9f0:	d9002d17 	ldw	r4,180(sp)
   8b9f4:	d9402d17 	ldw	r5,180(sp)
   8b9f8:	18c00017 	ldw	r3,0(r3)
   8b9fc:	21000117 	ldw	r4,4(r4)
   8ba00:	29400204 	addi	r5,r5,8
   8ba04:	d8c03615 	stw	r3,216(sp)
   8ba08:	d9003815 	stw	r4,224(sp)
   8ba0c:	d9402d15 	stw	r5,180(sp)
   8ba10:	d9003617 	ldw	r4,216(sp)
   8ba14:	d9403817 	ldw	r5,224(sp)
   8ba18:	da003d15 	stw	r8,244(sp)
   8ba1c:	04000044 	movi	r16,1
   8ba20:	009278c0 	call	9278c <__fpclassifyd>
   8ba24:	da003d17 	ldw	r8,244(sp)
   8ba28:	14041f1e 	bne	r2,r16,8caa8 <___vfprintf_internal_r+0x1684>
   8ba2c:	d9003617 	ldw	r4,216(sp)
   8ba30:	d9403817 	ldw	r5,224(sp)
   8ba34:	000d883a 	mov	r6,zero
   8ba38:	000f883a 	mov	r7,zero
   8ba3c:	0097b9c0 	call	97b9c <__ledf2>
   8ba40:	da003d17 	ldw	r8,244(sp)
   8ba44:	1005be16 	blt	r2,zero,8d140 <___vfprintf_internal_r+0x1d1c>
   8ba48:	df002783 	ldbu	fp,158(sp)
   8ba4c:	008011c4 	movi	r2,71
   8ba50:	1445330e 	bge	r2,r17,8cf20 <___vfprintf_internal_r+0x1afc>
   8ba54:	040002b4 	movhi	r16,10
   8ba58:	84312104 	addi	r16,r16,-15228
   8ba5c:	00c000c4 	movi	r3,3
   8ba60:	00bfdfc4 	movi	r2,-129
   8ba64:	d8c02a15 	stw	r3,168(sp)
   8ba68:	90a4703a 	and	r18,r18,r2
   8ba6c:	d8c02e15 	stw	r3,184(sp)
   8ba70:	d8002915 	stw	zero,164(sp)
   8ba74:	d8003215 	stw	zero,200(sp)
   8ba78:	00003706 	br	8bb58 <___vfprintf_internal_r+0x734>
   8ba7c:	94800214 	ori	r18,r18,8
   8ba80:	ac400007 	ldb	r17,0(r21)
   8ba84:	003ec806 	br	8b5a8 <__alt_data_end+0xfffbb6e8>
   8ba88:	18c03fcc 	andi	r3,r3,255
   8ba8c:	1806db1e 	bne	r3,zero,8d5fc <___vfprintf_internal_r+0x21d8>
   8ba90:	94800414 	ori	r18,r18,16
   8ba94:	9080080c 	andi	r2,r18,32
   8ba98:	1002d826 	beq	r2,zero,8c5fc <___vfprintf_internal_r+0x11d8>
   8ba9c:	d9402d17 	ldw	r5,180(sp)
   8baa0:	d8c02917 	ldw	r3,164(sp)
   8baa4:	d8002785 	stb	zero,158(sp)
   8baa8:	28800204 	addi	r2,r5,8
   8baac:	2cc00017 	ldw	r19,0(r5)
   8bab0:	2d800117 	ldw	r22,4(r5)
   8bab4:	18048f16 	blt	r3,zero,8ccf4 <___vfprintf_internal_r+0x18d0>
   8bab8:	013fdfc4 	movi	r4,-129
   8babc:	9d86b03a 	or	r3,r19,r22
   8bac0:	d8802d15 	stw	r2,180(sp)
   8bac4:	9124703a 	and	r18,r18,r4
   8bac8:	1802d91e 	bne	r3,zero,8c630 <___vfprintf_internal_r+0x120c>
   8bacc:	d8c02917 	ldw	r3,164(sp)
   8bad0:	0039883a 	mov	fp,zero
   8bad4:	1805c326 	beq	r3,zero,8d1e4 <___vfprintf_internal_r+0x1dc0>
   8bad8:	0027883a 	mov	r19,zero
   8badc:	002d883a 	mov	r22,zero
   8bae0:	dc001e04 	addi	r16,sp,120
   8bae4:	9806d0fa 	srli	r3,r19,3
   8bae8:	b008977a 	slli	r4,r22,29
   8baec:	b02cd0fa 	srli	r22,r22,3
   8baf0:	9cc001cc 	andi	r19,r19,7
   8baf4:	98800c04 	addi	r2,r19,48
   8baf8:	843fffc4 	addi	r16,r16,-1
   8bafc:	20e6b03a 	or	r19,r4,r3
   8bb00:	80800005 	stb	r2,0(r16)
   8bb04:	9d86b03a 	or	r3,r19,r22
   8bb08:	183ff61e 	bne	r3,zero,8bae4 <__alt_data_end+0xfffbbc24>
   8bb0c:	90c0004c 	andi	r3,r18,1
   8bb10:	18013b26 	beq	r3,zero,8c000 <___vfprintf_internal_r+0xbdc>
   8bb14:	10803fcc 	andi	r2,r2,255
   8bb18:	1080201c 	xori	r2,r2,128
   8bb1c:	10bfe004 	addi	r2,r2,-128
   8bb20:	00c00c04 	movi	r3,48
   8bb24:	10c13626 	beq	r2,r3,8c000 <___vfprintf_internal_r+0xbdc>
   8bb28:	80ffffc5 	stb	r3,-1(r16)
   8bb2c:	d8c02817 	ldw	r3,160(sp)
   8bb30:	80bfffc4 	addi	r2,r16,-1
   8bb34:	1021883a 	mov	r16,r2
   8bb38:	1887c83a 	sub	r3,r3,r2
   8bb3c:	d8c02e15 	stw	r3,184(sp)
   8bb40:	d8802e17 	ldw	r2,184(sp)
   8bb44:	d9002917 	ldw	r4,164(sp)
   8bb48:	1100010e 	bge	r2,r4,8bb50 <___vfprintf_internal_r+0x72c>
   8bb4c:	2005883a 	mov	r2,r4
   8bb50:	d8802a15 	stw	r2,168(sp)
   8bb54:	d8003215 	stw	zero,200(sp)
   8bb58:	e7003fcc 	andi	fp,fp,255
   8bb5c:	e700201c 	xori	fp,fp,128
   8bb60:	e73fe004 	addi	fp,fp,-128
   8bb64:	e0000326 	beq	fp,zero,8bb74 <___vfprintf_internal_r+0x750>
   8bb68:	d8c02a17 	ldw	r3,168(sp)
   8bb6c:	18c00044 	addi	r3,r3,1
   8bb70:	d8c02a15 	stw	r3,168(sp)
   8bb74:	90c0008c 	andi	r3,r18,2
   8bb78:	d8c02b15 	stw	r3,172(sp)
   8bb7c:	18000326 	beq	r3,zero,8bb8c <___vfprintf_internal_r+0x768>
   8bb80:	d8c02a17 	ldw	r3,168(sp)
   8bb84:	18c00084 	addi	r3,r3,2
   8bb88:	d8c02a15 	stw	r3,168(sp)
   8bb8c:	90c0210c 	andi	r3,r18,132
   8bb90:	d8c03015 	stw	r3,192(sp)
   8bb94:	1801a31e 	bne	r3,zero,8c224 <___vfprintf_internal_r+0xe00>
   8bb98:	d9003117 	ldw	r4,196(sp)
   8bb9c:	d8c02a17 	ldw	r3,168(sp)
   8bba0:	20e7c83a 	sub	r19,r4,r3
   8bba4:	04c19f0e 	bge	zero,r19,8c224 <___vfprintf_internal_r+0xe00>
   8bba8:	02400404 	movi	r9,16
   8bbac:	d8c02017 	ldw	r3,128(sp)
   8bbb0:	d8801f17 	ldw	r2,124(sp)
   8bbb4:	4cc50d0e 	bge	r9,r19,8cfec <___vfprintf_internal_r+0x1bc8>
   8bbb8:	014002b4 	movhi	r5,10
   8bbbc:	29713c84 	addi	r5,r5,-15118
   8bbc0:	dc403b15 	stw	r17,236(sp)
   8bbc4:	d9403515 	stw	r5,212(sp)
   8bbc8:	9823883a 	mov	r17,r19
   8bbcc:	482d883a 	mov	r22,r9
   8bbd0:	9027883a 	mov	r19,r18
   8bbd4:	070001c4 	movi	fp,7
   8bbd8:	8025883a 	mov	r18,r16
   8bbdc:	dc002c17 	ldw	r16,176(sp)
   8bbe0:	00000306 	br	8bbf0 <___vfprintf_internal_r+0x7cc>
   8bbe4:	8c7ffc04 	addi	r17,r17,-16
   8bbe8:	42000204 	addi	r8,r8,8
   8bbec:	b440130e 	bge	r22,r17,8bc3c <___vfprintf_internal_r+0x818>
   8bbf0:	010002b4 	movhi	r4,10
   8bbf4:	18c00404 	addi	r3,r3,16
   8bbf8:	10800044 	addi	r2,r2,1
   8bbfc:	21313c84 	addi	r4,r4,-15118
   8bc00:	41000015 	stw	r4,0(r8)
   8bc04:	45800115 	stw	r22,4(r8)
   8bc08:	d8c02015 	stw	r3,128(sp)
   8bc0c:	d8801f15 	stw	r2,124(sp)
   8bc10:	e0bff40e 	bge	fp,r2,8bbe4 <__alt_data_end+0xfffbbd24>
   8bc14:	d9801e04 	addi	r6,sp,120
   8bc18:	b80b883a 	mov	r5,r23
   8bc1c:	8009883a 	mov	r4,r16
   8bc20:	0093f740 	call	93f74 <__sprint_r>
   8bc24:	103f011e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8bc28:	8c7ffc04 	addi	r17,r17,-16
   8bc2c:	d8c02017 	ldw	r3,128(sp)
   8bc30:	d8801f17 	ldw	r2,124(sp)
   8bc34:	da000404 	addi	r8,sp,16
   8bc38:	b47fed16 	blt	r22,r17,8bbf0 <__alt_data_end+0xfffbbd30>
   8bc3c:	9021883a 	mov	r16,r18
   8bc40:	9825883a 	mov	r18,r19
   8bc44:	8827883a 	mov	r19,r17
   8bc48:	dc403b17 	ldw	r17,236(sp)
   8bc4c:	d9403517 	ldw	r5,212(sp)
   8bc50:	98c7883a 	add	r3,r19,r3
   8bc54:	10800044 	addi	r2,r2,1
   8bc58:	41400015 	stw	r5,0(r8)
   8bc5c:	44c00115 	stw	r19,4(r8)
   8bc60:	d8c02015 	stw	r3,128(sp)
   8bc64:	d8801f15 	stw	r2,124(sp)
   8bc68:	010001c4 	movi	r4,7
   8bc6c:	2082a316 	blt	r4,r2,8c6fc <___vfprintf_internal_r+0x12d8>
   8bc70:	df002787 	ldb	fp,158(sp)
   8bc74:	42000204 	addi	r8,r8,8
   8bc78:	e0000c26 	beq	fp,zero,8bcac <___vfprintf_internal_r+0x888>
   8bc7c:	d8801f17 	ldw	r2,124(sp)
   8bc80:	d9002784 	addi	r4,sp,158
   8bc84:	18c00044 	addi	r3,r3,1
   8bc88:	10800044 	addi	r2,r2,1
   8bc8c:	41000015 	stw	r4,0(r8)
   8bc90:	01000044 	movi	r4,1
   8bc94:	41000115 	stw	r4,4(r8)
   8bc98:	d8c02015 	stw	r3,128(sp)
   8bc9c:	d8801f15 	stw	r2,124(sp)
   8bca0:	010001c4 	movi	r4,7
   8bca4:	20823c16 	blt	r4,r2,8c598 <___vfprintf_internal_r+0x1174>
   8bca8:	42000204 	addi	r8,r8,8
   8bcac:	d8802b17 	ldw	r2,172(sp)
   8bcb0:	10000c26 	beq	r2,zero,8bce4 <___vfprintf_internal_r+0x8c0>
   8bcb4:	d8801f17 	ldw	r2,124(sp)
   8bcb8:	d9002704 	addi	r4,sp,156
   8bcbc:	18c00084 	addi	r3,r3,2
   8bcc0:	10800044 	addi	r2,r2,1
   8bcc4:	41000015 	stw	r4,0(r8)
   8bcc8:	01000084 	movi	r4,2
   8bccc:	41000115 	stw	r4,4(r8)
   8bcd0:	d8c02015 	stw	r3,128(sp)
   8bcd4:	d8801f15 	stw	r2,124(sp)
   8bcd8:	010001c4 	movi	r4,7
   8bcdc:	20823616 	blt	r4,r2,8c5b8 <___vfprintf_internal_r+0x1194>
   8bce0:	42000204 	addi	r8,r8,8
   8bce4:	d9003017 	ldw	r4,192(sp)
   8bce8:	00802004 	movi	r2,128
   8bcec:	20819926 	beq	r4,r2,8c354 <___vfprintf_internal_r+0xf30>
   8bcf0:	d9402917 	ldw	r5,164(sp)
   8bcf4:	d8802e17 	ldw	r2,184(sp)
   8bcf8:	28adc83a 	sub	r22,r5,r2
   8bcfc:	0580310e 	bge	zero,r22,8bdc4 <___vfprintf_internal_r+0x9a0>
   8bd00:	07000404 	movi	fp,16
   8bd04:	d8801f17 	ldw	r2,124(sp)
   8bd08:	e584140e 	bge	fp,r22,8cd5c <___vfprintf_internal_r+0x1938>
   8bd0c:	014002b4 	movhi	r5,10
   8bd10:	29713884 	addi	r5,r5,-15134
   8bd14:	dc402915 	stw	r17,164(sp)
   8bd18:	d9402b15 	stw	r5,172(sp)
   8bd1c:	b023883a 	mov	r17,r22
   8bd20:	04c001c4 	movi	r19,7
   8bd24:	a82d883a 	mov	r22,r21
   8bd28:	902b883a 	mov	r21,r18
   8bd2c:	8025883a 	mov	r18,r16
   8bd30:	dc002c17 	ldw	r16,176(sp)
   8bd34:	00000306 	br	8bd44 <___vfprintf_internal_r+0x920>
   8bd38:	8c7ffc04 	addi	r17,r17,-16
   8bd3c:	42000204 	addi	r8,r8,8
   8bd40:	e440110e 	bge	fp,r17,8bd88 <___vfprintf_internal_r+0x964>
   8bd44:	18c00404 	addi	r3,r3,16
   8bd48:	10800044 	addi	r2,r2,1
   8bd4c:	45000015 	stw	r20,0(r8)
   8bd50:	47000115 	stw	fp,4(r8)
   8bd54:	d8c02015 	stw	r3,128(sp)
   8bd58:	d8801f15 	stw	r2,124(sp)
   8bd5c:	98bff60e 	bge	r19,r2,8bd38 <__alt_data_end+0xfffbbe78>
   8bd60:	d9801e04 	addi	r6,sp,120
   8bd64:	b80b883a 	mov	r5,r23
   8bd68:	8009883a 	mov	r4,r16
   8bd6c:	0093f740 	call	93f74 <__sprint_r>
   8bd70:	103eae1e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8bd74:	8c7ffc04 	addi	r17,r17,-16
   8bd78:	d8c02017 	ldw	r3,128(sp)
   8bd7c:	d8801f17 	ldw	r2,124(sp)
   8bd80:	da000404 	addi	r8,sp,16
   8bd84:	e47fef16 	blt	fp,r17,8bd44 <__alt_data_end+0xfffbbe84>
   8bd88:	9021883a 	mov	r16,r18
   8bd8c:	a825883a 	mov	r18,r21
   8bd90:	b02b883a 	mov	r21,r22
   8bd94:	882d883a 	mov	r22,r17
   8bd98:	dc402917 	ldw	r17,164(sp)
   8bd9c:	d9002b17 	ldw	r4,172(sp)
   8bda0:	1d87883a 	add	r3,r3,r22
   8bda4:	10800044 	addi	r2,r2,1
   8bda8:	41000015 	stw	r4,0(r8)
   8bdac:	45800115 	stw	r22,4(r8)
   8bdb0:	d8c02015 	stw	r3,128(sp)
   8bdb4:	d8801f15 	stw	r2,124(sp)
   8bdb8:	010001c4 	movi	r4,7
   8bdbc:	2081ee16 	blt	r4,r2,8c578 <___vfprintf_internal_r+0x1154>
   8bdc0:	42000204 	addi	r8,r8,8
   8bdc4:	9080400c 	andi	r2,r18,256
   8bdc8:	1001181e 	bne	r2,zero,8c22c <___vfprintf_internal_r+0xe08>
   8bdcc:	d9402e17 	ldw	r5,184(sp)
   8bdd0:	d8801f17 	ldw	r2,124(sp)
   8bdd4:	44000015 	stw	r16,0(r8)
   8bdd8:	1947883a 	add	r3,r3,r5
   8bddc:	10800044 	addi	r2,r2,1
   8bde0:	41400115 	stw	r5,4(r8)
   8bde4:	d8c02015 	stw	r3,128(sp)
   8bde8:	d8801f15 	stw	r2,124(sp)
   8bdec:	010001c4 	movi	r4,7
   8bdf0:	2081d316 	blt	r4,r2,8c540 <___vfprintf_internal_r+0x111c>
   8bdf4:	42000204 	addi	r8,r8,8
   8bdf8:	9480010c 	andi	r18,r18,4
   8bdfc:	90003226 	beq	r18,zero,8bec8 <___vfprintf_internal_r+0xaa4>
   8be00:	d9403117 	ldw	r5,196(sp)
   8be04:	d8802a17 	ldw	r2,168(sp)
   8be08:	28a1c83a 	sub	r16,r5,r2
   8be0c:	04002e0e 	bge	zero,r16,8bec8 <___vfprintf_internal_r+0xaa4>
   8be10:	04400404 	movi	r17,16
   8be14:	d8801f17 	ldw	r2,124(sp)
   8be18:	8c04a20e 	bge	r17,r16,8d0a4 <___vfprintf_internal_r+0x1c80>
   8be1c:	014002b4 	movhi	r5,10
   8be20:	29713c84 	addi	r5,r5,-15118
   8be24:	d9403515 	stw	r5,212(sp)
   8be28:	048001c4 	movi	r18,7
   8be2c:	dcc02c17 	ldw	r19,176(sp)
   8be30:	00000306 	br	8be40 <___vfprintf_internal_r+0xa1c>
   8be34:	843ffc04 	addi	r16,r16,-16
   8be38:	42000204 	addi	r8,r8,8
   8be3c:	8c00130e 	bge	r17,r16,8be8c <___vfprintf_internal_r+0xa68>
   8be40:	010002b4 	movhi	r4,10
   8be44:	18c00404 	addi	r3,r3,16
   8be48:	10800044 	addi	r2,r2,1
   8be4c:	21313c84 	addi	r4,r4,-15118
   8be50:	41000015 	stw	r4,0(r8)
   8be54:	44400115 	stw	r17,4(r8)
   8be58:	d8c02015 	stw	r3,128(sp)
   8be5c:	d8801f15 	stw	r2,124(sp)
   8be60:	90bff40e 	bge	r18,r2,8be34 <__alt_data_end+0xfffbbf74>
   8be64:	d9801e04 	addi	r6,sp,120
   8be68:	b80b883a 	mov	r5,r23
   8be6c:	9809883a 	mov	r4,r19
   8be70:	0093f740 	call	93f74 <__sprint_r>
   8be74:	103e6d1e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8be78:	843ffc04 	addi	r16,r16,-16
   8be7c:	d8c02017 	ldw	r3,128(sp)
   8be80:	d8801f17 	ldw	r2,124(sp)
   8be84:	da000404 	addi	r8,sp,16
   8be88:	8c3fed16 	blt	r17,r16,8be40 <__alt_data_end+0xfffbbf80>
   8be8c:	d9403517 	ldw	r5,212(sp)
   8be90:	1c07883a 	add	r3,r3,r16
   8be94:	10800044 	addi	r2,r2,1
   8be98:	41400015 	stw	r5,0(r8)
   8be9c:	44000115 	stw	r16,4(r8)
   8bea0:	d8c02015 	stw	r3,128(sp)
   8bea4:	d8801f15 	stw	r2,124(sp)
   8bea8:	010001c4 	movi	r4,7
   8beac:	2080060e 	bge	r4,r2,8bec8 <___vfprintf_internal_r+0xaa4>
   8beb0:	d9002c17 	ldw	r4,176(sp)
   8beb4:	d9801e04 	addi	r6,sp,120
   8beb8:	b80b883a 	mov	r5,r23
   8bebc:	0093f740 	call	93f74 <__sprint_r>
   8bec0:	103e5a1e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8bec4:	d8c02017 	ldw	r3,128(sp)
   8bec8:	d8803117 	ldw	r2,196(sp)
   8becc:	d9002a17 	ldw	r4,168(sp)
   8bed0:	1100010e 	bge	r2,r4,8bed8 <___vfprintf_internal_r+0xab4>
   8bed4:	2005883a 	mov	r2,r4
   8bed8:	d9402f17 	ldw	r5,188(sp)
   8bedc:	288b883a 	add	r5,r5,r2
   8bee0:	d9402f15 	stw	r5,188(sp)
   8bee4:	18019e1e 	bne	r3,zero,8c560 <___vfprintf_internal_r+0x113c>
   8bee8:	a8800007 	ldb	r2,0(r21)
   8beec:	d8001f15 	stw	zero,124(sp)
   8bef0:	da000404 	addi	r8,sp,16
   8bef4:	103d851e 	bne	r2,zero,8b50c <__alt_data_end+0xfffbb64c>
   8bef8:	a821883a 	mov	r16,r21
   8befc:	003d9b06 	br	8b56c <__alt_data_end+0xfffbb6ac>
   8bf00:	18c03fcc 	andi	r3,r3,255
   8bf04:	1805c11e 	bne	r3,zero,8d60c <___vfprintf_internal_r+0x21e8>
   8bf08:	94800414 	ori	r18,r18,16
   8bf0c:	9080080c 	andi	r2,r18,32
   8bf10:	10020c26 	beq	r2,zero,8c744 <___vfprintf_internal_r+0x1320>
   8bf14:	d8802d17 	ldw	r2,180(sp)
   8bf18:	d9002917 	ldw	r4,164(sp)
   8bf1c:	d8002785 	stb	zero,158(sp)
   8bf20:	10c00204 	addi	r3,r2,8
   8bf24:	14c00017 	ldw	r19,0(r2)
   8bf28:	15800117 	ldw	r22,4(r2)
   8bf2c:	20040f16 	blt	r4,zero,8cf6c <___vfprintf_internal_r+0x1b48>
   8bf30:	013fdfc4 	movi	r4,-129
   8bf34:	9d84b03a 	or	r2,r19,r22
   8bf38:	d8c02d15 	stw	r3,180(sp)
   8bf3c:	9124703a 	and	r18,r18,r4
   8bf40:	0039883a 	mov	fp,zero
   8bf44:	103e891e 	bne	r2,zero,8b96c <__alt_data_end+0xfffbbaac>
   8bf48:	d9002917 	ldw	r4,164(sp)
   8bf4c:	2002c11e 	bne	r4,zero,8ca54 <___vfprintf_internal_r+0x1630>
   8bf50:	d8002915 	stw	zero,164(sp)
   8bf54:	d8002e15 	stw	zero,184(sp)
   8bf58:	dc001e04 	addi	r16,sp,120
   8bf5c:	003ef806 	br	8bb40 <__alt_data_end+0xfffbbc80>
   8bf60:	18c03fcc 	andi	r3,r3,255
   8bf64:	18059d1e 	bne	r3,zero,8d5dc <___vfprintf_internal_r+0x21b8>
   8bf68:	014002b4 	movhi	r5,10
   8bf6c:	29712404 	addi	r5,r5,-15216
   8bf70:	d9403915 	stw	r5,228(sp)
   8bf74:	9080080c 	andi	r2,r18,32
   8bf78:	10005226 	beq	r2,zero,8c0c4 <___vfprintf_internal_r+0xca0>
   8bf7c:	d8802d17 	ldw	r2,180(sp)
   8bf80:	14c00017 	ldw	r19,0(r2)
   8bf84:	15800117 	ldw	r22,4(r2)
   8bf88:	10800204 	addi	r2,r2,8
   8bf8c:	d8802d15 	stw	r2,180(sp)
   8bf90:	9080004c 	andi	r2,r18,1
   8bf94:	10019026 	beq	r2,zero,8c5d8 <___vfprintf_internal_r+0x11b4>
   8bf98:	9d84b03a 	or	r2,r19,r22
   8bf9c:	10036926 	beq	r2,zero,8cd44 <___vfprintf_internal_r+0x1920>
   8bfa0:	d8c02917 	ldw	r3,164(sp)
   8bfa4:	00800c04 	movi	r2,48
   8bfa8:	d8802705 	stb	r2,156(sp)
   8bfac:	dc402745 	stb	r17,157(sp)
   8bfb0:	d8002785 	stb	zero,158(sp)
   8bfb4:	90800094 	ori	r2,r18,2
   8bfb8:	18045d16 	blt	r3,zero,8d130 <___vfprintf_internal_r+0x1d0c>
   8bfbc:	00bfdfc4 	movi	r2,-129
   8bfc0:	90a4703a 	and	r18,r18,r2
   8bfc4:	94800094 	ori	r18,r18,2
   8bfc8:	0039883a 	mov	fp,zero
   8bfcc:	d9003917 	ldw	r4,228(sp)
   8bfd0:	dc001e04 	addi	r16,sp,120
   8bfd4:	988003cc 	andi	r2,r19,15
   8bfd8:	b006973a 	slli	r3,r22,28
   8bfdc:	2085883a 	add	r2,r4,r2
   8bfe0:	9826d13a 	srli	r19,r19,4
   8bfe4:	10800003 	ldbu	r2,0(r2)
   8bfe8:	b02cd13a 	srli	r22,r22,4
   8bfec:	843fffc4 	addi	r16,r16,-1
   8bff0:	1ce6b03a 	or	r19,r3,r19
   8bff4:	80800005 	stb	r2,0(r16)
   8bff8:	9d84b03a 	or	r2,r19,r22
   8bffc:	103ff51e 	bne	r2,zero,8bfd4 <__alt_data_end+0xfffbc114>
   8c000:	d8c02817 	ldw	r3,160(sp)
   8c004:	1c07c83a 	sub	r3,r3,r16
   8c008:	d8c02e15 	stw	r3,184(sp)
   8c00c:	003ecc06 	br	8bb40 <__alt_data_end+0xfffbbc80>
   8c010:	18c03fcc 	andi	r3,r3,255
   8c014:	183e9f26 	beq	r3,zero,8ba94 <__alt_data_end+0xfffbbbd4>
   8c018:	d9c02785 	stb	r7,158(sp)
   8c01c:	003e9d06 	br	8ba94 <__alt_data_end+0xfffbbbd4>
   8c020:	00c00044 	movi	r3,1
   8c024:	01c00ac4 	movi	r7,43
   8c028:	ac400007 	ldb	r17,0(r21)
   8c02c:	003d5e06 	br	8b5a8 <__alt_data_end+0xfffbb6e8>
   8c030:	94800814 	ori	r18,r18,32
   8c034:	ac400007 	ldb	r17,0(r21)
   8c038:	003d5b06 	br	8b5a8 <__alt_data_end+0xfffbb6e8>
   8c03c:	d8c02d17 	ldw	r3,180(sp)
   8c040:	d8002785 	stb	zero,158(sp)
   8c044:	1c000017 	ldw	r16,0(r3)
   8c048:	1cc00104 	addi	r19,r3,4
   8c04c:	80041926 	beq	r16,zero,8d0b4 <___vfprintf_internal_r+0x1c90>
   8c050:	d9002917 	ldw	r4,164(sp)
   8c054:	2003d016 	blt	r4,zero,8cf98 <___vfprintf_internal_r+0x1b74>
   8c058:	200d883a 	mov	r6,r4
   8c05c:	000b883a 	mov	r5,zero
   8c060:	8009883a 	mov	r4,r16
   8c064:	da003d15 	stw	r8,244(sp)
   8c068:	0090d5c0 	call	90d5c <memchr>
   8c06c:	da003d17 	ldw	r8,244(sp)
   8c070:	10045426 	beq	r2,zero,8d1c4 <___vfprintf_internal_r+0x1da0>
   8c074:	1405c83a 	sub	r2,r2,r16
   8c078:	d8802e15 	stw	r2,184(sp)
   8c07c:	1003cc16 	blt	r2,zero,8cfb0 <___vfprintf_internal_r+0x1b8c>
   8c080:	df002783 	ldbu	fp,158(sp)
   8c084:	d8802a15 	stw	r2,168(sp)
   8c088:	dcc02d15 	stw	r19,180(sp)
   8c08c:	d8002915 	stw	zero,164(sp)
   8c090:	d8003215 	stw	zero,200(sp)
   8c094:	003eb006 	br	8bb58 <__alt_data_end+0xfffbbc98>
   8c098:	18c03fcc 	andi	r3,r3,255
   8c09c:	183f9b26 	beq	r3,zero,8bf0c <__alt_data_end+0xfffbc04c>
   8c0a0:	d9c02785 	stb	r7,158(sp)
   8c0a4:	003f9906 	br	8bf0c <__alt_data_end+0xfffbc04c>
   8c0a8:	18c03fcc 	andi	r3,r3,255
   8c0ac:	1805551e 	bne	r3,zero,8d604 <___vfprintf_internal_r+0x21e0>
   8c0b0:	014002b4 	movhi	r5,10
   8c0b4:	29712904 	addi	r5,r5,-15196
   8c0b8:	d9403915 	stw	r5,228(sp)
   8c0bc:	9080080c 	andi	r2,r18,32
   8c0c0:	103fae1e 	bne	r2,zero,8bf7c <__alt_data_end+0xfffbc0bc>
   8c0c4:	9080040c 	andi	r2,r18,16
   8c0c8:	1002de26 	beq	r2,zero,8cc44 <___vfprintf_internal_r+0x1820>
   8c0cc:	d8c02d17 	ldw	r3,180(sp)
   8c0d0:	002d883a 	mov	r22,zero
   8c0d4:	1cc00017 	ldw	r19,0(r3)
   8c0d8:	18c00104 	addi	r3,r3,4
   8c0dc:	d8c02d15 	stw	r3,180(sp)
   8c0e0:	003fab06 	br	8bf90 <__alt_data_end+0xfffbc0d0>
   8c0e4:	38803fcc 	andi	r2,r7,255
   8c0e8:	1080201c 	xori	r2,r2,128
   8c0ec:	10bfe004 	addi	r2,r2,-128
   8c0f0:	1002d21e 	bne	r2,zero,8cc3c <___vfprintf_internal_r+0x1818>
   8c0f4:	00c00044 	movi	r3,1
   8c0f8:	01c00804 	movi	r7,32
   8c0fc:	ac400007 	ldb	r17,0(r21)
   8c100:	003d2906 	br	8b5a8 <__alt_data_end+0xfffbb6e8>
   8c104:	94800054 	ori	r18,r18,1
   8c108:	ac400007 	ldb	r17,0(r21)
   8c10c:	003d2606 	br	8b5a8 <__alt_data_end+0xfffbb6e8>
   8c110:	18c03fcc 	andi	r3,r3,255
   8c114:	183e0526 	beq	r3,zero,8b92c <__alt_data_end+0xfffbba6c>
   8c118:	d9c02785 	stb	r7,158(sp)
   8c11c:	003e0306 	br	8b92c <__alt_data_end+0xfffbba6c>
   8c120:	94801014 	ori	r18,r18,64
   8c124:	ac400007 	ldb	r17,0(r21)
   8c128:	003d1f06 	br	8b5a8 <__alt_data_end+0xfffbb6e8>
   8c12c:	ac400007 	ldb	r17,0(r21)
   8c130:	8a438726 	beq	r17,r9,8cf50 <___vfprintf_internal_r+0x1b2c>
   8c134:	94800414 	ori	r18,r18,16
   8c138:	003d1b06 	br	8b5a8 <__alt_data_end+0xfffbb6e8>
   8c13c:	18c03fcc 	andi	r3,r3,255
   8c140:	1805341e 	bne	r3,zero,8d614 <___vfprintf_internal_r+0x21f0>
   8c144:	9080080c 	andi	r2,r18,32
   8c148:	1002cd26 	beq	r2,zero,8cc80 <___vfprintf_internal_r+0x185c>
   8c14c:	d9402d17 	ldw	r5,180(sp)
   8c150:	d9002f17 	ldw	r4,188(sp)
   8c154:	28800017 	ldw	r2,0(r5)
   8c158:	2007d7fa 	srai	r3,r4,31
   8c15c:	29400104 	addi	r5,r5,4
   8c160:	d9402d15 	stw	r5,180(sp)
   8c164:	11000015 	stw	r4,0(r2)
   8c168:	10c00115 	stw	r3,4(r2)
   8c16c:	003ce506 	br	8b504 <__alt_data_end+0xfffbb644>
   8c170:	d8c02d17 	ldw	r3,180(sp)
   8c174:	d9002d17 	ldw	r4,180(sp)
   8c178:	d8002785 	stb	zero,158(sp)
   8c17c:	18800017 	ldw	r2,0(r3)
   8c180:	21000104 	addi	r4,r4,4
   8c184:	00c00044 	movi	r3,1
   8c188:	d8c02a15 	stw	r3,168(sp)
   8c18c:	d8801405 	stb	r2,80(sp)
   8c190:	d9002d15 	stw	r4,180(sp)
   8c194:	d8c02e15 	stw	r3,184(sp)
   8c198:	d8002915 	stw	zero,164(sp)
   8c19c:	d8003215 	stw	zero,200(sp)
   8c1a0:	dc001404 	addi	r16,sp,80
   8c1a4:	0039883a 	mov	fp,zero
   8c1a8:	003e7206 	br	8bb74 <__alt_data_end+0xfffbbcb4>
   8c1ac:	010002b4 	movhi	r4,10
   8c1b0:	21312904 	addi	r4,r4,-15196
   8c1b4:	0039883a 	mov	fp,zero
   8c1b8:	d9003915 	stw	r4,228(sp)
   8c1bc:	04401e04 	movi	r17,120
   8c1c0:	003f8206 	br	8bfcc <__alt_data_end+0xfffbc10c>
   8c1c4:	18c03fcc 	andi	r3,r3,255
   8c1c8:	1805061e 	bne	r3,zero,8d5e4 <___vfprintf_internal_r+0x21c0>
   8c1cc:	883d9126 	beq	r17,zero,8b814 <__alt_data_end+0xfffbb954>
   8c1d0:	00c00044 	movi	r3,1
   8c1d4:	d8c02a15 	stw	r3,168(sp)
   8c1d8:	dc401405 	stb	r17,80(sp)
   8c1dc:	d8002785 	stb	zero,158(sp)
   8c1e0:	003fec06 	br	8c194 <__alt_data_end+0xfffbc2d4>
   8c1e4:	014002b4 	movhi	r5,10
   8c1e8:	29712904 	addi	r5,r5,-15196
   8c1ec:	d9403915 	stw	r5,228(sp)
   8c1f0:	d8c02d15 	stw	r3,180(sp)
   8c1f4:	1025883a 	mov	r18,r2
   8c1f8:	04401e04 	movi	r17,120
   8c1fc:	9d84b03a 	or	r2,r19,r22
   8c200:	1000fc1e 	bne	r2,zero,8c5f4 <___vfprintf_internal_r+0x11d0>
   8c204:	0039883a 	mov	fp,zero
   8c208:	00800084 	movi	r2,2
   8c20c:	10803fcc 	andi	r2,r2,255
   8c210:	00c00044 	movi	r3,1
   8c214:	10c20f26 	beq	r2,r3,8ca54 <___vfprintf_internal_r+0x1630>
   8c218:	00c00084 	movi	r3,2
   8c21c:	10fd6326 	beq	r2,r3,8b7ac <__alt_data_end+0xfffbb8ec>
   8c220:	003e2d06 	br	8bad8 <__alt_data_end+0xfffbbc18>
   8c224:	d8c02017 	ldw	r3,128(sp)
   8c228:	003e9306 	br	8bc78 <__alt_data_end+0xfffbbdb8>
   8c22c:	00801944 	movi	r2,101
   8c230:	14407e0e 	bge	r2,r17,8c42c <___vfprintf_internal_r+0x1008>
   8c234:	d9003617 	ldw	r4,216(sp)
   8c238:	d9403817 	ldw	r5,224(sp)
   8c23c:	000d883a 	mov	r6,zero
   8c240:	000f883a 	mov	r7,zero
   8c244:	d8c03c15 	stw	r3,240(sp)
   8c248:	da003d15 	stw	r8,244(sp)
   8c24c:	0097a380 	call	97a38 <__eqdf2>
   8c250:	d8c03c17 	ldw	r3,240(sp)
   8c254:	da003d17 	ldw	r8,244(sp)
   8c258:	1000f71e 	bne	r2,zero,8c638 <___vfprintf_internal_r+0x1214>
   8c25c:	d8801f17 	ldw	r2,124(sp)
   8c260:	010002b4 	movhi	r4,10
   8c264:	21313004 	addi	r4,r4,-15168
   8c268:	18c00044 	addi	r3,r3,1
   8c26c:	10800044 	addi	r2,r2,1
   8c270:	41000015 	stw	r4,0(r8)
   8c274:	01000044 	movi	r4,1
   8c278:	41000115 	stw	r4,4(r8)
   8c27c:	d8c02015 	stw	r3,128(sp)
   8c280:	d8801f15 	stw	r2,124(sp)
   8c284:	010001c4 	movi	r4,7
   8c288:	2082b816 	blt	r4,r2,8cd6c <___vfprintf_internal_r+0x1948>
   8c28c:	42000204 	addi	r8,r8,8
   8c290:	d8802617 	ldw	r2,152(sp)
   8c294:	d9403317 	ldw	r5,204(sp)
   8c298:	11400216 	blt	r2,r5,8c2a4 <___vfprintf_internal_r+0xe80>
   8c29c:	9080004c 	andi	r2,r18,1
   8c2a0:	103ed526 	beq	r2,zero,8bdf8 <__alt_data_end+0xfffbbf38>
   8c2a4:	d8803717 	ldw	r2,220(sp)
   8c2a8:	d9003417 	ldw	r4,208(sp)
   8c2ac:	d9403717 	ldw	r5,220(sp)
   8c2b0:	1887883a 	add	r3,r3,r2
   8c2b4:	d8801f17 	ldw	r2,124(sp)
   8c2b8:	41000015 	stw	r4,0(r8)
   8c2bc:	41400115 	stw	r5,4(r8)
   8c2c0:	10800044 	addi	r2,r2,1
   8c2c4:	d8c02015 	stw	r3,128(sp)
   8c2c8:	d8801f15 	stw	r2,124(sp)
   8c2cc:	010001c4 	movi	r4,7
   8c2d0:	20832916 	blt	r4,r2,8cf78 <___vfprintf_internal_r+0x1b54>
   8c2d4:	42000204 	addi	r8,r8,8
   8c2d8:	d8803317 	ldw	r2,204(sp)
   8c2dc:	143fffc4 	addi	r16,r2,-1
   8c2e0:	043ec50e 	bge	zero,r16,8bdf8 <__alt_data_end+0xfffbbf38>
   8c2e4:	04400404 	movi	r17,16
   8c2e8:	d8801f17 	ldw	r2,124(sp)
   8c2ec:	8c00880e 	bge	r17,r16,8c510 <___vfprintf_internal_r+0x10ec>
   8c2f0:	014002b4 	movhi	r5,10
   8c2f4:	29713884 	addi	r5,r5,-15134
   8c2f8:	d9402b15 	stw	r5,172(sp)
   8c2fc:	058001c4 	movi	r22,7
   8c300:	dcc02c17 	ldw	r19,176(sp)
   8c304:	00000306 	br	8c314 <___vfprintf_internal_r+0xef0>
   8c308:	42000204 	addi	r8,r8,8
   8c30c:	843ffc04 	addi	r16,r16,-16
   8c310:	8c00820e 	bge	r17,r16,8c51c <___vfprintf_internal_r+0x10f8>
   8c314:	18c00404 	addi	r3,r3,16
   8c318:	10800044 	addi	r2,r2,1
   8c31c:	45000015 	stw	r20,0(r8)
   8c320:	44400115 	stw	r17,4(r8)
   8c324:	d8c02015 	stw	r3,128(sp)
   8c328:	d8801f15 	stw	r2,124(sp)
   8c32c:	b0bff60e 	bge	r22,r2,8c308 <__alt_data_end+0xfffbc448>
   8c330:	d9801e04 	addi	r6,sp,120
   8c334:	b80b883a 	mov	r5,r23
   8c338:	9809883a 	mov	r4,r19
   8c33c:	0093f740 	call	93f74 <__sprint_r>
   8c340:	103d3a1e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8c344:	d8c02017 	ldw	r3,128(sp)
   8c348:	d8801f17 	ldw	r2,124(sp)
   8c34c:	da000404 	addi	r8,sp,16
   8c350:	003fee06 	br	8c30c <__alt_data_end+0xfffbc44c>
   8c354:	d9403117 	ldw	r5,196(sp)
   8c358:	d8802a17 	ldw	r2,168(sp)
   8c35c:	28adc83a 	sub	r22,r5,r2
   8c360:	05be630e 	bge	zero,r22,8bcf0 <__alt_data_end+0xfffbbe30>
   8c364:	07000404 	movi	fp,16
   8c368:	d8801f17 	ldw	r2,124(sp)
   8c36c:	e5838f0e 	bge	fp,r22,8d1ac <___vfprintf_internal_r+0x1d88>
   8c370:	014002b4 	movhi	r5,10
   8c374:	29713884 	addi	r5,r5,-15134
   8c378:	dc403015 	stw	r17,192(sp)
   8c37c:	d9402b15 	stw	r5,172(sp)
   8c380:	b023883a 	mov	r17,r22
   8c384:	04c001c4 	movi	r19,7
   8c388:	a82d883a 	mov	r22,r21
   8c38c:	902b883a 	mov	r21,r18
   8c390:	8025883a 	mov	r18,r16
   8c394:	dc002c17 	ldw	r16,176(sp)
   8c398:	00000306 	br	8c3a8 <___vfprintf_internal_r+0xf84>
   8c39c:	8c7ffc04 	addi	r17,r17,-16
   8c3a0:	42000204 	addi	r8,r8,8
   8c3a4:	e440110e 	bge	fp,r17,8c3ec <___vfprintf_internal_r+0xfc8>
   8c3a8:	18c00404 	addi	r3,r3,16
   8c3ac:	10800044 	addi	r2,r2,1
   8c3b0:	45000015 	stw	r20,0(r8)
   8c3b4:	47000115 	stw	fp,4(r8)
   8c3b8:	d8c02015 	stw	r3,128(sp)
   8c3bc:	d8801f15 	stw	r2,124(sp)
   8c3c0:	98bff60e 	bge	r19,r2,8c39c <__alt_data_end+0xfffbc4dc>
   8c3c4:	d9801e04 	addi	r6,sp,120
   8c3c8:	b80b883a 	mov	r5,r23
   8c3cc:	8009883a 	mov	r4,r16
   8c3d0:	0093f740 	call	93f74 <__sprint_r>
   8c3d4:	103d151e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8c3d8:	8c7ffc04 	addi	r17,r17,-16
   8c3dc:	d8c02017 	ldw	r3,128(sp)
   8c3e0:	d8801f17 	ldw	r2,124(sp)
   8c3e4:	da000404 	addi	r8,sp,16
   8c3e8:	e47fef16 	blt	fp,r17,8c3a8 <__alt_data_end+0xfffbc4e8>
   8c3ec:	9021883a 	mov	r16,r18
   8c3f0:	a825883a 	mov	r18,r21
   8c3f4:	b02b883a 	mov	r21,r22
   8c3f8:	882d883a 	mov	r22,r17
   8c3fc:	dc403017 	ldw	r17,192(sp)
   8c400:	d9002b17 	ldw	r4,172(sp)
   8c404:	1d87883a 	add	r3,r3,r22
   8c408:	10800044 	addi	r2,r2,1
   8c40c:	41000015 	stw	r4,0(r8)
   8c410:	45800115 	stw	r22,4(r8)
   8c414:	d8c02015 	stw	r3,128(sp)
   8c418:	d8801f15 	stw	r2,124(sp)
   8c41c:	010001c4 	movi	r4,7
   8c420:	20818e16 	blt	r4,r2,8ca5c <___vfprintf_internal_r+0x1638>
   8c424:	42000204 	addi	r8,r8,8
   8c428:	003e3106 	br	8bcf0 <__alt_data_end+0xfffbbe30>
   8c42c:	d9403317 	ldw	r5,204(sp)
   8c430:	00800044 	movi	r2,1
   8c434:	18c00044 	addi	r3,r3,1
   8c438:	1141530e 	bge	r2,r5,8c988 <___vfprintf_internal_r+0x1564>
   8c43c:	dc401f17 	ldw	r17,124(sp)
   8c440:	00800044 	movi	r2,1
   8c444:	40800115 	stw	r2,4(r8)
   8c448:	8c400044 	addi	r17,r17,1
   8c44c:	44000015 	stw	r16,0(r8)
   8c450:	d8c02015 	stw	r3,128(sp)
   8c454:	dc401f15 	stw	r17,124(sp)
   8c458:	008001c4 	movi	r2,7
   8c45c:	14416b16 	blt	r2,r17,8ca0c <___vfprintf_internal_r+0x15e8>
   8c460:	42000204 	addi	r8,r8,8
   8c464:	d8803717 	ldw	r2,220(sp)
   8c468:	d9003417 	ldw	r4,208(sp)
   8c46c:	8c400044 	addi	r17,r17,1
   8c470:	10c7883a 	add	r3,r2,r3
   8c474:	40800115 	stw	r2,4(r8)
   8c478:	41000015 	stw	r4,0(r8)
   8c47c:	d8c02015 	stw	r3,128(sp)
   8c480:	dc401f15 	stw	r17,124(sp)
   8c484:	008001c4 	movi	r2,7
   8c488:	14416916 	blt	r2,r17,8ca30 <___vfprintf_internal_r+0x160c>
   8c48c:	45800204 	addi	r22,r8,8
   8c490:	d9003617 	ldw	r4,216(sp)
   8c494:	d9403817 	ldw	r5,224(sp)
   8c498:	000d883a 	mov	r6,zero
   8c49c:	000f883a 	mov	r7,zero
   8c4a0:	d8c03c15 	stw	r3,240(sp)
   8c4a4:	0097a380 	call	97a38 <__eqdf2>
   8c4a8:	d8c03c17 	ldw	r3,240(sp)
   8c4ac:	1000bc26 	beq	r2,zero,8c7a0 <___vfprintf_internal_r+0x137c>
   8c4b0:	d9403317 	ldw	r5,204(sp)
   8c4b4:	84000044 	addi	r16,r16,1
   8c4b8:	8c400044 	addi	r17,r17,1
   8c4bc:	28bfffc4 	addi	r2,r5,-1
   8c4c0:	1887883a 	add	r3,r3,r2
   8c4c4:	b0800115 	stw	r2,4(r22)
   8c4c8:	b4000015 	stw	r16,0(r22)
   8c4cc:	d8c02015 	stw	r3,128(sp)
   8c4d0:	dc401f15 	stw	r17,124(sp)
   8c4d4:	008001c4 	movi	r2,7
   8c4d8:	14414316 	blt	r2,r17,8c9e8 <___vfprintf_internal_r+0x15c4>
   8c4dc:	b5800204 	addi	r22,r22,8
   8c4e0:	d9003a17 	ldw	r4,232(sp)
   8c4e4:	df0022c4 	addi	fp,sp,139
   8c4e8:	8c400044 	addi	r17,r17,1
   8c4ec:	20c7883a 	add	r3,r4,r3
   8c4f0:	b7000015 	stw	fp,0(r22)
   8c4f4:	b1000115 	stw	r4,4(r22)
   8c4f8:	d8c02015 	stw	r3,128(sp)
   8c4fc:	dc401f15 	stw	r17,124(sp)
   8c500:	008001c4 	movi	r2,7
   8c504:	14400e16 	blt	r2,r17,8c540 <___vfprintf_internal_r+0x111c>
   8c508:	b2000204 	addi	r8,r22,8
   8c50c:	003e3a06 	br	8bdf8 <__alt_data_end+0xfffbbf38>
   8c510:	010002b4 	movhi	r4,10
   8c514:	21313884 	addi	r4,r4,-15134
   8c518:	d9002b15 	stw	r4,172(sp)
   8c51c:	d9002b17 	ldw	r4,172(sp)
   8c520:	1c07883a 	add	r3,r3,r16
   8c524:	44000115 	stw	r16,4(r8)
   8c528:	41000015 	stw	r4,0(r8)
   8c52c:	10800044 	addi	r2,r2,1
   8c530:	d8c02015 	stw	r3,128(sp)
   8c534:	d8801f15 	stw	r2,124(sp)
   8c538:	010001c4 	movi	r4,7
   8c53c:	20be2d0e 	bge	r4,r2,8bdf4 <__alt_data_end+0xfffbbf34>
   8c540:	d9002c17 	ldw	r4,176(sp)
   8c544:	d9801e04 	addi	r6,sp,120
   8c548:	b80b883a 	mov	r5,r23
   8c54c:	0093f740 	call	93f74 <__sprint_r>
   8c550:	103cb61e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8c554:	d8c02017 	ldw	r3,128(sp)
   8c558:	da000404 	addi	r8,sp,16
   8c55c:	003e2606 	br	8bdf8 <__alt_data_end+0xfffbbf38>
   8c560:	d9002c17 	ldw	r4,176(sp)
   8c564:	d9801e04 	addi	r6,sp,120
   8c568:	b80b883a 	mov	r5,r23
   8c56c:	0093f740 	call	93f74 <__sprint_r>
   8c570:	103e5d26 	beq	r2,zero,8bee8 <__alt_data_end+0xfffbc028>
   8c574:	003cad06 	br	8b82c <__alt_data_end+0xfffbb96c>
   8c578:	d9002c17 	ldw	r4,176(sp)
   8c57c:	d9801e04 	addi	r6,sp,120
   8c580:	b80b883a 	mov	r5,r23
   8c584:	0093f740 	call	93f74 <__sprint_r>
   8c588:	103ca81e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8c58c:	d8c02017 	ldw	r3,128(sp)
   8c590:	da000404 	addi	r8,sp,16
   8c594:	003e0b06 	br	8bdc4 <__alt_data_end+0xfffbbf04>
   8c598:	d9002c17 	ldw	r4,176(sp)
   8c59c:	d9801e04 	addi	r6,sp,120
   8c5a0:	b80b883a 	mov	r5,r23
   8c5a4:	0093f740 	call	93f74 <__sprint_r>
   8c5a8:	103ca01e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8c5ac:	d8c02017 	ldw	r3,128(sp)
   8c5b0:	da000404 	addi	r8,sp,16
   8c5b4:	003dbd06 	br	8bcac <__alt_data_end+0xfffbbdec>
   8c5b8:	d9002c17 	ldw	r4,176(sp)
   8c5bc:	d9801e04 	addi	r6,sp,120
   8c5c0:	b80b883a 	mov	r5,r23
   8c5c4:	0093f740 	call	93f74 <__sprint_r>
   8c5c8:	103c981e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8c5cc:	d8c02017 	ldw	r3,128(sp)
   8c5d0:	da000404 	addi	r8,sp,16
   8c5d4:	003dc306 	br	8bce4 <__alt_data_end+0xfffbbe24>
   8c5d8:	d8802917 	ldw	r2,164(sp)
   8c5dc:	d8002785 	stb	zero,158(sp)
   8c5e0:	103f0616 	blt	r2,zero,8c1fc <__alt_data_end+0xfffbc33c>
   8c5e4:	00ffdfc4 	movi	r3,-129
   8c5e8:	9d84b03a 	or	r2,r19,r22
   8c5ec:	90e4703a 	and	r18,r18,r3
   8c5f0:	103c6b26 	beq	r2,zero,8b7a0 <__alt_data_end+0xfffbb8e0>
   8c5f4:	0039883a 	mov	fp,zero
   8c5f8:	003e7406 	br	8bfcc <__alt_data_end+0xfffbc10c>
   8c5fc:	9080040c 	andi	r2,r18,16
   8c600:	1001b326 	beq	r2,zero,8ccd0 <___vfprintf_internal_r+0x18ac>
   8c604:	d9002d17 	ldw	r4,180(sp)
   8c608:	d9402917 	ldw	r5,164(sp)
   8c60c:	d8002785 	stb	zero,158(sp)
   8c610:	20800104 	addi	r2,r4,4
   8c614:	24c00017 	ldw	r19,0(r4)
   8c618:	002d883a 	mov	r22,zero
   8c61c:	2801b516 	blt	r5,zero,8ccf4 <___vfprintf_internal_r+0x18d0>
   8c620:	00ffdfc4 	movi	r3,-129
   8c624:	d8802d15 	stw	r2,180(sp)
   8c628:	90e4703a 	and	r18,r18,r3
   8c62c:	983d2726 	beq	r19,zero,8bacc <__alt_data_end+0xfffbbc0c>
   8c630:	0039883a 	mov	fp,zero
   8c634:	003d2a06 	br	8bae0 <__alt_data_end+0xfffbbc20>
   8c638:	dc402617 	ldw	r17,152(sp)
   8c63c:	0441d30e 	bge	zero,r17,8cd8c <___vfprintf_internal_r+0x1968>
   8c640:	dc403217 	ldw	r17,200(sp)
   8c644:	d8803317 	ldw	r2,204(sp)
   8c648:	1440010e 	bge	r2,r17,8c650 <___vfprintf_internal_r+0x122c>
   8c64c:	1023883a 	mov	r17,r2
   8c650:	04400a0e 	bge	zero,r17,8c67c <___vfprintf_internal_r+0x1258>
   8c654:	d8801f17 	ldw	r2,124(sp)
   8c658:	1c47883a 	add	r3,r3,r17
   8c65c:	44000015 	stw	r16,0(r8)
   8c660:	10800044 	addi	r2,r2,1
   8c664:	44400115 	stw	r17,4(r8)
   8c668:	d8c02015 	stw	r3,128(sp)
   8c66c:	d8801f15 	stw	r2,124(sp)
   8c670:	010001c4 	movi	r4,7
   8c674:	20826516 	blt	r4,r2,8d00c <___vfprintf_internal_r+0x1be8>
   8c678:	42000204 	addi	r8,r8,8
   8c67c:	88026116 	blt	r17,zero,8d004 <___vfprintf_internal_r+0x1be0>
   8c680:	d9003217 	ldw	r4,200(sp)
   8c684:	2463c83a 	sub	r17,r4,r17
   8c688:	04407b0e 	bge	zero,r17,8c878 <___vfprintf_internal_r+0x1454>
   8c68c:	05800404 	movi	r22,16
   8c690:	d8801f17 	ldw	r2,124(sp)
   8c694:	b4419d0e 	bge	r22,r17,8cd0c <___vfprintf_internal_r+0x18e8>
   8c698:	010002b4 	movhi	r4,10
   8c69c:	21313884 	addi	r4,r4,-15134
   8c6a0:	d9002b15 	stw	r4,172(sp)
   8c6a4:	070001c4 	movi	fp,7
   8c6a8:	dcc02c17 	ldw	r19,176(sp)
   8c6ac:	00000306 	br	8c6bc <___vfprintf_internal_r+0x1298>
   8c6b0:	42000204 	addi	r8,r8,8
   8c6b4:	8c7ffc04 	addi	r17,r17,-16
   8c6b8:	b441970e 	bge	r22,r17,8cd18 <___vfprintf_internal_r+0x18f4>
   8c6bc:	18c00404 	addi	r3,r3,16
   8c6c0:	10800044 	addi	r2,r2,1
   8c6c4:	45000015 	stw	r20,0(r8)
   8c6c8:	45800115 	stw	r22,4(r8)
   8c6cc:	d8c02015 	stw	r3,128(sp)
   8c6d0:	d8801f15 	stw	r2,124(sp)
   8c6d4:	e0bff60e 	bge	fp,r2,8c6b0 <__alt_data_end+0xfffbc7f0>
   8c6d8:	d9801e04 	addi	r6,sp,120
   8c6dc:	b80b883a 	mov	r5,r23
   8c6e0:	9809883a 	mov	r4,r19
   8c6e4:	0093f740 	call	93f74 <__sprint_r>
   8c6e8:	103c501e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8c6ec:	d8c02017 	ldw	r3,128(sp)
   8c6f0:	d8801f17 	ldw	r2,124(sp)
   8c6f4:	da000404 	addi	r8,sp,16
   8c6f8:	003fee06 	br	8c6b4 <__alt_data_end+0xfffbc7f4>
   8c6fc:	d9002c17 	ldw	r4,176(sp)
   8c700:	d9801e04 	addi	r6,sp,120
   8c704:	b80b883a 	mov	r5,r23
   8c708:	0093f740 	call	93f74 <__sprint_r>
   8c70c:	103c471e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8c710:	d8c02017 	ldw	r3,128(sp)
   8c714:	df002787 	ldb	fp,158(sp)
   8c718:	da000404 	addi	r8,sp,16
   8c71c:	003d5606 	br	8bc78 <__alt_data_end+0xfffbbdb8>
   8c720:	9080040c 	andi	r2,r18,16
   8c724:	10016126 	beq	r2,zero,8ccac <___vfprintf_internal_r+0x1888>
   8c728:	d8802d17 	ldw	r2,180(sp)
   8c72c:	14c00017 	ldw	r19,0(r2)
   8c730:	10800104 	addi	r2,r2,4
   8c734:	d8802d15 	stw	r2,180(sp)
   8c738:	982dd7fa 	srai	r22,r19,31
   8c73c:	b005883a 	mov	r2,r22
   8c740:	003c8206 	br	8b94c <__alt_data_end+0xfffbba8c>
   8c744:	9080040c 	andi	r2,r18,16
   8c748:	10003526 	beq	r2,zero,8c820 <___vfprintf_internal_r+0x13fc>
   8c74c:	d9402d17 	ldw	r5,180(sp)
   8c750:	d8c02917 	ldw	r3,164(sp)
   8c754:	d8002785 	stb	zero,158(sp)
   8c758:	28800104 	addi	r2,r5,4
   8c75c:	2cc00017 	ldw	r19,0(r5)
   8c760:	002d883a 	mov	r22,zero
   8c764:	18003716 	blt	r3,zero,8c844 <___vfprintf_internal_r+0x1420>
   8c768:	00ffdfc4 	movi	r3,-129
   8c76c:	d8802d15 	stw	r2,180(sp)
   8c770:	90e4703a 	and	r18,r18,r3
   8c774:	0039883a 	mov	fp,zero
   8c778:	983df326 	beq	r19,zero,8bf48 <__alt_data_end+0xfffbc088>
   8c77c:	00800244 	movi	r2,9
   8c780:	14fc7b36 	bltu	r2,r19,8b970 <__alt_data_end+0xfffbbab0>
   8c784:	d8c02817 	ldw	r3,160(sp)
   8c788:	dc001dc4 	addi	r16,sp,119
   8c78c:	9cc00c04 	addi	r19,r19,48
   8c790:	1c07c83a 	sub	r3,r3,r16
   8c794:	dcc01dc5 	stb	r19,119(sp)
   8c798:	d8c02e15 	stw	r3,184(sp)
   8c79c:	003ce806 	br	8bb40 <__alt_data_end+0xfffbbc80>
   8c7a0:	d8803317 	ldw	r2,204(sp)
   8c7a4:	143fffc4 	addi	r16,r2,-1
   8c7a8:	043f4d0e 	bge	zero,r16,8c4e0 <__alt_data_end+0xfffbc620>
   8c7ac:	07000404 	movi	fp,16
   8c7b0:	e400810e 	bge	fp,r16,8c9b8 <___vfprintf_internal_r+0x1594>
   8c7b4:	014002b4 	movhi	r5,10
   8c7b8:	29713884 	addi	r5,r5,-15134
   8c7bc:	d9402b15 	stw	r5,172(sp)
   8c7c0:	01c001c4 	movi	r7,7
   8c7c4:	dcc02c17 	ldw	r19,176(sp)
   8c7c8:	00000306 	br	8c7d8 <___vfprintf_internal_r+0x13b4>
   8c7cc:	b5800204 	addi	r22,r22,8
   8c7d0:	843ffc04 	addi	r16,r16,-16
   8c7d4:	e4007b0e 	bge	fp,r16,8c9c4 <___vfprintf_internal_r+0x15a0>
   8c7d8:	18c00404 	addi	r3,r3,16
   8c7dc:	8c400044 	addi	r17,r17,1
   8c7e0:	b5000015 	stw	r20,0(r22)
   8c7e4:	b7000115 	stw	fp,4(r22)
   8c7e8:	d8c02015 	stw	r3,128(sp)
   8c7ec:	dc401f15 	stw	r17,124(sp)
   8c7f0:	3c7ff60e 	bge	r7,r17,8c7cc <__alt_data_end+0xfffbc90c>
   8c7f4:	d9801e04 	addi	r6,sp,120
   8c7f8:	b80b883a 	mov	r5,r23
   8c7fc:	9809883a 	mov	r4,r19
   8c800:	d9c03c15 	stw	r7,240(sp)
   8c804:	0093f740 	call	93f74 <__sprint_r>
   8c808:	d9c03c17 	ldw	r7,240(sp)
   8c80c:	103c071e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8c810:	d8c02017 	ldw	r3,128(sp)
   8c814:	dc401f17 	ldw	r17,124(sp)
   8c818:	dd800404 	addi	r22,sp,16
   8c81c:	003fec06 	br	8c7d0 <__alt_data_end+0xfffbc910>
   8c820:	9080100c 	andi	r2,r18,64
   8c824:	d8002785 	stb	zero,158(sp)
   8c828:	10010e26 	beq	r2,zero,8cc64 <___vfprintf_internal_r+0x1840>
   8c82c:	d9002d17 	ldw	r4,180(sp)
   8c830:	d9402917 	ldw	r5,164(sp)
   8c834:	002d883a 	mov	r22,zero
   8c838:	20800104 	addi	r2,r4,4
   8c83c:	24c0000b 	ldhu	r19,0(r4)
   8c840:	283fc90e 	bge	r5,zero,8c768 <__alt_data_end+0xfffbc8a8>
   8c844:	d8802d15 	stw	r2,180(sp)
   8c848:	0039883a 	mov	fp,zero
   8c84c:	9d84b03a 	or	r2,r19,r22
   8c850:	103c461e 	bne	r2,zero,8b96c <__alt_data_end+0xfffbbaac>
   8c854:	00800044 	movi	r2,1
   8c858:	003e6c06 	br	8c20c <__alt_data_end+0xfffbc34c>
   8c85c:	d9002c17 	ldw	r4,176(sp)
   8c860:	d9801e04 	addi	r6,sp,120
   8c864:	b80b883a 	mov	r5,r23
   8c868:	0093f740 	call	93f74 <__sprint_r>
   8c86c:	103bef1e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8c870:	d8c02017 	ldw	r3,128(sp)
   8c874:	da000404 	addi	r8,sp,16
   8c878:	d9003217 	ldw	r4,200(sp)
   8c87c:	d8802617 	ldw	r2,152(sp)
   8c880:	d9403317 	ldw	r5,204(sp)
   8c884:	8123883a 	add	r17,r16,r4
   8c888:	11400216 	blt	r2,r5,8c894 <___vfprintf_internal_r+0x1470>
   8c88c:	9100004c 	andi	r4,r18,1
   8c890:	20000d26 	beq	r4,zero,8c8c8 <___vfprintf_internal_r+0x14a4>
   8c894:	d9003717 	ldw	r4,220(sp)
   8c898:	d9403417 	ldw	r5,208(sp)
   8c89c:	1907883a 	add	r3,r3,r4
   8c8a0:	d9001f17 	ldw	r4,124(sp)
   8c8a4:	41400015 	stw	r5,0(r8)
   8c8a8:	d9403717 	ldw	r5,220(sp)
   8c8ac:	21000044 	addi	r4,r4,1
   8c8b0:	d8c02015 	stw	r3,128(sp)
   8c8b4:	41400115 	stw	r5,4(r8)
   8c8b8:	d9001f15 	stw	r4,124(sp)
   8c8bc:	014001c4 	movi	r5,7
   8c8c0:	2901e816 	blt	r5,r4,8d064 <___vfprintf_internal_r+0x1c40>
   8c8c4:	42000204 	addi	r8,r8,8
   8c8c8:	d9003317 	ldw	r4,204(sp)
   8c8cc:	8121883a 	add	r16,r16,r4
   8c8d0:	2085c83a 	sub	r2,r4,r2
   8c8d4:	8461c83a 	sub	r16,r16,r17
   8c8d8:	1400010e 	bge	r2,r16,8c8e0 <___vfprintf_internal_r+0x14bc>
   8c8dc:	1021883a 	mov	r16,r2
   8c8e0:	04000a0e 	bge	zero,r16,8c90c <___vfprintf_internal_r+0x14e8>
   8c8e4:	d9001f17 	ldw	r4,124(sp)
   8c8e8:	1c07883a 	add	r3,r3,r16
   8c8ec:	44400015 	stw	r17,0(r8)
   8c8f0:	21000044 	addi	r4,r4,1
   8c8f4:	44000115 	stw	r16,4(r8)
   8c8f8:	d8c02015 	stw	r3,128(sp)
   8c8fc:	d9001f15 	stw	r4,124(sp)
   8c900:	014001c4 	movi	r5,7
   8c904:	2901fb16 	blt	r5,r4,8d0f4 <___vfprintf_internal_r+0x1cd0>
   8c908:	42000204 	addi	r8,r8,8
   8c90c:	8001f716 	blt	r16,zero,8d0ec <___vfprintf_internal_r+0x1cc8>
   8c910:	1421c83a 	sub	r16,r2,r16
   8c914:	043d380e 	bge	zero,r16,8bdf8 <__alt_data_end+0xfffbbf38>
   8c918:	04400404 	movi	r17,16
   8c91c:	d8801f17 	ldw	r2,124(sp)
   8c920:	8c3efb0e 	bge	r17,r16,8c510 <__alt_data_end+0xfffbc650>
   8c924:	014002b4 	movhi	r5,10
   8c928:	29713884 	addi	r5,r5,-15134
   8c92c:	d9402b15 	stw	r5,172(sp)
   8c930:	058001c4 	movi	r22,7
   8c934:	dcc02c17 	ldw	r19,176(sp)
   8c938:	00000306 	br	8c948 <___vfprintf_internal_r+0x1524>
   8c93c:	42000204 	addi	r8,r8,8
   8c940:	843ffc04 	addi	r16,r16,-16
   8c944:	8c3ef50e 	bge	r17,r16,8c51c <__alt_data_end+0xfffbc65c>
   8c948:	18c00404 	addi	r3,r3,16
   8c94c:	10800044 	addi	r2,r2,1
   8c950:	45000015 	stw	r20,0(r8)
   8c954:	44400115 	stw	r17,4(r8)
   8c958:	d8c02015 	stw	r3,128(sp)
   8c95c:	d8801f15 	stw	r2,124(sp)
   8c960:	b0bff60e 	bge	r22,r2,8c93c <__alt_data_end+0xfffbca7c>
   8c964:	d9801e04 	addi	r6,sp,120
   8c968:	b80b883a 	mov	r5,r23
   8c96c:	9809883a 	mov	r4,r19
   8c970:	0093f740 	call	93f74 <__sprint_r>
   8c974:	103bad1e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8c978:	d8c02017 	ldw	r3,128(sp)
   8c97c:	d8801f17 	ldw	r2,124(sp)
   8c980:	da000404 	addi	r8,sp,16
   8c984:	003fee06 	br	8c940 <__alt_data_end+0xfffbca80>
   8c988:	9088703a 	and	r4,r18,r2
   8c98c:	203eab1e 	bne	r4,zero,8c43c <__alt_data_end+0xfffbc57c>
   8c990:	dc401f17 	ldw	r17,124(sp)
   8c994:	40800115 	stw	r2,4(r8)
   8c998:	44000015 	stw	r16,0(r8)
   8c99c:	8c400044 	addi	r17,r17,1
   8c9a0:	d8c02015 	stw	r3,128(sp)
   8c9a4:	dc401f15 	stw	r17,124(sp)
   8c9a8:	008001c4 	movi	r2,7
   8c9ac:	14400e16 	blt	r2,r17,8c9e8 <___vfprintf_internal_r+0x15c4>
   8c9b0:	45800204 	addi	r22,r8,8
   8c9b4:	003eca06 	br	8c4e0 <__alt_data_end+0xfffbc620>
   8c9b8:	010002b4 	movhi	r4,10
   8c9bc:	21313884 	addi	r4,r4,-15134
   8c9c0:	d9002b15 	stw	r4,172(sp)
   8c9c4:	d8802b17 	ldw	r2,172(sp)
   8c9c8:	1c07883a 	add	r3,r3,r16
   8c9cc:	8c400044 	addi	r17,r17,1
   8c9d0:	b0800015 	stw	r2,0(r22)
   8c9d4:	b4000115 	stw	r16,4(r22)
   8c9d8:	d8c02015 	stw	r3,128(sp)
   8c9dc:	dc401f15 	stw	r17,124(sp)
   8c9e0:	008001c4 	movi	r2,7
   8c9e4:	147ebd0e 	bge	r2,r17,8c4dc <__alt_data_end+0xfffbc61c>
   8c9e8:	d9002c17 	ldw	r4,176(sp)
   8c9ec:	d9801e04 	addi	r6,sp,120
   8c9f0:	b80b883a 	mov	r5,r23
   8c9f4:	0093f740 	call	93f74 <__sprint_r>
   8c9f8:	103b8c1e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8c9fc:	d8c02017 	ldw	r3,128(sp)
   8ca00:	dc401f17 	ldw	r17,124(sp)
   8ca04:	dd800404 	addi	r22,sp,16
   8ca08:	003eb506 	br	8c4e0 <__alt_data_end+0xfffbc620>
   8ca0c:	d9002c17 	ldw	r4,176(sp)
   8ca10:	d9801e04 	addi	r6,sp,120
   8ca14:	b80b883a 	mov	r5,r23
   8ca18:	0093f740 	call	93f74 <__sprint_r>
   8ca1c:	103b831e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8ca20:	d8c02017 	ldw	r3,128(sp)
   8ca24:	dc401f17 	ldw	r17,124(sp)
   8ca28:	da000404 	addi	r8,sp,16
   8ca2c:	003e8d06 	br	8c464 <__alt_data_end+0xfffbc5a4>
   8ca30:	d9002c17 	ldw	r4,176(sp)
   8ca34:	d9801e04 	addi	r6,sp,120
   8ca38:	b80b883a 	mov	r5,r23
   8ca3c:	0093f740 	call	93f74 <__sprint_r>
   8ca40:	103b7a1e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8ca44:	d8c02017 	ldw	r3,128(sp)
   8ca48:	dc401f17 	ldw	r17,124(sp)
   8ca4c:	dd800404 	addi	r22,sp,16
   8ca50:	003e8f06 	br	8c490 <__alt_data_end+0xfffbc5d0>
   8ca54:	0027883a 	mov	r19,zero
   8ca58:	003f4a06 	br	8c784 <__alt_data_end+0xfffbc8c4>
   8ca5c:	d9002c17 	ldw	r4,176(sp)
   8ca60:	d9801e04 	addi	r6,sp,120
   8ca64:	b80b883a 	mov	r5,r23
   8ca68:	0093f740 	call	93f74 <__sprint_r>
   8ca6c:	103b6f1e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8ca70:	d8c02017 	ldw	r3,128(sp)
   8ca74:	da000404 	addi	r8,sp,16
   8ca78:	003c9d06 	br	8bcf0 <__alt_data_end+0xfffbbe30>
   8ca7c:	04e7c83a 	sub	r19,zero,r19
   8ca80:	9804c03a 	cmpne	r2,r19,zero
   8ca84:	05adc83a 	sub	r22,zero,r22
   8ca88:	b0adc83a 	sub	r22,r22,r2
   8ca8c:	d8802917 	ldw	r2,164(sp)
   8ca90:	07000b44 	movi	fp,45
   8ca94:	df002785 	stb	fp,158(sp)
   8ca98:	10017b16 	blt	r2,zero,8d088 <___vfprintf_internal_r+0x1c64>
   8ca9c:	00bfdfc4 	movi	r2,-129
   8caa0:	90a4703a 	and	r18,r18,r2
   8caa4:	003bb106 	br	8b96c <__alt_data_end+0xfffbbaac>
   8caa8:	d9003617 	ldw	r4,216(sp)
   8caac:	d9403817 	ldw	r5,224(sp)
   8cab0:	da003d15 	stw	r8,244(sp)
   8cab4:	009278c0 	call	9278c <__fpclassifyd>
   8cab8:	da003d17 	ldw	r8,244(sp)
   8cabc:	1000f026 	beq	r2,zero,8ce80 <___vfprintf_internal_r+0x1a5c>
   8cac0:	d9002917 	ldw	r4,164(sp)
   8cac4:	05bff7c4 	movi	r22,-33
   8cac8:	00bfffc4 	movi	r2,-1
   8cacc:	8dac703a 	and	r22,r17,r22
   8cad0:	20820026 	beq	r4,r2,8d2d4 <___vfprintf_internal_r+0x1eb0>
   8cad4:	008011c4 	movi	r2,71
   8cad8:	b081f726 	beq	r22,r2,8d2b8 <___vfprintf_internal_r+0x1e94>
   8cadc:	d9003817 	ldw	r4,224(sp)
   8cae0:	90c04014 	ori	r3,r18,256
   8cae4:	d8c02b15 	stw	r3,172(sp)
   8cae8:	20021516 	blt	r4,zero,8d340 <___vfprintf_internal_r+0x1f1c>
   8caec:	dcc03817 	ldw	r19,224(sp)
   8caf0:	d8002a05 	stb	zero,168(sp)
   8caf4:	00801984 	movi	r2,102
   8caf8:	8881f926 	beq	r17,r2,8d2e0 <___vfprintf_internal_r+0x1ebc>
   8cafc:	00801184 	movi	r2,70
   8cb00:	88821c26 	beq	r17,r2,8d374 <___vfprintf_internal_r+0x1f50>
   8cb04:	00801144 	movi	r2,69
   8cb08:	b081ef26 	beq	r22,r2,8d2c8 <___vfprintf_internal_r+0x1ea4>
   8cb0c:	d8c02917 	ldw	r3,164(sp)
   8cb10:	d8802104 	addi	r2,sp,132
   8cb14:	d8800315 	stw	r2,12(sp)
   8cb18:	d9403617 	ldw	r5,216(sp)
   8cb1c:	d8802504 	addi	r2,sp,148
   8cb20:	d9002c17 	ldw	r4,176(sp)
   8cb24:	d8800215 	stw	r2,8(sp)
   8cb28:	d8802604 	addi	r2,sp,152
   8cb2c:	d8c00015 	stw	r3,0(sp)
   8cb30:	d8800115 	stw	r2,4(sp)
   8cb34:	01c00084 	movi	r7,2
   8cb38:	980d883a 	mov	r6,r19
   8cb3c:	d8c03c15 	stw	r3,240(sp)
   8cb40:	da003d15 	stw	r8,244(sp)
   8cb44:	008db700 	call	8db70 <_dtoa_r>
   8cb48:	1021883a 	mov	r16,r2
   8cb4c:	008019c4 	movi	r2,103
   8cb50:	d8c03c17 	ldw	r3,240(sp)
   8cb54:	da003d17 	ldw	r8,244(sp)
   8cb58:	88817126 	beq	r17,r2,8d120 <___vfprintf_internal_r+0x1cfc>
   8cb5c:	008011c4 	movi	r2,71
   8cb60:	88829226 	beq	r17,r2,8d5ac <___vfprintf_internal_r+0x2188>
   8cb64:	80f9883a 	add	fp,r16,r3
   8cb68:	d9003617 	ldw	r4,216(sp)
   8cb6c:	000d883a 	mov	r6,zero
   8cb70:	000f883a 	mov	r7,zero
   8cb74:	980b883a 	mov	r5,r19
   8cb78:	da003d15 	stw	r8,244(sp)
   8cb7c:	0097a380 	call	97a38 <__eqdf2>
   8cb80:	da003d17 	ldw	r8,244(sp)
   8cb84:	10018d26 	beq	r2,zero,8d1bc <___vfprintf_internal_r+0x1d98>
   8cb88:	d8802117 	ldw	r2,132(sp)
   8cb8c:	1700062e 	bgeu	r2,fp,8cba8 <___vfprintf_internal_r+0x1784>
   8cb90:	01000c04 	movi	r4,48
   8cb94:	10c00044 	addi	r3,r2,1
   8cb98:	d8c02115 	stw	r3,132(sp)
   8cb9c:	11000005 	stb	r4,0(r2)
   8cba0:	d8802117 	ldw	r2,132(sp)
   8cba4:	173ffb36 	bltu	r2,fp,8cb94 <__alt_data_end+0xfffbccd4>
   8cba8:	1405c83a 	sub	r2,r2,r16
   8cbac:	d8803315 	stw	r2,204(sp)
   8cbb0:	008011c4 	movi	r2,71
   8cbb4:	b0817626 	beq	r22,r2,8d190 <___vfprintf_internal_r+0x1d6c>
   8cbb8:	00801944 	movi	r2,101
   8cbbc:	1442810e 	bge	r2,r17,8d5c4 <___vfprintf_internal_r+0x21a0>
   8cbc0:	d8c02617 	ldw	r3,152(sp)
   8cbc4:	00801984 	movi	r2,102
   8cbc8:	d8c03215 	stw	r3,200(sp)
   8cbcc:	8881fe26 	beq	r17,r2,8d3c8 <___vfprintf_internal_r+0x1fa4>
   8cbd0:	d8c03217 	ldw	r3,200(sp)
   8cbd4:	d9003317 	ldw	r4,204(sp)
   8cbd8:	1901dd16 	blt	r3,r4,8d350 <___vfprintf_internal_r+0x1f2c>
   8cbdc:	9480004c 	andi	r18,r18,1
   8cbe0:	90022b1e 	bne	r18,zero,8d490 <___vfprintf_internal_r+0x206c>
   8cbe4:	1805883a 	mov	r2,r3
   8cbe8:	18028016 	blt	r3,zero,8d5ec <___vfprintf_internal_r+0x21c8>
   8cbec:	d8c03217 	ldw	r3,200(sp)
   8cbf0:	044019c4 	movi	r17,103
   8cbf4:	d8c02e15 	stw	r3,184(sp)
   8cbf8:	df002a07 	ldb	fp,168(sp)
   8cbfc:	e001531e 	bne	fp,zero,8d14c <___vfprintf_internal_r+0x1d28>
   8cc00:	df002783 	ldbu	fp,158(sp)
   8cc04:	d8802a15 	stw	r2,168(sp)
   8cc08:	dc802b17 	ldw	r18,172(sp)
   8cc0c:	d8002915 	stw	zero,164(sp)
   8cc10:	003bd106 	br	8bb58 <__alt_data_end+0xfffbbc98>
   8cc14:	d8802d17 	ldw	r2,180(sp)
   8cc18:	d8c02d17 	ldw	r3,180(sp)
   8cc1c:	d9002d17 	ldw	r4,180(sp)
   8cc20:	10800017 	ldw	r2,0(r2)
   8cc24:	18c00117 	ldw	r3,4(r3)
   8cc28:	21000204 	addi	r4,r4,8
   8cc2c:	d8803615 	stw	r2,216(sp)
   8cc30:	d8c03815 	stw	r3,224(sp)
   8cc34:	d9002d15 	stw	r4,180(sp)
   8cc38:	003b7506 	br	8ba10 <__alt_data_end+0xfffbbb50>
   8cc3c:	ac400007 	ldb	r17,0(r21)
   8cc40:	003a5906 	br	8b5a8 <__alt_data_end+0xfffbb6e8>
   8cc44:	9080100c 	andi	r2,r18,64
   8cc48:	1000a826 	beq	r2,zero,8ceec <___vfprintf_internal_r+0x1ac8>
   8cc4c:	d9002d17 	ldw	r4,180(sp)
   8cc50:	002d883a 	mov	r22,zero
   8cc54:	24c0000b 	ldhu	r19,0(r4)
   8cc58:	21000104 	addi	r4,r4,4
   8cc5c:	d9002d15 	stw	r4,180(sp)
   8cc60:	003ccb06 	br	8bf90 <__alt_data_end+0xfffbc0d0>
   8cc64:	d8c02d17 	ldw	r3,180(sp)
   8cc68:	d9002917 	ldw	r4,164(sp)
   8cc6c:	002d883a 	mov	r22,zero
   8cc70:	18800104 	addi	r2,r3,4
   8cc74:	1cc00017 	ldw	r19,0(r3)
   8cc78:	203ebb0e 	bge	r4,zero,8c768 <__alt_data_end+0xfffbc8a8>
   8cc7c:	003ef106 	br	8c844 <__alt_data_end+0xfffbc984>
   8cc80:	9080040c 	andi	r2,r18,16
   8cc84:	1000921e 	bne	r2,zero,8ced0 <___vfprintf_internal_r+0x1aac>
   8cc88:	9480100c 	andi	r18,r18,64
   8cc8c:	90013926 	beq	r18,zero,8d174 <___vfprintf_internal_r+0x1d50>
   8cc90:	d9002d17 	ldw	r4,180(sp)
   8cc94:	d9402f17 	ldw	r5,188(sp)
   8cc98:	20800017 	ldw	r2,0(r4)
   8cc9c:	21000104 	addi	r4,r4,4
   8cca0:	d9002d15 	stw	r4,180(sp)
   8cca4:	1140000d 	sth	r5,0(r2)
   8cca8:	003a1606 	br	8b504 <__alt_data_end+0xfffbb644>
   8ccac:	9080100c 	andi	r2,r18,64
   8ccb0:	10008026 	beq	r2,zero,8ceb4 <___vfprintf_internal_r+0x1a90>
   8ccb4:	d8c02d17 	ldw	r3,180(sp)
   8ccb8:	1cc0000f 	ldh	r19,0(r3)
   8ccbc:	18c00104 	addi	r3,r3,4
   8ccc0:	d8c02d15 	stw	r3,180(sp)
   8ccc4:	982dd7fa 	srai	r22,r19,31
   8ccc8:	b005883a 	mov	r2,r22
   8cccc:	003b1f06 	br	8b94c <__alt_data_end+0xfffbba8c>
   8ccd0:	9080100c 	andi	r2,r18,64
   8ccd4:	d8002785 	stb	zero,158(sp)
   8ccd8:	10008a1e 	bne	r2,zero,8cf04 <___vfprintf_internal_r+0x1ae0>
   8ccdc:	d9402d17 	ldw	r5,180(sp)
   8cce0:	d8c02917 	ldw	r3,164(sp)
   8cce4:	002d883a 	mov	r22,zero
   8cce8:	28800104 	addi	r2,r5,4
   8ccec:	2cc00017 	ldw	r19,0(r5)
   8ccf0:	183e4b0e 	bge	r3,zero,8c620 <__alt_data_end+0xfffbc760>
   8ccf4:	9d86b03a 	or	r3,r19,r22
   8ccf8:	d8802d15 	stw	r2,180(sp)
   8ccfc:	183e4c1e 	bne	r3,zero,8c630 <__alt_data_end+0xfffbc770>
   8cd00:	0039883a 	mov	fp,zero
   8cd04:	0005883a 	mov	r2,zero
   8cd08:	003d4006 	br	8c20c <__alt_data_end+0xfffbc34c>
   8cd0c:	014002b4 	movhi	r5,10
   8cd10:	29713884 	addi	r5,r5,-15134
   8cd14:	d9402b15 	stw	r5,172(sp)
   8cd18:	d9402b17 	ldw	r5,172(sp)
   8cd1c:	1c47883a 	add	r3,r3,r17
   8cd20:	10800044 	addi	r2,r2,1
   8cd24:	41400015 	stw	r5,0(r8)
   8cd28:	44400115 	stw	r17,4(r8)
   8cd2c:	d8c02015 	stw	r3,128(sp)
   8cd30:	d8801f15 	stw	r2,124(sp)
   8cd34:	010001c4 	movi	r4,7
   8cd38:	20bec816 	blt	r4,r2,8c85c <__alt_data_end+0xfffbc99c>
   8cd3c:	42000204 	addi	r8,r8,8
   8cd40:	003ecd06 	br	8c878 <__alt_data_end+0xfffbc9b8>
   8cd44:	d9002917 	ldw	r4,164(sp)
   8cd48:	d8002785 	stb	zero,158(sp)
   8cd4c:	203d2d16 	blt	r4,zero,8c204 <__alt_data_end+0xfffbc344>
   8cd50:	00bfdfc4 	movi	r2,-129
   8cd54:	90a4703a 	and	r18,r18,r2
   8cd58:	003a9106 	br	8b7a0 <__alt_data_end+0xfffbb8e0>
   8cd5c:	010002b4 	movhi	r4,10
   8cd60:	21313884 	addi	r4,r4,-15134
   8cd64:	d9002b15 	stw	r4,172(sp)
   8cd68:	003c0c06 	br	8bd9c <__alt_data_end+0xfffbbedc>
   8cd6c:	d9002c17 	ldw	r4,176(sp)
   8cd70:	d9801e04 	addi	r6,sp,120
   8cd74:	b80b883a 	mov	r5,r23
   8cd78:	0093f740 	call	93f74 <__sprint_r>
   8cd7c:	103aab1e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8cd80:	d8c02017 	ldw	r3,128(sp)
   8cd84:	da000404 	addi	r8,sp,16
   8cd88:	003d4106 	br	8c290 <__alt_data_end+0xfffbc3d0>
   8cd8c:	d8801f17 	ldw	r2,124(sp)
   8cd90:	014002b4 	movhi	r5,10
   8cd94:	01000044 	movi	r4,1
   8cd98:	18c00044 	addi	r3,r3,1
   8cd9c:	10800044 	addi	r2,r2,1
   8cda0:	29713004 	addi	r5,r5,-15168
   8cda4:	41000115 	stw	r4,4(r8)
   8cda8:	41400015 	stw	r5,0(r8)
   8cdac:	d8c02015 	stw	r3,128(sp)
   8cdb0:	d8801f15 	stw	r2,124(sp)
   8cdb4:	010001c4 	movi	r4,7
   8cdb8:	20805c16 	blt	r4,r2,8cf2c <___vfprintf_internal_r+0x1b08>
   8cdbc:	42000204 	addi	r8,r8,8
   8cdc0:	8800041e 	bne	r17,zero,8cdd4 <___vfprintf_internal_r+0x19b0>
   8cdc4:	d8803317 	ldw	r2,204(sp)
   8cdc8:	1000021e 	bne	r2,zero,8cdd4 <___vfprintf_internal_r+0x19b0>
   8cdcc:	9080004c 	andi	r2,r18,1
   8cdd0:	103c0926 	beq	r2,zero,8bdf8 <__alt_data_end+0xfffbbf38>
   8cdd4:	d9003717 	ldw	r4,220(sp)
   8cdd8:	d8801f17 	ldw	r2,124(sp)
   8cddc:	d9403417 	ldw	r5,208(sp)
   8cde0:	20c7883a 	add	r3,r4,r3
   8cde4:	10800044 	addi	r2,r2,1
   8cde8:	41000115 	stw	r4,4(r8)
   8cdec:	41400015 	stw	r5,0(r8)
   8cdf0:	d8c02015 	stw	r3,128(sp)
   8cdf4:	d8801f15 	stw	r2,124(sp)
   8cdf8:	010001c4 	movi	r4,7
   8cdfc:	20812116 	blt	r4,r2,8d284 <___vfprintf_internal_r+0x1e60>
   8ce00:	42000204 	addi	r8,r8,8
   8ce04:	0463c83a 	sub	r17,zero,r17
   8ce08:	0440730e 	bge	zero,r17,8cfd8 <___vfprintf_internal_r+0x1bb4>
   8ce0c:	05800404 	movi	r22,16
   8ce10:	b440860e 	bge	r22,r17,8d02c <___vfprintf_internal_r+0x1c08>
   8ce14:	014002b4 	movhi	r5,10
   8ce18:	29713884 	addi	r5,r5,-15134
   8ce1c:	d9402b15 	stw	r5,172(sp)
   8ce20:	070001c4 	movi	fp,7
   8ce24:	dcc02c17 	ldw	r19,176(sp)
   8ce28:	00000306 	br	8ce38 <___vfprintf_internal_r+0x1a14>
   8ce2c:	42000204 	addi	r8,r8,8
   8ce30:	8c7ffc04 	addi	r17,r17,-16
   8ce34:	b440800e 	bge	r22,r17,8d038 <___vfprintf_internal_r+0x1c14>
   8ce38:	18c00404 	addi	r3,r3,16
   8ce3c:	10800044 	addi	r2,r2,1
   8ce40:	45000015 	stw	r20,0(r8)
   8ce44:	45800115 	stw	r22,4(r8)
   8ce48:	d8c02015 	stw	r3,128(sp)
   8ce4c:	d8801f15 	stw	r2,124(sp)
   8ce50:	e0bff60e 	bge	fp,r2,8ce2c <__alt_data_end+0xfffbcf6c>
   8ce54:	d9801e04 	addi	r6,sp,120
   8ce58:	b80b883a 	mov	r5,r23
   8ce5c:	9809883a 	mov	r4,r19
   8ce60:	0093f740 	call	93f74 <__sprint_r>
   8ce64:	103a711e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8ce68:	d8c02017 	ldw	r3,128(sp)
   8ce6c:	d8801f17 	ldw	r2,124(sp)
   8ce70:	da000404 	addi	r8,sp,16
   8ce74:	003fee06 	br	8ce30 <__alt_data_end+0xfffbcf70>
   8ce78:	00bfffc4 	movi	r2,-1
   8ce7c:	003a6f06 	br	8b83c <__alt_data_end+0xfffbb97c>
   8ce80:	008011c4 	movi	r2,71
   8ce84:	1440b816 	blt	r2,r17,8d168 <___vfprintf_internal_r+0x1d44>
   8ce88:	040002b4 	movhi	r16,10
   8ce8c:	84312204 	addi	r16,r16,-15224
   8ce90:	00c000c4 	movi	r3,3
   8ce94:	00bfdfc4 	movi	r2,-129
   8ce98:	d8c02a15 	stw	r3,168(sp)
   8ce9c:	90a4703a 	and	r18,r18,r2
   8cea0:	df002783 	ldbu	fp,158(sp)
   8cea4:	d8c02e15 	stw	r3,184(sp)
   8cea8:	d8002915 	stw	zero,164(sp)
   8ceac:	d8003215 	stw	zero,200(sp)
   8ceb0:	003b2906 	br	8bb58 <__alt_data_end+0xfffbbc98>
   8ceb4:	d9002d17 	ldw	r4,180(sp)
   8ceb8:	24c00017 	ldw	r19,0(r4)
   8cebc:	21000104 	addi	r4,r4,4
   8cec0:	d9002d15 	stw	r4,180(sp)
   8cec4:	982dd7fa 	srai	r22,r19,31
   8cec8:	b005883a 	mov	r2,r22
   8cecc:	003a9f06 	br	8b94c <__alt_data_end+0xfffbba8c>
   8ced0:	d9402d17 	ldw	r5,180(sp)
   8ced4:	d8c02f17 	ldw	r3,188(sp)
   8ced8:	28800017 	ldw	r2,0(r5)
   8cedc:	29400104 	addi	r5,r5,4
   8cee0:	d9402d15 	stw	r5,180(sp)
   8cee4:	10c00015 	stw	r3,0(r2)
   8cee8:	00398606 	br	8b504 <__alt_data_end+0xfffbb644>
   8ceec:	d9402d17 	ldw	r5,180(sp)
   8cef0:	002d883a 	mov	r22,zero
   8cef4:	2cc00017 	ldw	r19,0(r5)
   8cef8:	29400104 	addi	r5,r5,4
   8cefc:	d9402d15 	stw	r5,180(sp)
   8cf00:	003c2306 	br	8bf90 <__alt_data_end+0xfffbc0d0>
   8cf04:	d8c02d17 	ldw	r3,180(sp)
   8cf08:	d9002917 	ldw	r4,164(sp)
   8cf0c:	002d883a 	mov	r22,zero
   8cf10:	18800104 	addi	r2,r3,4
   8cf14:	1cc0000b 	ldhu	r19,0(r3)
   8cf18:	203dc10e 	bge	r4,zero,8c620 <__alt_data_end+0xfffbc760>
   8cf1c:	003f7506 	br	8ccf4 <__alt_data_end+0xfffbce34>
   8cf20:	040002b4 	movhi	r16,10
   8cf24:	84312004 	addi	r16,r16,-15232
   8cf28:	003acc06 	br	8ba5c <__alt_data_end+0xfffbbb9c>
   8cf2c:	d9002c17 	ldw	r4,176(sp)
   8cf30:	d9801e04 	addi	r6,sp,120
   8cf34:	b80b883a 	mov	r5,r23
   8cf38:	0093f740 	call	93f74 <__sprint_r>
   8cf3c:	103a3b1e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8cf40:	dc402617 	ldw	r17,152(sp)
   8cf44:	d8c02017 	ldw	r3,128(sp)
   8cf48:	da000404 	addi	r8,sp,16
   8cf4c:	003f9c06 	br	8cdc0 <__alt_data_end+0xfffbcf00>
   8cf50:	ac400043 	ldbu	r17,1(r21)
   8cf54:	94800814 	ori	r18,r18,32
   8cf58:	ad400044 	addi	r21,r21,1
   8cf5c:	8c403fcc 	andi	r17,r17,255
   8cf60:	8c40201c 	xori	r17,r17,128
   8cf64:	8c7fe004 	addi	r17,r17,-128
   8cf68:	00398f06 	br	8b5a8 <__alt_data_end+0xfffbb6e8>
   8cf6c:	d8c02d15 	stw	r3,180(sp)
   8cf70:	0039883a 	mov	fp,zero
   8cf74:	003e3506 	br	8c84c <__alt_data_end+0xfffbc98c>
   8cf78:	d9002c17 	ldw	r4,176(sp)
   8cf7c:	d9801e04 	addi	r6,sp,120
   8cf80:	b80b883a 	mov	r5,r23
   8cf84:	0093f740 	call	93f74 <__sprint_r>
   8cf88:	103a281e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8cf8c:	d8c02017 	ldw	r3,128(sp)
   8cf90:	da000404 	addi	r8,sp,16
   8cf94:	003cd006 	br	8c2d8 <__alt_data_end+0xfffbc418>
   8cf98:	8009883a 	mov	r4,r16
   8cf9c:	da003d15 	stw	r8,244(sp)
   8cfa0:	00891b40 	call	891b4 <strlen>
   8cfa4:	d8802e15 	stw	r2,184(sp)
   8cfa8:	da003d17 	ldw	r8,244(sp)
   8cfac:	103c340e 	bge	r2,zero,8c080 <__alt_data_end+0xfffbc1c0>
   8cfb0:	0005883a 	mov	r2,zero
   8cfb4:	003c3206 	br	8c080 <__alt_data_end+0xfffbc1c0>
   8cfb8:	d9002c17 	ldw	r4,176(sp)
   8cfbc:	d9801e04 	addi	r6,sp,120
   8cfc0:	b80b883a 	mov	r5,r23
   8cfc4:	0093f740 	call	93f74 <__sprint_r>
   8cfc8:	103a181e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8cfcc:	d8c02017 	ldw	r3,128(sp)
   8cfd0:	d8801f17 	ldw	r2,124(sp)
   8cfd4:	da000404 	addi	r8,sp,16
   8cfd8:	d9403317 	ldw	r5,204(sp)
   8cfdc:	10800044 	addi	r2,r2,1
   8cfe0:	44000015 	stw	r16,0(r8)
   8cfe4:	28c7883a 	add	r3,r5,r3
   8cfe8:	003b7d06 	br	8bde0 <__alt_data_end+0xfffbbf20>
   8cfec:	010002b4 	movhi	r4,10
   8cff0:	21313c84 	addi	r4,r4,-15118
   8cff4:	d9003515 	stw	r4,212(sp)
   8cff8:	003b1406 	br	8bc4c <__alt_data_end+0xfffbbd8c>
   8cffc:	013fffc4 	movi	r4,-1
   8d000:	003a3506 	br	8b8d8 <__alt_data_end+0xfffbba18>
   8d004:	0023883a 	mov	r17,zero
   8d008:	003d9d06 	br	8c680 <__alt_data_end+0xfffbc7c0>
   8d00c:	d9002c17 	ldw	r4,176(sp)
   8d010:	d9801e04 	addi	r6,sp,120
   8d014:	b80b883a 	mov	r5,r23
   8d018:	0093f740 	call	93f74 <__sprint_r>
   8d01c:	103a031e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8d020:	d8c02017 	ldw	r3,128(sp)
   8d024:	da000404 	addi	r8,sp,16
   8d028:	003d9406 	br	8c67c <__alt_data_end+0xfffbc7bc>
   8d02c:	010002b4 	movhi	r4,10
   8d030:	21313884 	addi	r4,r4,-15134
   8d034:	d9002b15 	stw	r4,172(sp)
   8d038:	d9002b17 	ldw	r4,172(sp)
   8d03c:	1c47883a 	add	r3,r3,r17
   8d040:	10800044 	addi	r2,r2,1
   8d044:	41000015 	stw	r4,0(r8)
   8d048:	44400115 	stw	r17,4(r8)
   8d04c:	d8c02015 	stw	r3,128(sp)
   8d050:	d8801f15 	stw	r2,124(sp)
   8d054:	010001c4 	movi	r4,7
   8d058:	20bfd716 	blt	r4,r2,8cfb8 <__alt_data_end+0xfffbd0f8>
   8d05c:	42000204 	addi	r8,r8,8
   8d060:	003fdd06 	br	8cfd8 <__alt_data_end+0xfffbd118>
   8d064:	d9002c17 	ldw	r4,176(sp)
   8d068:	d9801e04 	addi	r6,sp,120
   8d06c:	b80b883a 	mov	r5,r23
   8d070:	0093f740 	call	93f74 <__sprint_r>
   8d074:	1039ed1e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8d078:	d8802617 	ldw	r2,152(sp)
   8d07c:	d8c02017 	ldw	r3,128(sp)
   8d080:	da000404 	addi	r8,sp,16
   8d084:	003e1006 	br	8c8c8 <__alt_data_end+0xfffbca08>
   8d088:	00800044 	movi	r2,1
   8d08c:	10803fcc 	andi	r2,r2,255
   8d090:	00c00044 	movi	r3,1
   8d094:	10fa3526 	beq	r2,r3,8b96c <__alt_data_end+0xfffbbaac>
   8d098:	00c00084 	movi	r3,2
   8d09c:	10fbcb26 	beq	r2,r3,8bfcc <__alt_data_end+0xfffbc10c>
   8d0a0:	003a8f06 	br	8bae0 <__alt_data_end+0xfffbbc20>
   8d0a4:	010002b4 	movhi	r4,10
   8d0a8:	21313c84 	addi	r4,r4,-15118
   8d0ac:	d9003515 	stw	r4,212(sp)
   8d0b0:	003b7606 	br	8be8c <__alt_data_end+0xfffbbfcc>
   8d0b4:	d8802917 	ldw	r2,164(sp)
   8d0b8:	00c00184 	movi	r3,6
   8d0bc:	1880012e 	bgeu	r3,r2,8d0c4 <___vfprintf_internal_r+0x1ca0>
   8d0c0:	1805883a 	mov	r2,r3
   8d0c4:	d8802e15 	stw	r2,184(sp)
   8d0c8:	1000ef16 	blt	r2,zero,8d488 <___vfprintf_internal_r+0x2064>
   8d0cc:	040002b4 	movhi	r16,10
   8d0d0:	d8802a15 	stw	r2,168(sp)
   8d0d4:	dcc02d15 	stw	r19,180(sp)
   8d0d8:	d8002915 	stw	zero,164(sp)
   8d0dc:	d8003215 	stw	zero,200(sp)
   8d0e0:	84312e04 	addi	r16,r16,-15176
   8d0e4:	0039883a 	mov	fp,zero
   8d0e8:	003aa206 	br	8bb74 <__alt_data_end+0xfffbbcb4>
   8d0ec:	0021883a 	mov	r16,zero
   8d0f0:	003e0706 	br	8c910 <__alt_data_end+0xfffbca50>
   8d0f4:	d9002c17 	ldw	r4,176(sp)
   8d0f8:	d9801e04 	addi	r6,sp,120
   8d0fc:	b80b883a 	mov	r5,r23
   8d100:	0093f740 	call	93f74 <__sprint_r>
   8d104:	1039c91e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8d108:	d8802617 	ldw	r2,152(sp)
   8d10c:	d9403317 	ldw	r5,204(sp)
   8d110:	d8c02017 	ldw	r3,128(sp)
   8d114:	da000404 	addi	r8,sp,16
   8d118:	2885c83a 	sub	r2,r5,r2
   8d11c:	003dfb06 	br	8c90c <__alt_data_end+0xfffbca4c>
   8d120:	9080004c 	andi	r2,r18,1
   8d124:	103e8f1e 	bne	r2,zero,8cb64 <__alt_data_end+0xfffbcca4>
   8d128:	d8802117 	ldw	r2,132(sp)
   8d12c:	003e9e06 	br	8cba8 <__alt_data_end+0xfffbcce8>
   8d130:	1025883a 	mov	r18,r2
   8d134:	0039883a 	mov	fp,zero
   8d138:	00800084 	movi	r2,2
   8d13c:	003fd306 	br	8d08c <__alt_data_end+0xfffbd1cc>
   8d140:	07000b44 	movi	fp,45
   8d144:	df002785 	stb	fp,158(sp)
   8d148:	003a4006 	br	8ba4c <__alt_data_end+0xfffbbb8c>
   8d14c:	00c00b44 	movi	r3,45
   8d150:	d8c02785 	stb	r3,158(sp)
   8d154:	d8802a15 	stw	r2,168(sp)
   8d158:	dc802b17 	ldw	r18,172(sp)
   8d15c:	d8002915 	stw	zero,164(sp)
   8d160:	07000b44 	movi	fp,45
   8d164:	003a8006 	br	8bb68 <__alt_data_end+0xfffbbca8>
   8d168:	040002b4 	movhi	r16,10
   8d16c:	84312304 	addi	r16,r16,-15220
   8d170:	003f4706 	br	8ce90 <__alt_data_end+0xfffbcfd0>
   8d174:	d8c02d17 	ldw	r3,180(sp)
   8d178:	d9002f17 	ldw	r4,188(sp)
   8d17c:	18800017 	ldw	r2,0(r3)
   8d180:	18c00104 	addi	r3,r3,4
   8d184:	d8c02d15 	stw	r3,180(sp)
   8d188:	11000015 	stw	r4,0(r2)
   8d18c:	0038dd06 	br	8b504 <__alt_data_end+0xfffbb644>
   8d190:	dd802617 	ldw	r22,152(sp)
   8d194:	00bfff44 	movi	r2,-3
   8d198:	b0801c16 	blt	r22,r2,8d20c <___vfprintf_internal_r+0x1de8>
   8d19c:	d9402917 	ldw	r5,164(sp)
   8d1a0:	2d801a16 	blt	r5,r22,8d20c <___vfprintf_internal_r+0x1de8>
   8d1a4:	dd803215 	stw	r22,200(sp)
   8d1a8:	003e8906 	br	8cbd0 <__alt_data_end+0xfffbcd10>
   8d1ac:	010002b4 	movhi	r4,10
   8d1b0:	21313884 	addi	r4,r4,-15134
   8d1b4:	d9002b15 	stw	r4,172(sp)
   8d1b8:	003c9106 	br	8c400 <__alt_data_end+0xfffbc540>
   8d1bc:	e005883a 	mov	r2,fp
   8d1c0:	003e7906 	br	8cba8 <__alt_data_end+0xfffbcce8>
   8d1c4:	d9402917 	ldw	r5,164(sp)
   8d1c8:	df002783 	ldbu	fp,158(sp)
   8d1cc:	dcc02d15 	stw	r19,180(sp)
   8d1d0:	d9402a15 	stw	r5,168(sp)
   8d1d4:	d9402e15 	stw	r5,184(sp)
   8d1d8:	d8002915 	stw	zero,164(sp)
   8d1dc:	d8003215 	stw	zero,200(sp)
   8d1e0:	003a5d06 	br	8bb58 <__alt_data_end+0xfffbbc98>
   8d1e4:	9080004c 	andi	r2,r18,1
   8d1e8:	0039883a 	mov	fp,zero
   8d1ec:	10000426 	beq	r2,zero,8d200 <___vfprintf_internal_r+0x1ddc>
   8d1f0:	00800c04 	movi	r2,48
   8d1f4:	dc001dc4 	addi	r16,sp,119
   8d1f8:	d8801dc5 	stb	r2,119(sp)
   8d1fc:	003b8006 	br	8c000 <__alt_data_end+0xfffbc140>
   8d200:	d8002e15 	stw	zero,184(sp)
   8d204:	dc001e04 	addi	r16,sp,120
   8d208:	003a4d06 	br	8bb40 <__alt_data_end+0xfffbbc80>
   8d20c:	8c7fff84 	addi	r17,r17,-2
   8d210:	b5bfffc4 	addi	r22,r22,-1
   8d214:	dd802615 	stw	r22,152(sp)
   8d218:	dc4022c5 	stb	r17,139(sp)
   8d21c:	b000bf16 	blt	r22,zero,8d51c <___vfprintf_internal_r+0x20f8>
   8d220:	00800ac4 	movi	r2,43
   8d224:	d8802305 	stb	r2,140(sp)
   8d228:	00800244 	movi	r2,9
   8d22c:	15807016 	blt	r2,r22,8d3f0 <___vfprintf_internal_r+0x1fcc>
   8d230:	00800c04 	movi	r2,48
   8d234:	b5800c04 	addi	r22,r22,48
   8d238:	d8802345 	stb	r2,141(sp)
   8d23c:	dd802385 	stb	r22,142(sp)
   8d240:	d88023c4 	addi	r2,sp,143
   8d244:	df0022c4 	addi	fp,sp,139
   8d248:	d8c03317 	ldw	r3,204(sp)
   8d24c:	1739c83a 	sub	fp,r2,fp
   8d250:	d9003317 	ldw	r4,204(sp)
   8d254:	e0c7883a 	add	r3,fp,r3
   8d258:	df003a15 	stw	fp,232(sp)
   8d25c:	d8c02e15 	stw	r3,184(sp)
   8d260:	00800044 	movi	r2,1
   8d264:	1100b30e 	bge	r2,r4,8d534 <___vfprintf_internal_r+0x2110>
   8d268:	d8c02e17 	ldw	r3,184(sp)
   8d26c:	18c00044 	addi	r3,r3,1
   8d270:	d8c02e15 	stw	r3,184(sp)
   8d274:	1805883a 	mov	r2,r3
   8d278:	1800ac16 	blt	r3,zero,8d52c <___vfprintf_internal_r+0x2108>
   8d27c:	d8003215 	stw	zero,200(sp)
   8d280:	003e5d06 	br	8cbf8 <__alt_data_end+0xfffbcd38>
   8d284:	d9002c17 	ldw	r4,176(sp)
   8d288:	d9801e04 	addi	r6,sp,120
   8d28c:	b80b883a 	mov	r5,r23
   8d290:	0093f740 	call	93f74 <__sprint_r>
   8d294:	1039651e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbb96c>
   8d298:	dc402617 	ldw	r17,152(sp)
   8d29c:	d8c02017 	ldw	r3,128(sp)
   8d2a0:	d8801f17 	ldw	r2,124(sp)
   8d2a4:	da000404 	addi	r8,sp,16
   8d2a8:	003ed606 	br	8ce04 <__alt_data_end+0xfffbcf44>
   8d2ac:	582b883a 	mov	r21,r11
   8d2b0:	d8002915 	stw	zero,164(sp)
   8d2b4:	0038bd06 	br	8b5ac <__alt_data_end+0xfffbb6ec>
   8d2b8:	d8802917 	ldw	r2,164(sp)
   8d2bc:	103e071e 	bne	r2,zero,8cadc <__alt_data_end+0xfffbcc1c>
   8d2c0:	dc002915 	stw	r16,164(sp)
   8d2c4:	003e0506 	br	8cadc <__alt_data_end+0xfffbcc1c>
   8d2c8:	d9002917 	ldw	r4,164(sp)
   8d2cc:	20c00044 	addi	r3,r4,1
   8d2d0:	003e0f06 	br	8cb10 <__alt_data_end+0xfffbcc50>
   8d2d4:	01400184 	movi	r5,6
   8d2d8:	d9402915 	stw	r5,164(sp)
   8d2dc:	003dff06 	br	8cadc <__alt_data_end+0xfffbcc1c>
   8d2e0:	d8802104 	addi	r2,sp,132
   8d2e4:	d8800315 	stw	r2,12(sp)
   8d2e8:	d8802504 	addi	r2,sp,148
   8d2ec:	d8800215 	stw	r2,8(sp)
   8d2f0:	d8802604 	addi	r2,sp,152
   8d2f4:	d8800115 	stw	r2,4(sp)
   8d2f8:	d8802917 	ldw	r2,164(sp)
   8d2fc:	d9403617 	ldw	r5,216(sp)
   8d300:	d9002c17 	ldw	r4,176(sp)
   8d304:	d8800015 	stw	r2,0(sp)
   8d308:	01c000c4 	movi	r7,3
   8d30c:	980d883a 	mov	r6,r19
   8d310:	da003d15 	stw	r8,244(sp)
   8d314:	008db700 	call	8db70 <_dtoa_r>
   8d318:	d8c02917 	ldw	r3,164(sp)
   8d31c:	da003d17 	ldw	r8,244(sp)
   8d320:	1021883a 	mov	r16,r2
   8d324:	10f9883a 	add	fp,r2,r3
   8d328:	81000007 	ldb	r4,0(r16)
   8d32c:	00800c04 	movi	r2,48
   8d330:	20805e26 	beq	r4,r2,8d4ac <___vfprintf_internal_r+0x2088>
   8d334:	d8c02617 	ldw	r3,152(sp)
   8d338:	e0f9883a 	add	fp,fp,r3
   8d33c:	003e0a06 	br	8cb68 <__alt_data_end+0xfffbcca8>
   8d340:	00c00b44 	movi	r3,45
   8d344:	24e0003c 	xorhi	r19,r4,32768
   8d348:	d8c02a05 	stb	r3,168(sp)
   8d34c:	003de906 	br	8caf4 <__alt_data_end+0xfffbcc34>
   8d350:	d8c03217 	ldw	r3,200(sp)
   8d354:	00c07a0e 	bge	zero,r3,8d540 <___vfprintf_internal_r+0x211c>
   8d358:	00800044 	movi	r2,1
   8d35c:	d9003317 	ldw	r4,204(sp)
   8d360:	1105883a 	add	r2,r2,r4
   8d364:	d8802e15 	stw	r2,184(sp)
   8d368:	10004e16 	blt	r2,zero,8d4a4 <___vfprintf_internal_r+0x2080>
   8d36c:	044019c4 	movi	r17,103
   8d370:	003e2106 	br	8cbf8 <__alt_data_end+0xfffbcd38>
   8d374:	d9002917 	ldw	r4,164(sp)
   8d378:	d8802104 	addi	r2,sp,132
   8d37c:	d8800315 	stw	r2,12(sp)
   8d380:	d9000015 	stw	r4,0(sp)
   8d384:	d8802504 	addi	r2,sp,148
   8d388:	d9403617 	ldw	r5,216(sp)
   8d38c:	d9002c17 	ldw	r4,176(sp)
   8d390:	d8800215 	stw	r2,8(sp)
   8d394:	d8802604 	addi	r2,sp,152
   8d398:	d8800115 	stw	r2,4(sp)
   8d39c:	01c000c4 	movi	r7,3
   8d3a0:	980d883a 	mov	r6,r19
   8d3a4:	da003d15 	stw	r8,244(sp)
   8d3a8:	008db700 	call	8db70 <_dtoa_r>
   8d3ac:	d8c02917 	ldw	r3,164(sp)
   8d3b0:	da003d17 	ldw	r8,244(sp)
   8d3b4:	1021883a 	mov	r16,r2
   8d3b8:	00801184 	movi	r2,70
   8d3bc:	80f9883a 	add	fp,r16,r3
   8d3c0:	88bfd926 	beq	r17,r2,8d328 <__alt_data_end+0xfffbd468>
   8d3c4:	003de806 	br	8cb68 <__alt_data_end+0xfffbcca8>
   8d3c8:	d9002917 	ldw	r4,164(sp)
   8d3cc:	00c04d0e 	bge	zero,r3,8d504 <___vfprintf_internal_r+0x20e0>
   8d3d0:	2000441e 	bne	r4,zero,8d4e4 <___vfprintf_internal_r+0x20c0>
   8d3d4:	9480004c 	andi	r18,r18,1
   8d3d8:	9000421e 	bne	r18,zero,8d4e4 <___vfprintf_internal_r+0x20c0>
   8d3dc:	1805883a 	mov	r2,r3
   8d3e0:	18007016 	blt	r3,zero,8d5a4 <___vfprintf_internal_r+0x2180>
   8d3e4:	d8c03217 	ldw	r3,200(sp)
   8d3e8:	d8c02e15 	stw	r3,184(sp)
   8d3ec:	003e0206 	br	8cbf8 <__alt_data_end+0xfffbcd38>
   8d3f0:	df0022c4 	addi	fp,sp,139
   8d3f4:	dc002915 	stw	r16,164(sp)
   8d3f8:	4027883a 	mov	r19,r8
   8d3fc:	e021883a 	mov	r16,fp
   8d400:	b009883a 	mov	r4,r22
   8d404:	01400284 	movi	r5,10
   8d408:	0088d180 	call	88d18 <__modsi3>
   8d40c:	10800c04 	addi	r2,r2,48
   8d410:	843fffc4 	addi	r16,r16,-1
   8d414:	b009883a 	mov	r4,r22
   8d418:	01400284 	movi	r5,10
   8d41c:	80800005 	stb	r2,0(r16)
   8d420:	0088c940 	call	88c94 <__divsi3>
   8d424:	102d883a 	mov	r22,r2
   8d428:	00800244 	movi	r2,9
   8d42c:	15bff416 	blt	r2,r22,8d400 <__alt_data_end+0xfffbd540>
   8d430:	9811883a 	mov	r8,r19
   8d434:	b0800c04 	addi	r2,r22,48
   8d438:	8027883a 	mov	r19,r16
   8d43c:	997fffc4 	addi	r5,r19,-1
   8d440:	98bfffc5 	stb	r2,-1(r19)
   8d444:	dc002917 	ldw	r16,164(sp)
   8d448:	2f006a2e 	bgeu	r5,fp,8d5f4 <___vfprintf_internal_r+0x21d0>
   8d44c:	d9c02384 	addi	r7,sp,142
   8d450:	3ccfc83a 	sub	r7,r7,r19
   8d454:	d9002344 	addi	r4,sp,141
   8d458:	e1cf883a 	add	r7,fp,r7
   8d45c:	00000106 	br	8d464 <___vfprintf_internal_r+0x2040>
   8d460:	28800003 	ldbu	r2,0(r5)
   8d464:	20800005 	stb	r2,0(r4)
   8d468:	21000044 	addi	r4,r4,1
   8d46c:	29400044 	addi	r5,r5,1
   8d470:	393ffb1e 	bne	r7,r4,8d460 <__alt_data_end+0xfffbd5a0>
   8d474:	d8802304 	addi	r2,sp,140
   8d478:	14c5c83a 	sub	r2,r2,r19
   8d47c:	d8c02344 	addi	r3,sp,141
   8d480:	1885883a 	add	r2,r3,r2
   8d484:	003f7006 	br	8d248 <__alt_data_end+0xfffbd388>
   8d488:	0005883a 	mov	r2,zero
   8d48c:	003f0f06 	br	8d0cc <__alt_data_end+0xfffbd20c>
   8d490:	d8c03217 	ldw	r3,200(sp)
   8d494:	18c00044 	addi	r3,r3,1
   8d498:	d8c02e15 	stw	r3,184(sp)
   8d49c:	1805883a 	mov	r2,r3
   8d4a0:	183fb20e 	bge	r3,zero,8d36c <__alt_data_end+0xfffbd4ac>
   8d4a4:	0005883a 	mov	r2,zero
   8d4a8:	003fb006 	br	8d36c <__alt_data_end+0xfffbd4ac>
   8d4ac:	d9003617 	ldw	r4,216(sp)
   8d4b0:	000d883a 	mov	r6,zero
   8d4b4:	000f883a 	mov	r7,zero
   8d4b8:	980b883a 	mov	r5,r19
   8d4bc:	d8c03c15 	stw	r3,240(sp)
   8d4c0:	da003d15 	stw	r8,244(sp)
   8d4c4:	0097a380 	call	97a38 <__eqdf2>
   8d4c8:	d8c03c17 	ldw	r3,240(sp)
   8d4cc:	da003d17 	ldw	r8,244(sp)
   8d4d0:	103f9826 	beq	r2,zero,8d334 <__alt_data_end+0xfffbd474>
   8d4d4:	00800044 	movi	r2,1
   8d4d8:	10c7c83a 	sub	r3,r2,r3
   8d4dc:	d8c02615 	stw	r3,152(sp)
   8d4e0:	003f9506 	br	8d338 <__alt_data_end+0xfffbd478>
   8d4e4:	d9002917 	ldw	r4,164(sp)
   8d4e8:	d8c03217 	ldw	r3,200(sp)
   8d4ec:	20800044 	addi	r2,r4,1
   8d4f0:	1885883a 	add	r2,r3,r2
   8d4f4:	d8802e15 	stw	r2,184(sp)
   8d4f8:	103dbf0e 	bge	r2,zero,8cbf8 <__alt_data_end+0xfffbcd38>
   8d4fc:	0005883a 	mov	r2,zero
   8d500:	003dbd06 	br	8cbf8 <__alt_data_end+0xfffbcd38>
   8d504:	2000211e 	bne	r4,zero,8d58c <___vfprintf_internal_r+0x2168>
   8d508:	9480004c 	andi	r18,r18,1
   8d50c:	90001f1e 	bne	r18,zero,8d58c <___vfprintf_internal_r+0x2168>
   8d510:	00800044 	movi	r2,1
   8d514:	d8802e15 	stw	r2,184(sp)
   8d518:	003db706 	br	8cbf8 <__alt_data_end+0xfffbcd38>
   8d51c:	00800b44 	movi	r2,45
   8d520:	05adc83a 	sub	r22,zero,r22
   8d524:	d8802305 	stb	r2,140(sp)
   8d528:	003f3f06 	br	8d228 <__alt_data_end+0xfffbd368>
   8d52c:	0005883a 	mov	r2,zero
   8d530:	003f5206 	br	8d27c <__alt_data_end+0xfffbd3bc>
   8d534:	90a4703a 	and	r18,r18,r2
   8d538:	903f4e26 	beq	r18,zero,8d274 <__alt_data_end+0xfffbd3b4>
   8d53c:	003f4a06 	br	8d268 <__alt_data_end+0xfffbd3a8>
   8d540:	00800084 	movi	r2,2
   8d544:	10c5c83a 	sub	r2,r2,r3
   8d548:	003f8406 	br	8d35c <__alt_data_end+0xfffbd49c>
   8d54c:	d8802d17 	ldw	r2,180(sp)
   8d550:	d9002d17 	ldw	r4,180(sp)
   8d554:	ac400043 	ldbu	r17,1(r21)
   8d558:	10800017 	ldw	r2,0(r2)
   8d55c:	582b883a 	mov	r21,r11
   8d560:	d8802915 	stw	r2,164(sp)
   8d564:	20800104 	addi	r2,r4,4
   8d568:	d9002917 	ldw	r4,164(sp)
   8d56c:	d8802d15 	stw	r2,180(sp)
   8d570:	203e7a0e 	bge	r4,zero,8cf5c <__alt_data_end+0xfffbd09c>
   8d574:	8c403fcc 	andi	r17,r17,255
   8d578:	00bfffc4 	movi	r2,-1
   8d57c:	8c40201c 	xori	r17,r17,128
   8d580:	d8802915 	stw	r2,164(sp)
   8d584:	8c7fe004 	addi	r17,r17,-128
   8d588:	00380706 	br	8b5a8 <__alt_data_end+0xfffbb6e8>
   8d58c:	d8c02917 	ldw	r3,164(sp)
   8d590:	18c00084 	addi	r3,r3,2
   8d594:	d8c02e15 	stw	r3,184(sp)
   8d598:	1805883a 	mov	r2,r3
   8d59c:	183d960e 	bge	r3,zero,8cbf8 <__alt_data_end+0xfffbcd38>
   8d5a0:	003fd606 	br	8d4fc <__alt_data_end+0xfffbd63c>
   8d5a4:	0005883a 	mov	r2,zero
   8d5a8:	003f8e06 	br	8d3e4 <__alt_data_end+0xfffbd524>
   8d5ac:	9080004c 	andi	r2,r18,1
   8d5b0:	103f811e 	bne	r2,zero,8d3b8 <__alt_data_end+0xfffbd4f8>
   8d5b4:	d8802117 	ldw	r2,132(sp)
   8d5b8:	1405c83a 	sub	r2,r2,r16
   8d5bc:	d8803315 	stw	r2,204(sp)
   8d5c0:	b47ef326 	beq	r22,r17,8d190 <__alt_data_end+0xfffbd2d0>
   8d5c4:	dd802617 	ldw	r22,152(sp)
   8d5c8:	003f1106 	br	8d210 <__alt_data_end+0xfffbd350>
   8d5cc:	d9c02785 	stb	r7,158(sp)
   8d5d0:	00390406 	br	8b9e4 <__alt_data_end+0xfffbbb24>
   8d5d4:	d9c02785 	stb	r7,158(sp)
   8d5d8:	0038d306 	br	8b928 <__alt_data_end+0xfffbba68>
   8d5dc:	d9c02785 	stb	r7,158(sp)
   8d5e0:	003a6106 	br	8bf68 <__alt_data_end+0xfffbc0a8>
   8d5e4:	d9c02785 	stb	r7,158(sp)
   8d5e8:	003af806 	br	8c1cc <__alt_data_end+0xfffbc30c>
   8d5ec:	0005883a 	mov	r2,zero
   8d5f0:	003d7e06 	br	8cbec <__alt_data_end+0xfffbcd2c>
   8d5f4:	d8802344 	addi	r2,sp,141
   8d5f8:	003f1306 	br	8d248 <__alt_data_end+0xfffbd388>
   8d5fc:	d9c02785 	stb	r7,158(sp)
   8d600:	00392306 	br	8ba90 <__alt_data_end+0xfffbbbd0>
   8d604:	d9c02785 	stb	r7,158(sp)
   8d608:	003aa906 	br	8c0b0 <__alt_data_end+0xfffbc1f0>
   8d60c:	d9c02785 	stb	r7,158(sp)
   8d610:	003a3d06 	br	8bf08 <__alt_data_end+0xfffbc048>
   8d614:	d9c02785 	stb	r7,158(sp)
   8d618:	003aca06 	br	8c144 <__alt_data_end+0xfffbc284>

0008d61c <__vfprintf_internal>:
   8d61c:	008002b4 	movhi	r2,10
   8d620:	10bb5c04 	addi	r2,r2,-4752
   8d624:	300f883a 	mov	r7,r6
   8d628:	280d883a 	mov	r6,r5
   8d62c:	200b883a 	mov	r5,r4
   8d630:	11000017 	ldw	r4,0(r2)
   8d634:	008b4241 	jmpi	8b424 <___vfprintf_internal_r>

0008d638 <__sbprintf>:
   8d638:	2880030b 	ldhu	r2,12(r5)
   8d63c:	2ac01917 	ldw	r11,100(r5)
   8d640:	2a80038b 	ldhu	r10,14(r5)
   8d644:	2a400717 	ldw	r9,28(r5)
   8d648:	2a000917 	ldw	r8,36(r5)
   8d64c:	defee204 	addi	sp,sp,-1144
   8d650:	00c10004 	movi	r3,1024
   8d654:	dc011a15 	stw	r16,1128(sp)
   8d658:	10bfff4c 	andi	r2,r2,65533
   8d65c:	2821883a 	mov	r16,r5
   8d660:	d8cb883a 	add	r5,sp,r3
   8d664:	dc811c15 	stw	r18,1136(sp)
   8d668:	dc411b15 	stw	r17,1132(sp)
   8d66c:	dfc11d15 	stw	ra,1140(sp)
   8d670:	2025883a 	mov	r18,r4
   8d674:	d881030d 	sth	r2,1036(sp)
   8d678:	dac11915 	stw	r11,1124(sp)
   8d67c:	da81038d 	sth	r10,1038(sp)
   8d680:	da410715 	stw	r9,1052(sp)
   8d684:	da010915 	stw	r8,1060(sp)
   8d688:	dec10015 	stw	sp,1024(sp)
   8d68c:	dec10415 	stw	sp,1040(sp)
   8d690:	d8c10215 	stw	r3,1032(sp)
   8d694:	d8c10515 	stw	r3,1044(sp)
   8d698:	d8010615 	stw	zero,1048(sp)
   8d69c:	008b4240 	call	8b424 <___vfprintf_internal_r>
   8d6a0:	1023883a 	mov	r17,r2
   8d6a4:	10000416 	blt	r2,zero,8d6b8 <__sbprintf+0x80>
   8d6a8:	d9410004 	addi	r5,sp,1024
   8d6ac:	9009883a 	mov	r4,r18
   8d6b0:	008f4140 	call	8f414 <_fflush_r>
   8d6b4:	10000d1e 	bne	r2,zero,8d6ec <__sbprintf+0xb4>
   8d6b8:	d881030b 	ldhu	r2,1036(sp)
   8d6bc:	1080100c 	andi	r2,r2,64
   8d6c0:	10000326 	beq	r2,zero,8d6d0 <__sbprintf+0x98>
   8d6c4:	8080030b 	ldhu	r2,12(r16)
   8d6c8:	10801014 	ori	r2,r2,64
   8d6cc:	8080030d 	sth	r2,12(r16)
   8d6d0:	8805883a 	mov	r2,r17
   8d6d4:	dfc11d17 	ldw	ra,1140(sp)
   8d6d8:	dc811c17 	ldw	r18,1136(sp)
   8d6dc:	dc411b17 	ldw	r17,1132(sp)
   8d6e0:	dc011a17 	ldw	r16,1128(sp)
   8d6e4:	dec11e04 	addi	sp,sp,1144
   8d6e8:	f800283a 	ret
   8d6ec:	047fffc4 	movi	r17,-1
   8d6f0:	003ff106 	br	8d6b8 <__alt_data_end+0xfffbd7f8>

0008d6f4 <vfprintf>:
   8d6f4:	008d61c1 	jmpi	8d61c <__vfprintf_internal>

0008d6f8 <_vsnprintf_r>:
   8d6f8:	30003716 	blt	r6,zero,8d7d8 <_vsnprintf_r+0xe0>
   8d6fc:	deffe404 	addi	sp,sp,-112
   8d700:	00c08204 	movi	r3,520
   8d704:	dc001a15 	stw	r16,104(sp)
   8d708:	3005883a 	mov	r2,r6
   8d70c:	dfc01b15 	stw	ra,108(sp)
   8d710:	d8c0030d 	sth	r3,12(sp)
   8d714:	d9400015 	stw	r5,0(sp)
   8d718:	d9400415 	stw	r5,16(sp)
   8d71c:	380d883a 	mov	r6,r7
   8d720:	2021883a 	mov	r16,r4
   8d724:	10001326 	beq	r2,zero,8d774 <_vsnprintf_r+0x7c>
   8d728:	00c002b4 	movhi	r3,10
   8d72c:	18fb5c04 	addi	r3,r3,-4752
   8d730:	19000017 	ldw	r4,0(r3)
   8d734:	d9c01c17 	ldw	r7,112(sp)
   8d738:	10bfffc4 	addi	r2,r2,-1
   8d73c:	d8800215 	stw	r2,8(sp)
   8d740:	d8800515 	stw	r2,20(sp)
   8d744:	d80b883a 	mov	r5,sp
   8d748:	00bfffc4 	movi	r2,-1
   8d74c:	d880038d 	sth	r2,14(sp)
   8d750:	008924c0 	call	8924c <___svfprintf_internal_r>
   8d754:	00ffffc4 	movi	r3,-1
   8d758:	10c01616 	blt	r2,r3,8d7b4 <_vsnprintf_r+0xbc>
   8d75c:	d8c00017 	ldw	r3,0(sp)
   8d760:	18000005 	stb	zero,0(r3)
   8d764:	dfc01b17 	ldw	ra,108(sp)
   8d768:	dc001a17 	ldw	r16,104(sp)
   8d76c:	dec01c04 	addi	sp,sp,112
   8d770:	f800283a 	ret
   8d774:	008002b4 	movhi	r2,10
   8d778:	10bb5c04 	addi	r2,r2,-4752
   8d77c:	11000017 	ldw	r4,0(r2)
   8d780:	d9c01c17 	ldw	r7,112(sp)
   8d784:	00bfffc4 	movi	r2,-1
   8d788:	d80b883a 	mov	r5,sp
   8d78c:	d8000215 	stw	zero,8(sp)
   8d790:	d8000515 	stw	zero,20(sp)
   8d794:	d880038d 	sth	r2,14(sp)
   8d798:	008924c0 	call	8924c <___svfprintf_internal_r>
   8d79c:	00ffffc4 	movi	r3,-1
   8d7a0:	10c00716 	blt	r2,r3,8d7c0 <_vsnprintf_r+0xc8>
   8d7a4:	dfc01b17 	ldw	ra,108(sp)
   8d7a8:	dc001a17 	ldw	r16,104(sp)
   8d7ac:	dec01c04 	addi	sp,sp,112
   8d7b0:	f800283a 	ret
   8d7b4:	00c022c4 	movi	r3,139
   8d7b8:	80c00015 	stw	r3,0(r16)
   8d7bc:	003fe706 	br	8d75c <__alt_data_end+0xfffbd89c>
   8d7c0:	00c022c4 	movi	r3,139
   8d7c4:	80c00015 	stw	r3,0(r16)
   8d7c8:	dfc01b17 	ldw	ra,108(sp)
   8d7cc:	dc001a17 	ldw	r16,104(sp)
   8d7d0:	dec01c04 	addi	sp,sp,112
   8d7d4:	f800283a 	ret
   8d7d8:	008022c4 	movi	r2,139
   8d7dc:	20800015 	stw	r2,0(r4)
   8d7e0:	00bfffc4 	movi	r2,-1
   8d7e4:	f800283a 	ret

0008d7e8 <vsnprintf>:
   8d7e8:	defffe04 	addi	sp,sp,-8
   8d7ec:	008002b4 	movhi	r2,10
   8d7f0:	d9c00015 	stw	r7,0(sp)
   8d7f4:	10bb5c04 	addi	r2,r2,-4752
   8d7f8:	300f883a 	mov	r7,r6
   8d7fc:	280d883a 	mov	r6,r5
   8d800:	200b883a 	mov	r5,r4
   8d804:	11000017 	ldw	r4,0(r2)
   8d808:	dfc00115 	stw	ra,4(sp)
   8d80c:	008d6f80 	call	8d6f8 <_vsnprintf_r>
   8d810:	dfc00117 	ldw	ra,4(sp)
   8d814:	dec00204 	addi	sp,sp,8
   8d818:	f800283a 	ret

0008d81c <__swsetup_r>:
   8d81c:	008002b4 	movhi	r2,10
   8d820:	defffd04 	addi	sp,sp,-12
   8d824:	10bb5c04 	addi	r2,r2,-4752
   8d828:	dc400115 	stw	r17,4(sp)
   8d82c:	2023883a 	mov	r17,r4
   8d830:	11000017 	ldw	r4,0(r2)
   8d834:	dc000015 	stw	r16,0(sp)
   8d838:	dfc00215 	stw	ra,8(sp)
   8d83c:	2821883a 	mov	r16,r5
   8d840:	20000226 	beq	r4,zero,8d84c <__swsetup_r+0x30>
   8d844:	20800e17 	ldw	r2,56(r4)
   8d848:	10003126 	beq	r2,zero,8d910 <__swsetup_r+0xf4>
   8d84c:	8080030b 	ldhu	r2,12(r16)
   8d850:	10c0020c 	andi	r3,r2,8
   8d854:	1009883a 	mov	r4,r2
   8d858:	18000f26 	beq	r3,zero,8d898 <__swsetup_r+0x7c>
   8d85c:	80c00417 	ldw	r3,16(r16)
   8d860:	18001526 	beq	r3,zero,8d8b8 <__swsetup_r+0x9c>
   8d864:	1100004c 	andi	r4,r2,1
   8d868:	20001c1e 	bne	r4,zero,8d8dc <__swsetup_r+0xc0>
   8d86c:	1080008c 	andi	r2,r2,2
   8d870:	1000291e 	bne	r2,zero,8d918 <__swsetup_r+0xfc>
   8d874:	80800517 	ldw	r2,20(r16)
   8d878:	80800215 	stw	r2,8(r16)
   8d87c:	18001c26 	beq	r3,zero,8d8f0 <__swsetup_r+0xd4>
   8d880:	0005883a 	mov	r2,zero
   8d884:	dfc00217 	ldw	ra,8(sp)
   8d888:	dc400117 	ldw	r17,4(sp)
   8d88c:	dc000017 	ldw	r16,0(sp)
   8d890:	dec00304 	addi	sp,sp,12
   8d894:	f800283a 	ret
   8d898:	2080040c 	andi	r2,r4,16
   8d89c:	10002e26 	beq	r2,zero,8d958 <__swsetup_r+0x13c>
   8d8a0:	2080010c 	andi	r2,r4,4
   8d8a4:	10001e1e 	bne	r2,zero,8d920 <__swsetup_r+0x104>
   8d8a8:	80c00417 	ldw	r3,16(r16)
   8d8ac:	20800214 	ori	r2,r4,8
   8d8b0:	8080030d 	sth	r2,12(r16)
   8d8b4:	183feb1e 	bne	r3,zero,8d864 <__alt_data_end+0xfffbd9a4>
   8d8b8:	1100a00c 	andi	r4,r2,640
   8d8bc:	01408004 	movi	r5,512
   8d8c0:	217fe826 	beq	r4,r5,8d864 <__alt_data_end+0xfffbd9a4>
   8d8c4:	800b883a 	mov	r5,r16
   8d8c8:	8809883a 	mov	r4,r17
   8d8cc:	00903940 	call	90394 <__smakebuf_r>
   8d8d0:	8080030b 	ldhu	r2,12(r16)
   8d8d4:	80c00417 	ldw	r3,16(r16)
   8d8d8:	003fe206 	br	8d864 <__alt_data_end+0xfffbd9a4>
   8d8dc:	80800517 	ldw	r2,20(r16)
   8d8e0:	80000215 	stw	zero,8(r16)
   8d8e4:	0085c83a 	sub	r2,zero,r2
   8d8e8:	80800615 	stw	r2,24(r16)
   8d8ec:	183fe41e 	bne	r3,zero,8d880 <__alt_data_end+0xfffbd9c0>
   8d8f0:	80c0030b 	ldhu	r3,12(r16)
   8d8f4:	0005883a 	mov	r2,zero
   8d8f8:	1900200c 	andi	r4,r3,128
   8d8fc:	203fe126 	beq	r4,zero,8d884 <__alt_data_end+0xfffbd9c4>
   8d900:	18c01014 	ori	r3,r3,64
   8d904:	80c0030d 	sth	r3,12(r16)
   8d908:	00bfffc4 	movi	r2,-1
   8d90c:	003fdd06 	br	8d884 <__alt_data_end+0xfffbd9c4>
   8d910:	008f7f00 	call	8f7f0 <__sinit>
   8d914:	003fcd06 	br	8d84c <__alt_data_end+0xfffbd98c>
   8d918:	0005883a 	mov	r2,zero
   8d91c:	003fd606 	br	8d878 <__alt_data_end+0xfffbd9b8>
   8d920:	81400c17 	ldw	r5,48(r16)
   8d924:	28000626 	beq	r5,zero,8d940 <__swsetup_r+0x124>
   8d928:	80801004 	addi	r2,r16,64
   8d92c:	28800326 	beq	r5,r2,8d93c <__swsetup_r+0x120>
   8d930:	8809883a 	mov	r4,r17
   8d934:	008f9640 	call	8f964 <_free_r>
   8d938:	8100030b 	ldhu	r4,12(r16)
   8d93c:	80000c15 	stw	zero,48(r16)
   8d940:	80c00417 	ldw	r3,16(r16)
   8d944:	00bff6c4 	movi	r2,-37
   8d948:	1108703a 	and	r4,r2,r4
   8d94c:	80000115 	stw	zero,4(r16)
   8d950:	80c00015 	stw	r3,0(r16)
   8d954:	003fd506 	br	8d8ac <__alt_data_end+0xfffbd9ec>
   8d958:	00800244 	movi	r2,9
   8d95c:	88800015 	stw	r2,0(r17)
   8d960:	20801014 	ori	r2,r4,64
   8d964:	8080030d 	sth	r2,12(r16)
   8d968:	00bfffc4 	movi	r2,-1
   8d96c:	003fc506 	br	8d884 <__alt_data_end+0xfffbd9c4>

0008d970 <quorem>:
   8d970:	defff704 	addi	sp,sp,-36
   8d974:	dc800215 	stw	r18,8(sp)
   8d978:	20800417 	ldw	r2,16(r4)
   8d97c:	2c800417 	ldw	r18,16(r5)
   8d980:	dfc00815 	stw	ra,32(sp)
   8d984:	ddc00715 	stw	r23,28(sp)
   8d988:	dd800615 	stw	r22,24(sp)
   8d98c:	dd400515 	stw	r21,20(sp)
   8d990:	dd000415 	stw	r20,16(sp)
   8d994:	dcc00315 	stw	r19,12(sp)
   8d998:	dc400115 	stw	r17,4(sp)
   8d99c:	dc000015 	stw	r16,0(sp)
   8d9a0:	14807116 	blt	r2,r18,8db68 <quorem+0x1f8>
   8d9a4:	94bfffc4 	addi	r18,r18,-1
   8d9a8:	94ad883a 	add	r22,r18,r18
   8d9ac:	b5ad883a 	add	r22,r22,r22
   8d9b0:	2c400504 	addi	r17,r5,20
   8d9b4:	8da9883a 	add	r20,r17,r22
   8d9b8:	25400504 	addi	r21,r4,20
   8d9bc:	282f883a 	mov	r23,r5
   8d9c0:	adad883a 	add	r22,r21,r22
   8d9c4:	a1400017 	ldw	r5,0(r20)
   8d9c8:	2021883a 	mov	r16,r4
   8d9cc:	b1000017 	ldw	r4,0(r22)
   8d9d0:	29400044 	addi	r5,r5,1
   8d9d4:	0088d8c0 	call	88d8c <__udivsi3>
   8d9d8:	1027883a 	mov	r19,r2
   8d9dc:	10002c26 	beq	r2,zero,8da90 <quorem+0x120>
   8d9e0:	a813883a 	mov	r9,r21
   8d9e4:	880b883a 	mov	r5,r17
   8d9e8:	0009883a 	mov	r4,zero
   8d9ec:	000d883a 	mov	r6,zero
   8d9f0:	2a000017 	ldw	r8,0(r5)
   8d9f4:	49c00017 	ldw	r7,0(r9)
   8d9f8:	29400104 	addi	r5,r5,4
   8d9fc:	40bfffcc 	andi	r2,r8,65535
   8da00:	14c5383a 	mul	r2,r2,r19
   8da04:	4010d43a 	srli	r8,r8,16
   8da08:	38ffffcc 	andi	r3,r7,65535
   8da0c:	1105883a 	add	r2,r2,r4
   8da10:	1008d43a 	srli	r4,r2,16
   8da14:	44d1383a 	mul	r8,r8,r19
   8da18:	198d883a 	add	r6,r3,r6
   8da1c:	10ffffcc 	andi	r3,r2,65535
   8da20:	30c7c83a 	sub	r3,r6,r3
   8da24:	380ed43a 	srli	r7,r7,16
   8da28:	4105883a 	add	r2,r8,r4
   8da2c:	180dd43a 	srai	r6,r3,16
   8da30:	113fffcc 	andi	r4,r2,65535
   8da34:	390fc83a 	sub	r7,r7,r4
   8da38:	398d883a 	add	r6,r7,r6
   8da3c:	300e943a 	slli	r7,r6,16
   8da40:	18ffffcc 	andi	r3,r3,65535
   8da44:	1008d43a 	srli	r4,r2,16
   8da48:	38ceb03a 	or	r7,r7,r3
   8da4c:	49c00015 	stw	r7,0(r9)
   8da50:	300dd43a 	srai	r6,r6,16
   8da54:	4a400104 	addi	r9,r9,4
   8da58:	a17fe52e 	bgeu	r20,r5,8d9f0 <__alt_data_end+0xfffbdb30>
   8da5c:	b0800017 	ldw	r2,0(r22)
   8da60:	10000b1e 	bne	r2,zero,8da90 <quorem+0x120>
   8da64:	b0bfff04 	addi	r2,r22,-4
   8da68:	a880082e 	bgeu	r21,r2,8da8c <quorem+0x11c>
   8da6c:	b0ffff17 	ldw	r3,-4(r22)
   8da70:	18000326 	beq	r3,zero,8da80 <quorem+0x110>
   8da74:	00000506 	br	8da8c <quorem+0x11c>
   8da78:	10c00017 	ldw	r3,0(r2)
   8da7c:	1800031e 	bne	r3,zero,8da8c <quorem+0x11c>
   8da80:	10bfff04 	addi	r2,r2,-4
   8da84:	94bfffc4 	addi	r18,r18,-1
   8da88:	a8bffb36 	bltu	r21,r2,8da78 <__alt_data_end+0xfffbdbb8>
   8da8c:	84800415 	stw	r18,16(r16)
   8da90:	b80b883a 	mov	r5,r23
   8da94:	8009883a 	mov	r4,r16
   8da98:	009198c0 	call	9198c <__mcmp>
   8da9c:	10002616 	blt	r2,zero,8db38 <quorem+0x1c8>
   8daa0:	9cc00044 	addi	r19,r19,1
   8daa4:	a805883a 	mov	r2,r21
   8daa8:	000b883a 	mov	r5,zero
   8daac:	11000017 	ldw	r4,0(r2)
   8dab0:	89800017 	ldw	r6,0(r17)
   8dab4:	10800104 	addi	r2,r2,4
   8dab8:	20ffffcc 	andi	r3,r4,65535
   8dabc:	194b883a 	add	r5,r3,r5
   8dac0:	30ffffcc 	andi	r3,r6,65535
   8dac4:	28c7c83a 	sub	r3,r5,r3
   8dac8:	300cd43a 	srli	r6,r6,16
   8dacc:	2008d43a 	srli	r4,r4,16
   8dad0:	180bd43a 	srai	r5,r3,16
   8dad4:	18ffffcc 	andi	r3,r3,65535
   8dad8:	2189c83a 	sub	r4,r4,r6
   8dadc:	2149883a 	add	r4,r4,r5
   8dae0:	200c943a 	slli	r6,r4,16
   8dae4:	8c400104 	addi	r17,r17,4
   8dae8:	200bd43a 	srai	r5,r4,16
   8daec:	30c6b03a 	or	r3,r6,r3
   8daf0:	10ffff15 	stw	r3,-4(r2)
   8daf4:	a47fed2e 	bgeu	r20,r17,8daac <__alt_data_end+0xfffbdbec>
   8daf8:	9485883a 	add	r2,r18,r18
   8dafc:	1085883a 	add	r2,r2,r2
   8db00:	a887883a 	add	r3,r21,r2
   8db04:	18800017 	ldw	r2,0(r3)
   8db08:	10000b1e 	bne	r2,zero,8db38 <quorem+0x1c8>
   8db0c:	18bfff04 	addi	r2,r3,-4
   8db10:	a880082e 	bgeu	r21,r2,8db34 <quorem+0x1c4>
   8db14:	18ffff17 	ldw	r3,-4(r3)
   8db18:	18000326 	beq	r3,zero,8db28 <quorem+0x1b8>
   8db1c:	00000506 	br	8db34 <quorem+0x1c4>
   8db20:	10c00017 	ldw	r3,0(r2)
   8db24:	1800031e 	bne	r3,zero,8db34 <quorem+0x1c4>
   8db28:	10bfff04 	addi	r2,r2,-4
   8db2c:	94bfffc4 	addi	r18,r18,-1
   8db30:	a8bffb36 	bltu	r21,r2,8db20 <__alt_data_end+0xfffbdc60>
   8db34:	84800415 	stw	r18,16(r16)
   8db38:	9805883a 	mov	r2,r19
   8db3c:	dfc00817 	ldw	ra,32(sp)
   8db40:	ddc00717 	ldw	r23,28(sp)
   8db44:	dd800617 	ldw	r22,24(sp)
   8db48:	dd400517 	ldw	r21,20(sp)
   8db4c:	dd000417 	ldw	r20,16(sp)
   8db50:	dcc00317 	ldw	r19,12(sp)
   8db54:	dc800217 	ldw	r18,8(sp)
   8db58:	dc400117 	ldw	r17,4(sp)
   8db5c:	dc000017 	ldw	r16,0(sp)
   8db60:	dec00904 	addi	sp,sp,36
   8db64:	f800283a 	ret
   8db68:	0005883a 	mov	r2,zero
   8db6c:	003ff306 	br	8db3c <__alt_data_end+0xfffbdc7c>

0008db70 <_dtoa_r>:
   8db70:	20801017 	ldw	r2,64(r4)
   8db74:	deffde04 	addi	sp,sp,-136
   8db78:	df002015 	stw	fp,128(sp)
   8db7c:	dcc01b15 	stw	r19,108(sp)
   8db80:	dc801a15 	stw	r18,104(sp)
   8db84:	dc401915 	stw	r17,100(sp)
   8db88:	dc001815 	stw	r16,96(sp)
   8db8c:	dfc02115 	stw	ra,132(sp)
   8db90:	ddc01f15 	stw	r23,124(sp)
   8db94:	dd801e15 	stw	r22,120(sp)
   8db98:	dd401d15 	stw	r21,116(sp)
   8db9c:	dd001c15 	stw	r20,112(sp)
   8dba0:	d9c00315 	stw	r7,12(sp)
   8dba4:	2039883a 	mov	fp,r4
   8dba8:	3023883a 	mov	r17,r6
   8dbac:	2825883a 	mov	r18,r5
   8dbb0:	dc002417 	ldw	r16,144(sp)
   8dbb4:	3027883a 	mov	r19,r6
   8dbb8:	10000826 	beq	r2,zero,8dbdc <_dtoa_r+0x6c>
   8dbbc:	21801117 	ldw	r6,68(r4)
   8dbc0:	00c00044 	movi	r3,1
   8dbc4:	100b883a 	mov	r5,r2
   8dbc8:	1986983a 	sll	r3,r3,r6
   8dbcc:	11800115 	stw	r6,4(r2)
   8dbd0:	10c00215 	stw	r3,8(r2)
   8dbd4:	009116c0 	call	9116c <_Bfree>
   8dbd8:	e0001015 	stw	zero,64(fp)
   8dbdc:	88002e16 	blt	r17,zero,8dc98 <_dtoa_r+0x128>
   8dbe0:	80000015 	stw	zero,0(r16)
   8dbe4:	889ffc2c 	andhi	r2,r17,32752
   8dbe8:	00dffc34 	movhi	r3,32752
   8dbec:	10c01c26 	beq	r2,r3,8dc60 <_dtoa_r+0xf0>
   8dbf0:	000d883a 	mov	r6,zero
   8dbf4:	000f883a 	mov	r7,zero
   8dbf8:	9009883a 	mov	r4,r18
   8dbfc:	980b883a 	mov	r5,r19
   8dc00:	0097a380 	call	97a38 <__eqdf2>
   8dc04:	10002b1e 	bne	r2,zero,8dcb4 <_dtoa_r+0x144>
   8dc08:	d9c02317 	ldw	r7,140(sp)
   8dc0c:	00800044 	movi	r2,1
   8dc10:	38800015 	stw	r2,0(r7)
   8dc14:	d8802517 	ldw	r2,148(sp)
   8dc18:	10019e26 	beq	r2,zero,8e294 <_dtoa_r+0x724>
   8dc1c:	d8c02517 	ldw	r3,148(sp)
   8dc20:	008002b4 	movhi	r2,10
   8dc24:	10b13044 	addi	r2,r2,-15167
   8dc28:	18800015 	stw	r2,0(r3)
   8dc2c:	10bfffc4 	addi	r2,r2,-1
   8dc30:	dfc02117 	ldw	ra,132(sp)
   8dc34:	df002017 	ldw	fp,128(sp)
   8dc38:	ddc01f17 	ldw	r23,124(sp)
   8dc3c:	dd801e17 	ldw	r22,120(sp)
   8dc40:	dd401d17 	ldw	r21,116(sp)
   8dc44:	dd001c17 	ldw	r20,112(sp)
   8dc48:	dcc01b17 	ldw	r19,108(sp)
   8dc4c:	dc801a17 	ldw	r18,104(sp)
   8dc50:	dc401917 	ldw	r17,100(sp)
   8dc54:	dc001817 	ldw	r16,96(sp)
   8dc58:	dec02204 	addi	sp,sp,136
   8dc5c:	f800283a 	ret
   8dc60:	d8c02317 	ldw	r3,140(sp)
   8dc64:	0089c3c4 	movi	r2,9999
   8dc68:	18800015 	stw	r2,0(r3)
   8dc6c:	90017726 	beq	r18,zero,8e24c <_dtoa_r+0x6dc>
   8dc70:	008002b4 	movhi	r2,10
   8dc74:	10b14404 	addi	r2,r2,-15088
   8dc78:	d9002517 	ldw	r4,148(sp)
   8dc7c:	203fec26 	beq	r4,zero,8dc30 <__alt_data_end+0xfffbdd70>
   8dc80:	10c000c7 	ldb	r3,3(r2)
   8dc84:	1801781e 	bne	r3,zero,8e268 <_dtoa_r+0x6f8>
   8dc88:	10c000c4 	addi	r3,r2,3
   8dc8c:	d9802517 	ldw	r6,148(sp)
   8dc90:	30c00015 	stw	r3,0(r6)
   8dc94:	003fe606 	br	8dc30 <__alt_data_end+0xfffbdd70>
   8dc98:	04e00034 	movhi	r19,32768
   8dc9c:	9cffffc4 	addi	r19,r19,-1
   8dca0:	00800044 	movi	r2,1
   8dca4:	8ce6703a 	and	r19,r17,r19
   8dca8:	80800015 	stw	r2,0(r16)
   8dcac:	9823883a 	mov	r17,r19
   8dcb0:	003fcc06 	br	8dbe4 <__alt_data_end+0xfffbdd24>
   8dcb4:	d8800204 	addi	r2,sp,8
   8dcb8:	d8800015 	stw	r2,0(sp)
   8dcbc:	d9c00104 	addi	r7,sp,4
   8dcc0:	900b883a 	mov	r5,r18
   8dcc4:	980d883a 	mov	r6,r19
   8dcc8:	e009883a 	mov	r4,fp
   8dccc:	8820d53a 	srli	r16,r17,20
   8dcd0:	0091d580 	call	91d58 <__d2b>
   8dcd4:	d8800915 	stw	r2,36(sp)
   8dcd8:	8001651e 	bne	r16,zero,8e270 <_dtoa_r+0x700>
   8dcdc:	dd800217 	ldw	r22,8(sp)
   8dce0:	dc000117 	ldw	r16,4(sp)
   8dce4:	00800804 	movi	r2,32
   8dce8:	b421883a 	add	r16,r22,r16
   8dcec:	80c10c84 	addi	r3,r16,1074
   8dcf0:	10c2d10e 	bge	r2,r3,8e838 <_dtoa_r+0xcc8>
   8dcf4:	00801004 	movi	r2,64
   8dcf8:	81010484 	addi	r4,r16,1042
   8dcfc:	10c7c83a 	sub	r3,r2,r3
   8dd00:	9108d83a 	srl	r4,r18,r4
   8dd04:	88e2983a 	sll	r17,r17,r3
   8dd08:	2448b03a 	or	r4,r4,r17
   8dd0c:	0098e000 	call	98e00 <__floatunsidf>
   8dd10:	017f8434 	movhi	r5,65040
   8dd14:	01800044 	movi	r6,1
   8dd18:	1009883a 	mov	r4,r2
   8dd1c:	194b883a 	add	r5,r3,r5
   8dd20:	843fffc4 	addi	r16,r16,-1
   8dd24:	d9801115 	stw	r6,68(sp)
   8dd28:	000d883a 	mov	r6,zero
   8dd2c:	01cffe34 	movhi	r7,16376
   8dd30:	00983a80 	call	983a8 <__subdf3>
   8dd34:	0198dbf4 	movhi	r6,25455
   8dd38:	01cff4f4 	movhi	r7,16339
   8dd3c:	3190d844 	addi	r6,r6,17249
   8dd40:	39e1e9c4 	addi	r7,r7,-30809
   8dd44:	1009883a 	mov	r4,r2
   8dd48:	180b883a 	mov	r5,r3
   8dd4c:	0097c900 	call	97c90 <__muldf3>
   8dd50:	01a2d874 	movhi	r6,35681
   8dd54:	01cff1f4 	movhi	r7,16327
   8dd58:	31b22cc4 	addi	r6,r6,-14157
   8dd5c:	39e28a04 	addi	r7,r7,-30168
   8dd60:	180b883a 	mov	r5,r3
   8dd64:	1009883a 	mov	r4,r2
   8dd68:	00968a40 	call	968a4 <__adddf3>
   8dd6c:	8009883a 	mov	r4,r16
   8dd70:	1029883a 	mov	r20,r2
   8dd74:	1823883a 	mov	r17,r3
   8dd78:	0098d240 	call	98d24 <__floatsidf>
   8dd7c:	019427f4 	movhi	r6,20639
   8dd80:	01cff4f4 	movhi	r7,16339
   8dd84:	319e7ec4 	addi	r6,r6,31227
   8dd88:	39d104c4 	addi	r7,r7,17427
   8dd8c:	1009883a 	mov	r4,r2
   8dd90:	180b883a 	mov	r5,r3
   8dd94:	0097c900 	call	97c90 <__muldf3>
   8dd98:	100d883a 	mov	r6,r2
   8dd9c:	180f883a 	mov	r7,r3
   8dda0:	a009883a 	mov	r4,r20
   8dda4:	880b883a 	mov	r5,r17
   8dda8:	00968a40 	call	968a4 <__adddf3>
   8ddac:	1009883a 	mov	r4,r2
   8ddb0:	180b883a 	mov	r5,r3
   8ddb4:	1029883a 	mov	r20,r2
   8ddb8:	1823883a 	mov	r17,r3
   8ddbc:	0098ca40 	call	98ca4 <__fixdfsi>
   8ddc0:	000d883a 	mov	r6,zero
   8ddc4:	000f883a 	mov	r7,zero
   8ddc8:	a009883a 	mov	r4,r20
   8ddcc:	880b883a 	mov	r5,r17
   8ddd0:	d8800515 	stw	r2,20(sp)
   8ddd4:	0097b9c0 	call	97b9c <__ledf2>
   8ddd8:	10028716 	blt	r2,zero,8e7f8 <_dtoa_r+0xc88>
   8dddc:	d8c00517 	ldw	r3,20(sp)
   8dde0:	00800584 	movi	r2,22
   8dde4:	10c27536 	bltu	r2,r3,8e7bc <_dtoa_r+0xc4c>
   8dde8:	180490fa 	slli	r2,r3,3
   8ddec:	00c002b4 	movhi	r3,10
   8ddf0:	18f15f04 	addi	r3,r3,-14980
   8ddf4:	1885883a 	add	r2,r3,r2
   8ddf8:	11000017 	ldw	r4,0(r2)
   8ddfc:	11400117 	ldw	r5,4(r2)
   8de00:	900d883a 	mov	r6,r18
   8de04:	980f883a 	mov	r7,r19
   8de08:	0097ac00 	call	97ac0 <__gedf2>
   8de0c:	00828d0e 	bge	zero,r2,8e844 <_dtoa_r+0xcd4>
   8de10:	d9000517 	ldw	r4,20(sp)
   8de14:	d8000e15 	stw	zero,56(sp)
   8de18:	213fffc4 	addi	r4,r4,-1
   8de1c:	d9000515 	stw	r4,20(sp)
   8de20:	b42dc83a 	sub	r22,r22,r16
   8de24:	b5bfffc4 	addi	r22,r22,-1
   8de28:	b0026f16 	blt	r22,zero,8e7e8 <_dtoa_r+0xc78>
   8de2c:	d8000815 	stw	zero,32(sp)
   8de30:	d9c00517 	ldw	r7,20(sp)
   8de34:	38026416 	blt	r7,zero,8e7c8 <_dtoa_r+0xc58>
   8de38:	b1ed883a 	add	r22,r22,r7
   8de3c:	d9c00d15 	stw	r7,52(sp)
   8de40:	d8000a15 	stw	zero,40(sp)
   8de44:	d9800317 	ldw	r6,12(sp)
   8de48:	00800244 	movi	r2,9
   8de4c:	11811436 	bltu	r2,r6,8e2a0 <_dtoa_r+0x730>
   8de50:	00800144 	movi	r2,5
   8de54:	1184e10e 	bge	r2,r6,8f1dc <_dtoa_r+0x166c>
   8de58:	31bfff04 	addi	r6,r6,-4
   8de5c:	d9800315 	stw	r6,12(sp)
   8de60:	0023883a 	mov	r17,zero
   8de64:	d9800317 	ldw	r6,12(sp)
   8de68:	008000c4 	movi	r2,3
   8de6c:	30836726 	beq	r6,r2,8ec0c <_dtoa_r+0x109c>
   8de70:	1183410e 	bge	r2,r6,8eb78 <_dtoa_r+0x1008>
   8de74:	d9c00317 	ldw	r7,12(sp)
   8de78:	00800104 	movi	r2,4
   8de7c:	38827c26 	beq	r7,r2,8e870 <_dtoa_r+0xd00>
   8de80:	00800144 	movi	r2,5
   8de84:	3884c41e 	bne	r7,r2,8f198 <_dtoa_r+0x1628>
   8de88:	00800044 	movi	r2,1
   8de8c:	d8800b15 	stw	r2,44(sp)
   8de90:	d8c00517 	ldw	r3,20(sp)
   8de94:	d9002217 	ldw	r4,136(sp)
   8de98:	1907883a 	add	r3,r3,r4
   8de9c:	19800044 	addi	r6,r3,1
   8dea0:	d8c00c15 	stw	r3,48(sp)
   8dea4:	d9800615 	stw	r6,24(sp)
   8dea8:	0183a40e 	bge	zero,r6,8ed3c <_dtoa_r+0x11cc>
   8deac:	d9800617 	ldw	r6,24(sp)
   8deb0:	3021883a 	mov	r16,r6
   8deb4:	e0001115 	stw	zero,68(fp)
   8deb8:	008005c4 	movi	r2,23
   8debc:	1184c92e 	bgeu	r2,r6,8f1e4 <_dtoa_r+0x1674>
   8dec0:	00c00044 	movi	r3,1
   8dec4:	00800104 	movi	r2,4
   8dec8:	1085883a 	add	r2,r2,r2
   8decc:	11000504 	addi	r4,r2,20
   8ded0:	180b883a 	mov	r5,r3
   8ded4:	18c00044 	addi	r3,r3,1
   8ded8:	313ffb2e 	bgeu	r6,r4,8dec8 <__alt_data_end+0xfffbe008>
   8dedc:	e1401115 	stw	r5,68(fp)
   8dee0:	e009883a 	mov	r4,fp
   8dee4:	00910c40 	call	910c4 <_Balloc>
   8dee8:	d8800715 	stw	r2,28(sp)
   8deec:	e0801015 	stw	r2,64(fp)
   8def0:	00800384 	movi	r2,14
   8def4:	1400f736 	bltu	r2,r16,8e2d4 <_dtoa_r+0x764>
   8def8:	8800f626 	beq	r17,zero,8e2d4 <_dtoa_r+0x764>
   8defc:	d9c00517 	ldw	r7,20(sp)
   8df00:	01c39a0e 	bge	zero,r7,8ed6c <_dtoa_r+0x11fc>
   8df04:	388003cc 	andi	r2,r7,15
   8df08:	100490fa 	slli	r2,r2,3
   8df0c:	382bd13a 	srai	r21,r7,4
   8df10:	00c002b4 	movhi	r3,10
   8df14:	18f15f04 	addi	r3,r3,-14980
   8df18:	1885883a 	add	r2,r3,r2
   8df1c:	a8c0040c 	andi	r3,r21,16
   8df20:	12400017 	ldw	r9,0(r2)
   8df24:	12000117 	ldw	r8,4(r2)
   8df28:	18037926 	beq	r3,zero,8ed10 <_dtoa_r+0x11a0>
   8df2c:	008002b4 	movhi	r2,10
   8df30:	10b15504 	addi	r2,r2,-15020
   8df34:	11800817 	ldw	r6,32(r2)
   8df38:	11c00917 	ldw	r7,36(r2)
   8df3c:	9009883a 	mov	r4,r18
   8df40:	980b883a 	mov	r5,r19
   8df44:	da001715 	stw	r8,92(sp)
   8df48:	da401615 	stw	r9,88(sp)
   8df4c:	00971500 	call	97150 <__divdf3>
   8df50:	da001717 	ldw	r8,92(sp)
   8df54:	da401617 	ldw	r9,88(sp)
   8df58:	ad4003cc 	andi	r21,r21,15
   8df5c:	040000c4 	movi	r16,3
   8df60:	1023883a 	mov	r17,r2
   8df64:	1829883a 	mov	r20,r3
   8df68:	a8001126 	beq	r21,zero,8dfb0 <_dtoa_r+0x440>
   8df6c:	05c002b4 	movhi	r23,10
   8df70:	bdf15504 	addi	r23,r23,-15020
   8df74:	4805883a 	mov	r2,r9
   8df78:	4007883a 	mov	r3,r8
   8df7c:	a980004c 	andi	r6,r21,1
   8df80:	1009883a 	mov	r4,r2
   8df84:	a82bd07a 	srai	r21,r21,1
   8df88:	180b883a 	mov	r5,r3
   8df8c:	30000426 	beq	r6,zero,8dfa0 <_dtoa_r+0x430>
   8df90:	b9800017 	ldw	r6,0(r23)
   8df94:	b9c00117 	ldw	r7,4(r23)
   8df98:	84000044 	addi	r16,r16,1
   8df9c:	0097c900 	call	97c90 <__muldf3>
   8dfa0:	bdc00204 	addi	r23,r23,8
   8dfa4:	a83ff51e 	bne	r21,zero,8df7c <__alt_data_end+0xfffbe0bc>
   8dfa8:	1013883a 	mov	r9,r2
   8dfac:	1811883a 	mov	r8,r3
   8dfb0:	480d883a 	mov	r6,r9
   8dfb4:	400f883a 	mov	r7,r8
   8dfb8:	8809883a 	mov	r4,r17
   8dfbc:	a00b883a 	mov	r5,r20
   8dfc0:	00971500 	call	97150 <__divdf3>
   8dfc4:	d8800f15 	stw	r2,60(sp)
   8dfc8:	d8c01015 	stw	r3,64(sp)
   8dfcc:	d8c00e17 	ldw	r3,56(sp)
   8dfd0:	18000626 	beq	r3,zero,8dfec <_dtoa_r+0x47c>
   8dfd4:	d9000f17 	ldw	r4,60(sp)
   8dfd8:	d9401017 	ldw	r5,64(sp)
   8dfdc:	000d883a 	mov	r6,zero
   8dfe0:	01cffc34 	movhi	r7,16368
   8dfe4:	0097b9c0 	call	97b9c <__ledf2>
   8dfe8:	10040b16 	blt	r2,zero,8f018 <_dtoa_r+0x14a8>
   8dfec:	8009883a 	mov	r4,r16
   8dff0:	0098d240 	call	98d24 <__floatsidf>
   8dff4:	d9800f17 	ldw	r6,60(sp)
   8dff8:	d9c01017 	ldw	r7,64(sp)
   8dffc:	1009883a 	mov	r4,r2
   8e000:	180b883a 	mov	r5,r3
   8e004:	0097c900 	call	97c90 <__muldf3>
   8e008:	000d883a 	mov	r6,zero
   8e00c:	01d00734 	movhi	r7,16412
   8e010:	1009883a 	mov	r4,r2
   8e014:	180b883a 	mov	r5,r3
   8e018:	00968a40 	call	968a4 <__adddf3>
   8e01c:	1021883a 	mov	r16,r2
   8e020:	d8800617 	ldw	r2,24(sp)
   8e024:	047f3034 	movhi	r17,64704
   8e028:	1c63883a 	add	r17,r3,r17
   8e02c:	10031826 	beq	r2,zero,8ec90 <_dtoa_r+0x1120>
   8e030:	d8c00517 	ldw	r3,20(sp)
   8e034:	db000617 	ldw	r12,24(sp)
   8e038:	d8c01315 	stw	r3,76(sp)
   8e03c:	d9000b17 	ldw	r4,44(sp)
   8e040:	20038f26 	beq	r4,zero,8ee80 <_dtoa_r+0x1310>
   8e044:	60bfffc4 	addi	r2,r12,-1
   8e048:	100490fa 	slli	r2,r2,3
   8e04c:	00c002b4 	movhi	r3,10
   8e050:	18f15f04 	addi	r3,r3,-14980
   8e054:	1885883a 	add	r2,r3,r2
   8e058:	11800017 	ldw	r6,0(r2)
   8e05c:	11c00117 	ldw	r7,4(r2)
   8e060:	d8800717 	ldw	r2,28(sp)
   8e064:	0009883a 	mov	r4,zero
   8e068:	014ff834 	movhi	r5,16352
   8e06c:	db001615 	stw	r12,88(sp)
   8e070:	15c00044 	addi	r23,r2,1
   8e074:	00971500 	call	97150 <__divdf3>
   8e078:	800d883a 	mov	r6,r16
   8e07c:	880f883a 	mov	r7,r17
   8e080:	1009883a 	mov	r4,r2
   8e084:	180b883a 	mov	r5,r3
   8e088:	00983a80 	call	983a8 <__subdf3>
   8e08c:	d9401017 	ldw	r5,64(sp)
   8e090:	d9000f17 	ldw	r4,60(sp)
   8e094:	102b883a 	mov	r21,r2
   8e098:	d8c01215 	stw	r3,72(sp)
   8e09c:	0098ca40 	call	98ca4 <__fixdfsi>
   8e0a0:	1009883a 	mov	r4,r2
   8e0a4:	1029883a 	mov	r20,r2
   8e0a8:	0098d240 	call	98d24 <__floatsidf>
   8e0ac:	d9000f17 	ldw	r4,60(sp)
   8e0b0:	d9401017 	ldw	r5,64(sp)
   8e0b4:	100d883a 	mov	r6,r2
   8e0b8:	180f883a 	mov	r7,r3
   8e0bc:	00983a80 	call	983a8 <__subdf3>
   8e0c0:	1823883a 	mov	r17,r3
   8e0c4:	d8c00717 	ldw	r3,28(sp)
   8e0c8:	d9401217 	ldw	r5,72(sp)
   8e0cc:	a2000c04 	addi	r8,r20,48
   8e0d0:	1021883a 	mov	r16,r2
   8e0d4:	1a000005 	stb	r8,0(r3)
   8e0d8:	800d883a 	mov	r6,r16
   8e0dc:	880f883a 	mov	r7,r17
   8e0e0:	a809883a 	mov	r4,r21
   8e0e4:	4029883a 	mov	r20,r8
   8e0e8:	0097ac00 	call	97ac0 <__gedf2>
   8e0ec:	00841d16 	blt	zero,r2,8f164 <_dtoa_r+0x15f4>
   8e0f0:	800d883a 	mov	r6,r16
   8e0f4:	880f883a 	mov	r7,r17
   8e0f8:	0009883a 	mov	r4,zero
   8e0fc:	014ffc34 	movhi	r5,16368
   8e100:	00983a80 	call	983a8 <__subdf3>
   8e104:	d9401217 	ldw	r5,72(sp)
   8e108:	100d883a 	mov	r6,r2
   8e10c:	180f883a 	mov	r7,r3
   8e110:	a809883a 	mov	r4,r21
   8e114:	0097ac00 	call	97ac0 <__gedf2>
   8e118:	db001617 	ldw	r12,88(sp)
   8e11c:	00840e16 	blt	zero,r2,8f158 <_dtoa_r+0x15e8>
   8e120:	00800044 	movi	r2,1
   8e124:	13006b0e 	bge	r2,r12,8e2d4 <_dtoa_r+0x764>
   8e128:	d9000717 	ldw	r4,28(sp)
   8e12c:	dd800f15 	stw	r22,60(sp)
   8e130:	dcc01015 	stw	r19,64(sp)
   8e134:	2319883a 	add	r12,r4,r12
   8e138:	dcc01217 	ldw	r19,72(sp)
   8e13c:	602d883a 	mov	r22,r12
   8e140:	dc801215 	stw	r18,72(sp)
   8e144:	b825883a 	mov	r18,r23
   8e148:	00000906 	br	8e170 <_dtoa_r+0x600>
   8e14c:	00983a80 	call	983a8 <__subdf3>
   8e150:	a80d883a 	mov	r6,r21
   8e154:	980f883a 	mov	r7,r19
   8e158:	1009883a 	mov	r4,r2
   8e15c:	180b883a 	mov	r5,r3
   8e160:	0097b9c0 	call	97b9c <__ledf2>
   8e164:	1003e816 	blt	r2,zero,8f108 <_dtoa_r+0x1598>
   8e168:	b825883a 	mov	r18,r23
   8e16c:	bd83e926 	beq	r23,r22,8f114 <_dtoa_r+0x15a4>
   8e170:	a809883a 	mov	r4,r21
   8e174:	980b883a 	mov	r5,r19
   8e178:	000d883a 	mov	r6,zero
   8e17c:	01d00934 	movhi	r7,16420
   8e180:	0097c900 	call	97c90 <__muldf3>
   8e184:	000d883a 	mov	r6,zero
   8e188:	01d00934 	movhi	r7,16420
   8e18c:	8009883a 	mov	r4,r16
   8e190:	880b883a 	mov	r5,r17
   8e194:	102b883a 	mov	r21,r2
   8e198:	1827883a 	mov	r19,r3
   8e19c:	0097c900 	call	97c90 <__muldf3>
   8e1a0:	180b883a 	mov	r5,r3
   8e1a4:	1009883a 	mov	r4,r2
   8e1a8:	1821883a 	mov	r16,r3
   8e1ac:	1023883a 	mov	r17,r2
   8e1b0:	0098ca40 	call	98ca4 <__fixdfsi>
   8e1b4:	1009883a 	mov	r4,r2
   8e1b8:	1029883a 	mov	r20,r2
   8e1bc:	0098d240 	call	98d24 <__floatsidf>
   8e1c0:	8809883a 	mov	r4,r17
   8e1c4:	800b883a 	mov	r5,r16
   8e1c8:	100d883a 	mov	r6,r2
   8e1cc:	180f883a 	mov	r7,r3
   8e1d0:	00983a80 	call	983a8 <__subdf3>
   8e1d4:	a5000c04 	addi	r20,r20,48
   8e1d8:	a80d883a 	mov	r6,r21
   8e1dc:	980f883a 	mov	r7,r19
   8e1e0:	1009883a 	mov	r4,r2
   8e1e4:	180b883a 	mov	r5,r3
   8e1e8:	95000005 	stb	r20,0(r18)
   8e1ec:	1021883a 	mov	r16,r2
   8e1f0:	1823883a 	mov	r17,r3
   8e1f4:	0097b9c0 	call	97b9c <__ledf2>
   8e1f8:	bdc00044 	addi	r23,r23,1
   8e1fc:	800d883a 	mov	r6,r16
   8e200:	880f883a 	mov	r7,r17
   8e204:	0009883a 	mov	r4,zero
   8e208:	014ffc34 	movhi	r5,16368
   8e20c:	103fcf0e 	bge	r2,zero,8e14c <__alt_data_end+0xfffbe28c>
   8e210:	d8c01317 	ldw	r3,76(sp)
   8e214:	d8c00515 	stw	r3,20(sp)
   8e218:	d9400917 	ldw	r5,36(sp)
   8e21c:	e009883a 	mov	r4,fp
   8e220:	009116c0 	call	9116c <_Bfree>
   8e224:	d9000517 	ldw	r4,20(sp)
   8e228:	d9802317 	ldw	r6,140(sp)
   8e22c:	d9c02517 	ldw	r7,148(sp)
   8e230:	b8000005 	stb	zero,0(r23)
   8e234:	20800044 	addi	r2,r4,1
   8e238:	30800015 	stw	r2,0(r6)
   8e23c:	3802aa26 	beq	r7,zero,8ece8 <_dtoa_r+0x1178>
   8e240:	3dc00015 	stw	r23,0(r7)
   8e244:	d8800717 	ldw	r2,28(sp)
   8e248:	003e7906 	br	8dc30 <__alt_data_end+0xfffbdd70>
   8e24c:	00800434 	movhi	r2,16
   8e250:	10bfffc4 	addi	r2,r2,-1
   8e254:	88a2703a 	and	r17,r17,r2
   8e258:	883e851e 	bne	r17,zero,8dc70 <__alt_data_end+0xfffbddb0>
   8e25c:	008002b4 	movhi	r2,10
   8e260:	10b14104 	addi	r2,r2,-15100
   8e264:	003e8406 	br	8dc78 <__alt_data_end+0xfffbddb8>
   8e268:	10c00204 	addi	r3,r2,8
   8e26c:	003e8706 	br	8dc8c <__alt_data_end+0xfffbddcc>
   8e270:	01400434 	movhi	r5,16
   8e274:	297fffc4 	addi	r5,r5,-1
   8e278:	994a703a 	and	r5,r19,r5
   8e27c:	9009883a 	mov	r4,r18
   8e280:	843f0044 	addi	r16,r16,-1023
   8e284:	294ffc34 	orhi	r5,r5,16368
   8e288:	dd800217 	ldw	r22,8(sp)
   8e28c:	d8001115 	stw	zero,68(sp)
   8e290:	003ea506 	br	8dd28 <__alt_data_end+0xfffbde68>
   8e294:	008002b4 	movhi	r2,10
   8e298:	10b13004 	addi	r2,r2,-15168
   8e29c:	003e6406 	br	8dc30 <__alt_data_end+0xfffbdd70>
   8e2a0:	e0001115 	stw	zero,68(fp)
   8e2a4:	000b883a 	mov	r5,zero
   8e2a8:	e009883a 	mov	r4,fp
   8e2ac:	00910c40 	call	910c4 <_Balloc>
   8e2b0:	01bfffc4 	movi	r6,-1
   8e2b4:	01c00044 	movi	r7,1
   8e2b8:	d8800715 	stw	r2,28(sp)
   8e2bc:	d9800c15 	stw	r6,48(sp)
   8e2c0:	e0801015 	stw	r2,64(fp)
   8e2c4:	d8000315 	stw	zero,12(sp)
   8e2c8:	d9c00b15 	stw	r7,44(sp)
   8e2cc:	d9800615 	stw	r6,24(sp)
   8e2d0:	d8002215 	stw	zero,136(sp)
   8e2d4:	d8800117 	ldw	r2,4(sp)
   8e2d8:	10008916 	blt	r2,zero,8e500 <_dtoa_r+0x990>
   8e2dc:	d9000517 	ldw	r4,20(sp)
   8e2e0:	00c00384 	movi	r3,14
   8e2e4:	19008616 	blt	r3,r4,8e500 <_dtoa_r+0x990>
   8e2e8:	200490fa 	slli	r2,r4,3
   8e2ec:	00c002b4 	movhi	r3,10
   8e2f0:	d9802217 	ldw	r6,136(sp)
   8e2f4:	18f15f04 	addi	r3,r3,-14980
   8e2f8:	1885883a 	add	r2,r3,r2
   8e2fc:	14000017 	ldw	r16,0(r2)
   8e300:	14400117 	ldw	r17,4(r2)
   8e304:	30016316 	blt	r6,zero,8e894 <_dtoa_r+0xd24>
   8e308:	800d883a 	mov	r6,r16
   8e30c:	880f883a 	mov	r7,r17
   8e310:	9009883a 	mov	r4,r18
   8e314:	980b883a 	mov	r5,r19
   8e318:	00971500 	call	97150 <__divdf3>
   8e31c:	180b883a 	mov	r5,r3
   8e320:	1009883a 	mov	r4,r2
   8e324:	0098ca40 	call	98ca4 <__fixdfsi>
   8e328:	1009883a 	mov	r4,r2
   8e32c:	102b883a 	mov	r21,r2
   8e330:	0098d240 	call	98d24 <__floatsidf>
   8e334:	800d883a 	mov	r6,r16
   8e338:	880f883a 	mov	r7,r17
   8e33c:	1009883a 	mov	r4,r2
   8e340:	180b883a 	mov	r5,r3
   8e344:	0097c900 	call	97c90 <__muldf3>
   8e348:	100d883a 	mov	r6,r2
   8e34c:	180f883a 	mov	r7,r3
   8e350:	9009883a 	mov	r4,r18
   8e354:	980b883a 	mov	r5,r19
   8e358:	00983a80 	call	983a8 <__subdf3>
   8e35c:	d9c00717 	ldw	r7,28(sp)
   8e360:	1009883a 	mov	r4,r2
   8e364:	a8800c04 	addi	r2,r21,48
   8e368:	38800005 	stb	r2,0(r7)
   8e36c:	3dc00044 	addi	r23,r7,1
   8e370:	d9c00617 	ldw	r7,24(sp)
   8e374:	01800044 	movi	r6,1
   8e378:	180b883a 	mov	r5,r3
   8e37c:	2005883a 	mov	r2,r4
   8e380:	39803826 	beq	r7,r6,8e464 <_dtoa_r+0x8f4>
   8e384:	000d883a 	mov	r6,zero
   8e388:	01d00934 	movhi	r7,16420
   8e38c:	0097c900 	call	97c90 <__muldf3>
   8e390:	000d883a 	mov	r6,zero
   8e394:	000f883a 	mov	r7,zero
   8e398:	1009883a 	mov	r4,r2
   8e39c:	180b883a 	mov	r5,r3
   8e3a0:	1025883a 	mov	r18,r2
   8e3a4:	1827883a 	mov	r19,r3
   8e3a8:	0097a380 	call	97a38 <__eqdf2>
   8e3ac:	103f9a26 	beq	r2,zero,8e218 <__alt_data_end+0xfffbe358>
   8e3b0:	d9c00617 	ldw	r7,24(sp)
   8e3b4:	d8c00717 	ldw	r3,28(sp)
   8e3b8:	b829883a 	mov	r20,r23
   8e3bc:	38bfffc4 	addi	r2,r7,-1
   8e3c0:	18ad883a 	add	r22,r3,r2
   8e3c4:	00000a06 	br	8e3f0 <_dtoa_r+0x880>
   8e3c8:	0097c900 	call	97c90 <__muldf3>
   8e3cc:	000d883a 	mov	r6,zero
   8e3d0:	000f883a 	mov	r7,zero
   8e3d4:	1009883a 	mov	r4,r2
   8e3d8:	180b883a 	mov	r5,r3
   8e3dc:	1025883a 	mov	r18,r2
   8e3e0:	1827883a 	mov	r19,r3
   8e3e4:	b829883a 	mov	r20,r23
   8e3e8:	0097a380 	call	97a38 <__eqdf2>
   8e3ec:	103f8a26 	beq	r2,zero,8e218 <__alt_data_end+0xfffbe358>
   8e3f0:	800d883a 	mov	r6,r16
   8e3f4:	880f883a 	mov	r7,r17
   8e3f8:	9009883a 	mov	r4,r18
   8e3fc:	980b883a 	mov	r5,r19
   8e400:	00971500 	call	97150 <__divdf3>
   8e404:	180b883a 	mov	r5,r3
   8e408:	1009883a 	mov	r4,r2
   8e40c:	0098ca40 	call	98ca4 <__fixdfsi>
   8e410:	1009883a 	mov	r4,r2
   8e414:	102b883a 	mov	r21,r2
   8e418:	0098d240 	call	98d24 <__floatsidf>
   8e41c:	800d883a 	mov	r6,r16
   8e420:	880f883a 	mov	r7,r17
   8e424:	1009883a 	mov	r4,r2
   8e428:	180b883a 	mov	r5,r3
   8e42c:	0097c900 	call	97c90 <__muldf3>
   8e430:	100d883a 	mov	r6,r2
   8e434:	180f883a 	mov	r7,r3
   8e438:	9009883a 	mov	r4,r18
   8e43c:	980b883a 	mov	r5,r19
   8e440:	00983a80 	call	983a8 <__subdf3>
   8e444:	aa000c04 	addi	r8,r21,48
   8e448:	a2000005 	stb	r8,0(r20)
   8e44c:	000d883a 	mov	r6,zero
   8e450:	01d00934 	movhi	r7,16420
   8e454:	1009883a 	mov	r4,r2
   8e458:	180b883a 	mov	r5,r3
   8e45c:	a5c00044 	addi	r23,r20,1
   8e460:	b53fd91e 	bne	r22,r20,8e3c8 <__alt_data_end+0xfffbe508>
   8e464:	100d883a 	mov	r6,r2
   8e468:	180f883a 	mov	r7,r3
   8e46c:	1009883a 	mov	r4,r2
   8e470:	180b883a 	mov	r5,r3
   8e474:	00968a40 	call	968a4 <__adddf3>
   8e478:	100d883a 	mov	r6,r2
   8e47c:	180f883a 	mov	r7,r3
   8e480:	8009883a 	mov	r4,r16
   8e484:	880b883a 	mov	r5,r17
   8e488:	1027883a 	mov	r19,r2
   8e48c:	1825883a 	mov	r18,r3
   8e490:	0097b9c0 	call	97b9c <__ledf2>
   8e494:	10000816 	blt	r2,zero,8e4b8 <_dtoa_r+0x948>
   8e498:	980d883a 	mov	r6,r19
   8e49c:	900f883a 	mov	r7,r18
   8e4a0:	8009883a 	mov	r4,r16
   8e4a4:	880b883a 	mov	r5,r17
   8e4a8:	0097a380 	call	97a38 <__eqdf2>
   8e4ac:	103f5a1e 	bne	r2,zero,8e218 <__alt_data_end+0xfffbe358>
   8e4b0:	ad40004c 	andi	r21,r21,1
   8e4b4:	a83f5826 	beq	r21,zero,8e218 <__alt_data_end+0xfffbe358>
   8e4b8:	bd3fffc3 	ldbu	r20,-1(r23)
   8e4bc:	b8bfffc4 	addi	r2,r23,-1
   8e4c0:	1007883a 	mov	r3,r2
   8e4c4:	01400e44 	movi	r5,57
   8e4c8:	d9800717 	ldw	r6,28(sp)
   8e4cc:	00000506 	br	8e4e4 <_dtoa_r+0x974>
   8e4d0:	18ffffc4 	addi	r3,r3,-1
   8e4d4:	11824726 	beq	r2,r6,8edf4 <_dtoa_r+0x1284>
   8e4d8:	1d000003 	ldbu	r20,0(r3)
   8e4dc:	102f883a 	mov	r23,r2
   8e4e0:	10bfffc4 	addi	r2,r2,-1
   8e4e4:	a1003fcc 	andi	r4,r20,255
   8e4e8:	2100201c 	xori	r4,r4,128
   8e4ec:	213fe004 	addi	r4,r4,-128
   8e4f0:	217ff726 	beq	r4,r5,8e4d0 <__alt_data_end+0xfffbe610>
   8e4f4:	a2000044 	addi	r8,r20,1
   8e4f8:	12000005 	stb	r8,0(r2)
   8e4fc:	003f4606 	br	8e218 <__alt_data_end+0xfffbe358>
   8e500:	d9000b17 	ldw	r4,44(sp)
   8e504:	2000c826 	beq	r4,zero,8e828 <_dtoa_r+0xcb8>
   8e508:	d9800317 	ldw	r6,12(sp)
   8e50c:	00c00044 	movi	r3,1
   8e510:	1980f90e 	bge	r3,r6,8e8f8 <_dtoa_r+0xd88>
   8e514:	d8800617 	ldw	r2,24(sp)
   8e518:	d8c00a17 	ldw	r3,40(sp)
   8e51c:	157fffc4 	addi	r21,r2,-1
   8e520:	1d41f316 	blt	r3,r21,8ecf0 <_dtoa_r+0x1180>
   8e524:	1d6bc83a 	sub	r21,r3,r21
   8e528:	d9c00617 	ldw	r7,24(sp)
   8e52c:	3802aa16 	blt	r7,zero,8efd8 <_dtoa_r+0x1468>
   8e530:	dd000817 	ldw	r20,32(sp)
   8e534:	d8800617 	ldw	r2,24(sp)
   8e538:	d8c00817 	ldw	r3,32(sp)
   8e53c:	01400044 	movi	r5,1
   8e540:	e009883a 	mov	r4,fp
   8e544:	1887883a 	add	r3,r3,r2
   8e548:	d8c00815 	stw	r3,32(sp)
   8e54c:	b0ad883a 	add	r22,r22,r2
   8e550:	00914d00 	call	914d0 <__i2b>
   8e554:	1023883a 	mov	r17,r2
   8e558:	a0000826 	beq	r20,zero,8e57c <_dtoa_r+0xa0c>
   8e55c:	0580070e 	bge	zero,r22,8e57c <_dtoa_r+0xa0c>
   8e560:	a005883a 	mov	r2,r20
   8e564:	b500b916 	blt	r22,r20,8e84c <_dtoa_r+0xcdc>
   8e568:	d9000817 	ldw	r4,32(sp)
   8e56c:	a0a9c83a 	sub	r20,r20,r2
   8e570:	b0adc83a 	sub	r22,r22,r2
   8e574:	2089c83a 	sub	r4,r4,r2
   8e578:	d9000815 	stw	r4,32(sp)
   8e57c:	d9800a17 	ldw	r6,40(sp)
   8e580:	0181810e 	bge	zero,r6,8eb88 <_dtoa_r+0x1018>
   8e584:	d9c00b17 	ldw	r7,44(sp)
   8e588:	3800b326 	beq	r7,zero,8e858 <_dtoa_r+0xce8>
   8e58c:	a800b226 	beq	r21,zero,8e858 <_dtoa_r+0xce8>
   8e590:	880b883a 	mov	r5,r17
   8e594:	a80d883a 	mov	r6,r21
   8e598:	e009883a 	mov	r4,fp
   8e59c:	00917040 	call	91704 <__pow5mult>
   8e5a0:	d9800917 	ldw	r6,36(sp)
   8e5a4:	100b883a 	mov	r5,r2
   8e5a8:	e009883a 	mov	r4,fp
   8e5ac:	1023883a 	mov	r17,r2
   8e5b0:	009150c0 	call	9150c <__multiply>
   8e5b4:	1021883a 	mov	r16,r2
   8e5b8:	d8800a17 	ldw	r2,40(sp)
   8e5bc:	d9400917 	ldw	r5,36(sp)
   8e5c0:	e009883a 	mov	r4,fp
   8e5c4:	1545c83a 	sub	r2,r2,r21
   8e5c8:	d8800a15 	stw	r2,40(sp)
   8e5cc:	009116c0 	call	9116c <_Bfree>
   8e5d0:	d8c00a17 	ldw	r3,40(sp)
   8e5d4:	18009f1e 	bne	r3,zero,8e854 <_dtoa_r+0xce4>
   8e5d8:	05c00044 	movi	r23,1
   8e5dc:	e009883a 	mov	r4,fp
   8e5e0:	b80b883a 	mov	r5,r23
   8e5e4:	00914d00 	call	914d0 <__i2b>
   8e5e8:	d9000d17 	ldw	r4,52(sp)
   8e5ec:	102b883a 	mov	r21,r2
   8e5f0:	2000ce26 	beq	r4,zero,8e92c <_dtoa_r+0xdbc>
   8e5f4:	200d883a 	mov	r6,r4
   8e5f8:	100b883a 	mov	r5,r2
   8e5fc:	e009883a 	mov	r4,fp
   8e600:	00917040 	call	91704 <__pow5mult>
   8e604:	d9800317 	ldw	r6,12(sp)
   8e608:	102b883a 	mov	r21,r2
   8e60c:	b981810e 	bge	r23,r6,8ec14 <_dtoa_r+0x10a4>
   8e610:	0027883a 	mov	r19,zero
   8e614:	a8800417 	ldw	r2,16(r21)
   8e618:	05c00804 	movi	r23,32
   8e61c:	10800104 	addi	r2,r2,4
   8e620:	1085883a 	add	r2,r2,r2
   8e624:	1085883a 	add	r2,r2,r2
   8e628:	a885883a 	add	r2,r21,r2
   8e62c:	11000017 	ldw	r4,0(r2)
   8e630:	00913b80 	call	913b8 <__hi0bits>
   8e634:	b885c83a 	sub	r2,r23,r2
   8e638:	1585883a 	add	r2,r2,r22
   8e63c:	108007cc 	andi	r2,r2,31
   8e640:	1000b326 	beq	r2,zero,8e910 <_dtoa_r+0xda0>
   8e644:	00c00804 	movi	r3,32
   8e648:	1887c83a 	sub	r3,r3,r2
   8e64c:	01000104 	movi	r4,4
   8e650:	20c2cd0e 	bge	r4,r3,8f188 <_dtoa_r+0x1618>
   8e654:	00c00704 	movi	r3,28
   8e658:	1885c83a 	sub	r2,r3,r2
   8e65c:	d8c00817 	ldw	r3,32(sp)
   8e660:	a0a9883a 	add	r20,r20,r2
   8e664:	b0ad883a 	add	r22,r22,r2
   8e668:	1887883a 	add	r3,r3,r2
   8e66c:	d8c00815 	stw	r3,32(sp)
   8e670:	d9800817 	ldw	r6,32(sp)
   8e674:	0180040e 	bge	zero,r6,8e688 <_dtoa_r+0xb18>
   8e678:	800b883a 	mov	r5,r16
   8e67c:	e009883a 	mov	r4,fp
   8e680:	00918440 	call	91844 <__lshift>
   8e684:	1021883a 	mov	r16,r2
   8e688:	0580050e 	bge	zero,r22,8e6a0 <_dtoa_r+0xb30>
   8e68c:	a80b883a 	mov	r5,r21
   8e690:	b00d883a 	mov	r6,r22
   8e694:	e009883a 	mov	r4,fp
   8e698:	00918440 	call	91844 <__lshift>
   8e69c:	102b883a 	mov	r21,r2
   8e6a0:	d9c00e17 	ldw	r7,56(sp)
   8e6a4:	3801211e 	bne	r7,zero,8eb2c <_dtoa_r+0xfbc>
   8e6a8:	d9800617 	ldw	r6,24(sp)
   8e6ac:	0181380e 	bge	zero,r6,8eb90 <_dtoa_r+0x1020>
   8e6b0:	d8c00b17 	ldw	r3,44(sp)
   8e6b4:	1800ab1e 	bne	r3,zero,8e964 <_dtoa_r+0xdf4>
   8e6b8:	dc800717 	ldw	r18,28(sp)
   8e6bc:	dcc00617 	ldw	r19,24(sp)
   8e6c0:	9029883a 	mov	r20,r18
   8e6c4:	00000206 	br	8e6d0 <_dtoa_r+0xb60>
   8e6c8:	00911940 	call	91194 <__multadd>
   8e6cc:	1021883a 	mov	r16,r2
   8e6d0:	a80b883a 	mov	r5,r21
   8e6d4:	8009883a 	mov	r4,r16
   8e6d8:	008d9700 	call	8d970 <quorem>
   8e6dc:	10800c04 	addi	r2,r2,48
   8e6e0:	90800005 	stb	r2,0(r18)
   8e6e4:	94800044 	addi	r18,r18,1
   8e6e8:	9507c83a 	sub	r3,r18,r20
   8e6ec:	000f883a 	mov	r7,zero
   8e6f0:	01800284 	movi	r6,10
   8e6f4:	800b883a 	mov	r5,r16
   8e6f8:	e009883a 	mov	r4,fp
   8e6fc:	1cfff216 	blt	r3,r19,8e6c8 <__alt_data_end+0xfffbe808>
   8e700:	1011883a 	mov	r8,r2
   8e704:	d8800617 	ldw	r2,24(sp)
   8e708:	0082370e 	bge	zero,r2,8efe8 <_dtoa_r+0x1478>
   8e70c:	d9000717 	ldw	r4,28(sp)
   8e710:	0025883a 	mov	r18,zero
   8e714:	20af883a 	add	r23,r4,r2
   8e718:	01800044 	movi	r6,1
   8e71c:	800b883a 	mov	r5,r16
   8e720:	e009883a 	mov	r4,fp
   8e724:	da001715 	stw	r8,92(sp)
   8e728:	00918440 	call	91844 <__lshift>
   8e72c:	a80b883a 	mov	r5,r21
   8e730:	1009883a 	mov	r4,r2
   8e734:	d8800915 	stw	r2,36(sp)
   8e738:	009198c0 	call	9198c <__mcmp>
   8e73c:	da001717 	ldw	r8,92(sp)
   8e740:	0081800e 	bge	zero,r2,8ed44 <_dtoa_r+0x11d4>
   8e744:	b93fffc3 	ldbu	r4,-1(r23)
   8e748:	b8bfffc4 	addi	r2,r23,-1
   8e74c:	1007883a 	mov	r3,r2
   8e750:	01800e44 	movi	r6,57
   8e754:	d9c00717 	ldw	r7,28(sp)
   8e758:	00000506 	br	8e770 <_dtoa_r+0xc00>
   8e75c:	18ffffc4 	addi	r3,r3,-1
   8e760:	11c12326 	beq	r2,r7,8ebf0 <_dtoa_r+0x1080>
   8e764:	19000003 	ldbu	r4,0(r3)
   8e768:	102f883a 	mov	r23,r2
   8e76c:	10bfffc4 	addi	r2,r2,-1
   8e770:	21403fcc 	andi	r5,r4,255
   8e774:	2940201c 	xori	r5,r5,128
   8e778:	297fe004 	addi	r5,r5,-128
   8e77c:	29bff726 	beq	r5,r6,8e75c <__alt_data_end+0xfffbe89c>
   8e780:	21000044 	addi	r4,r4,1
   8e784:	11000005 	stb	r4,0(r2)
   8e788:	a80b883a 	mov	r5,r21
   8e78c:	e009883a 	mov	r4,fp
   8e790:	009116c0 	call	9116c <_Bfree>
   8e794:	883ea026 	beq	r17,zero,8e218 <__alt_data_end+0xfffbe358>
   8e798:	90000426 	beq	r18,zero,8e7ac <_dtoa_r+0xc3c>
   8e79c:	94400326 	beq	r18,r17,8e7ac <_dtoa_r+0xc3c>
   8e7a0:	900b883a 	mov	r5,r18
   8e7a4:	e009883a 	mov	r4,fp
   8e7a8:	009116c0 	call	9116c <_Bfree>
   8e7ac:	880b883a 	mov	r5,r17
   8e7b0:	e009883a 	mov	r4,fp
   8e7b4:	009116c0 	call	9116c <_Bfree>
   8e7b8:	003e9706 	br	8e218 <__alt_data_end+0xfffbe358>
   8e7bc:	01800044 	movi	r6,1
   8e7c0:	d9800e15 	stw	r6,56(sp)
   8e7c4:	003d9606 	br	8de20 <__alt_data_end+0xfffbdf60>
   8e7c8:	d8800817 	ldw	r2,32(sp)
   8e7cc:	d8c00517 	ldw	r3,20(sp)
   8e7d0:	d8000d15 	stw	zero,52(sp)
   8e7d4:	10c5c83a 	sub	r2,r2,r3
   8e7d8:	00c9c83a 	sub	r4,zero,r3
   8e7dc:	d8800815 	stw	r2,32(sp)
   8e7e0:	d9000a15 	stw	r4,40(sp)
   8e7e4:	003d9706 	br	8de44 <__alt_data_end+0xfffbdf84>
   8e7e8:	05adc83a 	sub	r22,zero,r22
   8e7ec:	dd800815 	stw	r22,32(sp)
   8e7f0:	002d883a 	mov	r22,zero
   8e7f4:	003d8e06 	br	8de30 <__alt_data_end+0xfffbdf70>
   8e7f8:	d9000517 	ldw	r4,20(sp)
   8e7fc:	0098d240 	call	98d24 <__floatsidf>
   8e800:	100d883a 	mov	r6,r2
   8e804:	180f883a 	mov	r7,r3
   8e808:	a009883a 	mov	r4,r20
   8e80c:	880b883a 	mov	r5,r17
   8e810:	0097a380 	call	97a38 <__eqdf2>
   8e814:	103d7126 	beq	r2,zero,8dddc <__alt_data_end+0xfffbdf1c>
   8e818:	d9c00517 	ldw	r7,20(sp)
   8e81c:	39ffffc4 	addi	r7,r7,-1
   8e820:	d9c00515 	stw	r7,20(sp)
   8e824:	003d6d06 	br	8dddc <__alt_data_end+0xfffbdf1c>
   8e828:	dd400a17 	ldw	r21,40(sp)
   8e82c:	dd000817 	ldw	r20,32(sp)
   8e830:	0023883a 	mov	r17,zero
   8e834:	003f4806 	br	8e558 <__alt_data_end+0xfffbe698>
   8e838:	10e3c83a 	sub	r17,r2,r3
   8e83c:	9448983a 	sll	r4,r18,r17
   8e840:	003d3206 	br	8dd0c <__alt_data_end+0xfffbde4c>
   8e844:	d8000e15 	stw	zero,56(sp)
   8e848:	003d7506 	br	8de20 <__alt_data_end+0xfffbdf60>
   8e84c:	b005883a 	mov	r2,r22
   8e850:	003f4506 	br	8e568 <__alt_data_end+0xfffbe6a8>
   8e854:	dc000915 	stw	r16,36(sp)
   8e858:	d9800a17 	ldw	r6,40(sp)
   8e85c:	d9400917 	ldw	r5,36(sp)
   8e860:	e009883a 	mov	r4,fp
   8e864:	00917040 	call	91704 <__pow5mult>
   8e868:	1021883a 	mov	r16,r2
   8e86c:	003f5a06 	br	8e5d8 <__alt_data_end+0xfffbe718>
   8e870:	01c00044 	movi	r7,1
   8e874:	d9c00b15 	stw	r7,44(sp)
   8e878:	d8802217 	ldw	r2,136(sp)
   8e87c:	0081280e 	bge	zero,r2,8ed20 <_dtoa_r+0x11b0>
   8e880:	100d883a 	mov	r6,r2
   8e884:	1021883a 	mov	r16,r2
   8e888:	d8800c15 	stw	r2,48(sp)
   8e88c:	d8800615 	stw	r2,24(sp)
   8e890:	003d8806 	br	8deb4 <__alt_data_end+0xfffbdff4>
   8e894:	d8800617 	ldw	r2,24(sp)
   8e898:	00be9b16 	blt	zero,r2,8e308 <__alt_data_end+0xfffbe448>
   8e89c:	10010f1e 	bne	r2,zero,8ecdc <_dtoa_r+0x116c>
   8e8a0:	880b883a 	mov	r5,r17
   8e8a4:	000d883a 	mov	r6,zero
   8e8a8:	01d00534 	movhi	r7,16404
   8e8ac:	8009883a 	mov	r4,r16
   8e8b0:	0097c900 	call	97c90 <__muldf3>
   8e8b4:	900d883a 	mov	r6,r18
   8e8b8:	980f883a 	mov	r7,r19
   8e8bc:	1009883a 	mov	r4,r2
   8e8c0:	180b883a 	mov	r5,r3
   8e8c4:	0097ac00 	call	97ac0 <__gedf2>
   8e8c8:	002b883a 	mov	r21,zero
   8e8cc:	0023883a 	mov	r17,zero
   8e8d0:	1000bf16 	blt	r2,zero,8ebd0 <_dtoa_r+0x1060>
   8e8d4:	d9802217 	ldw	r6,136(sp)
   8e8d8:	ddc00717 	ldw	r23,28(sp)
   8e8dc:	018c303a 	nor	r6,zero,r6
   8e8e0:	d9800515 	stw	r6,20(sp)
   8e8e4:	a80b883a 	mov	r5,r21
   8e8e8:	e009883a 	mov	r4,fp
   8e8ec:	009116c0 	call	9116c <_Bfree>
   8e8f0:	883e4926 	beq	r17,zero,8e218 <__alt_data_end+0xfffbe358>
   8e8f4:	003fad06 	br	8e7ac <__alt_data_end+0xfffbe8ec>
   8e8f8:	d9c01117 	ldw	r7,68(sp)
   8e8fc:	3801bc26 	beq	r7,zero,8eff0 <_dtoa_r+0x1480>
   8e900:	10810cc4 	addi	r2,r2,1075
   8e904:	dd400a17 	ldw	r21,40(sp)
   8e908:	dd000817 	ldw	r20,32(sp)
   8e90c:	003f0a06 	br	8e538 <__alt_data_end+0xfffbe678>
   8e910:	00800704 	movi	r2,28
   8e914:	d9000817 	ldw	r4,32(sp)
   8e918:	a0a9883a 	add	r20,r20,r2
   8e91c:	b0ad883a 	add	r22,r22,r2
   8e920:	2089883a 	add	r4,r4,r2
   8e924:	d9000815 	stw	r4,32(sp)
   8e928:	003f5106 	br	8e670 <__alt_data_end+0xfffbe7b0>
   8e92c:	d8c00317 	ldw	r3,12(sp)
   8e930:	b8c1fc0e 	bge	r23,r3,8f124 <_dtoa_r+0x15b4>
   8e934:	0027883a 	mov	r19,zero
   8e938:	b805883a 	mov	r2,r23
   8e93c:	003f3e06 	br	8e638 <__alt_data_end+0xfffbe778>
   8e940:	880b883a 	mov	r5,r17
   8e944:	e009883a 	mov	r4,fp
   8e948:	000f883a 	mov	r7,zero
   8e94c:	01800284 	movi	r6,10
   8e950:	00911940 	call	91194 <__multadd>
   8e954:	d9000c17 	ldw	r4,48(sp)
   8e958:	1023883a 	mov	r17,r2
   8e95c:	0102040e 	bge	zero,r4,8f170 <_dtoa_r+0x1600>
   8e960:	d9000615 	stw	r4,24(sp)
   8e964:	0500050e 	bge	zero,r20,8e97c <_dtoa_r+0xe0c>
   8e968:	880b883a 	mov	r5,r17
   8e96c:	a00d883a 	mov	r6,r20
   8e970:	e009883a 	mov	r4,fp
   8e974:	00918440 	call	91844 <__lshift>
   8e978:	1023883a 	mov	r17,r2
   8e97c:	9801241e 	bne	r19,zero,8ee10 <_dtoa_r+0x12a0>
   8e980:	8829883a 	mov	r20,r17
   8e984:	d9000617 	ldw	r4,24(sp)
   8e988:	dcc00717 	ldw	r19,28(sp)
   8e98c:	9480004c 	andi	r18,r18,1
   8e990:	20bfffc4 	addi	r2,r4,-1
   8e994:	9885883a 	add	r2,r19,r2
   8e998:	d8800415 	stw	r2,16(sp)
   8e99c:	dc800615 	stw	r18,24(sp)
   8e9a0:	a80b883a 	mov	r5,r21
   8e9a4:	8009883a 	mov	r4,r16
   8e9a8:	008d9700 	call	8d970 <quorem>
   8e9ac:	880b883a 	mov	r5,r17
   8e9b0:	8009883a 	mov	r4,r16
   8e9b4:	102f883a 	mov	r23,r2
   8e9b8:	009198c0 	call	9198c <__mcmp>
   8e9bc:	a80b883a 	mov	r5,r21
   8e9c0:	a00d883a 	mov	r6,r20
   8e9c4:	e009883a 	mov	r4,fp
   8e9c8:	102d883a 	mov	r22,r2
   8e9cc:	00919ec0 	call	919ec <__mdiff>
   8e9d0:	1007883a 	mov	r3,r2
   8e9d4:	10800317 	ldw	r2,12(r2)
   8e9d8:	bc800c04 	addi	r18,r23,48
   8e9dc:	180b883a 	mov	r5,r3
   8e9e0:	10004e1e 	bne	r2,zero,8eb1c <_dtoa_r+0xfac>
   8e9e4:	8009883a 	mov	r4,r16
   8e9e8:	d8c01615 	stw	r3,88(sp)
   8e9ec:	009198c0 	call	9198c <__mcmp>
   8e9f0:	d8c01617 	ldw	r3,88(sp)
   8e9f4:	e009883a 	mov	r4,fp
   8e9f8:	d8801615 	stw	r2,88(sp)
   8e9fc:	180b883a 	mov	r5,r3
   8ea00:	009116c0 	call	9116c <_Bfree>
   8ea04:	d8801617 	ldw	r2,88(sp)
   8ea08:	1000041e 	bne	r2,zero,8ea1c <_dtoa_r+0xeac>
   8ea0c:	d9800317 	ldw	r6,12(sp)
   8ea10:	3000021e 	bne	r6,zero,8ea1c <_dtoa_r+0xeac>
   8ea14:	d8c00617 	ldw	r3,24(sp)
   8ea18:	18003726 	beq	r3,zero,8eaf8 <_dtoa_r+0xf88>
   8ea1c:	b0002016 	blt	r22,zero,8eaa0 <_dtoa_r+0xf30>
   8ea20:	b000041e 	bne	r22,zero,8ea34 <_dtoa_r+0xec4>
   8ea24:	d9000317 	ldw	r4,12(sp)
   8ea28:	2000021e 	bne	r4,zero,8ea34 <_dtoa_r+0xec4>
   8ea2c:	d8c00617 	ldw	r3,24(sp)
   8ea30:	18001b26 	beq	r3,zero,8eaa0 <_dtoa_r+0xf30>
   8ea34:	00810716 	blt	zero,r2,8ee54 <_dtoa_r+0x12e4>
   8ea38:	d8c00417 	ldw	r3,16(sp)
   8ea3c:	9d800044 	addi	r22,r19,1
   8ea40:	9c800005 	stb	r18,0(r19)
   8ea44:	b02f883a 	mov	r23,r22
   8ea48:	98c10626 	beq	r19,r3,8ee64 <_dtoa_r+0x12f4>
   8ea4c:	800b883a 	mov	r5,r16
   8ea50:	000f883a 	mov	r7,zero
   8ea54:	01800284 	movi	r6,10
   8ea58:	e009883a 	mov	r4,fp
   8ea5c:	00911940 	call	91194 <__multadd>
   8ea60:	1021883a 	mov	r16,r2
   8ea64:	000f883a 	mov	r7,zero
   8ea68:	01800284 	movi	r6,10
   8ea6c:	880b883a 	mov	r5,r17
   8ea70:	e009883a 	mov	r4,fp
   8ea74:	8d002526 	beq	r17,r20,8eb0c <_dtoa_r+0xf9c>
   8ea78:	00911940 	call	91194 <__multadd>
   8ea7c:	a00b883a 	mov	r5,r20
   8ea80:	000f883a 	mov	r7,zero
   8ea84:	01800284 	movi	r6,10
   8ea88:	e009883a 	mov	r4,fp
   8ea8c:	1023883a 	mov	r17,r2
   8ea90:	00911940 	call	91194 <__multadd>
   8ea94:	1029883a 	mov	r20,r2
   8ea98:	b027883a 	mov	r19,r22
   8ea9c:	003fc006 	br	8e9a0 <__alt_data_end+0xfffbeae0>
   8eaa0:	9011883a 	mov	r8,r18
   8eaa4:	00800e0e 	bge	zero,r2,8eae0 <_dtoa_r+0xf70>
   8eaa8:	800b883a 	mov	r5,r16
   8eaac:	01800044 	movi	r6,1
   8eab0:	e009883a 	mov	r4,fp
   8eab4:	da001715 	stw	r8,92(sp)
   8eab8:	00918440 	call	91844 <__lshift>
   8eabc:	a80b883a 	mov	r5,r21
   8eac0:	1009883a 	mov	r4,r2
   8eac4:	1021883a 	mov	r16,r2
   8eac8:	009198c0 	call	9198c <__mcmp>
   8eacc:	da001717 	ldw	r8,92(sp)
   8ead0:	0081960e 	bge	zero,r2,8f12c <_dtoa_r+0x15bc>
   8ead4:	00800e44 	movi	r2,57
   8ead8:	40817026 	beq	r8,r2,8f09c <_dtoa_r+0x152c>
   8eadc:	ba000c44 	addi	r8,r23,49
   8eae0:	8825883a 	mov	r18,r17
   8eae4:	9dc00044 	addi	r23,r19,1
   8eae8:	9a000005 	stb	r8,0(r19)
   8eaec:	a023883a 	mov	r17,r20
   8eaf0:	dc000915 	stw	r16,36(sp)
   8eaf4:	003f2406 	br	8e788 <__alt_data_end+0xfffbe8c8>
   8eaf8:	00800e44 	movi	r2,57
   8eafc:	9011883a 	mov	r8,r18
   8eb00:	90816626 	beq	r18,r2,8f09c <_dtoa_r+0x152c>
   8eb04:	05bff516 	blt	zero,r22,8eadc <__alt_data_end+0xfffbec1c>
   8eb08:	003ff506 	br	8eae0 <__alt_data_end+0xfffbec20>
   8eb0c:	00911940 	call	91194 <__multadd>
   8eb10:	1023883a 	mov	r17,r2
   8eb14:	1029883a 	mov	r20,r2
   8eb18:	003fdf06 	br	8ea98 <__alt_data_end+0xfffbebd8>
   8eb1c:	e009883a 	mov	r4,fp
   8eb20:	009116c0 	call	9116c <_Bfree>
   8eb24:	00800044 	movi	r2,1
   8eb28:	003fbc06 	br	8ea1c <__alt_data_end+0xfffbeb5c>
   8eb2c:	a80b883a 	mov	r5,r21
   8eb30:	8009883a 	mov	r4,r16
   8eb34:	009198c0 	call	9198c <__mcmp>
   8eb38:	103edb0e 	bge	r2,zero,8e6a8 <__alt_data_end+0xfffbe7e8>
   8eb3c:	800b883a 	mov	r5,r16
   8eb40:	000f883a 	mov	r7,zero
   8eb44:	01800284 	movi	r6,10
   8eb48:	e009883a 	mov	r4,fp
   8eb4c:	00911940 	call	91194 <__multadd>
   8eb50:	1021883a 	mov	r16,r2
   8eb54:	d8800517 	ldw	r2,20(sp)
   8eb58:	d8c00b17 	ldw	r3,44(sp)
   8eb5c:	10bfffc4 	addi	r2,r2,-1
   8eb60:	d8800515 	stw	r2,20(sp)
   8eb64:	183f761e 	bne	r3,zero,8e940 <__alt_data_end+0xfffbea80>
   8eb68:	d9000c17 	ldw	r4,48(sp)
   8eb6c:	0101730e 	bge	zero,r4,8f13c <_dtoa_r+0x15cc>
   8eb70:	d9000615 	stw	r4,24(sp)
   8eb74:	003ed006 	br	8e6b8 <__alt_data_end+0xfffbe7f8>
   8eb78:	00800084 	movi	r2,2
   8eb7c:	3081861e 	bne	r6,r2,8f198 <_dtoa_r+0x1628>
   8eb80:	d8000b15 	stw	zero,44(sp)
   8eb84:	003f3c06 	br	8e878 <__alt_data_end+0xfffbe9b8>
   8eb88:	dc000917 	ldw	r16,36(sp)
   8eb8c:	003e9206 	br	8e5d8 <__alt_data_end+0xfffbe718>
   8eb90:	d9c00317 	ldw	r7,12(sp)
   8eb94:	00800084 	movi	r2,2
   8eb98:	11fec50e 	bge	r2,r7,8e6b0 <__alt_data_end+0xfffbe7f0>
   8eb9c:	d9000617 	ldw	r4,24(sp)
   8eba0:	20013c1e 	bne	r4,zero,8f094 <_dtoa_r+0x1524>
   8eba4:	a80b883a 	mov	r5,r21
   8eba8:	000f883a 	mov	r7,zero
   8ebac:	01800144 	movi	r6,5
   8ebb0:	e009883a 	mov	r4,fp
   8ebb4:	00911940 	call	91194 <__multadd>
   8ebb8:	100b883a 	mov	r5,r2
   8ebbc:	8009883a 	mov	r4,r16
   8ebc0:	102b883a 	mov	r21,r2
   8ebc4:	009198c0 	call	9198c <__mcmp>
   8ebc8:	dc000915 	stw	r16,36(sp)
   8ebcc:	00bf410e 	bge	zero,r2,8e8d4 <__alt_data_end+0xfffbea14>
   8ebd0:	d9c00717 	ldw	r7,28(sp)
   8ebd4:	00800c44 	movi	r2,49
   8ebd8:	38800005 	stb	r2,0(r7)
   8ebdc:	d8800517 	ldw	r2,20(sp)
   8ebe0:	3dc00044 	addi	r23,r7,1
   8ebe4:	10800044 	addi	r2,r2,1
   8ebe8:	d8800515 	stw	r2,20(sp)
   8ebec:	003f3d06 	br	8e8e4 <__alt_data_end+0xfffbea24>
   8ebf0:	d9800517 	ldw	r6,20(sp)
   8ebf4:	d9c00717 	ldw	r7,28(sp)
   8ebf8:	00800c44 	movi	r2,49
   8ebfc:	31800044 	addi	r6,r6,1
   8ec00:	d9800515 	stw	r6,20(sp)
   8ec04:	38800005 	stb	r2,0(r7)
   8ec08:	003edf06 	br	8e788 <__alt_data_end+0xfffbe8c8>
   8ec0c:	d8000b15 	stw	zero,44(sp)
   8ec10:	003c9f06 	br	8de90 <__alt_data_end+0xfffbdfd0>
   8ec14:	903e7e1e 	bne	r18,zero,8e610 <__alt_data_end+0xfffbe750>
   8ec18:	00800434 	movhi	r2,16
   8ec1c:	10bfffc4 	addi	r2,r2,-1
   8ec20:	9884703a 	and	r2,r19,r2
   8ec24:	1000ea1e 	bne	r2,zero,8efd0 <_dtoa_r+0x1460>
   8ec28:	9cdffc2c 	andhi	r19,r19,32752
   8ec2c:	9800e826 	beq	r19,zero,8efd0 <_dtoa_r+0x1460>
   8ec30:	d9c00817 	ldw	r7,32(sp)
   8ec34:	b5800044 	addi	r22,r22,1
   8ec38:	04c00044 	movi	r19,1
   8ec3c:	39c00044 	addi	r7,r7,1
   8ec40:	d9c00815 	stw	r7,32(sp)
   8ec44:	d8800d17 	ldw	r2,52(sp)
   8ec48:	103e721e 	bne	r2,zero,8e614 <__alt_data_end+0xfffbe754>
   8ec4c:	00800044 	movi	r2,1
   8ec50:	003e7906 	br	8e638 <__alt_data_end+0xfffbe778>
   8ec54:	8009883a 	mov	r4,r16
   8ec58:	0098d240 	call	98d24 <__floatsidf>
   8ec5c:	d9800f17 	ldw	r6,60(sp)
   8ec60:	d9c01017 	ldw	r7,64(sp)
   8ec64:	1009883a 	mov	r4,r2
   8ec68:	180b883a 	mov	r5,r3
   8ec6c:	0097c900 	call	97c90 <__muldf3>
   8ec70:	000d883a 	mov	r6,zero
   8ec74:	01d00734 	movhi	r7,16412
   8ec78:	1009883a 	mov	r4,r2
   8ec7c:	180b883a 	mov	r5,r3
   8ec80:	00968a40 	call	968a4 <__adddf3>
   8ec84:	047f3034 	movhi	r17,64704
   8ec88:	1021883a 	mov	r16,r2
   8ec8c:	1c63883a 	add	r17,r3,r17
   8ec90:	d9000f17 	ldw	r4,60(sp)
   8ec94:	d9401017 	ldw	r5,64(sp)
   8ec98:	000d883a 	mov	r6,zero
   8ec9c:	01d00534 	movhi	r7,16404
   8eca0:	00983a80 	call	983a8 <__subdf3>
   8eca4:	800d883a 	mov	r6,r16
   8eca8:	880f883a 	mov	r7,r17
   8ecac:	1009883a 	mov	r4,r2
   8ecb0:	180b883a 	mov	r5,r3
   8ecb4:	102b883a 	mov	r21,r2
   8ecb8:	1829883a 	mov	r20,r3
   8ecbc:	0097ac00 	call	97ac0 <__gedf2>
   8ecc0:	00806c16 	blt	zero,r2,8ee74 <_dtoa_r+0x1304>
   8ecc4:	89e0003c 	xorhi	r7,r17,32768
   8ecc8:	800d883a 	mov	r6,r16
   8eccc:	a809883a 	mov	r4,r21
   8ecd0:	a00b883a 	mov	r5,r20
   8ecd4:	0097b9c0 	call	97b9c <__ledf2>
   8ecd8:	103d7e0e 	bge	r2,zero,8e2d4 <__alt_data_end+0xfffbe414>
   8ecdc:	002b883a 	mov	r21,zero
   8ece0:	0023883a 	mov	r17,zero
   8ece4:	003efb06 	br	8e8d4 <__alt_data_end+0xfffbea14>
   8ece8:	d8800717 	ldw	r2,28(sp)
   8ecec:	003bd006 	br	8dc30 <__alt_data_end+0xfffbdd70>
   8ecf0:	d9000a17 	ldw	r4,40(sp)
   8ecf4:	d9800d17 	ldw	r6,52(sp)
   8ecf8:	dd400a15 	stw	r21,40(sp)
   8ecfc:	a905c83a 	sub	r2,r21,r4
   8ed00:	308d883a 	add	r6,r6,r2
   8ed04:	d9800d15 	stw	r6,52(sp)
   8ed08:	002b883a 	mov	r21,zero
   8ed0c:	003e0606 	br	8e528 <__alt_data_end+0xfffbe668>
   8ed10:	9023883a 	mov	r17,r18
   8ed14:	9829883a 	mov	r20,r19
   8ed18:	04000084 	movi	r16,2
   8ed1c:	003c9206 	br	8df68 <__alt_data_end+0xfffbe0a8>
   8ed20:	04000044 	movi	r16,1
   8ed24:	dc000c15 	stw	r16,48(sp)
   8ed28:	dc000615 	stw	r16,24(sp)
   8ed2c:	dc002215 	stw	r16,136(sp)
   8ed30:	e0001115 	stw	zero,68(fp)
   8ed34:	000b883a 	mov	r5,zero
   8ed38:	003c6906 	br	8dee0 <__alt_data_end+0xfffbe020>
   8ed3c:	3021883a 	mov	r16,r6
   8ed40:	003ffb06 	br	8ed30 <__alt_data_end+0xfffbee70>
   8ed44:	1000021e 	bne	r2,zero,8ed50 <_dtoa_r+0x11e0>
   8ed48:	4200004c 	andi	r8,r8,1
   8ed4c:	403e7d1e 	bne	r8,zero,8e744 <__alt_data_end+0xfffbe884>
   8ed50:	01000c04 	movi	r4,48
   8ed54:	00000106 	br	8ed5c <_dtoa_r+0x11ec>
   8ed58:	102f883a 	mov	r23,r2
   8ed5c:	b8bfffc4 	addi	r2,r23,-1
   8ed60:	10c00007 	ldb	r3,0(r2)
   8ed64:	193ffc26 	beq	r3,r4,8ed58 <__alt_data_end+0xfffbee98>
   8ed68:	003e8706 	br	8e788 <__alt_data_end+0xfffbe8c8>
   8ed6c:	d8800517 	ldw	r2,20(sp)
   8ed70:	00a3c83a 	sub	r17,zero,r2
   8ed74:	8800a426 	beq	r17,zero,8f008 <_dtoa_r+0x1498>
   8ed78:	888003cc 	andi	r2,r17,15
   8ed7c:	100490fa 	slli	r2,r2,3
   8ed80:	00c002b4 	movhi	r3,10
   8ed84:	18f15f04 	addi	r3,r3,-14980
   8ed88:	1885883a 	add	r2,r3,r2
   8ed8c:	11800017 	ldw	r6,0(r2)
   8ed90:	11c00117 	ldw	r7,4(r2)
   8ed94:	9009883a 	mov	r4,r18
   8ed98:	980b883a 	mov	r5,r19
   8ed9c:	8823d13a 	srai	r17,r17,4
   8eda0:	0097c900 	call	97c90 <__muldf3>
   8eda4:	d8800f15 	stw	r2,60(sp)
   8eda8:	d8c01015 	stw	r3,64(sp)
   8edac:	8800e826 	beq	r17,zero,8f150 <_dtoa_r+0x15e0>
   8edb0:	050002b4 	movhi	r20,10
   8edb4:	a5315504 	addi	r20,r20,-15020
   8edb8:	04000084 	movi	r16,2
   8edbc:	8980004c 	andi	r6,r17,1
   8edc0:	1009883a 	mov	r4,r2
   8edc4:	8823d07a 	srai	r17,r17,1
   8edc8:	180b883a 	mov	r5,r3
   8edcc:	30000426 	beq	r6,zero,8ede0 <_dtoa_r+0x1270>
   8edd0:	a1800017 	ldw	r6,0(r20)
   8edd4:	a1c00117 	ldw	r7,4(r20)
   8edd8:	84000044 	addi	r16,r16,1
   8eddc:	0097c900 	call	97c90 <__muldf3>
   8ede0:	a5000204 	addi	r20,r20,8
   8ede4:	883ff51e 	bne	r17,zero,8edbc <__alt_data_end+0xfffbeefc>
   8ede8:	d8800f15 	stw	r2,60(sp)
   8edec:	d8c01015 	stw	r3,64(sp)
   8edf0:	003c7606 	br	8dfcc <__alt_data_end+0xfffbe10c>
   8edf4:	00c00c04 	movi	r3,48
   8edf8:	10c00005 	stb	r3,0(r2)
   8edfc:	d8c00517 	ldw	r3,20(sp)
   8ee00:	bd3fffc3 	ldbu	r20,-1(r23)
   8ee04:	18c00044 	addi	r3,r3,1
   8ee08:	d8c00515 	stw	r3,20(sp)
   8ee0c:	003db906 	br	8e4f4 <__alt_data_end+0xfffbe634>
   8ee10:	89400117 	ldw	r5,4(r17)
   8ee14:	e009883a 	mov	r4,fp
   8ee18:	00910c40 	call	910c4 <_Balloc>
   8ee1c:	89800417 	ldw	r6,16(r17)
   8ee20:	89400304 	addi	r5,r17,12
   8ee24:	11000304 	addi	r4,r2,12
   8ee28:	31800084 	addi	r6,r6,2
   8ee2c:	318d883a 	add	r6,r6,r6
   8ee30:	318d883a 	add	r6,r6,r6
   8ee34:	1027883a 	mov	r19,r2
   8ee38:	0088e480 	call	88e48 <memcpy>
   8ee3c:	01800044 	movi	r6,1
   8ee40:	980b883a 	mov	r5,r19
   8ee44:	e009883a 	mov	r4,fp
   8ee48:	00918440 	call	91844 <__lshift>
   8ee4c:	1029883a 	mov	r20,r2
   8ee50:	003ecc06 	br	8e984 <__alt_data_end+0xfffbeac4>
   8ee54:	00800e44 	movi	r2,57
   8ee58:	90809026 	beq	r18,r2,8f09c <_dtoa_r+0x152c>
   8ee5c:	92000044 	addi	r8,r18,1
   8ee60:	003f1f06 	br	8eae0 <__alt_data_end+0xfffbec20>
   8ee64:	9011883a 	mov	r8,r18
   8ee68:	8825883a 	mov	r18,r17
   8ee6c:	a023883a 	mov	r17,r20
   8ee70:	003e2906 	br	8e718 <__alt_data_end+0xfffbe858>
   8ee74:	002b883a 	mov	r21,zero
   8ee78:	0023883a 	mov	r17,zero
   8ee7c:	003f5406 	br	8ebd0 <__alt_data_end+0xfffbed10>
   8ee80:	61bfffc4 	addi	r6,r12,-1
   8ee84:	300490fa 	slli	r2,r6,3
   8ee88:	00c002b4 	movhi	r3,10
   8ee8c:	18f15f04 	addi	r3,r3,-14980
   8ee90:	1885883a 	add	r2,r3,r2
   8ee94:	11000017 	ldw	r4,0(r2)
   8ee98:	11400117 	ldw	r5,4(r2)
   8ee9c:	d8800717 	ldw	r2,28(sp)
   8eea0:	880f883a 	mov	r7,r17
   8eea4:	d9801215 	stw	r6,72(sp)
   8eea8:	800d883a 	mov	r6,r16
   8eeac:	db001615 	stw	r12,88(sp)
   8eeb0:	15c00044 	addi	r23,r2,1
   8eeb4:	0097c900 	call	97c90 <__muldf3>
   8eeb8:	d9401017 	ldw	r5,64(sp)
   8eebc:	d9000f17 	ldw	r4,60(sp)
   8eec0:	d8c01515 	stw	r3,84(sp)
   8eec4:	d8801415 	stw	r2,80(sp)
   8eec8:	0098ca40 	call	98ca4 <__fixdfsi>
   8eecc:	1009883a 	mov	r4,r2
   8eed0:	1021883a 	mov	r16,r2
   8eed4:	0098d240 	call	98d24 <__floatsidf>
   8eed8:	d9000f17 	ldw	r4,60(sp)
   8eedc:	d9401017 	ldw	r5,64(sp)
   8eee0:	100d883a 	mov	r6,r2
   8eee4:	180f883a 	mov	r7,r3
   8eee8:	00983a80 	call	983a8 <__subdf3>
   8eeec:	1829883a 	mov	r20,r3
   8eef0:	d8c00717 	ldw	r3,28(sp)
   8eef4:	84000c04 	addi	r16,r16,48
   8eef8:	1023883a 	mov	r17,r2
   8eefc:	1c000005 	stb	r16,0(r3)
   8ef00:	db001617 	ldw	r12,88(sp)
   8ef04:	00800044 	movi	r2,1
   8ef08:	60802226 	beq	r12,r2,8ef94 <_dtoa_r+0x1424>
   8ef0c:	d9c00717 	ldw	r7,28(sp)
   8ef10:	8805883a 	mov	r2,r17
   8ef14:	b82b883a 	mov	r21,r23
   8ef18:	3b19883a 	add	r12,r7,r12
   8ef1c:	6023883a 	mov	r17,r12
   8ef20:	a007883a 	mov	r3,r20
   8ef24:	dc800f15 	stw	r18,60(sp)
   8ef28:	000d883a 	mov	r6,zero
   8ef2c:	01d00934 	movhi	r7,16420
   8ef30:	1009883a 	mov	r4,r2
   8ef34:	180b883a 	mov	r5,r3
   8ef38:	0097c900 	call	97c90 <__muldf3>
   8ef3c:	180b883a 	mov	r5,r3
   8ef40:	1009883a 	mov	r4,r2
   8ef44:	1829883a 	mov	r20,r3
   8ef48:	1025883a 	mov	r18,r2
   8ef4c:	0098ca40 	call	98ca4 <__fixdfsi>
   8ef50:	1009883a 	mov	r4,r2
   8ef54:	1021883a 	mov	r16,r2
   8ef58:	0098d240 	call	98d24 <__floatsidf>
   8ef5c:	100d883a 	mov	r6,r2
   8ef60:	180f883a 	mov	r7,r3
   8ef64:	9009883a 	mov	r4,r18
   8ef68:	a00b883a 	mov	r5,r20
   8ef6c:	84000c04 	addi	r16,r16,48
   8ef70:	00983a80 	call	983a8 <__subdf3>
   8ef74:	ad400044 	addi	r21,r21,1
   8ef78:	ac3fffc5 	stb	r16,-1(r21)
   8ef7c:	ac7fea1e 	bne	r21,r17,8ef28 <__alt_data_end+0xfffbf068>
   8ef80:	1023883a 	mov	r17,r2
   8ef84:	d8801217 	ldw	r2,72(sp)
   8ef88:	dc800f17 	ldw	r18,60(sp)
   8ef8c:	1829883a 	mov	r20,r3
   8ef90:	b8af883a 	add	r23,r23,r2
   8ef94:	d9001417 	ldw	r4,80(sp)
   8ef98:	d9401517 	ldw	r5,84(sp)
   8ef9c:	000d883a 	mov	r6,zero
   8efa0:	01cff834 	movhi	r7,16352
   8efa4:	00968a40 	call	968a4 <__adddf3>
   8efa8:	880d883a 	mov	r6,r17
   8efac:	a00f883a 	mov	r7,r20
   8efb0:	1009883a 	mov	r4,r2
   8efb4:	180b883a 	mov	r5,r3
   8efb8:	0097b9c0 	call	97b9c <__ledf2>
   8efbc:	10003e0e 	bge	r2,zero,8f0b8 <_dtoa_r+0x1548>
   8efc0:	d9001317 	ldw	r4,76(sp)
   8efc4:	bd3fffc3 	ldbu	r20,-1(r23)
   8efc8:	d9000515 	stw	r4,20(sp)
   8efcc:	003d3b06 	br	8e4bc <__alt_data_end+0xfffbe5fc>
   8efd0:	0027883a 	mov	r19,zero
   8efd4:	003f1b06 	br	8ec44 <__alt_data_end+0xfffbed84>
   8efd8:	d8800817 	ldw	r2,32(sp)
   8efdc:	11e9c83a 	sub	r20,r2,r7
   8efe0:	0005883a 	mov	r2,zero
   8efe4:	003d5406 	br	8e538 <__alt_data_end+0xfffbe678>
   8efe8:	00800044 	movi	r2,1
   8efec:	003dc706 	br	8e70c <__alt_data_end+0xfffbe84c>
   8eff0:	d8c00217 	ldw	r3,8(sp)
   8eff4:	00800d84 	movi	r2,54
   8eff8:	dd400a17 	ldw	r21,40(sp)
   8effc:	10c5c83a 	sub	r2,r2,r3
   8f000:	dd000817 	ldw	r20,32(sp)
   8f004:	003d4c06 	br	8e538 <__alt_data_end+0xfffbe678>
   8f008:	dc800f15 	stw	r18,60(sp)
   8f00c:	dcc01015 	stw	r19,64(sp)
   8f010:	04000084 	movi	r16,2
   8f014:	003bed06 	br	8dfcc <__alt_data_end+0xfffbe10c>
   8f018:	d9000617 	ldw	r4,24(sp)
   8f01c:	203f0d26 	beq	r4,zero,8ec54 <__alt_data_end+0xfffbed94>
   8f020:	d9800c17 	ldw	r6,48(sp)
   8f024:	01bcab0e 	bge	zero,r6,8e2d4 <__alt_data_end+0xfffbe414>
   8f028:	d9401017 	ldw	r5,64(sp)
   8f02c:	d9000f17 	ldw	r4,60(sp)
   8f030:	000d883a 	mov	r6,zero
   8f034:	01d00934 	movhi	r7,16420
   8f038:	0097c900 	call	97c90 <__muldf3>
   8f03c:	81000044 	addi	r4,r16,1
   8f040:	d8800f15 	stw	r2,60(sp)
   8f044:	d8c01015 	stw	r3,64(sp)
   8f048:	0098d240 	call	98d24 <__floatsidf>
   8f04c:	d9800f17 	ldw	r6,60(sp)
   8f050:	d9c01017 	ldw	r7,64(sp)
   8f054:	1009883a 	mov	r4,r2
   8f058:	180b883a 	mov	r5,r3
   8f05c:	0097c900 	call	97c90 <__muldf3>
   8f060:	01d00734 	movhi	r7,16412
   8f064:	000d883a 	mov	r6,zero
   8f068:	1009883a 	mov	r4,r2
   8f06c:	180b883a 	mov	r5,r3
   8f070:	00968a40 	call	968a4 <__adddf3>
   8f074:	d9c00517 	ldw	r7,20(sp)
   8f078:	047f3034 	movhi	r17,64704
   8f07c:	1021883a 	mov	r16,r2
   8f080:	39ffffc4 	addi	r7,r7,-1
   8f084:	d9c01315 	stw	r7,76(sp)
   8f088:	1c63883a 	add	r17,r3,r17
   8f08c:	db000c17 	ldw	r12,48(sp)
   8f090:	003bea06 	br	8e03c <__alt_data_end+0xfffbe17c>
   8f094:	dc000915 	stw	r16,36(sp)
   8f098:	003e0e06 	br	8e8d4 <__alt_data_end+0xfffbea14>
   8f09c:	01000e44 	movi	r4,57
   8f0a0:	8825883a 	mov	r18,r17
   8f0a4:	9dc00044 	addi	r23,r19,1
   8f0a8:	99000005 	stb	r4,0(r19)
   8f0ac:	a023883a 	mov	r17,r20
   8f0b0:	dc000915 	stw	r16,36(sp)
   8f0b4:	003da406 	br	8e748 <__alt_data_end+0xfffbe888>
   8f0b8:	d9801417 	ldw	r6,80(sp)
   8f0bc:	d9c01517 	ldw	r7,84(sp)
   8f0c0:	0009883a 	mov	r4,zero
   8f0c4:	014ff834 	movhi	r5,16352
   8f0c8:	00983a80 	call	983a8 <__subdf3>
   8f0cc:	880d883a 	mov	r6,r17
   8f0d0:	a00f883a 	mov	r7,r20
   8f0d4:	1009883a 	mov	r4,r2
   8f0d8:	180b883a 	mov	r5,r3
   8f0dc:	0097ac00 	call	97ac0 <__gedf2>
   8f0e0:	00bc7c0e 	bge	zero,r2,8e2d4 <__alt_data_end+0xfffbe414>
   8f0e4:	01000c04 	movi	r4,48
   8f0e8:	00000106 	br	8f0f0 <_dtoa_r+0x1580>
   8f0ec:	102f883a 	mov	r23,r2
   8f0f0:	b8bfffc4 	addi	r2,r23,-1
   8f0f4:	10c00007 	ldb	r3,0(r2)
   8f0f8:	193ffc26 	beq	r3,r4,8f0ec <__alt_data_end+0xfffbf22c>
   8f0fc:	d9801317 	ldw	r6,76(sp)
   8f100:	d9800515 	stw	r6,20(sp)
   8f104:	003c4406 	br	8e218 <__alt_data_end+0xfffbe358>
   8f108:	d9801317 	ldw	r6,76(sp)
   8f10c:	d9800515 	stw	r6,20(sp)
   8f110:	003cea06 	br	8e4bc <__alt_data_end+0xfffbe5fc>
   8f114:	dd800f17 	ldw	r22,60(sp)
   8f118:	dcc01017 	ldw	r19,64(sp)
   8f11c:	dc801217 	ldw	r18,72(sp)
   8f120:	003c6c06 	br	8e2d4 <__alt_data_end+0xfffbe414>
   8f124:	903e031e 	bne	r18,zero,8e934 <__alt_data_end+0xfffbea74>
   8f128:	003ebb06 	br	8ec18 <__alt_data_end+0xfffbed58>
   8f12c:	103e6c1e 	bne	r2,zero,8eae0 <__alt_data_end+0xfffbec20>
   8f130:	4080004c 	andi	r2,r8,1
   8f134:	103e6a26 	beq	r2,zero,8eae0 <__alt_data_end+0xfffbec20>
   8f138:	003e6606 	br	8ead4 <__alt_data_end+0xfffbec14>
   8f13c:	d8c00317 	ldw	r3,12(sp)
   8f140:	00800084 	movi	r2,2
   8f144:	10c02916 	blt	r2,r3,8f1ec <_dtoa_r+0x167c>
   8f148:	d9000c17 	ldw	r4,48(sp)
   8f14c:	003e8806 	br	8eb70 <__alt_data_end+0xfffbecb0>
   8f150:	04000084 	movi	r16,2
   8f154:	003b9d06 	br	8dfcc <__alt_data_end+0xfffbe10c>
   8f158:	d9001317 	ldw	r4,76(sp)
   8f15c:	d9000515 	stw	r4,20(sp)
   8f160:	003cd606 	br	8e4bc <__alt_data_end+0xfffbe5fc>
   8f164:	d8801317 	ldw	r2,76(sp)
   8f168:	d8800515 	stw	r2,20(sp)
   8f16c:	003c2a06 	br	8e218 <__alt_data_end+0xfffbe358>
   8f170:	d9800317 	ldw	r6,12(sp)
   8f174:	00800084 	movi	r2,2
   8f178:	11801516 	blt	r2,r6,8f1d0 <_dtoa_r+0x1660>
   8f17c:	d9c00c17 	ldw	r7,48(sp)
   8f180:	d9c00615 	stw	r7,24(sp)
   8f184:	003df706 	br	8e964 <__alt_data_end+0xfffbeaa4>
   8f188:	193d3926 	beq	r3,r4,8e670 <__alt_data_end+0xfffbe7b0>
   8f18c:	00c00f04 	movi	r3,60
   8f190:	1885c83a 	sub	r2,r3,r2
   8f194:	003ddf06 	br	8e914 <__alt_data_end+0xfffbea54>
   8f198:	e009883a 	mov	r4,fp
   8f19c:	e0001115 	stw	zero,68(fp)
   8f1a0:	000b883a 	mov	r5,zero
   8f1a4:	00910c40 	call	910c4 <_Balloc>
   8f1a8:	d8800715 	stw	r2,28(sp)
   8f1ac:	d8c00717 	ldw	r3,28(sp)
   8f1b0:	00bfffc4 	movi	r2,-1
   8f1b4:	01000044 	movi	r4,1
   8f1b8:	d8800c15 	stw	r2,48(sp)
   8f1bc:	e0c01015 	stw	r3,64(fp)
   8f1c0:	d9000b15 	stw	r4,44(sp)
   8f1c4:	d8800615 	stw	r2,24(sp)
   8f1c8:	d8002215 	stw	zero,136(sp)
   8f1cc:	003c4106 	br	8e2d4 <__alt_data_end+0xfffbe414>
   8f1d0:	d8c00c17 	ldw	r3,48(sp)
   8f1d4:	d8c00615 	stw	r3,24(sp)
   8f1d8:	003e7006 	br	8eb9c <__alt_data_end+0xfffbecdc>
   8f1dc:	04400044 	movi	r17,1
   8f1e0:	003b2006 	br	8de64 <__alt_data_end+0xfffbdfa4>
   8f1e4:	000b883a 	mov	r5,zero
   8f1e8:	003b3d06 	br	8dee0 <__alt_data_end+0xfffbe020>
   8f1ec:	d8800c17 	ldw	r2,48(sp)
   8f1f0:	d8800615 	stw	r2,24(sp)
   8f1f4:	003e6906 	br	8eb9c <__alt_data_end+0xfffbecdc>

0008f1f8 <__sflush_r>:
   8f1f8:	2880030b 	ldhu	r2,12(r5)
   8f1fc:	defffb04 	addi	sp,sp,-20
   8f200:	dcc00315 	stw	r19,12(sp)
   8f204:	dc400115 	stw	r17,4(sp)
   8f208:	dfc00415 	stw	ra,16(sp)
   8f20c:	dc800215 	stw	r18,8(sp)
   8f210:	dc000015 	stw	r16,0(sp)
   8f214:	10c0020c 	andi	r3,r2,8
   8f218:	2823883a 	mov	r17,r5
   8f21c:	2027883a 	mov	r19,r4
   8f220:	1800311e 	bne	r3,zero,8f2e8 <__sflush_r+0xf0>
   8f224:	28c00117 	ldw	r3,4(r5)
   8f228:	10820014 	ori	r2,r2,2048
   8f22c:	2880030d 	sth	r2,12(r5)
   8f230:	00c04b0e 	bge	zero,r3,8f360 <__sflush_r+0x168>
   8f234:	8a000a17 	ldw	r8,40(r17)
   8f238:	40002326 	beq	r8,zero,8f2c8 <__sflush_r+0xd0>
   8f23c:	9c000017 	ldw	r16,0(r19)
   8f240:	10c4000c 	andi	r3,r2,4096
   8f244:	98000015 	stw	zero,0(r19)
   8f248:	18004826 	beq	r3,zero,8f36c <__sflush_r+0x174>
   8f24c:	89801417 	ldw	r6,80(r17)
   8f250:	10c0010c 	andi	r3,r2,4
   8f254:	18000626 	beq	r3,zero,8f270 <__sflush_r+0x78>
   8f258:	88c00117 	ldw	r3,4(r17)
   8f25c:	88800c17 	ldw	r2,48(r17)
   8f260:	30cdc83a 	sub	r6,r6,r3
   8f264:	10000226 	beq	r2,zero,8f270 <__sflush_r+0x78>
   8f268:	88800f17 	ldw	r2,60(r17)
   8f26c:	308dc83a 	sub	r6,r6,r2
   8f270:	89400717 	ldw	r5,28(r17)
   8f274:	000f883a 	mov	r7,zero
   8f278:	9809883a 	mov	r4,r19
   8f27c:	403ee83a 	callr	r8
   8f280:	00ffffc4 	movi	r3,-1
   8f284:	10c04426 	beq	r2,r3,8f398 <__sflush_r+0x1a0>
   8f288:	88c0030b 	ldhu	r3,12(r17)
   8f28c:	89000417 	ldw	r4,16(r17)
   8f290:	88000115 	stw	zero,4(r17)
   8f294:	197dffcc 	andi	r5,r3,63487
   8f298:	8940030d 	sth	r5,12(r17)
   8f29c:	89000015 	stw	r4,0(r17)
   8f2a0:	18c4000c 	andi	r3,r3,4096
   8f2a4:	18002c1e 	bne	r3,zero,8f358 <__sflush_r+0x160>
   8f2a8:	89400c17 	ldw	r5,48(r17)
   8f2ac:	9c000015 	stw	r16,0(r19)
   8f2b0:	28000526 	beq	r5,zero,8f2c8 <__sflush_r+0xd0>
   8f2b4:	88801004 	addi	r2,r17,64
   8f2b8:	28800226 	beq	r5,r2,8f2c4 <__sflush_r+0xcc>
   8f2bc:	9809883a 	mov	r4,r19
   8f2c0:	008f9640 	call	8f964 <_free_r>
   8f2c4:	88000c15 	stw	zero,48(r17)
   8f2c8:	0005883a 	mov	r2,zero
   8f2cc:	dfc00417 	ldw	ra,16(sp)
   8f2d0:	dcc00317 	ldw	r19,12(sp)
   8f2d4:	dc800217 	ldw	r18,8(sp)
   8f2d8:	dc400117 	ldw	r17,4(sp)
   8f2dc:	dc000017 	ldw	r16,0(sp)
   8f2e0:	dec00504 	addi	sp,sp,20
   8f2e4:	f800283a 	ret
   8f2e8:	2c800417 	ldw	r18,16(r5)
   8f2ec:	903ff626 	beq	r18,zero,8f2c8 <__alt_data_end+0xfffbf408>
   8f2f0:	2c000017 	ldw	r16,0(r5)
   8f2f4:	108000cc 	andi	r2,r2,3
   8f2f8:	2c800015 	stw	r18,0(r5)
   8f2fc:	84a1c83a 	sub	r16,r16,r18
   8f300:	1000131e 	bne	r2,zero,8f350 <__sflush_r+0x158>
   8f304:	28800517 	ldw	r2,20(r5)
   8f308:	88800215 	stw	r2,8(r17)
   8f30c:	04000316 	blt	zero,r16,8f31c <__sflush_r+0x124>
   8f310:	003fed06 	br	8f2c8 <__alt_data_end+0xfffbf408>
   8f314:	90a5883a 	add	r18,r18,r2
   8f318:	043feb0e 	bge	zero,r16,8f2c8 <__alt_data_end+0xfffbf408>
   8f31c:	88800917 	ldw	r2,36(r17)
   8f320:	89400717 	ldw	r5,28(r17)
   8f324:	800f883a 	mov	r7,r16
   8f328:	900d883a 	mov	r6,r18
   8f32c:	9809883a 	mov	r4,r19
   8f330:	103ee83a 	callr	r2
   8f334:	80a1c83a 	sub	r16,r16,r2
   8f338:	00bff616 	blt	zero,r2,8f314 <__alt_data_end+0xfffbf454>
   8f33c:	88c0030b 	ldhu	r3,12(r17)
   8f340:	00bfffc4 	movi	r2,-1
   8f344:	18c01014 	ori	r3,r3,64
   8f348:	88c0030d 	sth	r3,12(r17)
   8f34c:	003fdf06 	br	8f2cc <__alt_data_end+0xfffbf40c>
   8f350:	0005883a 	mov	r2,zero
   8f354:	003fec06 	br	8f308 <__alt_data_end+0xfffbf448>
   8f358:	88801415 	stw	r2,80(r17)
   8f35c:	003fd206 	br	8f2a8 <__alt_data_end+0xfffbf3e8>
   8f360:	28c00f17 	ldw	r3,60(r5)
   8f364:	00ffb316 	blt	zero,r3,8f234 <__alt_data_end+0xfffbf374>
   8f368:	003fd706 	br	8f2c8 <__alt_data_end+0xfffbf408>
   8f36c:	89400717 	ldw	r5,28(r17)
   8f370:	000d883a 	mov	r6,zero
   8f374:	01c00044 	movi	r7,1
   8f378:	9809883a 	mov	r4,r19
   8f37c:	403ee83a 	callr	r8
   8f380:	100d883a 	mov	r6,r2
   8f384:	00bfffc4 	movi	r2,-1
   8f388:	30801426 	beq	r6,r2,8f3dc <__sflush_r+0x1e4>
   8f38c:	8880030b 	ldhu	r2,12(r17)
   8f390:	8a000a17 	ldw	r8,40(r17)
   8f394:	003fae06 	br	8f250 <__alt_data_end+0xfffbf390>
   8f398:	98c00017 	ldw	r3,0(r19)
   8f39c:	183fba26 	beq	r3,zero,8f288 <__alt_data_end+0xfffbf3c8>
   8f3a0:	01000744 	movi	r4,29
   8f3a4:	19000626 	beq	r3,r4,8f3c0 <__sflush_r+0x1c8>
   8f3a8:	01000584 	movi	r4,22
   8f3ac:	19000426 	beq	r3,r4,8f3c0 <__sflush_r+0x1c8>
   8f3b0:	88c0030b 	ldhu	r3,12(r17)
   8f3b4:	18c01014 	ori	r3,r3,64
   8f3b8:	88c0030d 	sth	r3,12(r17)
   8f3bc:	003fc306 	br	8f2cc <__alt_data_end+0xfffbf40c>
   8f3c0:	8880030b 	ldhu	r2,12(r17)
   8f3c4:	88c00417 	ldw	r3,16(r17)
   8f3c8:	88000115 	stw	zero,4(r17)
   8f3cc:	10bdffcc 	andi	r2,r2,63487
   8f3d0:	8880030d 	sth	r2,12(r17)
   8f3d4:	88c00015 	stw	r3,0(r17)
   8f3d8:	003fb306 	br	8f2a8 <__alt_data_end+0xfffbf3e8>
   8f3dc:	98800017 	ldw	r2,0(r19)
   8f3e0:	103fea26 	beq	r2,zero,8f38c <__alt_data_end+0xfffbf4cc>
   8f3e4:	00c00744 	movi	r3,29
   8f3e8:	10c00226 	beq	r2,r3,8f3f4 <__sflush_r+0x1fc>
   8f3ec:	00c00584 	movi	r3,22
   8f3f0:	10c0031e 	bne	r2,r3,8f400 <__sflush_r+0x208>
   8f3f4:	9c000015 	stw	r16,0(r19)
   8f3f8:	0005883a 	mov	r2,zero
   8f3fc:	003fb306 	br	8f2cc <__alt_data_end+0xfffbf40c>
   8f400:	88c0030b 	ldhu	r3,12(r17)
   8f404:	3005883a 	mov	r2,r6
   8f408:	18c01014 	ori	r3,r3,64
   8f40c:	88c0030d 	sth	r3,12(r17)
   8f410:	003fae06 	br	8f2cc <__alt_data_end+0xfffbf40c>

0008f414 <_fflush_r>:
   8f414:	defffd04 	addi	sp,sp,-12
   8f418:	dc000115 	stw	r16,4(sp)
   8f41c:	dfc00215 	stw	ra,8(sp)
   8f420:	2021883a 	mov	r16,r4
   8f424:	20000226 	beq	r4,zero,8f430 <_fflush_r+0x1c>
   8f428:	20800e17 	ldw	r2,56(r4)
   8f42c:	10000c26 	beq	r2,zero,8f460 <_fflush_r+0x4c>
   8f430:	2880030f 	ldh	r2,12(r5)
   8f434:	1000051e 	bne	r2,zero,8f44c <_fflush_r+0x38>
   8f438:	0005883a 	mov	r2,zero
   8f43c:	dfc00217 	ldw	ra,8(sp)
   8f440:	dc000117 	ldw	r16,4(sp)
   8f444:	dec00304 	addi	sp,sp,12
   8f448:	f800283a 	ret
   8f44c:	8009883a 	mov	r4,r16
   8f450:	dfc00217 	ldw	ra,8(sp)
   8f454:	dc000117 	ldw	r16,4(sp)
   8f458:	dec00304 	addi	sp,sp,12
   8f45c:	008f1f81 	jmpi	8f1f8 <__sflush_r>
   8f460:	d9400015 	stw	r5,0(sp)
   8f464:	008f7f00 	call	8f7f0 <__sinit>
   8f468:	d9400017 	ldw	r5,0(sp)
   8f46c:	003ff006 	br	8f430 <__alt_data_end+0xfffbf570>

0008f470 <fflush>:
   8f470:	20000526 	beq	r4,zero,8f488 <fflush+0x18>
   8f474:	008002b4 	movhi	r2,10
   8f478:	10bb5c04 	addi	r2,r2,-4752
   8f47c:	200b883a 	mov	r5,r4
   8f480:	11000017 	ldw	r4,0(r2)
   8f484:	008f4141 	jmpi	8f414 <_fflush_r>
   8f488:	008002b4 	movhi	r2,10
   8f48c:	10bb5b04 	addi	r2,r2,-4756
   8f490:	11000017 	ldw	r4,0(r2)
   8f494:	01400274 	movhi	r5,9
   8f498:	297d0504 	addi	r5,r5,-3052
   8f49c:	00901f41 	jmpi	901f4 <_fwalk_reent>

0008f4a0 <__fp_unlock>:
   8f4a0:	0005883a 	mov	r2,zero
   8f4a4:	f800283a 	ret

0008f4a8 <_cleanup_r>:
   8f4a8:	01400274 	movhi	r5,9
   8f4ac:	2955e404 	addi	r5,r5,22416
   8f4b0:	00901f41 	jmpi	901f4 <_fwalk_reent>

0008f4b4 <__sinit.part.1>:
   8f4b4:	defff704 	addi	sp,sp,-36
   8f4b8:	00c00274 	movhi	r3,9
   8f4bc:	dfc00815 	stw	ra,32(sp)
   8f4c0:	ddc00715 	stw	r23,28(sp)
   8f4c4:	dd800615 	stw	r22,24(sp)
   8f4c8:	dd400515 	stw	r21,20(sp)
   8f4cc:	dd000415 	stw	r20,16(sp)
   8f4d0:	dcc00315 	stw	r19,12(sp)
   8f4d4:	dc800215 	stw	r18,8(sp)
   8f4d8:	dc400115 	stw	r17,4(sp)
   8f4dc:	dc000015 	stw	r16,0(sp)
   8f4e0:	18fd2a04 	addi	r3,r3,-2904
   8f4e4:	24000117 	ldw	r16,4(r4)
   8f4e8:	20c00f15 	stw	r3,60(r4)
   8f4ec:	2080bb04 	addi	r2,r4,748
   8f4f0:	00c000c4 	movi	r3,3
   8f4f4:	20c0b915 	stw	r3,740(r4)
   8f4f8:	2080ba15 	stw	r2,744(r4)
   8f4fc:	2000b815 	stw	zero,736(r4)
   8f500:	05c00204 	movi	r23,8
   8f504:	00800104 	movi	r2,4
   8f508:	2025883a 	mov	r18,r4
   8f50c:	b80d883a 	mov	r6,r23
   8f510:	81001704 	addi	r4,r16,92
   8f514:	000b883a 	mov	r5,zero
   8f518:	80000015 	stw	zero,0(r16)
   8f51c:	80000115 	stw	zero,4(r16)
   8f520:	80000215 	stw	zero,8(r16)
   8f524:	8080030d 	sth	r2,12(r16)
   8f528:	80001915 	stw	zero,100(r16)
   8f52c:	8000038d 	sth	zero,14(r16)
   8f530:	80000415 	stw	zero,16(r16)
   8f534:	80000515 	stw	zero,20(r16)
   8f538:	80000615 	stw	zero,24(r16)
   8f53c:	0090f9c0 	call	90f9c <memset>
   8f540:	05800274 	movhi	r22,9
   8f544:	94400217 	ldw	r17,8(r18)
   8f548:	05400274 	movhi	r21,9
   8f54c:	05000274 	movhi	r20,9
   8f550:	04c00274 	movhi	r19,9
   8f554:	b58a1504 	addi	r22,r22,10324
   8f558:	ad4a2c04 	addi	r21,r21,10416
   8f55c:	a50a4b04 	addi	r20,r20,10540
   8f560:	9cca6204 	addi	r19,r19,10632
   8f564:	85800815 	stw	r22,32(r16)
   8f568:	85400915 	stw	r21,36(r16)
   8f56c:	85000a15 	stw	r20,40(r16)
   8f570:	84c00b15 	stw	r19,44(r16)
   8f574:	84000715 	stw	r16,28(r16)
   8f578:	00800284 	movi	r2,10
   8f57c:	8880030d 	sth	r2,12(r17)
   8f580:	00800044 	movi	r2,1
   8f584:	b80d883a 	mov	r6,r23
   8f588:	89001704 	addi	r4,r17,92
   8f58c:	000b883a 	mov	r5,zero
   8f590:	88000015 	stw	zero,0(r17)
   8f594:	88000115 	stw	zero,4(r17)
   8f598:	88000215 	stw	zero,8(r17)
   8f59c:	88001915 	stw	zero,100(r17)
   8f5a0:	8880038d 	sth	r2,14(r17)
   8f5a4:	88000415 	stw	zero,16(r17)
   8f5a8:	88000515 	stw	zero,20(r17)
   8f5ac:	88000615 	stw	zero,24(r17)
   8f5b0:	0090f9c0 	call	90f9c <memset>
   8f5b4:	94000317 	ldw	r16,12(r18)
   8f5b8:	00800484 	movi	r2,18
   8f5bc:	8c400715 	stw	r17,28(r17)
   8f5c0:	8d800815 	stw	r22,32(r17)
   8f5c4:	8d400915 	stw	r21,36(r17)
   8f5c8:	8d000a15 	stw	r20,40(r17)
   8f5cc:	8cc00b15 	stw	r19,44(r17)
   8f5d0:	8080030d 	sth	r2,12(r16)
   8f5d4:	00800084 	movi	r2,2
   8f5d8:	80000015 	stw	zero,0(r16)
   8f5dc:	80000115 	stw	zero,4(r16)
   8f5e0:	80000215 	stw	zero,8(r16)
   8f5e4:	80001915 	stw	zero,100(r16)
   8f5e8:	8080038d 	sth	r2,14(r16)
   8f5ec:	80000415 	stw	zero,16(r16)
   8f5f0:	80000515 	stw	zero,20(r16)
   8f5f4:	80000615 	stw	zero,24(r16)
   8f5f8:	b80d883a 	mov	r6,r23
   8f5fc:	000b883a 	mov	r5,zero
   8f600:	81001704 	addi	r4,r16,92
   8f604:	0090f9c0 	call	90f9c <memset>
   8f608:	00800044 	movi	r2,1
   8f60c:	84000715 	stw	r16,28(r16)
   8f610:	85800815 	stw	r22,32(r16)
   8f614:	85400915 	stw	r21,36(r16)
   8f618:	85000a15 	stw	r20,40(r16)
   8f61c:	84c00b15 	stw	r19,44(r16)
   8f620:	90800e15 	stw	r2,56(r18)
   8f624:	dfc00817 	ldw	ra,32(sp)
   8f628:	ddc00717 	ldw	r23,28(sp)
   8f62c:	dd800617 	ldw	r22,24(sp)
   8f630:	dd400517 	ldw	r21,20(sp)
   8f634:	dd000417 	ldw	r20,16(sp)
   8f638:	dcc00317 	ldw	r19,12(sp)
   8f63c:	dc800217 	ldw	r18,8(sp)
   8f640:	dc400117 	ldw	r17,4(sp)
   8f644:	dc000017 	ldw	r16,0(sp)
   8f648:	dec00904 	addi	sp,sp,36
   8f64c:	f800283a 	ret

0008f650 <__fp_lock>:
   8f650:	0005883a 	mov	r2,zero
   8f654:	f800283a 	ret

0008f658 <__sfmoreglue>:
   8f658:	defffc04 	addi	sp,sp,-16
   8f65c:	dc400115 	stw	r17,4(sp)
   8f660:	2c7fffc4 	addi	r17,r5,-1
   8f664:	8c401a24 	muli	r17,r17,104
   8f668:	dc800215 	stw	r18,8(sp)
   8f66c:	2825883a 	mov	r18,r5
   8f670:	89401d04 	addi	r5,r17,116
   8f674:	dc000015 	stw	r16,0(sp)
   8f678:	dfc00315 	stw	ra,12(sp)
   8f67c:	00905500 	call	90550 <_malloc_r>
   8f680:	1021883a 	mov	r16,r2
   8f684:	10000726 	beq	r2,zero,8f6a4 <__sfmoreglue+0x4c>
   8f688:	11000304 	addi	r4,r2,12
   8f68c:	10000015 	stw	zero,0(r2)
   8f690:	14800115 	stw	r18,4(r2)
   8f694:	11000215 	stw	r4,8(r2)
   8f698:	89801a04 	addi	r6,r17,104
   8f69c:	000b883a 	mov	r5,zero
   8f6a0:	0090f9c0 	call	90f9c <memset>
   8f6a4:	8005883a 	mov	r2,r16
   8f6a8:	dfc00317 	ldw	ra,12(sp)
   8f6ac:	dc800217 	ldw	r18,8(sp)
   8f6b0:	dc400117 	ldw	r17,4(sp)
   8f6b4:	dc000017 	ldw	r16,0(sp)
   8f6b8:	dec00404 	addi	sp,sp,16
   8f6bc:	f800283a 	ret

0008f6c0 <__sfp>:
   8f6c0:	defffb04 	addi	sp,sp,-20
   8f6c4:	dc000015 	stw	r16,0(sp)
   8f6c8:	040002b4 	movhi	r16,10
   8f6cc:	843b5b04 	addi	r16,r16,-4756
   8f6d0:	dcc00315 	stw	r19,12(sp)
   8f6d4:	2027883a 	mov	r19,r4
   8f6d8:	81000017 	ldw	r4,0(r16)
   8f6dc:	dfc00415 	stw	ra,16(sp)
   8f6e0:	dc800215 	stw	r18,8(sp)
   8f6e4:	20800e17 	ldw	r2,56(r4)
   8f6e8:	dc400115 	stw	r17,4(sp)
   8f6ec:	1000021e 	bne	r2,zero,8f6f8 <__sfp+0x38>
   8f6f0:	008f4b40 	call	8f4b4 <__sinit.part.1>
   8f6f4:	81000017 	ldw	r4,0(r16)
   8f6f8:	2480b804 	addi	r18,r4,736
   8f6fc:	047fffc4 	movi	r17,-1
   8f700:	91000117 	ldw	r4,4(r18)
   8f704:	94000217 	ldw	r16,8(r18)
   8f708:	213fffc4 	addi	r4,r4,-1
   8f70c:	20000a16 	blt	r4,zero,8f738 <__sfp+0x78>
   8f710:	8080030f 	ldh	r2,12(r16)
   8f714:	10000c26 	beq	r2,zero,8f748 <__sfp+0x88>
   8f718:	80c01d04 	addi	r3,r16,116
   8f71c:	00000206 	br	8f728 <__sfp+0x68>
   8f720:	18bfe60f 	ldh	r2,-104(r3)
   8f724:	10000826 	beq	r2,zero,8f748 <__sfp+0x88>
   8f728:	213fffc4 	addi	r4,r4,-1
   8f72c:	1c3ffd04 	addi	r16,r3,-12
   8f730:	18c01a04 	addi	r3,r3,104
   8f734:	247ffa1e 	bne	r4,r17,8f720 <__alt_data_end+0xfffbf860>
   8f738:	90800017 	ldw	r2,0(r18)
   8f73c:	10001d26 	beq	r2,zero,8f7b4 <__sfp+0xf4>
   8f740:	1025883a 	mov	r18,r2
   8f744:	003fee06 	br	8f700 <__alt_data_end+0xfffbf840>
   8f748:	00bfffc4 	movi	r2,-1
   8f74c:	8080038d 	sth	r2,14(r16)
   8f750:	00800044 	movi	r2,1
   8f754:	8080030d 	sth	r2,12(r16)
   8f758:	80001915 	stw	zero,100(r16)
   8f75c:	80000015 	stw	zero,0(r16)
   8f760:	80000215 	stw	zero,8(r16)
   8f764:	80000115 	stw	zero,4(r16)
   8f768:	80000415 	stw	zero,16(r16)
   8f76c:	80000515 	stw	zero,20(r16)
   8f770:	80000615 	stw	zero,24(r16)
   8f774:	01800204 	movi	r6,8
   8f778:	000b883a 	mov	r5,zero
   8f77c:	81001704 	addi	r4,r16,92
   8f780:	0090f9c0 	call	90f9c <memset>
   8f784:	8005883a 	mov	r2,r16
   8f788:	80000c15 	stw	zero,48(r16)
   8f78c:	80000d15 	stw	zero,52(r16)
   8f790:	80001115 	stw	zero,68(r16)
   8f794:	80001215 	stw	zero,72(r16)
   8f798:	dfc00417 	ldw	ra,16(sp)
   8f79c:	dcc00317 	ldw	r19,12(sp)
   8f7a0:	dc800217 	ldw	r18,8(sp)
   8f7a4:	dc400117 	ldw	r17,4(sp)
   8f7a8:	dc000017 	ldw	r16,0(sp)
   8f7ac:	dec00504 	addi	sp,sp,20
   8f7b0:	f800283a 	ret
   8f7b4:	01400104 	movi	r5,4
   8f7b8:	9809883a 	mov	r4,r19
   8f7bc:	008f6580 	call	8f658 <__sfmoreglue>
   8f7c0:	90800015 	stw	r2,0(r18)
   8f7c4:	103fde1e 	bne	r2,zero,8f740 <__alt_data_end+0xfffbf880>
   8f7c8:	00800304 	movi	r2,12
   8f7cc:	98800015 	stw	r2,0(r19)
   8f7d0:	0005883a 	mov	r2,zero
   8f7d4:	003ff006 	br	8f798 <__alt_data_end+0xfffbf8d8>

0008f7d8 <_cleanup>:
   8f7d8:	008002b4 	movhi	r2,10
   8f7dc:	10bb5b04 	addi	r2,r2,-4756
   8f7e0:	11000017 	ldw	r4,0(r2)
   8f7e4:	01400274 	movhi	r5,9
   8f7e8:	2955e404 	addi	r5,r5,22416
   8f7ec:	00901f41 	jmpi	901f4 <_fwalk_reent>

0008f7f0 <__sinit>:
   8f7f0:	20800e17 	ldw	r2,56(r4)
   8f7f4:	10000126 	beq	r2,zero,8f7fc <__sinit+0xc>
   8f7f8:	f800283a 	ret
   8f7fc:	008f4b41 	jmpi	8f4b4 <__sinit.part.1>

0008f800 <__sfp_lock_acquire>:
   8f800:	f800283a 	ret

0008f804 <__sfp_lock_release>:
   8f804:	f800283a 	ret

0008f808 <__sinit_lock_acquire>:
   8f808:	f800283a 	ret

0008f80c <__sinit_lock_release>:
   8f80c:	f800283a 	ret

0008f810 <__fp_lock_all>:
   8f810:	008002b4 	movhi	r2,10
   8f814:	10bb5c04 	addi	r2,r2,-4752
   8f818:	11000017 	ldw	r4,0(r2)
   8f81c:	01400274 	movhi	r5,9
   8f820:	297d9404 	addi	r5,r5,-2480
   8f824:	00901301 	jmpi	90130 <_fwalk>

0008f828 <__fp_unlock_all>:
   8f828:	008002b4 	movhi	r2,10
   8f82c:	10bb5c04 	addi	r2,r2,-4752
   8f830:	11000017 	ldw	r4,0(r2)
   8f834:	01400274 	movhi	r5,9
   8f838:	297d2804 	addi	r5,r5,-2912
   8f83c:	00901301 	jmpi	90130 <_fwalk>

0008f840 <_malloc_trim_r>:
   8f840:	defffb04 	addi	sp,sp,-20
   8f844:	dcc00315 	stw	r19,12(sp)
   8f848:	04c002b4 	movhi	r19,10
   8f84c:	dc800215 	stw	r18,8(sp)
   8f850:	dc400115 	stw	r17,4(sp)
   8f854:	dc000015 	stw	r16,0(sp)
   8f858:	dfc00415 	stw	ra,16(sp)
   8f85c:	2821883a 	mov	r16,r5
   8f860:	9cf5d304 	addi	r19,r19,-10420
   8f864:	2025883a 	mov	r18,r4
   8f868:	00994880 	call	99488 <__malloc_lock>
   8f86c:	98800217 	ldw	r2,8(r19)
   8f870:	14400117 	ldw	r17,4(r2)
   8f874:	00bfff04 	movi	r2,-4
   8f878:	88a2703a 	and	r17,r17,r2
   8f87c:	8c21c83a 	sub	r16,r17,r16
   8f880:	8403fbc4 	addi	r16,r16,4079
   8f884:	8020d33a 	srli	r16,r16,12
   8f888:	0083ffc4 	movi	r2,4095
   8f88c:	843fffc4 	addi	r16,r16,-1
   8f890:	8020933a 	slli	r16,r16,12
   8f894:	1400060e 	bge	r2,r16,8f8b0 <_malloc_trim_r+0x70>
   8f898:	000b883a 	mov	r5,zero
   8f89c:	9009883a 	mov	r4,r18
   8f8a0:	00928000 	call	92800 <_sbrk_r>
   8f8a4:	98c00217 	ldw	r3,8(r19)
   8f8a8:	1c47883a 	add	r3,r3,r17
   8f8ac:	10c00a26 	beq	r2,r3,8f8d8 <_malloc_trim_r+0x98>
   8f8b0:	9009883a 	mov	r4,r18
   8f8b4:	00994ac0 	call	994ac <__malloc_unlock>
   8f8b8:	0005883a 	mov	r2,zero
   8f8bc:	dfc00417 	ldw	ra,16(sp)
   8f8c0:	dcc00317 	ldw	r19,12(sp)
   8f8c4:	dc800217 	ldw	r18,8(sp)
   8f8c8:	dc400117 	ldw	r17,4(sp)
   8f8cc:	dc000017 	ldw	r16,0(sp)
   8f8d0:	dec00504 	addi	sp,sp,20
   8f8d4:	f800283a 	ret
   8f8d8:	040bc83a 	sub	r5,zero,r16
   8f8dc:	9009883a 	mov	r4,r18
   8f8e0:	00928000 	call	92800 <_sbrk_r>
   8f8e4:	00ffffc4 	movi	r3,-1
   8f8e8:	10c00d26 	beq	r2,r3,8f920 <_malloc_trim_r+0xe0>
   8f8ec:	00c002b4 	movhi	r3,10
   8f8f0:	18c5a104 	addi	r3,r3,5764
   8f8f4:	18800017 	ldw	r2,0(r3)
   8f8f8:	99000217 	ldw	r4,8(r19)
   8f8fc:	8c23c83a 	sub	r17,r17,r16
   8f900:	8c400054 	ori	r17,r17,1
   8f904:	1421c83a 	sub	r16,r2,r16
   8f908:	24400115 	stw	r17,4(r4)
   8f90c:	9009883a 	mov	r4,r18
   8f910:	1c000015 	stw	r16,0(r3)
   8f914:	00994ac0 	call	994ac <__malloc_unlock>
   8f918:	00800044 	movi	r2,1
   8f91c:	003fe706 	br	8f8bc <__alt_data_end+0xfffbf9fc>
   8f920:	000b883a 	mov	r5,zero
   8f924:	9009883a 	mov	r4,r18
   8f928:	00928000 	call	92800 <_sbrk_r>
   8f92c:	99000217 	ldw	r4,8(r19)
   8f930:	014003c4 	movi	r5,15
   8f934:	1107c83a 	sub	r3,r2,r4
   8f938:	28ffdd0e 	bge	r5,r3,8f8b0 <__alt_data_end+0xfffbf9f0>
   8f93c:	014002b4 	movhi	r5,10
   8f940:	297b5e04 	addi	r5,r5,-4744
   8f944:	29400017 	ldw	r5,0(r5)
   8f948:	18c00054 	ori	r3,r3,1
   8f94c:	20c00115 	stw	r3,4(r4)
   8f950:	00c002b4 	movhi	r3,10
   8f954:	1145c83a 	sub	r2,r2,r5
   8f958:	18c5a104 	addi	r3,r3,5764
   8f95c:	18800015 	stw	r2,0(r3)
   8f960:	003fd306 	br	8f8b0 <__alt_data_end+0xfffbf9f0>

0008f964 <_free_r>:
   8f964:	28004126 	beq	r5,zero,8fa6c <_free_r+0x108>
   8f968:	defffd04 	addi	sp,sp,-12
   8f96c:	dc400115 	stw	r17,4(sp)
   8f970:	dc000015 	stw	r16,0(sp)
   8f974:	2023883a 	mov	r17,r4
   8f978:	2821883a 	mov	r16,r5
   8f97c:	dfc00215 	stw	ra,8(sp)
   8f980:	00994880 	call	99488 <__malloc_lock>
   8f984:	81ffff17 	ldw	r7,-4(r16)
   8f988:	00bfff84 	movi	r2,-2
   8f98c:	010002b4 	movhi	r4,10
   8f990:	81bffe04 	addi	r6,r16,-8
   8f994:	3884703a 	and	r2,r7,r2
   8f998:	2135d304 	addi	r4,r4,-10420
   8f99c:	308b883a 	add	r5,r6,r2
   8f9a0:	2a400117 	ldw	r9,4(r5)
   8f9a4:	22000217 	ldw	r8,8(r4)
   8f9a8:	00ffff04 	movi	r3,-4
   8f9ac:	48c6703a 	and	r3,r9,r3
   8f9b0:	2a005726 	beq	r5,r8,8fb10 <_free_r+0x1ac>
   8f9b4:	28c00115 	stw	r3,4(r5)
   8f9b8:	39c0004c 	andi	r7,r7,1
   8f9bc:	3800091e 	bne	r7,zero,8f9e4 <_free_r+0x80>
   8f9c0:	823ffe17 	ldw	r8,-8(r16)
   8f9c4:	22400204 	addi	r9,r4,8
   8f9c8:	320dc83a 	sub	r6,r6,r8
   8f9cc:	31c00217 	ldw	r7,8(r6)
   8f9d0:	1205883a 	add	r2,r2,r8
   8f9d4:	3a406526 	beq	r7,r9,8fb6c <_free_r+0x208>
   8f9d8:	32000317 	ldw	r8,12(r6)
   8f9dc:	3a000315 	stw	r8,12(r7)
   8f9e0:	41c00215 	stw	r7,8(r8)
   8f9e4:	28cf883a 	add	r7,r5,r3
   8f9e8:	39c00117 	ldw	r7,4(r7)
   8f9ec:	39c0004c 	andi	r7,r7,1
   8f9f0:	38003a26 	beq	r7,zero,8fadc <_free_r+0x178>
   8f9f4:	10c00054 	ori	r3,r2,1
   8f9f8:	30c00115 	stw	r3,4(r6)
   8f9fc:	3087883a 	add	r3,r6,r2
   8fa00:	18800015 	stw	r2,0(r3)
   8fa04:	00c07fc4 	movi	r3,511
   8fa08:	18801936 	bltu	r3,r2,8fa70 <_free_r+0x10c>
   8fa0c:	1004d0fa 	srli	r2,r2,3
   8fa10:	01c00044 	movi	r7,1
   8fa14:	21400117 	ldw	r5,4(r4)
   8fa18:	10c00044 	addi	r3,r2,1
   8fa1c:	18c7883a 	add	r3,r3,r3
   8fa20:	1005d0ba 	srai	r2,r2,2
   8fa24:	18c7883a 	add	r3,r3,r3
   8fa28:	18c7883a 	add	r3,r3,r3
   8fa2c:	1907883a 	add	r3,r3,r4
   8fa30:	3884983a 	sll	r2,r7,r2
   8fa34:	19c00017 	ldw	r7,0(r3)
   8fa38:	1a3ffe04 	addi	r8,r3,-8
   8fa3c:	1144b03a 	or	r2,r2,r5
   8fa40:	32000315 	stw	r8,12(r6)
   8fa44:	31c00215 	stw	r7,8(r6)
   8fa48:	20800115 	stw	r2,4(r4)
   8fa4c:	19800015 	stw	r6,0(r3)
   8fa50:	39800315 	stw	r6,12(r7)
   8fa54:	8809883a 	mov	r4,r17
   8fa58:	dfc00217 	ldw	ra,8(sp)
   8fa5c:	dc400117 	ldw	r17,4(sp)
   8fa60:	dc000017 	ldw	r16,0(sp)
   8fa64:	dec00304 	addi	sp,sp,12
   8fa68:	00994ac1 	jmpi	994ac <__malloc_unlock>
   8fa6c:	f800283a 	ret
   8fa70:	100ad27a 	srli	r5,r2,9
   8fa74:	00c00104 	movi	r3,4
   8fa78:	19404a36 	bltu	r3,r5,8fba4 <_free_r+0x240>
   8fa7c:	100ad1ba 	srli	r5,r2,6
   8fa80:	28c00e44 	addi	r3,r5,57
   8fa84:	18c7883a 	add	r3,r3,r3
   8fa88:	29400e04 	addi	r5,r5,56
   8fa8c:	18c7883a 	add	r3,r3,r3
   8fa90:	18c7883a 	add	r3,r3,r3
   8fa94:	1909883a 	add	r4,r3,r4
   8fa98:	20c00017 	ldw	r3,0(r4)
   8fa9c:	01c002b4 	movhi	r7,10
   8faa0:	213ffe04 	addi	r4,r4,-8
   8faa4:	39f5d304 	addi	r7,r7,-10420
   8faa8:	20c04426 	beq	r4,r3,8fbbc <_free_r+0x258>
   8faac:	01ffff04 	movi	r7,-4
   8fab0:	19400117 	ldw	r5,4(r3)
   8fab4:	29ca703a 	and	r5,r5,r7
   8fab8:	1140022e 	bgeu	r2,r5,8fac4 <_free_r+0x160>
   8fabc:	18c00217 	ldw	r3,8(r3)
   8fac0:	20fffb1e 	bne	r4,r3,8fab0 <__alt_data_end+0xfffbfbf0>
   8fac4:	19000317 	ldw	r4,12(r3)
   8fac8:	31000315 	stw	r4,12(r6)
   8facc:	30c00215 	stw	r3,8(r6)
   8fad0:	21800215 	stw	r6,8(r4)
   8fad4:	19800315 	stw	r6,12(r3)
   8fad8:	003fde06 	br	8fa54 <__alt_data_end+0xfffbfb94>
   8fadc:	29c00217 	ldw	r7,8(r5)
   8fae0:	10c5883a 	add	r2,r2,r3
   8fae4:	00c002b4 	movhi	r3,10
   8fae8:	18f5d504 	addi	r3,r3,-10412
   8faec:	38c03b26 	beq	r7,r3,8fbdc <_free_r+0x278>
   8faf0:	2a000317 	ldw	r8,12(r5)
   8faf4:	11400054 	ori	r5,r2,1
   8faf8:	3087883a 	add	r3,r6,r2
   8fafc:	3a000315 	stw	r8,12(r7)
   8fb00:	41c00215 	stw	r7,8(r8)
   8fb04:	31400115 	stw	r5,4(r6)
   8fb08:	18800015 	stw	r2,0(r3)
   8fb0c:	003fbd06 	br	8fa04 <__alt_data_end+0xfffbfb44>
   8fb10:	39c0004c 	andi	r7,r7,1
   8fb14:	10c5883a 	add	r2,r2,r3
   8fb18:	3800071e 	bne	r7,zero,8fb38 <_free_r+0x1d4>
   8fb1c:	81fffe17 	ldw	r7,-8(r16)
   8fb20:	31cdc83a 	sub	r6,r6,r7
   8fb24:	30c00317 	ldw	r3,12(r6)
   8fb28:	31400217 	ldw	r5,8(r6)
   8fb2c:	11c5883a 	add	r2,r2,r7
   8fb30:	28c00315 	stw	r3,12(r5)
   8fb34:	19400215 	stw	r5,8(r3)
   8fb38:	10c00054 	ori	r3,r2,1
   8fb3c:	30c00115 	stw	r3,4(r6)
   8fb40:	00c002b4 	movhi	r3,10
   8fb44:	18fb5f04 	addi	r3,r3,-4740
   8fb48:	18c00017 	ldw	r3,0(r3)
   8fb4c:	21800215 	stw	r6,8(r4)
   8fb50:	10ffc036 	bltu	r2,r3,8fa54 <__alt_data_end+0xfffbfb94>
   8fb54:	008002b4 	movhi	r2,10
   8fb58:	10850104 	addi	r2,r2,5124
   8fb5c:	11400017 	ldw	r5,0(r2)
   8fb60:	8809883a 	mov	r4,r17
   8fb64:	008f8400 	call	8f840 <_malloc_trim_r>
   8fb68:	003fba06 	br	8fa54 <__alt_data_end+0xfffbfb94>
   8fb6c:	28c9883a 	add	r4,r5,r3
   8fb70:	21000117 	ldw	r4,4(r4)
   8fb74:	2100004c 	andi	r4,r4,1
   8fb78:	2000391e 	bne	r4,zero,8fc60 <_free_r+0x2fc>
   8fb7c:	29c00217 	ldw	r7,8(r5)
   8fb80:	29000317 	ldw	r4,12(r5)
   8fb84:	1885883a 	add	r2,r3,r2
   8fb88:	10c00054 	ori	r3,r2,1
   8fb8c:	39000315 	stw	r4,12(r7)
   8fb90:	21c00215 	stw	r7,8(r4)
   8fb94:	30c00115 	stw	r3,4(r6)
   8fb98:	308d883a 	add	r6,r6,r2
   8fb9c:	30800015 	stw	r2,0(r6)
   8fba0:	003fac06 	br	8fa54 <__alt_data_end+0xfffbfb94>
   8fba4:	00c00504 	movi	r3,20
   8fba8:	19401536 	bltu	r3,r5,8fc00 <_free_r+0x29c>
   8fbac:	28c01704 	addi	r3,r5,92
   8fbb0:	18c7883a 	add	r3,r3,r3
   8fbb4:	294016c4 	addi	r5,r5,91
   8fbb8:	003fb406 	br	8fa8c <__alt_data_end+0xfffbfbcc>
   8fbbc:	280bd0ba 	srai	r5,r5,2
   8fbc0:	00c00044 	movi	r3,1
   8fbc4:	38800117 	ldw	r2,4(r7)
   8fbc8:	194a983a 	sll	r5,r3,r5
   8fbcc:	2007883a 	mov	r3,r4
   8fbd0:	2884b03a 	or	r2,r5,r2
   8fbd4:	38800115 	stw	r2,4(r7)
   8fbd8:	003fbb06 	br	8fac8 <__alt_data_end+0xfffbfc08>
   8fbdc:	21800515 	stw	r6,20(r4)
   8fbe0:	21800415 	stw	r6,16(r4)
   8fbe4:	10c00054 	ori	r3,r2,1
   8fbe8:	31c00315 	stw	r7,12(r6)
   8fbec:	31c00215 	stw	r7,8(r6)
   8fbf0:	30c00115 	stw	r3,4(r6)
   8fbf4:	308d883a 	add	r6,r6,r2
   8fbf8:	30800015 	stw	r2,0(r6)
   8fbfc:	003f9506 	br	8fa54 <__alt_data_end+0xfffbfb94>
   8fc00:	00c01504 	movi	r3,84
   8fc04:	19400536 	bltu	r3,r5,8fc1c <_free_r+0x2b8>
   8fc08:	100ad33a 	srli	r5,r2,12
   8fc0c:	28c01bc4 	addi	r3,r5,111
   8fc10:	18c7883a 	add	r3,r3,r3
   8fc14:	29401b84 	addi	r5,r5,110
   8fc18:	003f9c06 	br	8fa8c <__alt_data_end+0xfffbfbcc>
   8fc1c:	00c05504 	movi	r3,340
   8fc20:	19400536 	bltu	r3,r5,8fc38 <_free_r+0x2d4>
   8fc24:	100ad3fa 	srli	r5,r2,15
   8fc28:	28c01e04 	addi	r3,r5,120
   8fc2c:	18c7883a 	add	r3,r3,r3
   8fc30:	29401dc4 	addi	r5,r5,119
   8fc34:	003f9506 	br	8fa8c <__alt_data_end+0xfffbfbcc>
   8fc38:	00c15504 	movi	r3,1364
   8fc3c:	19400536 	bltu	r3,r5,8fc54 <_free_r+0x2f0>
   8fc40:	100ad4ba 	srli	r5,r2,18
   8fc44:	28c01f44 	addi	r3,r5,125
   8fc48:	18c7883a 	add	r3,r3,r3
   8fc4c:	29401f04 	addi	r5,r5,124
   8fc50:	003f8e06 	br	8fa8c <__alt_data_end+0xfffbfbcc>
   8fc54:	00c03f84 	movi	r3,254
   8fc58:	01401f84 	movi	r5,126
   8fc5c:	003f8b06 	br	8fa8c <__alt_data_end+0xfffbfbcc>
   8fc60:	10c00054 	ori	r3,r2,1
   8fc64:	30c00115 	stw	r3,4(r6)
   8fc68:	308d883a 	add	r6,r6,r2
   8fc6c:	30800015 	stw	r2,0(r6)
   8fc70:	003f7806 	br	8fa54 <__alt_data_end+0xfffbfb94>

0008fc74 <__sfvwrite_r>:
   8fc74:	30800217 	ldw	r2,8(r6)
   8fc78:	10006726 	beq	r2,zero,8fe18 <__sfvwrite_r+0x1a4>
   8fc7c:	28c0030b 	ldhu	r3,12(r5)
   8fc80:	defff404 	addi	sp,sp,-48
   8fc84:	dd400715 	stw	r21,28(sp)
   8fc88:	dd000615 	stw	r20,24(sp)
   8fc8c:	dc000215 	stw	r16,8(sp)
   8fc90:	dfc00b15 	stw	ra,44(sp)
   8fc94:	df000a15 	stw	fp,40(sp)
   8fc98:	ddc00915 	stw	r23,36(sp)
   8fc9c:	dd800815 	stw	r22,32(sp)
   8fca0:	dcc00515 	stw	r19,20(sp)
   8fca4:	dc800415 	stw	r18,16(sp)
   8fca8:	dc400315 	stw	r17,12(sp)
   8fcac:	1880020c 	andi	r2,r3,8
   8fcb0:	2821883a 	mov	r16,r5
   8fcb4:	202b883a 	mov	r21,r4
   8fcb8:	3029883a 	mov	r20,r6
   8fcbc:	10002726 	beq	r2,zero,8fd5c <__sfvwrite_r+0xe8>
   8fcc0:	28800417 	ldw	r2,16(r5)
   8fcc4:	10002526 	beq	r2,zero,8fd5c <__sfvwrite_r+0xe8>
   8fcc8:	1880008c 	andi	r2,r3,2
   8fccc:	a4400017 	ldw	r17,0(r20)
   8fcd0:	10002a26 	beq	r2,zero,8fd7c <__sfvwrite_r+0x108>
   8fcd4:	05a00034 	movhi	r22,32768
   8fcd8:	0027883a 	mov	r19,zero
   8fcdc:	0025883a 	mov	r18,zero
   8fce0:	b5bf0004 	addi	r22,r22,-1024
   8fce4:	980d883a 	mov	r6,r19
   8fce8:	a809883a 	mov	r4,r21
   8fcec:	90004626 	beq	r18,zero,8fe08 <__sfvwrite_r+0x194>
   8fcf0:	900f883a 	mov	r7,r18
   8fcf4:	b480022e 	bgeu	r22,r18,8fd00 <__sfvwrite_r+0x8c>
   8fcf8:	01e00034 	movhi	r7,32768
   8fcfc:	39ff0004 	addi	r7,r7,-1024
   8fd00:	80800917 	ldw	r2,36(r16)
   8fd04:	81400717 	ldw	r5,28(r16)
   8fd08:	103ee83a 	callr	r2
   8fd0c:	0080570e 	bge	zero,r2,8fe6c <__sfvwrite_r+0x1f8>
   8fd10:	a0c00217 	ldw	r3,8(r20)
   8fd14:	98a7883a 	add	r19,r19,r2
   8fd18:	90a5c83a 	sub	r18,r18,r2
   8fd1c:	1885c83a 	sub	r2,r3,r2
   8fd20:	a0800215 	stw	r2,8(r20)
   8fd24:	103fef1e 	bne	r2,zero,8fce4 <__alt_data_end+0xfffbfe24>
   8fd28:	0005883a 	mov	r2,zero
   8fd2c:	dfc00b17 	ldw	ra,44(sp)
   8fd30:	df000a17 	ldw	fp,40(sp)
   8fd34:	ddc00917 	ldw	r23,36(sp)
   8fd38:	dd800817 	ldw	r22,32(sp)
   8fd3c:	dd400717 	ldw	r21,28(sp)
   8fd40:	dd000617 	ldw	r20,24(sp)
   8fd44:	dcc00517 	ldw	r19,20(sp)
   8fd48:	dc800417 	ldw	r18,16(sp)
   8fd4c:	dc400317 	ldw	r17,12(sp)
   8fd50:	dc000217 	ldw	r16,8(sp)
   8fd54:	dec00c04 	addi	sp,sp,48
   8fd58:	f800283a 	ret
   8fd5c:	800b883a 	mov	r5,r16
   8fd60:	a809883a 	mov	r4,r21
   8fd64:	008d81c0 	call	8d81c <__swsetup_r>
   8fd68:	1000eb1e 	bne	r2,zero,90118 <__sfvwrite_r+0x4a4>
   8fd6c:	80c0030b 	ldhu	r3,12(r16)
   8fd70:	a4400017 	ldw	r17,0(r20)
   8fd74:	1880008c 	andi	r2,r3,2
   8fd78:	103fd61e 	bne	r2,zero,8fcd4 <__alt_data_end+0xfffbfe14>
   8fd7c:	1880004c 	andi	r2,r3,1
   8fd80:	10003f1e 	bne	r2,zero,8fe80 <__sfvwrite_r+0x20c>
   8fd84:	0039883a 	mov	fp,zero
   8fd88:	0025883a 	mov	r18,zero
   8fd8c:	90001a26 	beq	r18,zero,8fdf8 <__sfvwrite_r+0x184>
   8fd90:	1880800c 	andi	r2,r3,512
   8fd94:	84c00217 	ldw	r19,8(r16)
   8fd98:	10002126 	beq	r2,zero,8fe20 <__sfvwrite_r+0x1ac>
   8fd9c:	982f883a 	mov	r23,r19
   8fda0:	94c09336 	bltu	r18,r19,8fff0 <__sfvwrite_r+0x37c>
   8fda4:	1881200c 	andi	r2,r3,1152
   8fda8:	10009e1e 	bne	r2,zero,90024 <__sfvwrite_r+0x3b0>
   8fdac:	81000017 	ldw	r4,0(r16)
   8fdb0:	b80d883a 	mov	r6,r23
   8fdb4:	e00b883a 	mov	r5,fp
   8fdb8:	0090e400 	call	90e40 <memmove>
   8fdbc:	80c00217 	ldw	r3,8(r16)
   8fdc0:	81000017 	ldw	r4,0(r16)
   8fdc4:	9005883a 	mov	r2,r18
   8fdc8:	1ce7c83a 	sub	r19,r3,r19
   8fdcc:	25cf883a 	add	r7,r4,r23
   8fdd0:	84c00215 	stw	r19,8(r16)
   8fdd4:	81c00015 	stw	r7,0(r16)
   8fdd8:	a0c00217 	ldw	r3,8(r20)
   8fddc:	e0b9883a 	add	fp,fp,r2
   8fde0:	90a5c83a 	sub	r18,r18,r2
   8fde4:	18a7c83a 	sub	r19,r3,r2
   8fde8:	a4c00215 	stw	r19,8(r20)
   8fdec:	983fce26 	beq	r19,zero,8fd28 <__alt_data_end+0xfffbfe68>
   8fdf0:	80c0030b 	ldhu	r3,12(r16)
   8fdf4:	903fe61e 	bne	r18,zero,8fd90 <__alt_data_end+0xfffbfed0>
   8fdf8:	8f000017 	ldw	fp,0(r17)
   8fdfc:	8c800117 	ldw	r18,4(r17)
   8fe00:	8c400204 	addi	r17,r17,8
   8fe04:	003fe106 	br	8fd8c <__alt_data_end+0xfffbfecc>
   8fe08:	8cc00017 	ldw	r19,0(r17)
   8fe0c:	8c800117 	ldw	r18,4(r17)
   8fe10:	8c400204 	addi	r17,r17,8
   8fe14:	003fb306 	br	8fce4 <__alt_data_end+0xfffbfe24>
   8fe18:	0005883a 	mov	r2,zero
   8fe1c:	f800283a 	ret
   8fe20:	81000017 	ldw	r4,0(r16)
   8fe24:	80800417 	ldw	r2,16(r16)
   8fe28:	11005736 	bltu	r2,r4,8ff88 <__sfvwrite_r+0x314>
   8fe2c:	85c00517 	ldw	r23,20(r16)
   8fe30:	95c05536 	bltu	r18,r23,8ff88 <__sfvwrite_r+0x314>
   8fe34:	00a00034 	movhi	r2,32768
   8fe38:	10bfffc4 	addi	r2,r2,-1
   8fe3c:	9009883a 	mov	r4,r18
   8fe40:	1480012e 	bgeu	r2,r18,8fe48 <__sfvwrite_r+0x1d4>
   8fe44:	1009883a 	mov	r4,r2
   8fe48:	b80b883a 	mov	r5,r23
   8fe4c:	0088c940 	call	88c94 <__divsi3>
   8fe50:	15cf383a 	mul	r7,r2,r23
   8fe54:	81400717 	ldw	r5,28(r16)
   8fe58:	80800917 	ldw	r2,36(r16)
   8fe5c:	e00d883a 	mov	r6,fp
   8fe60:	a809883a 	mov	r4,r21
   8fe64:	103ee83a 	callr	r2
   8fe68:	00bfdb16 	blt	zero,r2,8fdd8 <__alt_data_end+0xfffbff18>
   8fe6c:	8080030b 	ldhu	r2,12(r16)
   8fe70:	10801014 	ori	r2,r2,64
   8fe74:	8080030d 	sth	r2,12(r16)
   8fe78:	00bfffc4 	movi	r2,-1
   8fe7c:	003fab06 	br	8fd2c <__alt_data_end+0xfffbfe6c>
   8fe80:	0027883a 	mov	r19,zero
   8fe84:	0011883a 	mov	r8,zero
   8fe88:	0039883a 	mov	fp,zero
   8fe8c:	0025883a 	mov	r18,zero
   8fe90:	90001f26 	beq	r18,zero,8ff10 <__sfvwrite_r+0x29c>
   8fe94:	40005a26 	beq	r8,zero,90000 <__sfvwrite_r+0x38c>
   8fe98:	982d883a 	mov	r22,r19
   8fe9c:	94c0012e 	bgeu	r18,r19,8fea4 <__sfvwrite_r+0x230>
   8fea0:	902d883a 	mov	r22,r18
   8fea4:	81000017 	ldw	r4,0(r16)
   8fea8:	80800417 	ldw	r2,16(r16)
   8feac:	b02f883a 	mov	r23,r22
   8feb0:	81c00517 	ldw	r7,20(r16)
   8feb4:	1100032e 	bgeu	r2,r4,8fec4 <__sfvwrite_r+0x250>
   8feb8:	80c00217 	ldw	r3,8(r16)
   8febc:	38c7883a 	add	r3,r7,r3
   8fec0:	1d801816 	blt	r3,r22,8ff24 <__sfvwrite_r+0x2b0>
   8fec4:	b1c03e16 	blt	r22,r7,8ffc0 <__sfvwrite_r+0x34c>
   8fec8:	80800917 	ldw	r2,36(r16)
   8fecc:	81400717 	ldw	r5,28(r16)
   8fed0:	e00d883a 	mov	r6,fp
   8fed4:	da000115 	stw	r8,4(sp)
   8fed8:	a809883a 	mov	r4,r21
   8fedc:	103ee83a 	callr	r2
   8fee0:	102f883a 	mov	r23,r2
   8fee4:	da000117 	ldw	r8,4(sp)
   8fee8:	00bfe00e 	bge	zero,r2,8fe6c <__alt_data_end+0xfffbffac>
   8feec:	9de7c83a 	sub	r19,r19,r23
   8fef0:	98001f26 	beq	r19,zero,8ff70 <__sfvwrite_r+0x2fc>
   8fef4:	a0800217 	ldw	r2,8(r20)
   8fef8:	e5f9883a 	add	fp,fp,r23
   8fefc:	95e5c83a 	sub	r18,r18,r23
   8ff00:	15efc83a 	sub	r23,r2,r23
   8ff04:	a5c00215 	stw	r23,8(r20)
   8ff08:	b83f8726 	beq	r23,zero,8fd28 <__alt_data_end+0xfffbfe68>
   8ff0c:	903fe11e 	bne	r18,zero,8fe94 <__alt_data_end+0xfffbffd4>
   8ff10:	8f000017 	ldw	fp,0(r17)
   8ff14:	8c800117 	ldw	r18,4(r17)
   8ff18:	0011883a 	mov	r8,zero
   8ff1c:	8c400204 	addi	r17,r17,8
   8ff20:	003fdb06 	br	8fe90 <__alt_data_end+0xfffbffd0>
   8ff24:	180d883a 	mov	r6,r3
   8ff28:	e00b883a 	mov	r5,fp
   8ff2c:	da000115 	stw	r8,4(sp)
   8ff30:	d8c00015 	stw	r3,0(sp)
   8ff34:	0090e400 	call	90e40 <memmove>
   8ff38:	d8c00017 	ldw	r3,0(sp)
   8ff3c:	80800017 	ldw	r2,0(r16)
   8ff40:	800b883a 	mov	r5,r16
   8ff44:	a809883a 	mov	r4,r21
   8ff48:	10c5883a 	add	r2,r2,r3
   8ff4c:	80800015 	stw	r2,0(r16)
   8ff50:	d8c00015 	stw	r3,0(sp)
   8ff54:	008f4140 	call	8f414 <_fflush_r>
   8ff58:	d8c00017 	ldw	r3,0(sp)
   8ff5c:	da000117 	ldw	r8,4(sp)
   8ff60:	103fc21e 	bne	r2,zero,8fe6c <__alt_data_end+0xfffbffac>
   8ff64:	182f883a 	mov	r23,r3
   8ff68:	9de7c83a 	sub	r19,r19,r23
   8ff6c:	983fe11e 	bne	r19,zero,8fef4 <__alt_data_end+0xfffc0034>
   8ff70:	800b883a 	mov	r5,r16
   8ff74:	a809883a 	mov	r4,r21
   8ff78:	008f4140 	call	8f414 <_fflush_r>
   8ff7c:	103fbb1e 	bne	r2,zero,8fe6c <__alt_data_end+0xfffbffac>
   8ff80:	0011883a 	mov	r8,zero
   8ff84:	003fdb06 	br	8fef4 <__alt_data_end+0xfffc0034>
   8ff88:	94c0012e 	bgeu	r18,r19,8ff90 <__sfvwrite_r+0x31c>
   8ff8c:	9027883a 	mov	r19,r18
   8ff90:	980d883a 	mov	r6,r19
   8ff94:	e00b883a 	mov	r5,fp
   8ff98:	0090e400 	call	90e40 <memmove>
   8ff9c:	80800217 	ldw	r2,8(r16)
   8ffa0:	80c00017 	ldw	r3,0(r16)
   8ffa4:	14c5c83a 	sub	r2,r2,r19
   8ffa8:	1cc7883a 	add	r3,r3,r19
   8ffac:	80800215 	stw	r2,8(r16)
   8ffb0:	80c00015 	stw	r3,0(r16)
   8ffb4:	10004326 	beq	r2,zero,900c4 <__sfvwrite_r+0x450>
   8ffb8:	9805883a 	mov	r2,r19
   8ffbc:	003f8606 	br	8fdd8 <__alt_data_end+0xfffbff18>
   8ffc0:	b00d883a 	mov	r6,r22
   8ffc4:	e00b883a 	mov	r5,fp
   8ffc8:	da000115 	stw	r8,4(sp)
   8ffcc:	0090e400 	call	90e40 <memmove>
   8ffd0:	80800217 	ldw	r2,8(r16)
   8ffd4:	80c00017 	ldw	r3,0(r16)
   8ffd8:	da000117 	ldw	r8,4(sp)
   8ffdc:	1585c83a 	sub	r2,r2,r22
   8ffe0:	1dad883a 	add	r22,r3,r22
   8ffe4:	80800215 	stw	r2,8(r16)
   8ffe8:	85800015 	stw	r22,0(r16)
   8ffec:	003fbf06 	br	8feec <__alt_data_end+0xfffc002c>
   8fff0:	81000017 	ldw	r4,0(r16)
   8fff4:	9027883a 	mov	r19,r18
   8fff8:	902f883a 	mov	r23,r18
   8fffc:	003f6c06 	br	8fdb0 <__alt_data_end+0xfffbfef0>
   90000:	900d883a 	mov	r6,r18
   90004:	01400284 	movi	r5,10
   90008:	e009883a 	mov	r4,fp
   9000c:	0090d5c0 	call	90d5c <memchr>
   90010:	10003e26 	beq	r2,zero,9010c <__sfvwrite_r+0x498>
   90014:	10800044 	addi	r2,r2,1
   90018:	1727c83a 	sub	r19,r2,fp
   9001c:	02000044 	movi	r8,1
   90020:	003f9d06 	br	8fe98 <__alt_data_end+0xfffbffd8>
   90024:	80800517 	ldw	r2,20(r16)
   90028:	81400417 	ldw	r5,16(r16)
   9002c:	81c00017 	ldw	r7,0(r16)
   90030:	10a7883a 	add	r19,r2,r2
   90034:	9885883a 	add	r2,r19,r2
   90038:	1026d7fa 	srli	r19,r2,31
   9003c:	396dc83a 	sub	r22,r7,r5
   90040:	b1000044 	addi	r4,r22,1
   90044:	9885883a 	add	r2,r19,r2
   90048:	1027d07a 	srai	r19,r2,1
   9004c:	2485883a 	add	r2,r4,r18
   90050:	980d883a 	mov	r6,r19
   90054:	9880022e 	bgeu	r19,r2,90060 <__sfvwrite_r+0x3ec>
   90058:	1027883a 	mov	r19,r2
   9005c:	100d883a 	mov	r6,r2
   90060:	18c1000c 	andi	r3,r3,1024
   90064:	18001c26 	beq	r3,zero,900d8 <__sfvwrite_r+0x464>
   90068:	300b883a 	mov	r5,r6
   9006c:	a809883a 	mov	r4,r21
   90070:	00905500 	call	90550 <_malloc_r>
   90074:	102f883a 	mov	r23,r2
   90078:	10002926 	beq	r2,zero,90120 <__sfvwrite_r+0x4ac>
   9007c:	81400417 	ldw	r5,16(r16)
   90080:	b00d883a 	mov	r6,r22
   90084:	1009883a 	mov	r4,r2
   90088:	0088e480 	call	88e48 <memcpy>
   9008c:	8080030b 	ldhu	r2,12(r16)
   90090:	00fedfc4 	movi	r3,-1153
   90094:	10c4703a 	and	r2,r2,r3
   90098:	10802014 	ori	r2,r2,128
   9009c:	8080030d 	sth	r2,12(r16)
   900a0:	bd89883a 	add	r4,r23,r22
   900a4:	9d8fc83a 	sub	r7,r19,r22
   900a8:	85c00415 	stw	r23,16(r16)
   900ac:	84c00515 	stw	r19,20(r16)
   900b0:	81000015 	stw	r4,0(r16)
   900b4:	9027883a 	mov	r19,r18
   900b8:	81c00215 	stw	r7,8(r16)
   900bc:	902f883a 	mov	r23,r18
   900c0:	003f3b06 	br	8fdb0 <__alt_data_end+0xfffbfef0>
   900c4:	800b883a 	mov	r5,r16
   900c8:	a809883a 	mov	r4,r21
   900cc:	008f4140 	call	8f414 <_fflush_r>
   900d0:	103fb926 	beq	r2,zero,8ffb8 <__alt_data_end+0xfffc00f8>
   900d4:	003f6506 	br	8fe6c <__alt_data_end+0xfffbffac>
   900d8:	a809883a 	mov	r4,r21
   900dc:	00922280 	call	92228 <_realloc_r>
   900e0:	102f883a 	mov	r23,r2
   900e4:	103fee1e 	bne	r2,zero,900a0 <__alt_data_end+0xfffc01e0>
   900e8:	81400417 	ldw	r5,16(r16)
   900ec:	a809883a 	mov	r4,r21
   900f0:	008f9640 	call	8f964 <_free_r>
   900f4:	8080030b 	ldhu	r2,12(r16)
   900f8:	00ffdfc4 	movi	r3,-129
   900fc:	1884703a 	and	r2,r3,r2
   90100:	00c00304 	movi	r3,12
   90104:	a8c00015 	stw	r3,0(r21)
   90108:	003f5906 	br	8fe70 <__alt_data_end+0xfffbffb0>
   9010c:	94c00044 	addi	r19,r18,1
   90110:	02000044 	movi	r8,1
   90114:	003f6006 	br	8fe98 <__alt_data_end+0xfffbffd8>
   90118:	00bfffc4 	movi	r2,-1
   9011c:	003f0306 	br	8fd2c <__alt_data_end+0xfffbfe6c>
   90120:	00800304 	movi	r2,12
   90124:	a8800015 	stw	r2,0(r21)
   90128:	8080030b 	ldhu	r2,12(r16)
   9012c:	003f5006 	br	8fe70 <__alt_data_end+0xfffbffb0>

00090130 <_fwalk>:
   90130:	defff704 	addi	sp,sp,-36
   90134:	dd000415 	stw	r20,16(sp)
   90138:	dfc00815 	stw	ra,32(sp)
   9013c:	ddc00715 	stw	r23,28(sp)
   90140:	dd800615 	stw	r22,24(sp)
   90144:	dd400515 	stw	r21,20(sp)
   90148:	dcc00315 	stw	r19,12(sp)
   9014c:	dc800215 	stw	r18,8(sp)
   90150:	dc400115 	stw	r17,4(sp)
   90154:	dc000015 	stw	r16,0(sp)
   90158:	2500b804 	addi	r20,r4,736
   9015c:	a0002326 	beq	r20,zero,901ec <_fwalk+0xbc>
   90160:	282b883a 	mov	r21,r5
   90164:	002f883a 	mov	r23,zero
   90168:	05800044 	movi	r22,1
   9016c:	04ffffc4 	movi	r19,-1
   90170:	a4400117 	ldw	r17,4(r20)
   90174:	a4800217 	ldw	r18,8(r20)
   90178:	8c7fffc4 	addi	r17,r17,-1
   9017c:	88000d16 	blt	r17,zero,901b4 <_fwalk+0x84>
   90180:	94000304 	addi	r16,r18,12
   90184:	94800384 	addi	r18,r18,14
   90188:	8080000b 	ldhu	r2,0(r16)
   9018c:	8c7fffc4 	addi	r17,r17,-1
   90190:	813ffd04 	addi	r4,r16,-12
   90194:	b080042e 	bgeu	r22,r2,901a8 <_fwalk+0x78>
   90198:	9080000f 	ldh	r2,0(r18)
   9019c:	14c00226 	beq	r2,r19,901a8 <_fwalk+0x78>
   901a0:	a83ee83a 	callr	r21
   901a4:	b8aeb03a 	or	r23,r23,r2
   901a8:	84001a04 	addi	r16,r16,104
   901ac:	94801a04 	addi	r18,r18,104
   901b0:	8cfff51e 	bne	r17,r19,90188 <__alt_data_end+0xfffc02c8>
   901b4:	a5000017 	ldw	r20,0(r20)
   901b8:	a03fed1e 	bne	r20,zero,90170 <__alt_data_end+0xfffc02b0>
   901bc:	b805883a 	mov	r2,r23
   901c0:	dfc00817 	ldw	ra,32(sp)
   901c4:	ddc00717 	ldw	r23,28(sp)
   901c8:	dd800617 	ldw	r22,24(sp)
   901cc:	dd400517 	ldw	r21,20(sp)
   901d0:	dd000417 	ldw	r20,16(sp)
   901d4:	dcc00317 	ldw	r19,12(sp)
   901d8:	dc800217 	ldw	r18,8(sp)
   901dc:	dc400117 	ldw	r17,4(sp)
   901e0:	dc000017 	ldw	r16,0(sp)
   901e4:	dec00904 	addi	sp,sp,36
   901e8:	f800283a 	ret
   901ec:	002f883a 	mov	r23,zero
   901f0:	003ff206 	br	901bc <__alt_data_end+0xfffc02fc>

000901f4 <_fwalk_reent>:
   901f4:	defff704 	addi	sp,sp,-36
   901f8:	dd000415 	stw	r20,16(sp)
   901fc:	dfc00815 	stw	ra,32(sp)
   90200:	ddc00715 	stw	r23,28(sp)
   90204:	dd800615 	stw	r22,24(sp)
   90208:	dd400515 	stw	r21,20(sp)
   9020c:	dcc00315 	stw	r19,12(sp)
   90210:	dc800215 	stw	r18,8(sp)
   90214:	dc400115 	stw	r17,4(sp)
   90218:	dc000015 	stw	r16,0(sp)
   9021c:	2500b804 	addi	r20,r4,736
   90220:	a0002326 	beq	r20,zero,902b0 <_fwalk_reent+0xbc>
   90224:	282b883a 	mov	r21,r5
   90228:	2027883a 	mov	r19,r4
   9022c:	002f883a 	mov	r23,zero
   90230:	05800044 	movi	r22,1
   90234:	04bfffc4 	movi	r18,-1
   90238:	a4400117 	ldw	r17,4(r20)
   9023c:	a4000217 	ldw	r16,8(r20)
   90240:	8c7fffc4 	addi	r17,r17,-1
   90244:	88000c16 	blt	r17,zero,90278 <_fwalk_reent+0x84>
   90248:	84000304 	addi	r16,r16,12
   9024c:	8080000b 	ldhu	r2,0(r16)
   90250:	8c7fffc4 	addi	r17,r17,-1
   90254:	817ffd04 	addi	r5,r16,-12
   90258:	b080052e 	bgeu	r22,r2,90270 <_fwalk_reent+0x7c>
   9025c:	8080008f 	ldh	r2,2(r16)
   90260:	9809883a 	mov	r4,r19
   90264:	14800226 	beq	r2,r18,90270 <_fwalk_reent+0x7c>
   90268:	a83ee83a 	callr	r21
   9026c:	b8aeb03a 	or	r23,r23,r2
   90270:	84001a04 	addi	r16,r16,104
   90274:	8cbff51e 	bne	r17,r18,9024c <__alt_data_end+0xfffc038c>
   90278:	a5000017 	ldw	r20,0(r20)
   9027c:	a03fee1e 	bne	r20,zero,90238 <__alt_data_end+0xfffc0378>
   90280:	b805883a 	mov	r2,r23
   90284:	dfc00817 	ldw	ra,32(sp)
   90288:	ddc00717 	ldw	r23,28(sp)
   9028c:	dd800617 	ldw	r22,24(sp)
   90290:	dd400517 	ldw	r21,20(sp)
   90294:	dd000417 	ldw	r20,16(sp)
   90298:	dcc00317 	ldw	r19,12(sp)
   9029c:	dc800217 	ldw	r18,8(sp)
   902a0:	dc400117 	ldw	r17,4(sp)
   902a4:	dc000017 	ldw	r16,0(sp)
   902a8:	dec00904 	addi	sp,sp,36
   902ac:	f800283a 	ret
   902b0:	002f883a 	mov	r23,zero
   902b4:	003ff206 	br	90280 <__alt_data_end+0xfffc03c0>

000902b8 <_setlocale_r>:
   902b8:	30001b26 	beq	r6,zero,90328 <_setlocale_r+0x70>
   902bc:	014002b4 	movhi	r5,10
   902c0:	defffe04 	addi	sp,sp,-8
   902c4:	29714504 	addi	r5,r5,-15084
   902c8:	3009883a 	mov	r4,r6
   902cc:	dc000015 	stw	r16,0(sp)
   902d0:	dfc00115 	stw	ra,4(sp)
   902d4:	3021883a 	mov	r16,r6
   902d8:	00929900 	call	92990 <strcmp>
   902dc:	1000061e 	bne	r2,zero,902f8 <_setlocale_r+0x40>
   902e0:	008002b4 	movhi	r2,10
   902e4:	10b11e04 	addi	r2,r2,-15240
   902e8:	dfc00117 	ldw	ra,4(sp)
   902ec:	dc000017 	ldw	r16,0(sp)
   902f0:	dec00204 	addi	sp,sp,8
   902f4:	f800283a 	ret
   902f8:	014002b4 	movhi	r5,10
   902fc:	29711e04 	addi	r5,r5,-15240
   90300:	8009883a 	mov	r4,r16
   90304:	00929900 	call	92990 <strcmp>
   90308:	103ff526 	beq	r2,zero,902e0 <__alt_data_end+0xfffc0420>
   9030c:	014002b4 	movhi	r5,10
   90310:	29712804 	addi	r5,r5,-15200
   90314:	8009883a 	mov	r4,r16
   90318:	00929900 	call	92990 <strcmp>
   9031c:	103ff026 	beq	r2,zero,902e0 <__alt_data_end+0xfffc0420>
   90320:	0005883a 	mov	r2,zero
   90324:	003ff006 	br	902e8 <__alt_data_end+0xfffc0428>
   90328:	008002b4 	movhi	r2,10
   9032c:	10b11e04 	addi	r2,r2,-15240
   90330:	f800283a 	ret

00090334 <__locale_charset>:
   90334:	008002b4 	movhi	r2,10
   90338:	10b5bd04 	addi	r2,r2,-10508
   9033c:	f800283a 	ret

00090340 <__locale_mb_cur_max>:
   90340:	008002b4 	movhi	r2,10
   90344:	10bb5d04 	addi	r2,r2,-4748
   90348:	10800017 	ldw	r2,0(r2)
   9034c:	f800283a 	ret

00090350 <__locale_msgcharset>:
   90350:	008002b4 	movhi	r2,10
   90354:	10b5b504 	addi	r2,r2,-10540
   90358:	f800283a 	ret

0009035c <__locale_cjk_lang>:
   9035c:	0005883a 	mov	r2,zero
   90360:	f800283a 	ret

00090364 <_localeconv_r>:
   90364:	008002b4 	movhi	r2,10
   90368:	10b5c504 	addi	r2,r2,-10476
   9036c:	f800283a 	ret

00090370 <setlocale>:
   90370:	008002b4 	movhi	r2,10
   90374:	10bb5c04 	addi	r2,r2,-4752
   90378:	280d883a 	mov	r6,r5
   9037c:	200b883a 	mov	r5,r4
   90380:	11000017 	ldw	r4,0(r2)
   90384:	00902b81 	jmpi	902b8 <_setlocale_r>

00090388 <localeconv>:
   90388:	008002b4 	movhi	r2,10
   9038c:	10b5c504 	addi	r2,r2,-10476
   90390:	f800283a 	ret

00090394 <__smakebuf_r>:
   90394:	2880030b 	ldhu	r2,12(r5)
   90398:	10c0008c 	andi	r3,r2,2
   9039c:	1800411e 	bne	r3,zero,904a4 <__smakebuf_r+0x110>
   903a0:	deffec04 	addi	sp,sp,-80
   903a4:	dc000f15 	stw	r16,60(sp)
   903a8:	2821883a 	mov	r16,r5
   903ac:	2940038f 	ldh	r5,14(r5)
   903b0:	dc401015 	stw	r17,64(sp)
   903b4:	dfc01315 	stw	ra,76(sp)
   903b8:	dcc01215 	stw	r19,72(sp)
   903bc:	dc801115 	stw	r18,68(sp)
   903c0:	2023883a 	mov	r17,r4
   903c4:	28001c16 	blt	r5,zero,90438 <__smakebuf_r+0xa4>
   903c8:	d80d883a 	mov	r6,sp
   903cc:	0095a9c0 	call	95a9c <_fstat_r>
   903d0:	10001816 	blt	r2,zero,90434 <__smakebuf_r+0xa0>
   903d4:	d8800117 	ldw	r2,4(sp)
   903d8:	00e00014 	movui	r3,32768
   903dc:	10bc000c 	andi	r2,r2,61440
   903e0:	14c80020 	cmpeqi	r19,r2,8192
   903e4:	10c03726 	beq	r2,r3,904c4 <__smakebuf_r+0x130>
   903e8:	80c0030b 	ldhu	r3,12(r16)
   903ec:	18c20014 	ori	r3,r3,2048
   903f0:	80c0030d 	sth	r3,12(r16)
   903f4:	00c80004 	movi	r3,8192
   903f8:	10c0521e 	bne	r2,r3,90544 <__smakebuf_r+0x1b0>
   903fc:	8140038f 	ldh	r5,14(r16)
   90400:	8809883a 	mov	r4,r17
   90404:	0095af80 	call	95af8 <_isatty_r>
   90408:	10004c26 	beq	r2,zero,9053c <__smakebuf_r+0x1a8>
   9040c:	8080030b 	ldhu	r2,12(r16)
   90410:	80c010c4 	addi	r3,r16,67
   90414:	80c00015 	stw	r3,0(r16)
   90418:	10800054 	ori	r2,r2,1
   9041c:	8080030d 	sth	r2,12(r16)
   90420:	00800044 	movi	r2,1
   90424:	80c00415 	stw	r3,16(r16)
   90428:	80800515 	stw	r2,20(r16)
   9042c:	04810004 	movi	r18,1024
   90430:	00000706 	br	90450 <__smakebuf_r+0xbc>
   90434:	8080030b 	ldhu	r2,12(r16)
   90438:	10c0200c 	andi	r3,r2,128
   9043c:	18001f1e 	bne	r3,zero,904bc <__smakebuf_r+0x128>
   90440:	04810004 	movi	r18,1024
   90444:	10820014 	ori	r2,r2,2048
   90448:	8080030d 	sth	r2,12(r16)
   9044c:	0027883a 	mov	r19,zero
   90450:	900b883a 	mov	r5,r18
   90454:	8809883a 	mov	r4,r17
   90458:	00905500 	call	90550 <_malloc_r>
   9045c:	10002c26 	beq	r2,zero,90510 <__smakebuf_r+0x17c>
   90460:	80c0030b 	ldhu	r3,12(r16)
   90464:	01000274 	movhi	r4,9
   90468:	213d2a04 	addi	r4,r4,-2904
   9046c:	89000f15 	stw	r4,60(r17)
   90470:	18c02014 	ori	r3,r3,128
   90474:	80c0030d 	sth	r3,12(r16)
   90478:	80800015 	stw	r2,0(r16)
   9047c:	80800415 	stw	r2,16(r16)
   90480:	84800515 	stw	r18,20(r16)
   90484:	98001a1e 	bne	r19,zero,904f0 <__smakebuf_r+0x15c>
   90488:	dfc01317 	ldw	ra,76(sp)
   9048c:	dcc01217 	ldw	r19,72(sp)
   90490:	dc801117 	ldw	r18,68(sp)
   90494:	dc401017 	ldw	r17,64(sp)
   90498:	dc000f17 	ldw	r16,60(sp)
   9049c:	dec01404 	addi	sp,sp,80
   904a0:	f800283a 	ret
   904a4:	288010c4 	addi	r2,r5,67
   904a8:	28800015 	stw	r2,0(r5)
   904ac:	28800415 	stw	r2,16(r5)
   904b0:	00800044 	movi	r2,1
   904b4:	28800515 	stw	r2,20(r5)
   904b8:	f800283a 	ret
   904bc:	04801004 	movi	r18,64
   904c0:	003fe006 	br	90444 <__alt_data_end+0xfffc0584>
   904c4:	81000a17 	ldw	r4,40(r16)
   904c8:	00c00274 	movhi	r3,9
   904cc:	18ca4b04 	addi	r3,r3,10540
   904d0:	20ffc51e 	bne	r4,r3,903e8 <__alt_data_end+0xfffc0528>
   904d4:	8080030b 	ldhu	r2,12(r16)
   904d8:	04810004 	movi	r18,1024
   904dc:	84801315 	stw	r18,76(r16)
   904e0:	1484b03a 	or	r2,r2,r18
   904e4:	8080030d 	sth	r2,12(r16)
   904e8:	0027883a 	mov	r19,zero
   904ec:	003fd806 	br	90450 <__alt_data_end+0xfffc0590>
   904f0:	8140038f 	ldh	r5,14(r16)
   904f4:	8809883a 	mov	r4,r17
   904f8:	0095af80 	call	95af8 <_isatty_r>
   904fc:	103fe226 	beq	r2,zero,90488 <__alt_data_end+0xfffc05c8>
   90500:	8080030b 	ldhu	r2,12(r16)
   90504:	10800054 	ori	r2,r2,1
   90508:	8080030d 	sth	r2,12(r16)
   9050c:	003fde06 	br	90488 <__alt_data_end+0xfffc05c8>
   90510:	8080030b 	ldhu	r2,12(r16)
   90514:	10c0800c 	andi	r3,r2,512
   90518:	183fdb1e 	bne	r3,zero,90488 <__alt_data_end+0xfffc05c8>
   9051c:	10800094 	ori	r2,r2,2
   90520:	80c010c4 	addi	r3,r16,67
   90524:	8080030d 	sth	r2,12(r16)
   90528:	00800044 	movi	r2,1
   9052c:	80c00015 	stw	r3,0(r16)
   90530:	80c00415 	stw	r3,16(r16)
   90534:	80800515 	stw	r2,20(r16)
   90538:	003fd306 	br	90488 <__alt_data_end+0xfffc05c8>
   9053c:	04810004 	movi	r18,1024
   90540:	003fc306 	br	90450 <__alt_data_end+0xfffc0590>
   90544:	0027883a 	mov	r19,zero
   90548:	04810004 	movi	r18,1024
   9054c:	003fc006 	br	90450 <__alt_data_end+0xfffc0590>

00090550 <_malloc_r>:
   90550:	defff504 	addi	sp,sp,-44
   90554:	dc800315 	stw	r18,12(sp)
   90558:	dfc00a15 	stw	ra,40(sp)
   9055c:	df000915 	stw	fp,36(sp)
   90560:	ddc00815 	stw	r23,32(sp)
   90564:	dd800715 	stw	r22,28(sp)
   90568:	dd400615 	stw	r21,24(sp)
   9056c:	dd000515 	stw	r20,20(sp)
   90570:	dcc00415 	stw	r19,16(sp)
   90574:	dc400215 	stw	r17,8(sp)
   90578:	dc000115 	stw	r16,4(sp)
   9057c:	288002c4 	addi	r2,r5,11
   90580:	00c00584 	movi	r3,22
   90584:	2025883a 	mov	r18,r4
   90588:	18807f2e 	bgeu	r3,r2,90788 <_malloc_r+0x238>
   9058c:	047ffe04 	movi	r17,-8
   90590:	1462703a 	and	r17,r2,r17
   90594:	8800a316 	blt	r17,zero,90824 <_malloc_r+0x2d4>
   90598:	8940a236 	bltu	r17,r5,90824 <_malloc_r+0x2d4>
   9059c:	00994880 	call	99488 <__malloc_lock>
   905a0:	00807dc4 	movi	r2,503
   905a4:	1441e92e 	bgeu	r2,r17,90d4c <_malloc_r+0x7fc>
   905a8:	8804d27a 	srli	r2,r17,9
   905ac:	1000a126 	beq	r2,zero,90834 <_malloc_r+0x2e4>
   905b0:	00c00104 	movi	r3,4
   905b4:	18811e36 	bltu	r3,r2,90a30 <_malloc_r+0x4e0>
   905b8:	8804d1ba 	srli	r2,r17,6
   905bc:	12000e44 	addi	r8,r2,57
   905c0:	11c00e04 	addi	r7,r2,56
   905c4:	4209883a 	add	r4,r8,r8
   905c8:	04c002b4 	movhi	r19,10
   905cc:	2109883a 	add	r4,r4,r4
   905d0:	9cf5d304 	addi	r19,r19,-10420
   905d4:	2109883a 	add	r4,r4,r4
   905d8:	9909883a 	add	r4,r19,r4
   905dc:	24000117 	ldw	r16,4(r4)
   905e0:	213ffe04 	addi	r4,r4,-8
   905e4:	24009726 	beq	r4,r16,90844 <_malloc_r+0x2f4>
   905e8:	80800117 	ldw	r2,4(r16)
   905ec:	01bfff04 	movi	r6,-4
   905f0:	014003c4 	movi	r5,15
   905f4:	1184703a 	and	r2,r2,r6
   905f8:	1447c83a 	sub	r3,r2,r17
   905fc:	28c00716 	blt	r5,r3,9061c <_malloc_r+0xcc>
   90600:	1800920e 	bge	r3,zero,9084c <_malloc_r+0x2fc>
   90604:	84000317 	ldw	r16,12(r16)
   90608:	24008e26 	beq	r4,r16,90844 <_malloc_r+0x2f4>
   9060c:	80800117 	ldw	r2,4(r16)
   90610:	1184703a 	and	r2,r2,r6
   90614:	1447c83a 	sub	r3,r2,r17
   90618:	28fff90e 	bge	r5,r3,90600 <__alt_data_end+0xfffc0740>
   9061c:	3809883a 	mov	r4,r7
   90620:	018002b4 	movhi	r6,10
   90624:	9c000417 	ldw	r16,16(r19)
   90628:	31b5d304 	addi	r6,r6,-10420
   9062c:	32000204 	addi	r8,r6,8
   90630:	82013426 	beq	r16,r8,90b04 <_malloc_r+0x5b4>
   90634:	80c00117 	ldw	r3,4(r16)
   90638:	00bfff04 	movi	r2,-4
   9063c:	188e703a 	and	r7,r3,r2
   90640:	3c45c83a 	sub	r2,r7,r17
   90644:	00c003c4 	movi	r3,15
   90648:	18811f16 	blt	r3,r2,90ac8 <_malloc_r+0x578>
   9064c:	32000515 	stw	r8,20(r6)
   90650:	32000415 	stw	r8,16(r6)
   90654:	10007f0e 	bge	r2,zero,90854 <_malloc_r+0x304>
   90658:	00807fc4 	movi	r2,511
   9065c:	11c0fd36 	bltu	r2,r7,90a54 <_malloc_r+0x504>
   90660:	3806d0fa 	srli	r3,r7,3
   90664:	01c00044 	movi	r7,1
   90668:	30800117 	ldw	r2,4(r6)
   9066c:	19400044 	addi	r5,r3,1
   90670:	294b883a 	add	r5,r5,r5
   90674:	1807d0ba 	srai	r3,r3,2
   90678:	294b883a 	add	r5,r5,r5
   9067c:	294b883a 	add	r5,r5,r5
   90680:	298b883a 	add	r5,r5,r6
   90684:	38c6983a 	sll	r3,r7,r3
   90688:	29c00017 	ldw	r7,0(r5)
   9068c:	2a7ffe04 	addi	r9,r5,-8
   90690:	1886b03a 	or	r3,r3,r2
   90694:	82400315 	stw	r9,12(r16)
   90698:	81c00215 	stw	r7,8(r16)
   9069c:	30c00115 	stw	r3,4(r6)
   906a0:	2c000015 	stw	r16,0(r5)
   906a4:	3c000315 	stw	r16,12(r7)
   906a8:	2005d0ba 	srai	r2,r4,2
   906ac:	01400044 	movi	r5,1
   906b0:	288a983a 	sll	r5,r5,r2
   906b4:	19406f36 	bltu	r3,r5,90874 <_malloc_r+0x324>
   906b8:	28c4703a 	and	r2,r5,r3
   906bc:	10000a1e 	bne	r2,zero,906e8 <_malloc_r+0x198>
   906c0:	00bfff04 	movi	r2,-4
   906c4:	294b883a 	add	r5,r5,r5
   906c8:	2088703a 	and	r4,r4,r2
   906cc:	28c4703a 	and	r2,r5,r3
   906d0:	21000104 	addi	r4,r4,4
   906d4:	1000041e 	bne	r2,zero,906e8 <_malloc_r+0x198>
   906d8:	294b883a 	add	r5,r5,r5
   906dc:	28c4703a 	and	r2,r5,r3
   906e0:	21000104 	addi	r4,r4,4
   906e4:	103ffc26 	beq	r2,zero,906d8 <__alt_data_end+0xfffc0818>
   906e8:	02bfff04 	movi	r10,-4
   906ec:	024003c4 	movi	r9,15
   906f0:	21800044 	addi	r6,r4,1
   906f4:	318d883a 	add	r6,r6,r6
   906f8:	318d883a 	add	r6,r6,r6
   906fc:	318d883a 	add	r6,r6,r6
   90700:	998d883a 	add	r6,r19,r6
   90704:	333ffe04 	addi	r12,r6,-8
   90708:	2017883a 	mov	r11,r4
   9070c:	31800104 	addi	r6,r6,4
   90710:	34000017 	ldw	r16,0(r6)
   90714:	31fffd04 	addi	r7,r6,-12
   90718:	81c0041e 	bne	r16,r7,9072c <_malloc_r+0x1dc>
   9071c:	0000fb06 	br	90b0c <_malloc_r+0x5bc>
   90720:	1801030e 	bge	r3,zero,90b30 <_malloc_r+0x5e0>
   90724:	84000317 	ldw	r16,12(r16)
   90728:	81c0f826 	beq	r16,r7,90b0c <_malloc_r+0x5bc>
   9072c:	80800117 	ldw	r2,4(r16)
   90730:	1284703a 	and	r2,r2,r10
   90734:	1447c83a 	sub	r3,r2,r17
   90738:	48fff90e 	bge	r9,r3,90720 <__alt_data_end+0xfffc0860>
   9073c:	80800317 	ldw	r2,12(r16)
   90740:	81000217 	ldw	r4,8(r16)
   90744:	89400054 	ori	r5,r17,1
   90748:	81400115 	stw	r5,4(r16)
   9074c:	20800315 	stw	r2,12(r4)
   90750:	11000215 	stw	r4,8(r2)
   90754:	8463883a 	add	r17,r16,r17
   90758:	9c400515 	stw	r17,20(r19)
   9075c:	9c400415 	stw	r17,16(r19)
   90760:	18800054 	ori	r2,r3,1
   90764:	88800115 	stw	r2,4(r17)
   90768:	8a000315 	stw	r8,12(r17)
   9076c:	8a000215 	stw	r8,8(r17)
   90770:	88e3883a 	add	r17,r17,r3
   90774:	88c00015 	stw	r3,0(r17)
   90778:	9009883a 	mov	r4,r18
   9077c:	00994ac0 	call	994ac <__malloc_unlock>
   90780:	80800204 	addi	r2,r16,8
   90784:	00001b06 	br	907f4 <_malloc_r+0x2a4>
   90788:	04400404 	movi	r17,16
   9078c:	89402536 	bltu	r17,r5,90824 <_malloc_r+0x2d4>
   90790:	00994880 	call	99488 <__malloc_lock>
   90794:	00800184 	movi	r2,6
   90798:	01000084 	movi	r4,2
   9079c:	04c002b4 	movhi	r19,10
   907a0:	1085883a 	add	r2,r2,r2
   907a4:	9cf5d304 	addi	r19,r19,-10420
   907a8:	1085883a 	add	r2,r2,r2
   907ac:	9885883a 	add	r2,r19,r2
   907b0:	14000117 	ldw	r16,4(r2)
   907b4:	10fffe04 	addi	r3,r2,-8
   907b8:	80c0d926 	beq	r16,r3,90b20 <_malloc_r+0x5d0>
   907bc:	80c00117 	ldw	r3,4(r16)
   907c0:	81000317 	ldw	r4,12(r16)
   907c4:	00bfff04 	movi	r2,-4
   907c8:	1884703a 	and	r2,r3,r2
   907cc:	81400217 	ldw	r5,8(r16)
   907d0:	8085883a 	add	r2,r16,r2
   907d4:	10c00117 	ldw	r3,4(r2)
   907d8:	29000315 	stw	r4,12(r5)
   907dc:	21400215 	stw	r5,8(r4)
   907e0:	18c00054 	ori	r3,r3,1
   907e4:	10c00115 	stw	r3,4(r2)
   907e8:	9009883a 	mov	r4,r18
   907ec:	00994ac0 	call	994ac <__malloc_unlock>
   907f0:	80800204 	addi	r2,r16,8
   907f4:	dfc00a17 	ldw	ra,40(sp)
   907f8:	df000917 	ldw	fp,36(sp)
   907fc:	ddc00817 	ldw	r23,32(sp)
   90800:	dd800717 	ldw	r22,28(sp)
   90804:	dd400617 	ldw	r21,24(sp)
   90808:	dd000517 	ldw	r20,20(sp)
   9080c:	dcc00417 	ldw	r19,16(sp)
   90810:	dc800317 	ldw	r18,12(sp)
   90814:	dc400217 	ldw	r17,8(sp)
   90818:	dc000117 	ldw	r16,4(sp)
   9081c:	dec00b04 	addi	sp,sp,44
   90820:	f800283a 	ret
   90824:	00800304 	movi	r2,12
   90828:	90800015 	stw	r2,0(r18)
   9082c:	0005883a 	mov	r2,zero
   90830:	003ff006 	br	907f4 <__alt_data_end+0xfffc0934>
   90834:	01002004 	movi	r4,128
   90838:	02001004 	movi	r8,64
   9083c:	01c00fc4 	movi	r7,63
   90840:	003f6106 	br	905c8 <__alt_data_end+0xfffc0708>
   90844:	4009883a 	mov	r4,r8
   90848:	003f7506 	br	90620 <__alt_data_end+0xfffc0760>
   9084c:	81000317 	ldw	r4,12(r16)
   90850:	003fde06 	br	907cc <__alt_data_end+0xfffc090c>
   90854:	81c5883a 	add	r2,r16,r7
   90858:	11400117 	ldw	r5,4(r2)
   9085c:	9009883a 	mov	r4,r18
   90860:	29400054 	ori	r5,r5,1
   90864:	11400115 	stw	r5,4(r2)
   90868:	00994ac0 	call	994ac <__malloc_unlock>
   9086c:	80800204 	addi	r2,r16,8
   90870:	003fe006 	br	907f4 <__alt_data_end+0xfffc0934>
   90874:	9c000217 	ldw	r16,8(r19)
   90878:	00bfff04 	movi	r2,-4
   9087c:	85800117 	ldw	r22,4(r16)
   90880:	b0ac703a 	and	r22,r22,r2
   90884:	b4400336 	bltu	r22,r17,90894 <_malloc_r+0x344>
   90888:	b445c83a 	sub	r2,r22,r17
   9088c:	00c003c4 	movi	r3,15
   90890:	18805d16 	blt	r3,r2,90a08 <_malloc_r+0x4b8>
   90894:	05c002b4 	movhi	r23,10
   90898:	008002b4 	movhi	r2,10
   9089c:	10850104 	addi	r2,r2,5124
   908a0:	bdfb5e04 	addi	r23,r23,-4744
   908a4:	15400017 	ldw	r21,0(r2)
   908a8:	b8c00017 	ldw	r3,0(r23)
   908ac:	00bfffc4 	movi	r2,-1
   908b0:	858d883a 	add	r6,r16,r22
   908b4:	8d6b883a 	add	r21,r17,r21
   908b8:	1880ea26 	beq	r3,r2,90c64 <_malloc_r+0x714>
   908bc:	ad4403c4 	addi	r21,r21,4111
   908c0:	00bc0004 	movi	r2,-4096
   908c4:	a8aa703a 	and	r21,r21,r2
   908c8:	a80b883a 	mov	r5,r21
   908cc:	9009883a 	mov	r4,r18
   908d0:	d9800015 	stw	r6,0(sp)
   908d4:	00928000 	call	92800 <_sbrk_r>
   908d8:	1029883a 	mov	r20,r2
   908dc:	00bfffc4 	movi	r2,-1
   908e0:	d9800017 	ldw	r6,0(sp)
   908e4:	a080e826 	beq	r20,r2,90c88 <_malloc_r+0x738>
   908e8:	a180a636 	bltu	r20,r6,90b84 <_malloc_r+0x634>
   908ec:	070002b4 	movhi	fp,10
   908f0:	e705a104 	addi	fp,fp,5764
   908f4:	e0800017 	ldw	r2,0(fp)
   908f8:	a887883a 	add	r3,r21,r2
   908fc:	e0c00015 	stw	r3,0(fp)
   90900:	3500e626 	beq	r6,r20,90c9c <_malloc_r+0x74c>
   90904:	b9000017 	ldw	r4,0(r23)
   90908:	00bfffc4 	movi	r2,-1
   9090c:	2080ee26 	beq	r4,r2,90cc8 <_malloc_r+0x778>
   90910:	a185c83a 	sub	r2,r20,r6
   90914:	10c5883a 	add	r2,r2,r3
   90918:	e0800015 	stw	r2,0(fp)
   9091c:	a0c001cc 	andi	r3,r20,7
   90920:	1800bc26 	beq	r3,zero,90c14 <_malloc_r+0x6c4>
   90924:	a0e9c83a 	sub	r20,r20,r3
   90928:	00840204 	movi	r2,4104
   9092c:	a5000204 	addi	r20,r20,8
   90930:	10c7c83a 	sub	r3,r2,r3
   90934:	a545883a 	add	r2,r20,r21
   90938:	1083ffcc 	andi	r2,r2,4095
   9093c:	18abc83a 	sub	r21,r3,r2
   90940:	a80b883a 	mov	r5,r21
   90944:	9009883a 	mov	r4,r18
   90948:	00928000 	call	92800 <_sbrk_r>
   9094c:	00ffffc4 	movi	r3,-1
   90950:	10c0e126 	beq	r2,r3,90cd8 <_malloc_r+0x788>
   90954:	1505c83a 	sub	r2,r2,r20
   90958:	1545883a 	add	r2,r2,r21
   9095c:	10800054 	ori	r2,r2,1
   90960:	e0c00017 	ldw	r3,0(fp)
   90964:	9d000215 	stw	r20,8(r19)
   90968:	a0800115 	stw	r2,4(r20)
   9096c:	a8c7883a 	add	r3,r21,r3
   90970:	e0c00015 	stw	r3,0(fp)
   90974:	84c00e26 	beq	r16,r19,909b0 <_malloc_r+0x460>
   90978:	018003c4 	movi	r6,15
   9097c:	3580a72e 	bgeu	r6,r22,90c1c <_malloc_r+0x6cc>
   90980:	81400117 	ldw	r5,4(r16)
   90984:	013ffe04 	movi	r4,-8
   90988:	b0bffd04 	addi	r2,r22,-12
   9098c:	1104703a 	and	r2,r2,r4
   90990:	2900004c 	andi	r4,r5,1
   90994:	2088b03a 	or	r4,r4,r2
   90998:	81000115 	stw	r4,4(r16)
   9099c:	01400144 	movi	r5,5
   909a0:	8089883a 	add	r4,r16,r2
   909a4:	21400115 	stw	r5,4(r4)
   909a8:	21400215 	stw	r5,8(r4)
   909ac:	3080cd36 	bltu	r6,r2,90ce4 <_malloc_r+0x794>
   909b0:	008002b4 	movhi	r2,10
   909b4:	10850004 	addi	r2,r2,5120
   909b8:	11000017 	ldw	r4,0(r2)
   909bc:	20c0012e 	bgeu	r4,r3,909c4 <_malloc_r+0x474>
   909c0:	10c00015 	stw	r3,0(r2)
   909c4:	008002b4 	movhi	r2,10
   909c8:	1084ff04 	addi	r2,r2,5116
   909cc:	11000017 	ldw	r4,0(r2)
   909d0:	9c000217 	ldw	r16,8(r19)
   909d4:	20c0012e 	bgeu	r4,r3,909dc <_malloc_r+0x48c>
   909d8:	10c00015 	stw	r3,0(r2)
   909dc:	80c00117 	ldw	r3,4(r16)
   909e0:	00bfff04 	movi	r2,-4
   909e4:	1886703a 	and	r3,r3,r2
   909e8:	1c45c83a 	sub	r2,r3,r17
   909ec:	1c400236 	bltu	r3,r17,909f8 <_malloc_r+0x4a8>
   909f0:	00c003c4 	movi	r3,15
   909f4:	18800416 	blt	r3,r2,90a08 <_malloc_r+0x4b8>
   909f8:	9009883a 	mov	r4,r18
   909fc:	00994ac0 	call	994ac <__malloc_unlock>
   90a00:	0005883a 	mov	r2,zero
   90a04:	003f7b06 	br	907f4 <__alt_data_end+0xfffc0934>
   90a08:	88c00054 	ori	r3,r17,1
   90a0c:	80c00115 	stw	r3,4(r16)
   90a10:	8463883a 	add	r17,r16,r17
   90a14:	10800054 	ori	r2,r2,1
   90a18:	9c400215 	stw	r17,8(r19)
   90a1c:	88800115 	stw	r2,4(r17)
   90a20:	9009883a 	mov	r4,r18
   90a24:	00994ac0 	call	994ac <__malloc_unlock>
   90a28:	80800204 	addi	r2,r16,8
   90a2c:	003f7106 	br	907f4 <__alt_data_end+0xfffc0934>
   90a30:	00c00504 	movi	r3,20
   90a34:	18804a2e 	bgeu	r3,r2,90b60 <_malloc_r+0x610>
   90a38:	00c01504 	movi	r3,84
   90a3c:	18806e36 	bltu	r3,r2,90bf8 <_malloc_r+0x6a8>
   90a40:	8804d33a 	srli	r2,r17,12
   90a44:	12001bc4 	addi	r8,r2,111
   90a48:	11c01b84 	addi	r7,r2,110
   90a4c:	4209883a 	add	r4,r8,r8
   90a50:	003edd06 	br	905c8 <__alt_data_end+0xfffc0708>
   90a54:	3804d27a 	srli	r2,r7,9
   90a58:	00c00104 	movi	r3,4
   90a5c:	1880442e 	bgeu	r3,r2,90b70 <_malloc_r+0x620>
   90a60:	00c00504 	movi	r3,20
   90a64:	18808136 	bltu	r3,r2,90c6c <_malloc_r+0x71c>
   90a68:	11401704 	addi	r5,r2,92
   90a6c:	10c016c4 	addi	r3,r2,91
   90a70:	294b883a 	add	r5,r5,r5
   90a74:	294b883a 	add	r5,r5,r5
   90a78:	294b883a 	add	r5,r5,r5
   90a7c:	994b883a 	add	r5,r19,r5
   90a80:	28800017 	ldw	r2,0(r5)
   90a84:	018002b4 	movhi	r6,10
   90a88:	297ffe04 	addi	r5,r5,-8
   90a8c:	31b5d304 	addi	r6,r6,-10420
   90a90:	28806526 	beq	r5,r2,90c28 <_malloc_r+0x6d8>
   90a94:	01bfff04 	movi	r6,-4
   90a98:	10c00117 	ldw	r3,4(r2)
   90a9c:	1986703a 	and	r3,r3,r6
   90aa0:	38c0022e 	bgeu	r7,r3,90aac <_malloc_r+0x55c>
   90aa4:	10800217 	ldw	r2,8(r2)
   90aa8:	28bffb1e 	bne	r5,r2,90a98 <__alt_data_end+0xfffc0bd8>
   90aac:	11400317 	ldw	r5,12(r2)
   90ab0:	98c00117 	ldw	r3,4(r19)
   90ab4:	81400315 	stw	r5,12(r16)
   90ab8:	80800215 	stw	r2,8(r16)
   90abc:	2c000215 	stw	r16,8(r5)
   90ac0:	14000315 	stw	r16,12(r2)
   90ac4:	003ef806 	br	906a8 <__alt_data_end+0xfffc07e8>
   90ac8:	88c00054 	ori	r3,r17,1
   90acc:	80c00115 	stw	r3,4(r16)
   90ad0:	8463883a 	add	r17,r16,r17
   90ad4:	34400515 	stw	r17,20(r6)
   90ad8:	34400415 	stw	r17,16(r6)
   90adc:	10c00054 	ori	r3,r2,1
   90ae0:	8a000315 	stw	r8,12(r17)
   90ae4:	8a000215 	stw	r8,8(r17)
   90ae8:	88c00115 	stw	r3,4(r17)
   90aec:	88a3883a 	add	r17,r17,r2
   90af0:	88800015 	stw	r2,0(r17)
   90af4:	9009883a 	mov	r4,r18
   90af8:	00994ac0 	call	994ac <__malloc_unlock>
   90afc:	80800204 	addi	r2,r16,8
   90b00:	003f3c06 	br	907f4 <__alt_data_end+0xfffc0934>
   90b04:	30c00117 	ldw	r3,4(r6)
   90b08:	003ee706 	br	906a8 <__alt_data_end+0xfffc07e8>
   90b0c:	5ac00044 	addi	r11,r11,1
   90b10:	588000cc 	andi	r2,r11,3
   90b14:	31800204 	addi	r6,r6,8
   90b18:	103efd1e 	bne	r2,zero,90710 <__alt_data_end+0xfffc0850>
   90b1c:	00002406 	br	90bb0 <_malloc_r+0x660>
   90b20:	14000317 	ldw	r16,12(r2)
   90b24:	143f251e 	bne	r2,r16,907bc <__alt_data_end+0xfffc08fc>
   90b28:	21000084 	addi	r4,r4,2
   90b2c:	003ebc06 	br	90620 <__alt_data_end+0xfffc0760>
   90b30:	8085883a 	add	r2,r16,r2
   90b34:	10c00117 	ldw	r3,4(r2)
   90b38:	81000317 	ldw	r4,12(r16)
   90b3c:	81400217 	ldw	r5,8(r16)
   90b40:	18c00054 	ori	r3,r3,1
   90b44:	10c00115 	stw	r3,4(r2)
   90b48:	29000315 	stw	r4,12(r5)
   90b4c:	21400215 	stw	r5,8(r4)
   90b50:	9009883a 	mov	r4,r18
   90b54:	00994ac0 	call	994ac <__malloc_unlock>
   90b58:	80800204 	addi	r2,r16,8
   90b5c:	003f2506 	br	907f4 <__alt_data_end+0xfffc0934>
   90b60:	12001704 	addi	r8,r2,92
   90b64:	11c016c4 	addi	r7,r2,91
   90b68:	4209883a 	add	r4,r8,r8
   90b6c:	003e9606 	br	905c8 <__alt_data_end+0xfffc0708>
   90b70:	3804d1ba 	srli	r2,r7,6
   90b74:	11400e44 	addi	r5,r2,57
   90b78:	10c00e04 	addi	r3,r2,56
   90b7c:	294b883a 	add	r5,r5,r5
   90b80:	003fbc06 	br	90a74 <__alt_data_end+0xfffc0bb4>
   90b84:	84ff5926 	beq	r16,r19,908ec <__alt_data_end+0xfffc0a2c>
   90b88:	008002b4 	movhi	r2,10
   90b8c:	10b5d304 	addi	r2,r2,-10420
   90b90:	14000217 	ldw	r16,8(r2)
   90b94:	00bfff04 	movi	r2,-4
   90b98:	80c00117 	ldw	r3,4(r16)
   90b9c:	1886703a 	and	r3,r3,r2
   90ba0:	003f9106 	br	909e8 <__alt_data_end+0xfffc0b28>
   90ba4:	60800217 	ldw	r2,8(r12)
   90ba8:	213fffc4 	addi	r4,r4,-1
   90bac:	1300651e 	bne	r2,r12,90d44 <_malloc_r+0x7f4>
   90bb0:	208000cc 	andi	r2,r4,3
   90bb4:	633ffe04 	addi	r12,r12,-8
   90bb8:	103ffa1e 	bne	r2,zero,90ba4 <__alt_data_end+0xfffc0ce4>
   90bbc:	98800117 	ldw	r2,4(r19)
   90bc0:	0146303a 	nor	r3,zero,r5
   90bc4:	1884703a 	and	r2,r3,r2
   90bc8:	98800115 	stw	r2,4(r19)
   90bcc:	294b883a 	add	r5,r5,r5
   90bd0:	117f2836 	bltu	r2,r5,90874 <__alt_data_end+0xfffc09b4>
   90bd4:	283f2726 	beq	r5,zero,90874 <__alt_data_end+0xfffc09b4>
   90bd8:	2886703a 	and	r3,r5,r2
   90bdc:	5809883a 	mov	r4,r11
   90be0:	183ec31e 	bne	r3,zero,906f0 <__alt_data_end+0xfffc0830>
   90be4:	294b883a 	add	r5,r5,r5
   90be8:	2886703a 	and	r3,r5,r2
   90bec:	21000104 	addi	r4,r4,4
   90bf0:	183ffc26 	beq	r3,zero,90be4 <__alt_data_end+0xfffc0d24>
   90bf4:	003ebe06 	br	906f0 <__alt_data_end+0xfffc0830>
   90bf8:	00c05504 	movi	r3,340
   90bfc:	18801236 	bltu	r3,r2,90c48 <_malloc_r+0x6f8>
   90c00:	8804d3fa 	srli	r2,r17,15
   90c04:	12001e04 	addi	r8,r2,120
   90c08:	11c01dc4 	addi	r7,r2,119
   90c0c:	4209883a 	add	r4,r8,r8
   90c10:	003e6d06 	br	905c8 <__alt_data_end+0xfffc0708>
   90c14:	00c40004 	movi	r3,4096
   90c18:	003f4606 	br	90934 <__alt_data_end+0xfffc0a74>
   90c1c:	00800044 	movi	r2,1
   90c20:	a0800115 	stw	r2,4(r20)
   90c24:	003f7406 	br	909f8 <__alt_data_end+0xfffc0b38>
   90c28:	1805d0ba 	srai	r2,r3,2
   90c2c:	01c00044 	movi	r7,1
   90c30:	30c00117 	ldw	r3,4(r6)
   90c34:	388e983a 	sll	r7,r7,r2
   90c38:	2805883a 	mov	r2,r5
   90c3c:	38c6b03a 	or	r3,r7,r3
   90c40:	30c00115 	stw	r3,4(r6)
   90c44:	003f9b06 	br	90ab4 <__alt_data_end+0xfffc0bf4>
   90c48:	00c15504 	movi	r3,1364
   90c4c:	18801a36 	bltu	r3,r2,90cb8 <_malloc_r+0x768>
   90c50:	8804d4ba 	srli	r2,r17,18
   90c54:	12001f44 	addi	r8,r2,125
   90c58:	11c01f04 	addi	r7,r2,124
   90c5c:	4209883a 	add	r4,r8,r8
   90c60:	003e5906 	br	905c8 <__alt_data_end+0xfffc0708>
   90c64:	ad400404 	addi	r21,r21,16
   90c68:	003f1706 	br	908c8 <__alt_data_end+0xfffc0a08>
   90c6c:	00c01504 	movi	r3,84
   90c70:	18802336 	bltu	r3,r2,90d00 <_malloc_r+0x7b0>
   90c74:	3804d33a 	srli	r2,r7,12
   90c78:	11401bc4 	addi	r5,r2,111
   90c7c:	10c01b84 	addi	r3,r2,110
   90c80:	294b883a 	add	r5,r5,r5
   90c84:	003f7b06 	br	90a74 <__alt_data_end+0xfffc0bb4>
   90c88:	9c000217 	ldw	r16,8(r19)
   90c8c:	00bfff04 	movi	r2,-4
   90c90:	80c00117 	ldw	r3,4(r16)
   90c94:	1886703a 	and	r3,r3,r2
   90c98:	003f5306 	br	909e8 <__alt_data_end+0xfffc0b28>
   90c9c:	3083ffcc 	andi	r2,r6,4095
   90ca0:	103f181e 	bne	r2,zero,90904 <__alt_data_end+0xfffc0a44>
   90ca4:	99000217 	ldw	r4,8(r19)
   90ca8:	b545883a 	add	r2,r22,r21
   90cac:	10800054 	ori	r2,r2,1
   90cb0:	20800115 	stw	r2,4(r4)
   90cb4:	003f3e06 	br	909b0 <__alt_data_end+0xfffc0af0>
   90cb8:	01003f84 	movi	r4,254
   90cbc:	02001fc4 	movi	r8,127
   90cc0:	01c01f84 	movi	r7,126
   90cc4:	003e4006 	br	905c8 <__alt_data_end+0xfffc0708>
   90cc8:	008002b4 	movhi	r2,10
   90ccc:	10bb5e04 	addi	r2,r2,-4744
   90cd0:	15000015 	stw	r20,0(r2)
   90cd4:	003f1106 	br	9091c <__alt_data_end+0xfffc0a5c>
   90cd8:	00800044 	movi	r2,1
   90cdc:	002b883a 	mov	r21,zero
   90ce0:	003f1f06 	br	90960 <__alt_data_end+0xfffc0aa0>
   90ce4:	81400204 	addi	r5,r16,8
   90ce8:	9009883a 	mov	r4,r18
   90cec:	008f9640 	call	8f964 <_free_r>
   90cf0:	008002b4 	movhi	r2,10
   90cf4:	1085a104 	addi	r2,r2,5764
   90cf8:	10c00017 	ldw	r3,0(r2)
   90cfc:	003f2c06 	br	909b0 <__alt_data_end+0xfffc0af0>
   90d00:	00c05504 	movi	r3,340
   90d04:	18800536 	bltu	r3,r2,90d1c <_malloc_r+0x7cc>
   90d08:	3804d3fa 	srli	r2,r7,15
   90d0c:	11401e04 	addi	r5,r2,120
   90d10:	10c01dc4 	addi	r3,r2,119
   90d14:	294b883a 	add	r5,r5,r5
   90d18:	003f5606 	br	90a74 <__alt_data_end+0xfffc0bb4>
   90d1c:	00c15504 	movi	r3,1364
   90d20:	18800536 	bltu	r3,r2,90d38 <_malloc_r+0x7e8>
   90d24:	3804d4ba 	srli	r2,r7,18
   90d28:	11401f44 	addi	r5,r2,125
   90d2c:	10c01f04 	addi	r3,r2,124
   90d30:	294b883a 	add	r5,r5,r5
   90d34:	003f4f06 	br	90a74 <__alt_data_end+0xfffc0bb4>
   90d38:	01403f84 	movi	r5,254
   90d3c:	00c01f84 	movi	r3,126
   90d40:	003f4c06 	br	90a74 <__alt_data_end+0xfffc0bb4>
   90d44:	98800117 	ldw	r2,4(r19)
   90d48:	003fa006 	br	90bcc <__alt_data_end+0xfffc0d0c>
   90d4c:	8808d0fa 	srli	r4,r17,3
   90d50:	20800044 	addi	r2,r4,1
   90d54:	1085883a 	add	r2,r2,r2
   90d58:	003e9006 	br	9079c <__alt_data_end+0xfffc08dc>

00090d5c <memchr>:
   90d5c:	208000cc 	andi	r2,r4,3
   90d60:	280f883a 	mov	r7,r5
   90d64:	10003426 	beq	r2,zero,90e38 <memchr+0xdc>
   90d68:	30bfffc4 	addi	r2,r6,-1
   90d6c:	30001a26 	beq	r6,zero,90dd8 <memchr+0x7c>
   90d70:	20c00003 	ldbu	r3,0(r4)
   90d74:	29803fcc 	andi	r6,r5,255
   90d78:	30c0051e 	bne	r6,r3,90d90 <memchr+0x34>
   90d7c:	00001806 	br	90de0 <memchr+0x84>
   90d80:	10001526 	beq	r2,zero,90dd8 <memchr+0x7c>
   90d84:	20c00003 	ldbu	r3,0(r4)
   90d88:	10bfffc4 	addi	r2,r2,-1
   90d8c:	30c01426 	beq	r6,r3,90de0 <memchr+0x84>
   90d90:	21000044 	addi	r4,r4,1
   90d94:	20c000cc 	andi	r3,r4,3
   90d98:	183ff91e 	bne	r3,zero,90d80 <__alt_data_end+0xfffc0ec0>
   90d9c:	020000c4 	movi	r8,3
   90da0:	40801136 	bltu	r8,r2,90de8 <memchr+0x8c>
   90da4:	10000c26 	beq	r2,zero,90dd8 <memchr+0x7c>
   90da8:	20c00003 	ldbu	r3,0(r4)
   90dac:	29403fcc 	andi	r5,r5,255
   90db0:	28c00b26 	beq	r5,r3,90de0 <memchr+0x84>
   90db4:	20c00044 	addi	r3,r4,1
   90db8:	39803fcc 	andi	r6,r7,255
   90dbc:	2089883a 	add	r4,r4,r2
   90dc0:	00000306 	br	90dd0 <memchr+0x74>
   90dc4:	18c00044 	addi	r3,r3,1
   90dc8:	197fffc3 	ldbu	r5,-1(r3)
   90dcc:	31400526 	beq	r6,r5,90de4 <memchr+0x88>
   90dd0:	1805883a 	mov	r2,r3
   90dd4:	20fffb1e 	bne	r4,r3,90dc4 <__alt_data_end+0xfffc0f04>
   90dd8:	0005883a 	mov	r2,zero
   90ddc:	f800283a 	ret
   90de0:	2005883a 	mov	r2,r4
   90de4:	f800283a 	ret
   90de8:	28c03fcc 	andi	r3,r5,255
   90dec:	1812923a 	slli	r9,r3,8
   90df0:	02ffbff4 	movhi	r11,65279
   90df4:	02a02074 	movhi	r10,32897
   90df8:	48d2b03a 	or	r9,r9,r3
   90dfc:	4806943a 	slli	r3,r9,16
   90e00:	5affbfc4 	addi	r11,r11,-257
   90e04:	52a02004 	addi	r10,r10,-32640
   90e08:	48d2b03a 	or	r9,r9,r3
   90e0c:	20c00017 	ldw	r3,0(r4)
   90e10:	48c6f03a 	xor	r3,r9,r3
   90e14:	1acd883a 	add	r6,r3,r11
   90e18:	00c6303a 	nor	r3,zero,r3
   90e1c:	30c6703a 	and	r3,r6,r3
   90e20:	1a86703a 	and	r3,r3,r10
   90e24:	183fe01e 	bne	r3,zero,90da8 <__alt_data_end+0xfffc0ee8>
   90e28:	10bfff04 	addi	r2,r2,-4
   90e2c:	21000104 	addi	r4,r4,4
   90e30:	40bff636 	bltu	r8,r2,90e0c <__alt_data_end+0xfffc0f4c>
   90e34:	003fdb06 	br	90da4 <__alt_data_end+0xfffc0ee4>
   90e38:	3005883a 	mov	r2,r6
   90e3c:	003fd706 	br	90d9c <__alt_data_end+0xfffc0edc>

00090e40 <memmove>:
   90e40:	2005883a 	mov	r2,r4
   90e44:	29000b2e 	bgeu	r5,r4,90e74 <memmove+0x34>
   90e48:	298f883a 	add	r7,r5,r6
   90e4c:	21c0092e 	bgeu	r4,r7,90e74 <memmove+0x34>
   90e50:	2187883a 	add	r3,r4,r6
   90e54:	198bc83a 	sub	r5,r3,r6
   90e58:	30004826 	beq	r6,zero,90f7c <memmove+0x13c>
   90e5c:	39ffffc4 	addi	r7,r7,-1
   90e60:	39000003 	ldbu	r4,0(r7)
   90e64:	18ffffc4 	addi	r3,r3,-1
   90e68:	19000005 	stb	r4,0(r3)
   90e6c:	28fffb1e 	bne	r5,r3,90e5c <__alt_data_end+0xfffc0f9c>
   90e70:	f800283a 	ret
   90e74:	00c003c4 	movi	r3,15
   90e78:	1980412e 	bgeu	r3,r6,90f80 <memmove+0x140>
   90e7c:	2886b03a 	or	r3,r5,r2
   90e80:	18c000cc 	andi	r3,r3,3
   90e84:	1800401e 	bne	r3,zero,90f88 <memmove+0x148>
   90e88:	33fffc04 	addi	r15,r6,-16
   90e8c:	781ed13a 	srli	r15,r15,4
   90e90:	28c00104 	addi	r3,r5,4
   90e94:	13400104 	addi	r13,r2,4
   90e98:	781c913a 	slli	r14,r15,4
   90e9c:	2b000204 	addi	r12,r5,8
   90ea0:	12c00204 	addi	r11,r2,8
   90ea4:	73800504 	addi	r14,r14,20
   90ea8:	2a800304 	addi	r10,r5,12
   90eac:	12400304 	addi	r9,r2,12
   90eb0:	2b9d883a 	add	r14,r5,r14
   90eb4:	2811883a 	mov	r8,r5
   90eb8:	100f883a 	mov	r7,r2
   90ebc:	41000017 	ldw	r4,0(r8)
   90ec0:	39c00404 	addi	r7,r7,16
   90ec4:	18c00404 	addi	r3,r3,16
   90ec8:	393ffc15 	stw	r4,-16(r7)
   90ecc:	193ffc17 	ldw	r4,-16(r3)
   90ed0:	6b400404 	addi	r13,r13,16
   90ed4:	5ac00404 	addi	r11,r11,16
   90ed8:	693ffc15 	stw	r4,-16(r13)
   90edc:	61000017 	ldw	r4,0(r12)
   90ee0:	4a400404 	addi	r9,r9,16
   90ee4:	42000404 	addi	r8,r8,16
   90ee8:	593ffc15 	stw	r4,-16(r11)
   90eec:	51000017 	ldw	r4,0(r10)
   90ef0:	63000404 	addi	r12,r12,16
   90ef4:	52800404 	addi	r10,r10,16
   90ef8:	493ffc15 	stw	r4,-16(r9)
   90efc:	1bbfef1e 	bne	r3,r14,90ebc <__alt_data_end+0xfffc0ffc>
   90f00:	79000044 	addi	r4,r15,1
   90f04:	2008913a 	slli	r4,r4,4
   90f08:	328003cc 	andi	r10,r6,15
   90f0c:	02c000c4 	movi	r11,3
   90f10:	1107883a 	add	r3,r2,r4
   90f14:	290b883a 	add	r5,r5,r4
   90f18:	5a801e2e 	bgeu	r11,r10,90f94 <memmove+0x154>
   90f1c:	1813883a 	mov	r9,r3
   90f20:	2811883a 	mov	r8,r5
   90f24:	500f883a 	mov	r7,r10
   90f28:	41000017 	ldw	r4,0(r8)
   90f2c:	4a400104 	addi	r9,r9,4
   90f30:	39ffff04 	addi	r7,r7,-4
   90f34:	493fff15 	stw	r4,-4(r9)
   90f38:	42000104 	addi	r8,r8,4
   90f3c:	59fffa36 	bltu	r11,r7,90f28 <__alt_data_end+0xfffc1068>
   90f40:	513fff04 	addi	r4,r10,-4
   90f44:	2008d0ba 	srli	r4,r4,2
   90f48:	318000cc 	andi	r6,r6,3
   90f4c:	21000044 	addi	r4,r4,1
   90f50:	2109883a 	add	r4,r4,r4
   90f54:	2109883a 	add	r4,r4,r4
   90f58:	1907883a 	add	r3,r3,r4
   90f5c:	290b883a 	add	r5,r5,r4
   90f60:	30000b26 	beq	r6,zero,90f90 <memmove+0x150>
   90f64:	198d883a 	add	r6,r3,r6
   90f68:	29c00003 	ldbu	r7,0(r5)
   90f6c:	18c00044 	addi	r3,r3,1
   90f70:	29400044 	addi	r5,r5,1
   90f74:	19ffffc5 	stb	r7,-1(r3)
   90f78:	19bffb1e 	bne	r3,r6,90f68 <__alt_data_end+0xfffc10a8>
   90f7c:	f800283a 	ret
   90f80:	1007883a 	mov	r3,r2
   90f84:	003ff606 	br	90f60 <__alt_data_end+0xfffc10a0>
   90f88:	1007883a 	mov	r3,r2
   90f8c:	003ff506 	br	90f64 <__alt_data_end+0xfffc10a4>
   90f90:	f800283a 	ret
   90f94:	500d883a 	mov	r6,r10
   90f98:	003ff106 	br	90f60 <__alt_data_end+0xfffc10a0>

00090f9c <memset>:
   90f9c:	20c000cc 	andi	r3,r4,3
   90fa0:	2005883a 	mov	r2,r4
   90fa4:	18004426 	beq	r3,zero,910b8 <memset+0x11c>
   90fa8:	31ffffc4 	addi	r7,r6,-1
   90fac:	30004026 	beq	r6,zero,910b0 <memset+0x114>
   90fb0:	2813883a 	mov	r9,r5
   90fb4:	200d883a 	mov	r6,r4
   90fb8:	2007883a 	mov	r3,r4
   90fbc:	00000406 	br	90fd0 <memset+0x34>
   90fc0:	3a3fffc4 	addi	r8,r7,-1
   90fc4:	31800044 	addi	r6,r6,1
   90fc8:	38003926 	beq	r7,zero,910b0 <memset+0x114>
   90fcc:	400f883a 	mov	r7,r8
   90fd0:	18c00044 	addi	r3,r3,1
   90fd4:	32400005 	stb	r9,0(r6)
   90fd8:	1a0000cc 	andi	r8,r3,3
   90fdc:	403ff81e 	bne	r8,zero,90fc0 <__alt_data_end+0xfffc1100>
   90fe0:	010000c4 	movi	r4,3
   90fe4:	21c02d2e 	bgeu	r4,r7,9109c <memset+0x100>
   90fe8:	29003fcc 	andi	r4,r5,255
   90fec:	200c923a 	slli	r6,r4,8
   90ff0:	3108b03a 	or	r4,r6,r4
   90ff4:	200c943a 	slli	r6,r4,16
   90ff8:	218cb03a 	or	r6,r4,r6
   90ffc:	010003c4 	movi	r4,15
   91000:	21c0182e 	bgeu	r4,r7,91064 <memset+0xc8>
   91004:	3b3ffc04 	addi	r12,r7,-16
   91008:	6018d13a 	srli	r12,r12,4
   9100c:	1a000104 	addi	r8,r3,4
   91010:	1ac00204 	addi	r11,r3,8
   91014:	6008913a 	slli	r4,r12,4
   91018:	1a800304 	addi	r10,r3,12
   9101c:	1813883a 	mov	r9,r3
   91020:	21000504 	addi	r4,r4,20
   91024:	1909883a 	add	r4,r3,r4
   91028:	49800015 	stw	r6,0(r9)
   9102c:	41800015 	stw	r6,0(r8)
   91030:	59800015 	stw	r6,0(r11)
   91034:	51800015 	stw	r6,0(r10)
   91038:	42000404 	addi	r8,r8,16
   9103c:	4a400404 	addi	r9,r9,16
   91040:	5ac00404 	addi	r11,r11,16
   91044:	52800404 	addi	r10,r10,16
   91048:	413ff71e 	bne	r8,r4,91028 <__alt_data_end+0xfffc1168>
   9104c:	63000044 	addi	r12,r12,1
   91050:	6018913a 	slli	r12,r12,4
   91054:	39c003cc 	andi	r7,r7,15
   91058:	010000c4 	movi	r4,3
   9105c:	1b07883a 	add	r3,r3,r12
   91060:	21c00e2e 	bgeu	r4,r7,9109c <memset+0x100>
   91064:	1813883a 	mov	r9,r3
   91068:	3811883a 	mov	r8,r7
   9106c:	010000c4 	movi	r4,3
   91070:	49800015 	stw	r6,0(r9)
   91074:	423fff04 	addi	r8,r8,-4
   91078:	4a400104 	addi	r9,r9,4
   9107c:	223ffc36 	bltu	r4,r8,91070 <__alt_data_end+0xfffc11b0>
   91080:	393fff04 	addi	r4,r7,-4
   91084:	2008d0ba 	srli	r4,r4,2
   91088:	39c000cc 	andi	r7,r7,3
   9108c:	21000044 	addi	r4,r4,1
   91090:	2109883a 	add	r4,r4,r4
   91094:	2109883a 	add	r4,r4,r4
   91098:	1907883a 	add	r3,r3,r4
   9109c:	38000526 	beq	r7,zero,910b4 <memset+0x118>
   910a0:	19cf883a 	add	r7,r3,r7
   910a4:	19400005 	stb	r5,0(r3)
   910a8:	18c00044 	addi	r3,r3,1
   910ac:	38fffd1e 	bne	r7,r3,910a4 <__alt_data_end+0xfffc11e4>
   910b0:	f800283a 	ret
   910b4:	f800283a 	ret
   910b8:	2007883a 	mov	r3,r4
   910bc:	300f883a 	mov	r7,r6
   910c0:	003fc706 	br	90fe0 <__alt_data_end+0xfffc1120>

000910c4 <_Balloc>:
   910c4:	20801317 	ldw	r2,76(r4)
   910c8:	defffc04 	addi	sp,sp,-16
   910cc:	dc400115 	stw	r17,4(sp)
   910d0:	dc000015 	stw	r16,0(sp)
   910d4:	dfc00315 	stw	ra,12(sp)
   910d8:	dc800215 	stw	r18,8(sp)
   910dc:	2023883a 	mov	r17,r4
   910e0:	2821883a 	mov	r16,r5
   910e4:	10000f26 	beq	r2,zero,91124 <_Balloc+0x60>
   910e8:	8407883a 	add	r3,r16,r16
   910ec:	18c7883a 	add	r3,r3,r3
   910f0:	10c7883a 	add	r3,r2,r3
   910f4:	18800017 	ldw	r2,0(r3)
   910f8:	10001126 	beq	r2,zero,91140 <_Balloc+0x7c>
   910fc:	11000017 	ldw	r4,0(r2)
   91100:	19000015 	stw	r4,0(r3)
   91104:	10000415 	stw	zero,16(r2)
   91108:	10000315 	stw	zero,12(r2)
   9110c:	dfc00317 	ldw	ra,12(sp)
   91110:	dc800217 	ldw	r18,8(sp)
   91114:	dc400117 	ldw	r17,4(sp)
   91118:	dc000017 	ldw	r16,0(sp)
   9111c:	dec00404 	addi	sp,sp,16
   91120:	f800283a 	ret
   91124:	01800844 	movi	r6,33
   91128:	01400104 	movi	r5,4
   9112c:	00956cc0 	call	956cc <_calloc_r>
   91130:	88801315 	stw	r2,76(r17)
   91134:	103fec1e 	bne	r2,zero,910e8 <__alt_data_end+0xfffc1228>
   91138:	0005883a 	mov	r2,zero
   9113c:	003ff306 	br	9110c <__alt_data_end+0xfffc124c>
   91140:	01400044 	movi	r5,1
   91144:	2c24983a 	sll	r18,r5,r16
   91148:	8809883a 	mov	r4,r17
   9114c:	91800144 	addi	r6,r18,5
   91150:	318d883a 	add	r6,r6,r6
   91154:	318d883a 	add	r6,r6,r6
   91158:	00956cc0 	call	956cc <_calloc_r>
   9115c:	103ff626 	beq	r2,zero,91138 <__alt_data_end+0xfffc1278>
   91160:	14000115 	stw	r16,4(r2)
   91164:	14800215 	stw	r18,8(r2)
   91168:	003fe606 	br	91104 <__alt_data_end+0xfffc1244>

0009116c <_Bfree>:
   9116c:	28000826 	beq	r5,zero,91190 <_Bfree+0x24>
   91170:	28c00117 	ldw	r3,4(r5)
   91174:	20801317 	ldw	r2,76(r4)
   91178:	18c7883a 	add	r3,r3,r3
   9117c:	18c7883a 	add	r3,r3,r3
   91180:	10c5883a 	add	r2,r2,r3
   91184:	10c00017 	ldw	r3,0(r2)
   91188:	28c00015 	stw	r3,0(r5)
   9118c:	11400015 	stw	r5,0(r2)
   91190:	f800283a 	ret

00091194 <__multadd>:
   91194:	defffa04 	addi	sp,sp,-24
   91198:	dc800315 	stw	r18,12(sp)
   9119c:	dc400215 	stw	r17,8(sp)
   911a0:	dc000115 	stw	r16,4(sp)
   911a4:	2823883a 	mov	r17,r5
   911a8:	2c000417 	ldw	r16,16(r5)
   911ac:	dfc00515 	stw	ra,20(sp)
   911b0:	dcc00415 	stw	r19,16(sp)
   911b4:	2025883a 	mov	r18,r4
   911b8:	29400504 	addi	r5,r5,20
   911bc:	0011883a 	mov	r8,zero
   911c0:	28c00017 	ldw	r3,0(r5)
   911c4:	29400104 	addi	r5,r5,4
   911c8:	42000044 	addi	r8,r8,1
   911cc:	18bfffcc 	andi	r2,r3,65535
   911d0:	1185383a 	mul	r2,r2,r6
   911d4:	1806d43a 	srli	r3,r3,16
   911d8:	11cf883a 	add	r7,r2,r7
   911dc:	3808d43a 	srli	r4,r7,16
   911e0:	1987383a 	mul	r3,r3,r6
   911e4:	38bfffcc 	andi	r2,r7,65535
   911e8:	1907883a 	add	r3,r3,r4
   911ec:	1808943a 	slli	r4,r3,16
   911f0:	180ed43a 	srli	r7,r3,16
   911f4:	2085883a 	add	r2,r4,r2
   911f8:	28bfff15 	stw	r2,-4(r5)
   911fc:	443ff016 	blt	r8,r16,911c0 <__alt_data_end+0xfffc1300>
   91200:	38000926 	beq	r7,zero,91228 <__multadd+0x94>
   91204:	88800217 	ldw	r2,8(r17)
   91208:	80800f0e 	bge	r16,r2,91248 <__multadd+0xb4>
   9120c:	80800144 	addi	r2,r16,5
   91210:	1085883a 	add	r2,r2,r2
   91214:	1085883a 	add	r2,r2,r2
   91218:	8885883a 	add	r2,r17,r2
   9121c:	11c00015 	stw	r7,0(r2)
   91220:	84000044 	addi	r16,r16,1
   91224:	8c000415 	stw	r16,16(r17)
   91228:	8805883a 	mov	r2,r17
   9122c:	dfc00517 	ldw	ra,20(sp)
   91230:	dcc00417 	ldw	r19,16(sp)
   91234:	dc800317 	ldw	r18,12(sp)
   91238:	dc400217 	ldw	r17,8(sp)
   9123c:	dc000117 	ldw	r16,4(sp)
   91240:	dec00604 	addi	sp,sp,24
   91244:	f800283a 	ret
   91248:	89400117 	ldw	r5,4(r17)
   9124c:	9009883a 	mov	r4,r18
   91250:	d9c00015 	stw	r7,0(sp)
   91254:	29400044 	addi	r5,r5,1
   91258:	00910c40 	call	910c4 <_Balloc>
   9125c:	89800417 	ldw	r6,16(r17)
   91260:	89400304 	addi	r5,r17,12
   91264:	11000304 	addi	r4,r2,12
   91268:	31800084 	addi	r6,r6,2
   9126c:	318d883a 	add	r6,r6,r6
   91270:	318d883a 	add	r6,r6,r6
   91274:	1027883a 	mov	r19,r2
   91278:	0088e480 	call	88e48 <memcpy>
   9127c:	d9c00017 	ldw	r7,0(sp)
   91280:	88000a26 	beq	r17,zero,912ac <__multadd+0x118>
   91284:	88c00117 	ldw	r3,4(r17)
   91288:	90801317 	ldw	r2,76(r18)
   9128c:	18c7883a 	add	r3,r3,r3
   91290:	18c7883a 	add	r3,r3,r3
   91294:	10c5883a 	add	r2,r2,r3
   91298:	10c00017 	ldw	r3,0(r2)
   9129c:	88c00015 	stw	r3,0(r17)
   912a0:	14400015 	stw	r17,0(r2)
   912a4:	9823883a 	mov	r17,r19
   912a8:	003fd806 	br	9120c <__alt_data_end+0xfffc134c>
   912ac:	9823883a 	mov	r17,r19
   912b0:	003fd606 	br	9120c <__alt_data_end+0xfffc134c>

000912b4 <__s2b>:
   912b4:	defff904 	addi	sp,sp,-28
   912b8:	dc400115 	stw	r17,4(sp)
   912bc:	dc000015 	stw	r16,0(sp)
   912c0:	2023883a 	mov	r17,r4
   912c4:	2821883a 	mov	r16,r5
   912c8:	39000204 	addi	r4,r7,8
   912cc:	01400244 	movi	r5,9
   912d0:	dcc00315 	stw	r19,12(sp)
   912d4:	dc800215 	stw	r18,8(sp)
   912d8:	dfc00615 	stw	ra,24(sp)
   912dc:	dd400515 	stw	r21,20(sp)
   912e0:	dd000415 	stw	r20,16(sp)
   912e4:	3825883a 	mov	r18,r7
   912e8:	3027883a 	mov	r19,r6
   912ec:	0088c940 	call	88c94 <__divsi3>
   912f0:	00c00044 	movi	r3,1
   912f4:	000b883a 	mov	r5,zero
   912f8:	1880030e 	bge	r3,r2,91308 <__s2b+0x54>
   912fc:	18c7883a 	add	r3,r3,r3
   91300:	29400044 	addi	r5,r5,1
   91304:	18bffd16 	blt	r3,r2,912fc <__alt_data_end+0xfffc143c>
   91308:	8809883a 	mov	r4,r17
   9130c:	00910c40 	call	910c4 <_Balloc>
   91310:	d8c00717 	ldw	r3,28(sp)
   91314:	10c00515 	stw	r3,20(r2)
   91318:	00c00044 	movi	r3,1
   9131c:	10c00415 	stw	r3,16(r2)
   91320:	00c00244 	movi	r3,9
   91324:	1cc0210e 	bge	r3,r19,913ac <__s2b+0xf8>
   91328:	80eb883a 	add	r21,r16,r3
   9132c:	a829883a 	mov	r20,r21
   91330:	84e1883a 	add	r16,r16,r19
   91334:	a1c00007 	ldb	r7,0(r20)
   91338:	01800284 	movi	r6,10
   9133c:	a5000044 	addi	r20,r20,1
   91340:	100b883a 	mov	r5,r2
   91344:	39fff404 	addi	r7,r7,-48
   91348:	8809883a 	mov	r4,r17
   9134c:	00911940 	call	91194 <__multadd>
   91350:	a43ff81e 	bne	r20,r16,91334 <__alt_data_end+0xfffc1474>
   91354:	ace1883a 	add	r16,r21,r19
   91358:	843ffe04 	addi	r16,r16,-8
   9135c:	9c800a0e 	bge	r19,r18,91388 <__s2b+0xd4>
   91360:	94e5c83a 	sub	r18,r18,r19
   91364:	84a5883a 	add	r18,r16,r18
   91368:	81c00007 	ldb	r7,0(r16)
   9136c:	01800284 	movi	r6,10
   91370:	84000044 	addi	r16,r16,1
   91374:	100b883a 	mov	r5,r2
   91378:	39fff404 	addi	r7,r7,-48
   9137c:	8809883a 	mov	r4,r17
   91380:	00911940 	call	91194 <__multadd>
   91384:	84bff81e 	bne	r16,r18,91368 <__alt_data_end+0xfffc14a8>
   91388:	dfc00617 	ldw	ra,24(sp)
   9138c:	dd400517 	ldw	r21,20(sp)
   91390:	dd000417 	ldw	r20,16(sp)
   91394:	dcc00317 	ldw	r19,12(sp)
   91398:	dc800217 	ldw	r18,8(sp)
   9139c:	dc400117 	ldw	r17,4(sp)
   913a0:	dc000017 	ldw	r16,0(sp)
   913a4:	dec00704 	addi	sp,sp,28
   913a8:	f800283a 	ret
   913ac:	84000284 	addi	r16,r16,10
   913b0:	1827883a 	mov	r19,r3
   913b4:	003fe906 	br	9135c <__alt_data_end+0xfffc149c>

000913b8 <__hi0bits>:
   913b8:	20bfffec 	andhi	r2,r4,65535
   913bc:	1000141e 	bne	r2,zero,91410 <__hi0bits+0x58>
   913c0:	2008943a 	slli	r4,r4,16
   913c4:	00800404 	movi	r2,16
   913c8:	20ffc02c 	andhi	r3,r4,65280
   913cc:	1800021e 	bne	r3,zero,913d8 <__hi0bits+0x20>
   913d0:	2008923a 	slli	r4,r4,8
   913d4:	10800204 	addi	r2,r2,8
   913d8:	20fc002c 	andhi	r3,r4,61440
   913dc:	1800021e 	bne	r3,zero,913e8 <__hi0bits+0x30>
   913e0:	2008913a 	slli	r4,r4,4
   913e4:	10800104 	addi	r2,r2,4
   913e8:	20f0002c 	andhi	r3,r4,49152
   913ec:	1800031e 	bne	r3,zero,913fc <__hi0bits+0x44>
   913f0:	2109883a 	add	r4,r4,r4
   913f4:	10800084 	addi	r2,r2,2
   913f8:	2109883a 	add	r4,r4,r4
   913fc:	20000316 	blt	r4,zero,9140c <__hi0bits+0x54>
   91400:	2110002c 	andhi	r4,r4,16384
   91404:	2000041e 	bne	r4,zero,91418 <__hi0bits+0x60>
   91408:	00800804 	movi	r2,32
   9140c:	f800283a 	ret
   91410:	0005883a 	mov	r2,zero
   91414:	003fec06 	br	913c8 <__alt_data_end+0xfffc1508>
   91418:	10800044 	addi	r2,r2,1
   9141c:	f800283a 	ret

00091420 <__lo0bits>:
   91420:	20c00017 	ldw	r3,0(r4)
   91424:	188001cc 	andi	r2,r3,7
   91428:	10000826 	beq	r2,zero,9144c <__lo0bits+0x2c>
   9142c:	1880004c 	andi	r2,r3,1
   91430:	1000211e 	bne	r2,zero,914b8 <__lo0bits+0x98>
   91434:	1880008c 	andi	r2,r3,2
   91438:	1000211e 	bne	r2,zero,914c0 <__lo0bits+0xa0>
   9143c:	1806d0ba 	srli	r3,r3,2
   91440:	00800084 	movi	r2,2
   91444:	20c00015 	stw	r3,0(r4)
   91448:	f800283a 	ret
   9144c:	18bfffcc 	andi	r2,r3,65535
   91450:	10001326 	beq	r2,zero,914a0 <__lo0bits+0x80>
   91454:	0005883a 	mov	r2,zero
   91458:	19403fcc 	andi	r5,r3,255
   9145c:	2800021e 	bne	r5,zero,91468 <__lo0bits+0x48>
   91460:	1806d23a 	srli	r3,r3,8
   91464:	10800204 	addi	r2,r2,8
   91468:	194003cc 	andi	r5,r3,15
   9146c:	2800021e 	bne	r5,zero,91478 <__lo0bits+0x58>
   91470:	1806d13a 	srli	r3,r3,4
   91474:	10800104 	addi	r2,r2,4
   91478:	194000cc 	andi	r5,r3,3
   9147c:	2800021e 	bne	r5,zero,91488 <__lo0bits+0x68>
   91480:	1806d0ba 	srli	r3,r3,2
   91484:	10800084 	addi	r2,r2,2
   91488:	1940004c 	andi	r5,r3,1
   9148c:	2800081e 	bne	r5,zero,914b0 <__lo0bits+0x90>
   91490:	1806d07a 	srli	r3,r3,1
   91494:	1800051e 	bne	r3,zero,914ac <__lo0bits+0x8c>
   91498:	00800804 	movi	r2,32
   9149c:	f800283a 	ret
   914a0:	1806d43a 	srli	r3,r3,16
   914a4:	00800404 	movi	r2,16
   914a8:	003feb06 	br	91458 <__alt_data_end+0xfffc1598>
   914ac:	10800044 	addi	r2,r2,1
   914b0:	20c00015 	stw	r3,0(r4)
   914b4:	f800283a 	ret
   914b8:	0005883a 	mov	r2,zero
   914bc:	f800283a 	ret
   914c0:	1806d07a 	srli	r3,r3,1
   914c4:	00800044 	movi	r2,1
   914c8:	20c00015 	stw	r3,0(r4)
   914cc:	f800283a 	ret

000914d0 <__i2b>:
   914d0:	defffd04 	addi	sp,sp,-12
   914d4:	dc000015 	stw	r16,0(sp)
   914d8:	04000044 	movi	r16,1
   914dc:	dc400115 	stw	r17,4(sp)
   914e0:	2823883a 	mov	r17,r5
   914e4:	800b883a 	mov	r5,r16
   914e8:	dfc00215 	stw	ra,8(sp)
   914ec:	00910c40 	call	910c4 <_Balloc>
   914f0:	14400515 	stw	r17,20(r2)
   914f4:	14000415 	stw	r16,16(r2)
   914f8:	dfc00217 	ldw	ra,8(sp)
   914fc:	dc400117 	ldw	r17,4(sp)
   91500:	dc000017 	ldw	r16,0(sp)
   91504:	dec00304 	addi	sp,sp,12
   91508:	f800283a 	ret

0009150c <__multiply>:
   9150c:	defffa04 	addi	sp,sp,-24
   91510:	dcc00315 	stw	r19,12(sp)
   91514:	dc800215 	stw	r18,8(sp)
   91518:	34c00417 	ldw	r19,16(r6)
   9151c:	2c800417 	ldw	r18,16(r5)
   91520:	dd000415 	stw	r20,16(sp)
   91524:	dc400115 	stw	r17,4(sp)
   91528:	dfc00515 	stw	ra,20(sp)
   9152c:	dc000015 	stw	r16,0(sp)
   91530:	2829883a 	mov	r20,r5
   91534:	3023883a 	mov	r17,r6
   91538:	94c0050e 	bge	r18,r19,91550 <__multiply+0x44>
   9153c:	9007883a 	mov	r3,r18
   91540:	3029883a 	mov	r20,r6
   91544:	9825883a 	mov	r18,r19
   91548:	2823883a 	mov	r17,r5
   9154c:	1827883a 	mov	r19,r3
   91550:	a0800217 	ldw	r2,8(r20)
   91554:	94e1883a 	add	r16,r18,r19
   91558:	a1400117 	ldw	r5,4(r20)
   9155c:	1400010e 	bge	r2,r16,91564 <__multiply+0x58>
   91560:	29400044 	addi	r5,r5,1
   91564:	00910c40 	call	910c4 <_Balloc>
   91568:	8415883a 	add	r10,r16,r16
   9156c:	12c00504 	addi	r11,r2,20
   91570:	5295883a 	add	r10,r10,r10
   91574:	5a95883a 	add	r10,r11,r10
   91578:	5807883a 	mov	r3,r11
   9157c:	5a80032e 	bgeu	r11,r10,9158c <__multiply+0x80>
   91580:	18000015 	stw	zero,0(r3)
   91584:	18c00104 	addi	r3,r3,4
   91588:	1abffd36 	bltu	r3,r10,91580 <__alt_data_end+0xfffc16c0>
   9158c:	9ce7883a 	add	r19,r19,r19
   91590:	94a5883a 	add	r18,r18,r18
   91594:	89800504 	addi	r6,r17,20
   91598:	9ce7883a 	add	r19,r19,r19
   9159c:	a3400504 	addi	r13,r20,20
   915a0:	94a5883a 	add	r18,r18,r18
   915a4:	34d9883a 	add	r12,r6,r19
   915a8:	6c93883a 	add	r9,r13,r18
   915ac:	3300422e 	bgeu	r6,r12,916b8 <__multiply+0x1ac>
   915b0:	37c00017 	ldw	ra,0(r6)
   915b4:	fbffffcc 	andi	r15,ra,65535
   915b8:	78001b26 	beq	r15,zero,91628 <__multiply+0x11c>
   915bc:	5811883a 	mov	r8,r11
   915c0:	681d883a 	mov	r14,r13
   915c4:	000f883a 	mov	r7,zero
   915c8:	71000017 	ldw	r4,0(r14)
   915cc:	40c00017 	ldw	r3,0(r8)
   915d0:	73800104 	addi	r14,r14,4
   915d4:	217fffcc 	andi	r5,r4,65535
   915d8:	2bcb383a 	mul	r5,r5,r15
   915dc:	2008d43a 	srli	r4,r4,16
   915e0:	1c7fffcc 	andi	r17,r3,65535
   915e4:	2c4b883a 	add	r5,r5,r17
   915e8:	29cb883a 	add	r5,r5,r7
   915ec:	23c9383a 	mul	r4,r4,r15
   915f0:	1806d43a 	srli	r3,r3,16
   915f4:	280ed43a 	srli	r7,r5,16
   915f8:	297fffcc 	andi	r5,r5,65535
   915fc:	20c7883a 	add	r3,r4,r3
   91600:	19c7883a 	add	r3,r3,r7
   91604:	1808943a 	slli	r4,r3,16
   91608:	4023883a 	mov	r17,r8
   9160c:	180ed43a 	srli	r7,r3,16
   91610:	214ab03a 	or	r5,r4,r5
   91614:	41400015 	stw	r5,0(r8)
   91618:	42000104 	addi	r8,r8,4
   9161c:	727fea36 	bltu	r14,r9,915c8 <__alt_data_end+0xfffc1708>
   91620:	89c00115 	stw	r7,4(r17)
   91624:	37c00017 	ldw	ra,0(r6)
   91628:	f83ed43a 	srli	ra,ra,16
   9162c:	f8001f26 	beq	ra,zero,916ac <__multiply+0x1a0>
   91630:	58c00017 	ldw	r3,0(r11)
   91634:	681d883a 	mov	r14,r13
   91638:	581f883a 	mov	r15,r11
   9163c:	1811883a 	mov	r8,r3
   91640:	5825883a 	mov	r18,r11
   91644:	000f883a 	mov	r7,zero
   91648:	00000106 	br	91650 <__multiply+0x144>
   9164c:	8825883a 	mov	r18,r17
   91650:	7140000b 	ldhu	r5,0(r14)
   91654:	4010d43a 	srli	r8,r8,16
   91658:	193fffcc 	andi	r4,r3,65535
   9165c:	2fcb383a 	mul	r5,r5,ra
   91660:	7bc00104 	addi	r15,r15,4
   91664:	73800104 	addi	r14,r14,4
   91668:	2a0b883a 	add	r5,r5,r8
   9166c:	29cb883a 	add	r5,r5,r7
   91670:	2806943a 	slli	r3,r5,16
   91674:	94400104 	addi	r17,r18,4
   91678:	280ad43a 	srli	r5,r5,16
   9167c:	1908b03a 	or	r4,r3,r4
   91680:	793fff15 	stw	r4,-4(r15)
   91684:	70ffff17 	ldw	r3,-4(r14)
   91688:	8a000017 	ldw	r8,0(r17)
   9168c:	1806d43a 	srli	r3,r3,16
   91690:	413fffcc 	andi	r4,r8,65535
   91694:	1fc7383a 	mul	r3,r3,ra
   91698:	1907883a 	add	r3,r3,r4
   9169c:	1947883a 	add	r3,r3,r5
   916a0:	180ed43a 	srli	r7,r3,16
   916a4:	727fe936 	bltu	r14,r9,9164c <__alt_data_end+0xfffc178c>
   916a8:	90c00115 	stw	r3,4(r18)
   916ac:	31800104 	addi	r6,r6,4
   916b0:	5ac00104 	addi	r11,r11,4
   916b4:	333fbe36 	bltu	r6,r12,915b0 <__alt_data_end+0xfffc16f0>
   916b8:	0400090e 	bge	zero,r16,916e0 <__multiply+0x1d4>
   916bc:	50ffff17 	ldw	r3,-4(r10)
   916c0:	52bfff04 	addi	r10,r10,-4
   916c4:	18000326 	beq	r3,zero,916d4 <__multiply+0x1c8>
   916c8:	00000506 	br	916e0 <__multiply+0x1d4>
   916cc:	50c00017 	ldw	r3,0(r10)
   916d0:	1800031e 	bne	r3,zero,916e0 <__multiply+0x1d4>
   916d4:	843fffc4 	addi	r16,r16,-1
   916d8:	52bfff04 	addi	r10,r10,-4
   916dc:	803ffb1e 	bne	r16,zero,916cc <__alt_data_end+0xfffc180c>
   916e0:	14000415 	stw	r16,16(r2)
   916e4:	dfc00517 	ldw	ra,20(sp)
   916e8:	dd000417 	ldw	r20,16(sp)
   916ec:	dcc00317 	ldw	r19,12(sp)
   916f0:	dc800217 	ldw	r18,8(sp)
   916f4:	dc400117 	ldw	r17,4(sp)
   916f8:	dc000017 	ldw	r16,0(sp)
   916fc:	dec00604 	addi	sp,sp,24
   91700:	f800283a 	ret

00091704 <__pow5mult>:
   91704:	defffa04 	addi	sp,sp,-24
   91708:	dcc00315 	stw	r19,12(sp)
   9170c:	dc000015 	stw	r16,0(sp)
   91710:	dfc00515 	stw	ra,20(sp)
   91714:	dd000415 	stw	r20,16(sp)
   91718:	dc800215 	stw	r18,8(sp)
   9171c:	dc400115 	stw	r17,4(sp)
   91720:	308000cc 	andi	r2,r6,3
   91724:	3021883a 	mov	r16,r6
   91728:	2027883a 	mov	r19,r4
   9172c:	10002f1e 	bne	r2,zero,917ec <__pow5mult+0xe8>
   91730:	2825883a 	mov	r18,r5
   91734:	8021d0ba 	srai	r16,r16,2
   91738:	80001a26 	beq	r16,zero,917a4 <__pow5mult+0xa0>
   9173c:	9c401217 	ldw	r17,72(r19)
   91740:	8800061e 	bne	r17,zero,9175c <__pow5mult+0x58>
   91744:	00003406 	br	91818 <__pow5mult+0x114>
   91748:	8021d07a 	srai	r16,r16,1
   9174c:	80001526 	beq	r16,zero,917a4 <__pow5mult+0xa0>
   91750:	88800017 	ldw	r2,0(r17)
   91754:	10001c26 	beq	r2,zero,917c8 <__pow5mult+0xc4>
   91758:	1023883a 	mov	r17,r2
   9175c:	8080004c 	andi	r2,r16,1
   91760:	103ff926 	beq	r2,zero,91748 <__alt_data_end+0xfffc1888>
   91764:	880d883a 	mov	r6,r17
   91768:	900b883a 	mov	r5,r18
   9176c:	9809883a 	mov	r4,r19
   91770:	009150c0 	call	9150c <__multiply>
   91774:	90001b26 	beq	r18,zero,917e4 <__pow5mult+0xe0>
   91778:	91000117 	ldw	r4,4(r18)
   9177c:	98c01317 	ldw	r3,76(r19)
   91780:	8021d07a 	srai	r16,r16,1
   91784:	2109883a 	add	r4,r4,r4
   91788:	2109883a 	add	r4,r4,r4
   9178c:	1907883a 	add	r3,r3,r4
   91790:	19000017 	ldw	r4,0(r3)
   91794:	91000015 	stw	r4,0(r18)
   91798:	1c800015 	stw	r18,0(r3)
   9179c:	1025883a 	mov	r18,r2
   917a0:	803feb1e 	bne	r16,zero,91750 <__alt_data_end+0xfffc1890>
   917a4:	9005883a 	mov	r2,r18
   917a8:	dfc00517 	ldw	ra,20(sp)
   917ac:	dd000417 	ldw	r20,16(sp)
   917b0:	dcc00317 	ldw	r19,12(sp)
   917b4:	dc800217 	ldw	r18,8(sp)
   917b8:	dc400117 	ldw	r17,4(sp)
   917bc:	dc000017 	ldw	r16,0(sp)
   917c0:	dec00604 	addi	sp,sp,24
   917c4:	f800283a 	ret
   917c8:	880d883a 	mov	r6,r17
   917cc:	880b883a 	mov	r5,r17
   917d0:	9809883a 	mov	r4,r19
   917d4:	009150c0 	call	9150c <__multiply>
   917d8:	88800015 	stw	r2,0(r17)
   917dc:	10000015 	stw	zero,0(r2)
   917e0:	003fdd06 	br	91758 <__alt_data_end+0xfffc1898>
   917e4:	1025883a 	mov	r18,r2
   917e8:	003fd706 	br	91748 <__alt_data_end+0xfffc1888>
   917ec:	10bfffc4 	addi	r2,r2,-1
   917f0:	1085883a 	add	r2,r2,r2
   917f4:	00c002b4 	movhi	r3,10
   917f8:	18f14804 	addi	r3,r3,-15072
   917fc:	1085883a 	add	r2,r2,r2
   91800:	1885883a 	add	r2,r3,r2
   91804:	11800017 	ldw	r6,0(r2)
   91808:	000f883a 	mov	r7,zero
   9180c:	00911940 	call	91194 <__multadd>
   91810:	1025883a 	mov	r18,r2
   91814:	003fc706 	br	91734 <__alt_data_end+0xfffc1874>
   91818:	05000044 	movi	r20,1
   9181c:	a00b883a 	mov	r5,r20
   91820:	9809883a 	mov	r4,r19
   91824:	00910c40 	call	910c4 <_Balloc>
   91828:	1023883a 	mov	r17,r2
   9182c:	00809c44 	movi	r2,625
   91830:	88800515 	stw	r2,20(r17)
   91834:	8d000415 	stw	r20,16(r17)
   91838:	9c401215 	stw	r17,72(r19)
   9183c:	88000015 	stw	zero,0(r17)
   91840:	003fc606 	br	9175c <__alt_data_end+0xfffc189c>

00091844 <__lshift>:
   91844:	defff904 	addi	sp,sp,-28
   91848:	dd400515 	stw	r21,20(sp)
   9184c:	dcc00315 	stw	r19,12(sp)
   91850:	302bd17a 	srai	r21,r6,5
   91854:	2cc00417 	ldw	r19,16(r5)
   91858:	28800217 	ldw	r2,8(r5)
   9185c:	dd000415 	stw	r20,16(sp)
   91860:	ace7883a 	add	r19,r21,r19
   91864:	dc800215 	stw	r18,8(sp)
   91868:	dc400115 	stw	r17,4(sp)
   9186c:	dc000015 	stw	r16,0(sp)
   91870:	dfc00615 	stw	ra,24(sp)
   91874:	9c000044 	addi	r16,r19,1
   91878:	2823883a 	mov	r17,r5
   9187c:	3029883a 	mov	r20,r6
   91880:	2025883a 	mov	r18,r4
   91884:	29400117 	ldw	r5,4(r5)
   91888:	1400030e 	bge	r2,r16,91898 <__lshift+0x54>
   9188c:	1085883a 	add	r2,r2,r2
   91890:	29400044 	addi	r5,r5,1
   91894:	143ffd16 	blt	r2,r16,9188c <__alt_data_end+0xfffc19cc>
   91898:	9009883a 	mov	r4,r18
   9189c:	00910c40 	call	910c4 <_Balloc>
   918a0:	10c00504 	addi	r3,r2,20
   918a4:	0540070e 	bge	zero,r21,918c4 <__lshift+0x80>
   918a8:	ad6b883a 	add	r21,r21,r21
   918ac:	ad6b883a 	add	r21,r21,r21
   918b0:	1809883a 	mov	r4,r3
   918b4:	1d47883a 	add	r3,r3,r21
   918b8:	20000015 	stw	zero,0(r4)
   918bc:	21000104 	addi	r4,r4,4
   918c0:	193ffd1e 	bne	r3,r4,918b8 <__alt_data_end+0xfffc19f8>
   918c4:	8a000417 	ldw	r8,16(r17)
   918c8:	89000504 	addi	r4,r17,20
   918cc:	a18007cc 	andi	r6,r20,31
   918d0:	4211883a 	add	r8,r8,r8
   918d4:	4211883a 	add	r8,r8,r8
   918d8:	2211883a 	add	r8,r4,r8
   918dc:	30002326 	beq	r6,zero,9196c <__lshift+0x128>
   918e0:	02400804 	movi	r9,32
   918e4:	4993c83a 	sub	r9,r9,r6
   918e8:	000b883a 	mov	r5,zero
   918ec:	21c00017 	ldw	r7,0(r4)
   918f0:	1815883a 	mov	r10,r3
   918f4:	18c00104 	addi	r3,r3,4
   918f8:	398e983a 	sll	r7,r7,r6
   918fc:	21000104 	addi	r4,r4,4
   91900:	394ab03a 	or	r5,r7,r5
   91904:	197fff15 	stw	r5,-4(r3)
   91908:	217fff17 	ldw	r5,-4(r4)
   9190c:	2a4ad83a 	srl	r5,r5,r9
   91910:	223ff636 	bltu	r4,r8,918ec <__alt_data_end+0xfffc1a2c>
   91914:	51400115 	stw	r5,4(r10)
   91918:	28001a1e 	bne	r5,zero,91984 <__lshift+0x140>
   9191c:	843fffc4 	addi	r16,r16,-1
   91920:	14000415 	stw	r16,16(r2)
   91924:	88000826 	beq	r17,zero,91948 <__lshift+0x104>
   91928:	89000117 	ldw	r4,4(r17)
   9192c:	90c01317 	ldw	r3,76(r18)
   91930:	2109883a 	add	r4,r4,r4
   91934:	2109883a 	add	r4,r4,r4
   91938:	1907883a 	add	r3,r3,r4
   9193c:	19000017 	ldw	r4,0(r3)
   91940:	89000015 	stw	r4,0(r17)
   91944:	1c400015 	stw	r17,0(r3)
   91948:	dfc00617 	ldw	ra,24(sp)
   9194c:	dd400517 	ldw	r21,20(sp)
   91950:	dd000417 	ldw	r20,16(sp)
   91954:	dcc00317 	ldw	r19,12(sp)
   91958:	dc800217 	ldw	r18,8(sp)
   9195c:	dc400117 	ldw	r17,4(sp)
   91960:	dc000017 	ldw	r16,0(sp)
   91964:	dec00704 	addi	sp,sp,28
   91968:	f800283a 	ret
   9196c:	21400017 	ldw	r5,0(r4)
   91970:	18c00104 	addi	r3,r3,4
   91974:	21000104 	addi	r4,r4,4
   91978:	197fff15 	stw	r5,-4(r3)
   9197c:	223ffb36 	bltu	r4,r8,9196c <__alt_data_end+0xfffc1aac>
   91980:	003fe606 	br	9191c <__alt_data_end+0xfffc1a5c>
   91984:	9c000084 	addi	r16,r19,2
   91988:	003fe406 	br	9191c <__alt_data_end+0xfffc1a5c>

0009198c <__mcmp>:
   9198c:	20800417 	ldw	r2,16(r4)
   91990:	28c00417 	ldw	r3,16(r5)
   91994:	10c5c83a 	sub	r2,r2,r3
   91998:	1000111e 	bne	r2,zero,919e0 <__mcmp+0x54>
   9199c:	18c7883a 	add	r3,r3,r3
   919a0:	18c7883a 	add	r3,r3,r3
   919a4:	21000504 	addi	r4,r4,20
   919a8:	29400504 	addi	r5,r5,20
   919ac:	20c5883a 	add	r2,r4,r3
   919b0:	28cb883a 	add	r5,r5,r3
   919b4:	00000106 	br	919bc <__mcmp+0x30>
   919b8:	20800a2e 	bgeu	r4,r2,919e4 <__mcmp+0x58>
   919bc:	10bfff04 	addi	r2,r2,-4
   919c0:	297fff04 	addi	r5,r5,-4
   919c4:	11800017 	ldw	r6,0(r2)
   919c8:	28c00017 	ldw	r3,0(r5)
   919cc:	30fffa26 	beq	r6,r3,919b8 <__alt_data_end+0xfffc1af8>
   919d0:	30c00236 	bltu	r6,r3,919dc <__mcmp+0x50>
   919d4:	00800044 	movi	r2,1
   919d8:	f800283a 	ret
   919dc:	00bfffc4 	movi	r2,-1
   919e0:	f800283a 	ret
   919e4:	0005883a 	mov	r2,zero
   919e8:	f800283a 	ret

000919ec <__mdiff>:
   919ec:	28c00417 	ldw	r3,16(r5)
   919f0:	30800417 	ldw	r2,16(r6)
   919f4:	defffa04 	addi	sp,sp,-24
   919f8:	dcc00315 	stw	r19,12(sp)
   919fc:	dc800215 	stw	r18,8(sp)
   91a00:	dfc00515 	stw	ra,20(sp)
   91a04:	dd000415 	stw	r20,16(sp)
   91a08:	dc400115 	stw	r17,4(sp)
   91a0c:	dc000015 	stw	r16,0(sp)
   91a10:	1887c83a 	sub	r3,r3,r2
   91a14:	2825883a 	mov	r18,r5
   91a18:	3027883a 	mov	r19,r6
   91a1c:	1800141e 	bne	r3,zero,91a70 <__mdiff+0x84>
   91a20:	1085883a 	add	r2,r2,r2
   91a24:	1085883a 	add	r2,r2,r2
   91a28:	2a000504 	addi	r8,r5,20
   91a2c:	34000504 	addi	r16,r6,20
   91a30:	4087883a 	add	r3,r8,r2
   91a34:	8085883a 	add	r2,r16,r2
   91a38:	00000106 	br	91a40 <__mdiff+0x54>
   91a3c:	40c0592e 	bgeu	r8,r3,91ba4 <__mdiff+0x1b8>
   91a40:	18ffff04 	addi	r3,r3,-4
   91a44:	10bfff04 	addi	r2,r2,-4
   91a48:	19c00017 	ldw	r7,0(r3)
   91a4c:	11400017 	ldw	r5,0(r2)
   91a50:	397ffa26 	beq	r7,r5,91a3c <__alt_data_end+0xfffc1b7c>
   91a54:	3940592e 	bgeu	r7,r5,91bbc <__mdiff+0x1d0>
   91a58:	9005883a 	mov	r2,r18
   91a5c:	4023883a 	mov	r17,r8
   91a60:	9825883a 	mov	r18,r19
   91a64:	05000044 	movi	r20,1
   91a68:	1027883a 	mov	r19,r2
   91a6c:	00000406 	br	91a80 <__mdiff+0x94>
   91a70:	18005616 	blt	r3,zero,91bcc <__mdiff+0x1e0>
   91a74:	34400504 	addi	r17,r6,20
   91a78:	2c000504 	addi	r16,r5,20
   91a7c:	0029883a 	mov	r20,zero
   91a80:	91400117 	ldw	r5,4(r18)
   91a84:	00910c40 	call	910c4 <_Balloc>
   91a88:	92400417 	ldw	r9,16(r18)
   91a8c:	9b000417 	ldw	r12,16(r19)
   91a90:	12c00504 	addi	r11,r2,20
   91a94:	4a51883a 	add	r8,r9,r9
   91a98:	6319883a 	add	r12,r12,r12
   91a9c:	4211883a 	add	r8,r8,r8
   91aa0:	6319883a 	add	r12,r12,r12
   91aa4:	15000315 	stw	r20,12(r2)
   91aa8:	8211883a 	add	r8,r16,r8
   91aac:	8b19883a 	add	r12,r17,r12
   91ab0:	0007883a 	mov	r3,zero
   91ab4:	81400017 	ldw	r5,0(r16)
   91ab8:	89c00017 	ldw	r7,0(r17)
   91abc:	59800104 	addi	r6,r11,4
   91ac0:	293fffcc 	andi	r4,r5,65535
   91ac4:	20c7883a 	add	r3,r4,r3
   91ac8:	393fffcc 	andi	r4,r7,65535
   91acc:	1909c83a 	sub	r4,r3,r4
   91ad0:	280ad43a 	srli	r5,r5,16
   91ad4:	380ed43a 	srli	r7,r7,16
   91ad8:	2007d43a 	srai	r3,r4,16
   91adc:	213fffcc 	andi	r4,r4,65535
   91ae0:	29cbc83a 	sub	r5,r5,r7
   91ae4:	28c7883a 	add	r3,r5,r3
   91ae8:	180a943a 	slli	r5,r3,16
   91aec:	8c400104 	addi	r17,r17,4
   91af0:	84000104 	addi	r16,r16,4
   91af4:	2908b03a 	or	r4,r5,r4
   91af8:	59000015 	stw	r4,0(r11)
   91afc:	1807d43a 	srai	r3,r3,16
   91b00:	3015883a 	mov	r10,r6
   91b04:	3017883a 	mov	r11,r6
   91b08:	8b3fea36 	bltu	r17,r12,91ab4 <__alt_data_end+0xfffc1bf4>
   91b0c:	8200162e 	bgeu	r16,r8,91b68 <__mdiff+0x17c>
   91b10:	8017883a 	mov	r11,r16
   91b14:	59400017 	ldw	r5,0(r11)
   91b18:	31800104 	addi	r6,r6,4
   91b1c:	5ac00104 	addi	r11,r11,4
   91b20:	293fffcc 	andi	r4,r5,65535
   91b24:	20c7883a 	add	r3,r4,r3
   91b28:	280ed43a 	srli	r7,r5,16
   91b2c:	180bd43a 	srai	r5,r3,16
   91b30:	193fffcc 	andi	r4,r3,65535
   91b34:	3947883a 	add	r3,r7,r5
   91b38:	180a943a 	slli	r5,r3,16
   91b3c:	1807d43a 	srai	r3,r3,16
   91b40:	2908b03a 	or	r4,r5,r4
   91b44:	313fff15 	stw	r4,-4(r6)
   91b48:	5a3ff236 	bltu	r11,r8,91b14 <__alt_data_end+0xfffc1c54>
   91b4c:	0406303a 	nor	r3,zero,r16
   91b50:	1a07883a 	add	r3,r3,r8
   91b54:	1806d0ba 	srli	r3,r3,2
   91b58:	18c00044 	addi	r3,r3,1
   91b5c:	18c7883a 	add	r3,r3,r3
   91b60:	18c7883a 	add	r3,r3,r3
   91b64:	50d5883a 	add	r10,r10,r3
   91b68:	50ffff04 	addi	r3,r10,-4
   91b6c:	2000041e 	bne	r4,zero,91b80 <__mdiff+0x194>
   91b70:	18ffff04 	addi	r3,r3,-4
   91b74:	19000017 	ldw	r4,0(r3)
   91b78:	4a7fffc4 	addi	r9,r9,-1
   91b7c:	203ffc26 	beq	r4,zero,91b70 <__alt_data_end+0xfffc1cb0>
   91b80:	12400415 	stw	r9,16(r2)
   91b84:	dfc00517 	ldw	ra,20(sp)
   91b88:	dd000417 	ldw	r20,16(sp)
   91b8c:	dcc00317 	ldw	r19,12(sp)
   91b90:	dc800217 	ldw	r18,8(sp)
   91b94:	dc400117 	ldw	r17,4(sp)
   91b98:	dc000017 	ldw	r16,0(sp)
   91b9c:	dec00604 	addi	sp,sp,24
   91ba0:	f800283a 	ret
   91ba4:	000b883a 	mov	r5,zero
   91ba8:	00910c40 	call	910c4 <_Balloc>
   91bac:	00c00044 	movi	r3,1
   91bb0:	10c00415 	stw	r3,16(r2)
   91bb4:	10000515 	stw	zero,20(r2)
   91bb8:	003ff206 	br	91b84 <__alt_data_end+0xfffc1cc4>
   91bbc:	8023883a 	mov	r17,r16
   91bc0:	0029883a 	mov	r20,zero
   91bc4:	4021883a 	mov	r16,r8
   91bc8:	003fad06 	br	91a80 <__alt_data_end+0xfffc1bc0>
   91bcc:	9005883a 	mov	r2,r18
   91bd0:	94400504 	addi	r17,r18,20
   91bd4:	9c000504 	addi	r16,r19,20
   91bd8:	9825883a 	mov	r18,r19
   91bdc:	05000044 	movi	r20,1
   91be0:	1027883a 	mov	r19,r2
   91be4:	003fa606 	br	91a80 <__alt_data_end+0xfffc1bc0>

00091be8 <__ulp>:
   91be8:	295ffc2c 	andhi	r5,r5,32752
   91bec:	00bf3034 	movhi	r2,64704
   91bf0:	2887883a 	add	r3,r5,r2
   91bf4:	00c0020e 	bge	zero,r3,91c00 <__ulp+0x18>
   91bf8:	0005883a 	mov	r2,zero
   91bfc:	f800283a 	ret
   91c00:	00c7c83a 	sub	r3,zero,r3
   91c04:	1807d53a 	srai	r3,r3,20
   91c08:	008004c4 	movi	r2,19
   91c0c:	10c00b0e 	bge	r2,r3,91c3c <__ulp+0x54>
   91c10:	18bffb04 	addi	r2,r3,-20
   91c14:	01000784 	movi	r4,30
   91c18:	0007883a 	mov	r3,zero
   91c1c:	20800516 	blt	r4,r2,91c34 <__ulp+0x4c>
   91c20:	010007c4 	movi	r4,31
   91c24:	2089c83a 	sub	r4,r4,r2
   91c28:	00800044 	movi	r2,1
   91c2c:	1104983a 	sll	r2,r2,r4
   91c30:	f800283a 	ret
   91c34:	00800044 	movi	r2,1
   91c38:	f800283a 	ret
   91c3c:	01400234 	movhi	r5,8
   91c40:	28c7d83a 	sra	r3,r5,r3
   91c44:	0005883a 	mov	r2,zero
   91c48:	f800283a 	ret

00091c4c <__b2d>:
   91c4c:	defffa04 	addi	sp,sp,-24
   91c50:	dc000015 	stw	r16,0(sp)
   91c54:	24000417 	ldw	r16,16(r4)
   91c58:	dc400115 	stw	r17,4(sp)
   91c5c:	24400504 	addi	r17,r4,20
   91c60:	8421883a 	add	r16,r16,r16
   91c64:	8421883a 	add	r16,r16,r16
   91c68:	8c21883a 	add	r16,r17,r16
   91c6c:	dc800215 	stw	r18,8(sp)
   91c70:	84bfff17 	ldw	r18,-4(r16)
   91c74:	dd000415 	stw	r20,16(sp)
   91c78:	dcc00315 	stw	r19,12(sp)
   91c7c:	9009883a 	mov	r4,r18
   91c80:	2829883a 	mov	r20,r5
   91c84:	dfc00515 	stw	ra,20(sp)
   91c88:	00913b80 	call	913b8 <__hi0bits>
   91c8c:	00c00804 	movi	r3,32
   91c90:	1889c83a 	sub	r4,r3,r2
   91c94:	a1000015 	stw	r4,0(r20)
   91c98:	01000284 	movi	r4,10
   91c9c:	84ffff04 	addi	r19,r16,-4
   91ca0:	20801216 	blt	r4,r2,91cec <__b2d+0xa0>
   91ca4:	018002c4 	movi	r6,11
   91ca8:	308dc83a 	sub	r6,r6,r2
   91cac:	9186d83a 	srl	r3,r18,r6
   91cb0:	18cffc34 	orhi	r3,r3,16368
   91cb4:	8cc0212e 	bgeu	r17,r19,91d3c <__b2d+0xf0>
   91cb8:	813ffe17 	ldw	r4,-8(r16)
   91cbc:	218cd83a 	srl	r6,r4,r6
   91cc0:	10800544 	addi	r2,r2,21
   91cc4:	9084983a 	sll	r2,r18,r2
   91cc8:	1184b03a 	or	r2,r2,r6
   91ccc:	dfc00517 	ldw	ra,20(sp)
   91cd0:	dd000417 	ldw	r20,16(sp)
   91cd4:	dcc00317 	ldw	r19,12(sp)
   91cd8:	dc800217 	ldw	r18,8(sp)
   91cdc:	dc400117 	ldw	r17,4(sp)
   91ce0:	dc000017 	ldw	r16,0(sp)
   91ce4:	dec00604 	addi	sp,sp,24
   91ce8:	f800283a 	ret
   91cec:	8cc00f2e 	bgeu	r17,r19,91d2c <__b2d+0xe0>
   91cf0:	117ffd44 	addi	r5,r2,-11
   91cf4:	80bffe17 	ldw	r2,-8(r16)
   91cf8:	28000e26 	beq	r5,zero,91d34 <__b2d+0xe8>
   91cfc:	1949c83a 	sub	r4,r3,r5
   91d00:	9164983a 	sll	r18,r18,r5
   91d04:	1106d83a 	srl	r3,r2,r4
   91d08:	81bffe04 	addi	r6,r16,-8
   91d0c:	948ffc34 	orhi	r18,r18,16368
   91d10:	90c6b03a 	or	r3,r18,r3
   91d14:	89800e2e 	bgeu	r17,r6,91d50 <__b2d+0x104>
   91d18:	81bffd17 	ldw	r6,-12(r16)
   91d1c:	1144983a 	sll	r2,r2,r5
   91d20:	310ad83a 	srl	r5,r6,r4
   91d24:	2884b03a 	or	r2,r5,r2
   91d28:	003fe806 	br	91ccc <__alt_data_end+0xfffc1e0c>
   91d2c:	10bffd44 	addi	r2,r2,-11
   91d30:	1000041e 	bne	r2,zero,91d44 <__b2d+0xf8>
   91d34:	90cffc34 	orhi	r3,r18,16368
   91d38:	003fe406 	br	91ccc <__alt_data_end+0xfffc1e0c>
   91d3c:	000d883a 	mov	r6,zero
   91d40:	003fdf06 	br	91cc0 <__alt_data_end+0xfffc1e00>
   91d44:	90a4983a 	sll	r18,r18,r2
   91d48:	0005883a 	mov	r2,zero
   91d4c:	003ff906 	br	91d34 <__alt_data_end+0xfffc1e74>
   91d50:	1144983a 	sll	r2,r2,r5
   91d54:	003fdd06 	br	91ccc <__alt_data_end+0xfffc1e0c>

00091d58 <__d2b>:
   91d58:	defff804 	addi	sp,sp,-32
   91d5c:	dc000215 	stw	r16,8(sp)
   91d60:	3021883a 	mov	r16,r6
   91d64:	dc400315 	stw	r17,12(sp)
   91d68:	8022907a 	slli	r17,r16,1
   91d6c:	dd000615 	stw	r20,24(sp)
   91d70:	2829883a 	mov	r20,r5
   91d74:	01400044 	movi	r5,1
   91d78:	dcc00515 	stw	r19,20(sp)
   91d7c:	dc800415 	stw	r18,16(sp)
   91d80:	dfc00715 	stw	ra,28(sp)
   91d84:	3825883a 	mov	r18,r7
   91d88:	8822d57a 	srli	r17,r17,21
   91d8c:	00910c40 	call	910c4 <_Balloc>
   91d90:	1027883a 	mov	r19,r2
   91d94:	00800434 	movhi	r2,16
   91d98:	10bfffc4 	addi	r2,r2,-1
   91d9c:	808c703a 	and	r6,r16,r2
   91da0:	88000126 	beq	r17,zero,91da8 <__d2b+0x50>
   91da4:	31800434 	orhi	r6,r6,16
   91da8:	d9800015 	stw	r6,0(sp)
   91dac:	a0002426 	beq	r20,zero,91e40 <__d2b+0xe8>
   91db0:	d9000104 	addi	r4,sp,4
   91db4:	dd000115 	stw	r20,4(sp)
   91db8:	00914200 	call	91420 <__lo0bits>
   91dbc:	d8c00017 	ldw	r3,0(sp)
   91dc0:	10002f1e 	bne	r2,zero,91e80 <__d2b+0x128>
   91dc4:	d9000117 	ldw	r4,4(sp)
   91dc8:	99000515 	stw	r4,20(r19)
   91dcc:	1821003a 	cmpeq	r16,r3,zero
   91dd0:	01000084 	movi	r4,2
   91dd4:	2421c83a 	sub	r16,r4,r16
   91dd8:	98c00615 	stw	r3,24(r19)
   91ddc:	9c000415 	stw	r16,16(r19)
   91de0:	88001f1e 	bne	r17,zero,91e60 <__d2b+0x108>
   91de4:	10bef384 	addi	r2,r2,-1074
   91de8:	90800015 	stw	r2,0(r18)
   91dec:	00900034 	movhi	r2,16384
   91df0:	10bfffc4 	addi	r2,r2,-1
   91df4:	8085883a 	add	r2,r16,r2
   91df8:	1085883a 	add	r2,r2,r2
   91dfc:	1085883a 	add	r2,r2,r2
   91e00:	9885883a 	add	r2,r19,r2
   91e04:	11000517 	ldw	r4,20(r2)
   91e08:	8020917a 	slli	r16,r16,5
   91e0c:	00913b80 	call	913b8 <__hi0bits>
   91e10:	d8c00817 	ldw	r3,32(sp)
   91e14:	8085c83a 	sub	r2,r16,r2
   91e18:	18800015 	stw	r2,0(r3)
   91e1c:	9805883a 	mov	r2,r19
   91e20:	dfc00717 	ldw	ra,28(sp)
   91e24:	dd000617 	ldw	r20,24(sp)
   91e28:	dcc00517 	ldw	r19,20(sp)
   91e2c:	dc800417 	ldw	r18,16(sp)
   91e30:	dc400317 	ldw	r17,12(sp)
   91e34:	dc000217 	ldw	r16,8(sp)
   91e38:	dec00804 	addi	sp,sp,32
   91e3c:	f800283a 	ret
   91e40:	d809883a 	mov	r4,sp
   91e44:	00914200 	call	91420 <__lo0bits>
   91e48:	d8c00017 	ldw	r3,0(sp)
   91e4c:	04000044 	movi	r16,1
   91e50:	9c000415 	stw	r16,16(r19)
   91e54:	98c00515 	stw	r3,20(r19)
   91e58:	10800804 	addi	r2,r2,32
   91e5c:	883fe126 	beq	r17,zero,91de4 <__alt_data_end+0xfffc1f24>
   91e60:	00c00d44 	movi	r3,53
   91e64:	8c7ef344 	addi	r17,r17,-1075
   91e68:	88a3883a 	add	r17,r17,r2
   91e6c:	1885c83a 	sub	r2,r3,r2
   91e70:	d8c00817 	ldw	r3,32(sp)
   91e74:	94400015 	stw	r17,0(r18)
   91e78:	18800015 	stw	r2,0(r3)
   91e7c:	003fe706 	br	91e1c <__alt_data_end+0xfffc1f5c>
   91e80:	01000804 	movi	r4,32
   91e84:	2089c83a 	sub	r4,r4,r2
   91e88:	1908983a 	sll	r4,r3,r4
   91e8c:	d9400117 	ldw	r5,4(sp)
   91e90:	1886d83a 	srl	r3,r3,r2
   91e94:	2148b03a 	or	r4,r4,r5
   91e98:	99000515 	stw	r4,20(r19)
   91e9c:	d8c00015 	stw	r3,0(sp)
   91ea0:	003fca06 	br	91dcc <__alt_data_end+0xfffc1f0c>

00091ea4 <__ratio>:
   91ea4:	defff904 	addi	sp,sp,-28
   91ea8:	dc400315 	stw	r17,12(sp)
   91eac:	2823883a 	mov	r17,r5
   91eb0:	d9400104 	addi	r5,sp,4
   91eb4:	dfc00615 	stw	ra,24(sp)
   91eb8:	dcc00515 	stw	r19,20(sp)
   91ebc:	dc800415 	stw	r18,16(sp)
   91ec0:	2027883a 	mov	r19,r4
   91ec4:	dc000215 	stw	r16,8(sp)
   91ec8:	0091c4c0 	call	91c4c <__b2d>
   91ecc:	d80b883a 	mov	r5,sp
   91ed0:	8809883a 	mov	r4,r17
   91ed4:	1025883a 	mov	r18,r2
   91ed8:	1821883a 	mov	r16,r3
   91edc:	0091c4c0 	call	91c4c <__b2d>
   91ee0:	8a000417 	ldw	r8,16(r17)
   91ee4:	99000417 	ldw	r4,16(r19)
   91ee8:	d9400117 	ldw	r5,4(sp)
   91eec:	2209c83a 	sub	r4,r4,r8
   91ef0:	2010917a 	slli	r8,r4,5
   91ef4:	d9000017 	ldw	r4,0(sp)
   91ef8:	2909c83a 	sub	r4,r5,r4
   91efc:	4109883a 	add	r4,r8,r4
   91f00:	01000e0e 	bge	zero,r4,91f3c <__ratio+0x98>
   91f04:	2008953a 	slli	r4,r4,20
   91f08:	2421883a 	add	r16,r4,r16
   91f0c:	100d883a 	mov	r6,r2
   91f10:	180f883a 	mov	r7,r3
   91f14:	9009883a 	mov	r4,r18
   91f18:	800b883a 	mov	r5,r16
   91f1c:	00971500 	call	97150 <__divdf3>
   91f20:	dfc00617 	ldw	ra,24(sp)
   91f24:	dcc00517 	ldw	r19,20(sp)
   91f28:	dc800417 	ldw	r18,16(sp)
   91f2c:	dc400317 	ldw	r17,12(sp)
   91f30:	dc000217 	ldw	r16,8(sp)
   91f34:	dec00704 	addi	sp,sp,28
   91f38:	f800283a 	ret
   91f3c:	2008953a 	slli	r4,r4,20
   91f40:	1907c83a 	sub	r3,r3,r4
   91f44:	003ff106 	br	91f0c <__alt_data_end+0xfffc204c>

00091f48 <_mprec_log10>:
   91f48:	defffe04 	addi	sp,sp,-8
   91f4c:	dc000015 	stw	r16,0(sp)
   91f50:	dfc00115 	stw	ra,4(sp)
   91f54:	008005c4 	movi	r2,23
   91f58:	2021883a 	mov	r16,r4
   91f5c:	11000d0e 	bge	r2,r4,91f94 <_mprec_log10+0x4c>
   91f60:	0005883a 	mov	r2,zero
   91f64:	00cffc34 	movhi	r3,16368
   91f68:	843fffc4 	addi	r16,r16,-1
   91f6c:	000d883a 	mov	r6,zero
   91f70:	01d00934 	movhi	r7,16420
   91f74:	1009883a 	mov	r4,r2
   91f78:	180b883a 	mov	r5,r3
   91f7c:	0097c900 	call	97c90 <__muldf3>
   91f80:	803ff91e 	bne	r16,zero,91f68 <__alt_data_end+0xfffc20a8>
   91f84:	dfc00117 	ldw	ra,4(sp)
   91f88:	dc000017 	ldw	r16,0(sp)
   91f8c:	dec00204 	addi	sp,sp,8
   91f90:	f800283a 	ret
   91f94:	202090fa 	slli	r16,r4,3
   91f98:	008002b4 	movhi	r2,10
   91f9c:	10b15f04 	addi	r2,r2,-14980
   91fa0:	1421883a 	add	r16,r2,r16
   91fa4:	80800017 	ldw	r2,0(r16)
   91fa8:	80c00117 	ldw	r3,4(r16)
   91fac:	dfc00117 	ldw	ra,4(sp)
   91fb0:	dc000017 	ldw	r16,0(sp)
   91fb4:	dec00204 	addi	sp,sp,8
   91fb8:	f800283a 	ret

00091fbc <__copybits>:
   91fbc:	297fffc4 	addi	r5,r5,-1
   91fc0:	280fd17a 	srai	r7,r5,5
   91fc4:	30c00417 	ldw	r3,16(r6)
   91fc8:	30800504 	addi	r2,r6,20
   91fcc:	39c00044 	addi	r7,r7,1
   91fd0:	18c7883a 	add	r3,r3,r3
   91fd4:	39cf883a 	add	r7,r7,r7
   91fd8:	18c7883a 	add	r3,r3,r3
   91fdc:	39cf883a 	add	r7,r7,r7
   91fe0:	10c7883a 	add	r3,r2,r3
   91fe4:	21cf883a 	add	r7,r4,r7
   91fe8:	10c00d2e 	bgeu	r2,r3,92020 <__copybits+0x64>
   91fec:	200b883a 	mov	r5,r4
   91ff0:	12000017 	ldw	r8,0(r2)
   91ff4:	29400104 	addi	r5,r5,4
   91ff8:	10800104 	addi	r2,r2,4
   91ffc:	2a3fff15 	stw	r8,-4(r5)
   92000:	10fffb36 	bltu	r2,r3,91ff0 <__alt_data_end+0xfffc2130>
   92004:	1985c83a 	sub	r2,r3,r6
   92008:	10bffac4 	addi	r2,r2,-21
   9200c:	1004d0ba 	srli	r2,r2,2
   92010:	10800044 	addi	r2,r2,1
   92014:	1085883a 	add	r2,r2,r2
   92018:	1085883a 	add	r2,r2,r2
   9201c:	2089883a 	add	r4,r4,r2
   92020:	21c0032e 	bgeu	r4,r7,92030 <__copybits+0x74>
   92024:	20000015 	stw	zero,0(r4)
   92028:	21000104 	addi	r4,r4,4
   9202c:	21fffd36 	bltu	r4,r7,92024 <__alt_data_end+0xfffc2164>
   92030:	f800283a 	ret

00092034 <__any_on>:
   92034:	20c00417 	ldw	r3,16(r4)
   92038:	2805d17a 	srai	r2,r5,5
   9203c:	21000504 	addi	r4,r4,20
   92040:	18800d0e 	bge	r3,r2,92078 <__any_on+0x44>
   92044:	18c7883a 	add	r3,r3,r3
   92048:	18c7883a 	add	r3,r3,r3
   9204c:	20c7883a 	add	r3,r4,r3
   92050:	20c0192e 	bgeu	r4,r3,920b8 <__any_on+0x84>
   92054:	18bfff17 	ldw	r2,-4(r3)
   92058:	18ffff04 	addi	r3,r3,-4
   9205c:	1000041e 	bne	r2,zero,92070 <__any_on+0x3c>
   92060:	20c0142e 	bgeu	r4,r3,920b4 <__any_on+0x80>
   92064:	18ffff04 	addi	r3,r3,-4
   92068:	19400017 	ldw	r5,0(r3)
   9206c:	283ffc26 	beq	r5,zero,92060 <__alt_data_end+0xfffc21a0>
   92070:	00800044 	movi	r2,1
   92074:	f800283a 	ret
   92078:	10c00a0e 	bge	r2,r3,920a4 <__any_on+0x70>
   9207c:	1085883a 	add	r2,r2,r2
   92080:	1085883a 	add	r2,r2,r2
   92084:	294007cc 	andi	r5,r5,31
   92088:	2087883a 	add	r3,r4,r2
   9208c:	283ff026 	beq	r5,zero,92050 <__alt_data_end+0xfffc2190>
   92090:	19800017 	ldw	r6,0(r3)
   92094:	3144d83a 	srl	r2,r6,r5
   92098:	114a983a 	sll	r5,r2,r5
   9209c:	317ff41e 	bne	r6,r5,92070 <__alt_data_end+0xfffc21b0>
   920a0:	003feb06 	br	92050 <__alt_data_end+0xfffc2190>
   920a4:	1085883a 	add	r2,r2,r2
   920a8:	1085883a 	add	r2,r2,r2
   920ac:	2087883a 	add	r3,r4,r2
   920b0:	003fe706 	br	92050 <__alt_data_end+0xfffc2190>
   920b4:	f800283a 	ret
   920b8:	0005883a 	mov	r2,zero
   920bc:	f800283a 	ret

000920c0 <_putc_r>:
   920c0:	defffc04 	addi	sp,sp,-16
   920c4:	dc000215 	stw	r16,8(sp)
   920c8:	dfc00315 	stw	ra,12(sp)
   920cc:	2021883a 	mov	r16,r4
   920d0:	20000226 	beq	r4,zero,920dc <_putc_r+0x1c>
   920d4:	20800e17 	ldw	r2,56(r4)
   920d8:	10001b26 	beq	r2,zero,92148 <_putc_r+0x88>
   920dc:	30800217 	ldw	r2,8(r6)
   920e0:	10bfffc4 	addi	r2,r2,-1
   920e4:	30800215 	stw	r2,8(r6)
   920e8:	10000a16 	blt	r2,zero,92114 <_putc_r+0x54>
   920ec:	30800017 	ldw	r2,0(r6)
   920f0:	11400005 	stb	r5,0(r2)
   920f4:	30800017 	ldw	r2,0(r6)
   920f8:	10c00044 	addi	r3,r2,1
   920fc:	30c00015 	stw	r3,0(r6)
   92100:	10800003 	ldbu	r2,0(r2)
   92104:	dfc00317 	ldw	ra,12(sp)
   92108:	dc000217 	ldw	r16,8(sp)
   9210c:	dec00404 	addi	sp,sp,16
   92110:	f800283a 	ret
   92114:	30c00617 	ldw	r3,24(r6)
   92118:	10c00616 	blt	r2,r3,92134 <_putc_r+0x74>
   9211c:	30800017 	ldw	r2,0(r6)
   92120:	00c00284 	movi	r3,10
   92124:	11400005 	stb	r5,0(r2)
   92128:	30800017 	ldw	r2,0(r6)
   9212c:	11400003 	ldbu	r5,0(r2)
   92130:	28fff11e 	bne	r5,r3,920f8 <__alt_data_end+0xfffc2238>
   92134:	8009883a 	mov	r4,r16
   92138:	dfc00317 	ldw	ra,12(sp)
   9213c:	dc000217 	ldw	r16,8(sp)
   92140:	dec00404 	addi	sp,sp,16
   92144:	00954c01 	jmpi	954c0 <__swbuf_r>
   92148:	d9400015 	stw	r5,0(sp)
   9214c:	d9800115 	stw	r6,4(sp)
   92150:	008f7f00 	call	8f7f0 <__sinit>
   92154:	d9800117 	ldw	r6,4(sp)
   92158:	d9400017 	ldw	r5,0(sp)
   9215c:	003fdf06 	br	920dc <__alt_data_end+0xfffc221c>

00092160 <putc>:
   92160:	008002b4 	movhi	r2,10
   92164:	defffc04 	addi	sp,sp,-16
   92168:	10bb5c04 	addi	r2,r2,-4752
   9216c:	dc000115 	stw	r16,4(sp)
   92170:	14000017 	ldw	r16,0(r2)
   92174:	dc400215 	stw	r17,8(sp)
   92178:	dfc00315 	stw	ra,12(sp)
   9217c:	2023883a 	mov	r17,r4
   92180:	80000226 	beq	r16,zero,9218c <putc+0x2c>
   92184:	80800e17 	ldw	r2,56(r16)
   92188:	10001a26 	beq	r2,zero,921f4 <putc+0x94>
   9218c:	28800217 	ldw	r2,8(r5)
   92190:	10bfffc4 	addi	r2,r2,-1
   92194:	28800215 	stw	r2,8(r5)
   92198:	10000b16 	blt	r2,zero,921c8 <putc+0x68>
   9219c:	28800017 	ldw	r2,0(r5)
   921a0:	14400005 	stb	r17,0(r2)
   921a4:	28800017 	ldw	r2,0(r5)
   921a8:	10c00044 	addi	r3,r2,1
   921ac:	28c00015 	stw	r3,0(r5)
   921b0:	10800003 	ldbu	r2,0(r2)
   921b4:	dfc00317 	ldw	ra,12(sp)
   921b8:	dc400217 	ldw	r17,8(sp)
   921bc:	dc000117 	ldw	r16,4(sp)
   921c0:	dec00404 	addi	sp,sp,16
   921c4:	f800283a 	ret
   921c8:	28c00617 	ldw	r3,24(r5)
   921cc:	10c00e16 	blt	r2,r3,92208 <putc+0xa8>
   921d0:	28800017 	ldw	r2,0(r5)
   921d4:	01000284 	movi	r4,10
   921d8:	14400005 	stb	r17,0(r2)
   921dc:	28800017 	ldw	r2,0(r5)
   921e0:	10c00003 	ldbu	r3,0(r2)
   921e4:	193ff01e 	bne	r3,r4,921a8 <__alt_data_end+0xfffc22e8>
   921e8:	280d883a 	mov	r6,r5
   921ec:	180b883a 	mov	r5,r3
   921f0:	00000706 	br	92210 <putc+0xb0>
   921f4:	8009883a 	mov	r4,r16
   921f8:	d9400015 	stw	r5,0(sp)
   921fc:	008f7f00 	call	8f7f0 <__sinit>
   92200:	d9400017 	ldw	r5,0(sp)
   92204:	003fe106 	br	9218c <__alt_data_end+0xfffc22cc>
   92208:	280d883a 	mov	r6,r5
   9220c:	880b883a 	mov	r5,r17
   92210:	8009883a 	mov	r4,r16
   92214:	dfc00317 	ldw	ra,12(sp)
   92218:	dc400217 	ldw	r17,8(sp)
   9221c:	dc000117 	ldw	r16,4(sp)
   92220:	dec00404 	addi	sp,sp,16
   92224:	00954c01 	jmpi	954c0 <__swbuf_r>

00092228 <_realloc_r>:
   92228:	defff604 	addi	sp,sp,-40
   9222c:	dc800215 	stw	r18,8(sp)
   92230:	dfc00915 	stw	ra,36(sp)
   92234:	df000815 	stw	fp,32(sp)
   92238:	ddc00715 	stw	r23,28(sp)
   9223c:	dd800615 	stw	r22,24(sp)
   92240:	dd400515 	stw	r21,20(sp)
   92244:	dd000415 	stw	r20,16(sp)
   92248:	dcc00315 	stw	r19,12(sp)
   9224c:	dc400115 	stw	r17,4(sp)
   92250:	dc000015 	stw	r16,0(sp)
   92254:	3025883a 	mov	r18,r6
   92258:	2800b726 	beq	r5,zero,92538 <_realloc_r+0x310>
   9225c:	282b883a 	mov	r21,r5
   92260:	2029883a 	mov	r20,r4
   92264:	00994880 	call	99488 <__malloc_lock>
   92268:	a8bfff17 	ldw	r2,-4(r21)
   9226c:	043fff04 	movi	r16,-4
   92270:	90c002c4 	addi	r3,r18,11
   92274:	01000584 	movi	r4,22
   92278:	acfffe04 	addi	r19,r21,-8
   9227c:	1420703a 	and	r16,r2,r16
   92280:	20c0332e 	bgeu	r4,r3,92350 <_realloc_r+0x128>
   92284:	047ffe04 	movi	r17,-8
   92288:	1c62703a 	and	r17,r3,r17
   9228c:	8807883a 	mov	r3,r17
   92290:	88005816 	blt	r17,zero,923f4 <_realloc_r+0x1cc>
   92294:	8c805736 	bltu	r17,r18,923f4 <_realloc_r+0x1cc>
   92298:	80c0300e 	bge	r16,r3,9235c <_realloc_r+0x134>
   9229c:	070002b4 	movhi	fp,10
   922a0:	e735d304 	addi	fp,fp,-10420
   922a4:	e1c00217 	ldw	r7,8(fp)
   922a8:	9c09883a 	add	r4,r19,r16
   922ac:	22000117 	ldw	r8,4(r4)
   922b0:	21c06326 	beq	r4,r7,92440 <_realloc_r+0x218>
   922b4:	017fff84 	movi	r5,-2
   922b8:	414a703a 	and	r5,r8,r5
   922bc:	214b883a 	add	r5,r4,r5
   922c0:	29800117 	ldw	r6,4(r5)
   922c4:	3180004c 	andi	r6,r6,1
   922c8:	30003f26 	beq	r6,zero,923c8 <_realloc_r+0x1a0>
   922cc:	1080004c 	andi	r2,r2,1
   922d0:	10008326 	beq	r2,zero,924e0 <_realloc_r+0x2b8>
   922d4:	900b883a 	mov	r5,r18
   922d8:	a009883a 	mov	r4,r20
   922dc:	00905500 	call	90550 <_malloc_r>
   922e0:	1025883a 	mov	r18,r2
   922e4:	10011e26 	beq	r2,zero,92760 <_realloc_r+0x538>
   922e8:	a93fff17 	ldw	r4,-4(r21)
   922ec:	10fffe04 	addi	r3,r2,-8
   922f0:	00bfff84 	movi	r2,-2
   922f4:	2084703a 	and	r2,r4,r2
   922f8:	9885883a 	add	r2,r19,r2
   922fc:	1880ee26 	beq	r3,r2,926b8 <_realloc_r+0x490>
   92300:	81bfff04 	addi	r6,r16,-4
   92304:	00800904 	movi	r2,36
   92308:	1180b836 	bltu	r2,r6,925ec <_realloc_r+0x3c4>
   9230c:	00c004c4 	movi	r3,19
   92310:	19809636 	bltu	r3,r6,9256c <_realloc_r+0x344>
   92314:	9005883a 	mov	r2,r18
   92318:	a807883a 	mov	r3,r21
   9231c:	19000017 	ldw	r4,0(r3)
   92320:	11000015 	stw	r4,0(r2)
   92324:	19000117 	ldw	r4,4(r3)
   92328:	11000115 	stw	r4,4(r2)
   9232c:	18c00217 	ldw	r3,8(r3)
   92330:	10c00215 	stw	r3,8(r2)
   92334:	a80b883a 	mov	r5,r21
   92338:	a009883a 	mov	r4,r20
   9233c:	008f9640 	call	8f964 <_free_r>
   92340:	a009883a 	mov	r4,r20
   92344:	00994ac0 	call	994ac <__malloc_unlock>
   92348:	9005883a 	mov	r2,r18
   9234c:	00001206 	br	92398 <_realloc_r+0x170>
   92350:	00c00404 	movi	r3,16
   92354:	1823883a 	mov	r17,r3
   92358:	003fce06 	br	92294 <__alt_data_end+0xfffc23d4>
   9235c:	a825883a 	mov	r18,r21
   92360:	8445c83a 	sub	r2,r16,r17
   92364:	00c003c4 	movi	r3,15
   92368:	18802636 	bltu	r3,r2,92404 <_realloc_r+0x1dc>
   9236c:	99800117 	ldw	r6,4(r19)
   92370:	9c07883a 	add	r3,r19,r16
   92374:	3180004c 	andi	r6,r6,1
   92378:	3420b03a 	or	r16,r6,r16
   9237c:	9c000115 	stw	r16,4(r19)
   92380:	18800117 	ldw	r2,4(r3)
   92384:	10800054 	ori	r2,r2,1
   92388:	18800115 	stw	r2,4(r3)
   9238c:	a009883a 	mov	r4,r20
   92390:	00994ac0 	call	994ac <__malloc_unlock>
   92394:	9005883a 	mov	r2,r18
   92398:	dfc00917 	ldw	ra,36(sp)
   9239c:	df000817 	ldw	fp,32(sp)
   923a0:	ddc00717 	ldw	r23,28(sp)
   923a4:	dd800617 	ldw	r22,24(sp)
   923a8:	dd400517 	ldw	r21,20(sp)
   923ac:	dd000417 	ldw	r20,16(sp)
   923b0:	dcc00317 	ldw	r19,12(sp)
   923b4:	dc800217 	ldw	r18,8(sp)
   923b8:	dc400117 	ldw	r17,4(sp)
   923bc:	dc000017 	ldw	r16,0(sp)
   923c0:	dec00a04 	addi	sp,sp,40
   923c4:	f800283a 	ret
   923c8:	017fff04 	movi	r5,-4
   923cc:	414a703a 	and	r5,r8,r5
   923d0:	814d883a 	add	r6,r16,r5
   923d4:	30c01f16 	blt	r6,r3,92454 <_realloc_r+0x22c>
   923d8:	20800317 	ldw	r2,12(r4)
   923dc:	20c00217 	ldw	r3,8(r4)
   923e0:	a825883a 	mov	r18,r21
   923e4:	3021883a 	mov	r16,r6
   923e8:	18800315 	stw	r2,12(r3)
   923ec:	10c00215 	stw	r3,8(r2)
   923f0:	003fdb06 	br	92360 <__alt_data_end+0xfffc24a0>
   923f4:	00800304 	movi	r2,12
   923f8:	a0800015 	stw	r2,0(r20)
   923fc:	0005883a 	mov	r2,zero
   92400:	003fe506 	br	92398 <__alt_data_end+0xfffc24d8>
   92404:	98c00117 	ldw	r3,4(r19)
   92408:	9c4b883a 	add	r5,r19,r17
   9240c:	11000054 	ori	r4,r2,1
   92410:	18c0004c 	andi	r3,r3,1
   92414:	1c62b03a 	or	r17,r3,r17
   92418:	9c400115 	stw	r17,4(r19)
   9241c:	29000115 	stw	r4,4(r5)
   92420:	2885883a 	add	r2,r5,r2
   92424:	10c00117 	ldw	r3,4(r2)
   92428:	29400204 	addi	r5,r5,8
   9242c:	a009883a 	mov	r4,r20
   92430:	18c00054 	ori	r3,r3,1
   92434:	10c00115 	stw	r3,4(r2)
   92438:	008f9640 	call	8f964 <_free_r>
   9243c:	003fd306 	br	9238c <__alt_data_end+0xfffc24cc>
   92440:	017fff04 	movi	r5,-4
   92444:	414a703a 	and	r5,r8,r5
   92448:	89800404 	addi	r6,r17,16
   9244c:	8151883a 	add	r8,r16,r5
   92450:	4180590e 	bge	r8,r6,925b8 <_realloc_r+0x390>
   92454:	1080004c 	andi	r2,r2,1
   92458:	103f9e1e 	bne	r2,zero,922d4 <__alt_data_end+0xfffc2414>
   9245c:	adbffe17 	ldw	r22,-8(r21)
   92460:	00bfff04 	movi	r2,-4
   92464:	9dadc83a 	sub	r22,r19,r22
   92468:	b1800117 	ldw	r6,4(r22)
   9246c:	3084703a 	and	r2,r6,r2
   92470:	20002026 	beq	r4,zero,924f4 <_realloc_r+0x2cc>
   92474:	80af883a 	add	r23,r16,r2
   92478:	b96f883a 	add	r23,r23,r5
   9247c:	21c05f26 	beq	r4,r7,925fc <_realloc_r+0x3d4>
   92480:	b8c01c16 	blt	r23,r3,924f4 <_realloc_r+0x2cc>
   92484:	20800317 	ldw	r2,12(r4)
   92488:	20c00217 	ldw	r3,8(r4)
   9248c:	81bfff04 	addi	r6,r16,-4
   92490:	01000904 	movi	r4,36
   92494:	18800315 	stw	r2,12(r3)
   92498:	10c00215 	stw	r3,8(r2)
   9249c:	b0c00217 	ldw	r3,8(r22)
   924a0:	b0800317 	ldw	r2,12(r22)
   924a4:	b4800204 	addi	r18,r22,8
   924a8:	18800315 	stw	r2,12(r3)
   924ac:	10c00215 	stw	r3,8(r2)
   924b0:	21801b36 	bltu	r4,r6,92520 <_realloc_r+0x2f8>
   924b4:	008004c4 	movi	r2,19
   924b8:	1180352e 	bgeu	r2,r6,92590 <_realloc_r+0x368>
   924bc:	a8800017 	ldw	r2,0(r21)
   924c0:	b0800215 	stw	r2,8(r22)
   924c4:	a8800117 	ldw	r2,4(r21)
   924c8:	b0800315 	stw	r2,12(r22)
   924cc:	008006c4 	movi	r2,27
   924d0:	11807f36 	bltu	r2,r6,926d0 <_realloc_r+0x4a8>
   924d4:	b0800404 	addi	r2,r22,16
   924d8:	ad400204 	addi	r21,r21,8
   924dc:	00002d06 	br	92594 <_realloc_r+0x36c>
   924e0:	adbffe17 	ldw	r22,-8(r21)
   924e4:	00bfff04 	movi	r2,-4
   924e8:	9dadc83a 	sub	r22,r19,r22
   924ec:	b1000117 	ldw	r4,4(r22)
   924f0:	2084703a 	and	r2,r4,r2
   924f4:	b03f7726 	beq	r22,zero,922d4 <__alt_data_end+0xfffc2414>
   924f8:	80af883a 	add	r23,r16,r2
   924fc:	b8ff7516 	blt	r23,r3,922d4 <__alt_data_end+0xfffc2414>
   92500:	b0800317 	ldw	r2,12(r22)
   92504:	b0c00217 	ldw	r3,8(r22)
   92508:	81bfff04 	addi	r6,r16,-4
   9250c:	01000904 	movi	r4,36
   92510:	18800315 	stw	r2,12(r3)
   92514:	10c00215 	stw	r3,8(r2)
   92518:	b4800204 	addi	r18,r22,8
   9251c:	21bfe52e 	bgeu	r4,r6,924b4 <__alt_data_end+0xfffc25f4>
   92520:	a80b883a 	mov	r5,r21
   92524:	9009883a 	mov	r4,r18
   92528:	0090e400 	call	90e40 <memmove>
   9252c:	b821883a 	mov	r16,r23
   92530:	b027883a 	mov	r19,r22
   92534:	003f8a06 	br	92360 <__alt_data_end+0xfffc24a0>
   92538:	300b883a 	mov	r5,r6
   9253c:	dfc00917 	ldw	ra,36(sp)
   92540:	df000817 	ldw	fp,32(sp)
   92544:	ddc00717 	ldw	r23,28(sp)
   92548:	dd800617 	ldw	r22,24(sp)
   9254c:	dd400517 	ldw	r21,20(sp)
   92550:	dd000417 	ldw	r20,16(sp)
   92554:	dcc00317 	ldw	r19,12(sp)
   92558:	dc800217 	ldw	r18,8(sp)
   9255c:	dc400117 	ldw	r17,4(sp)
   92560:	dc000017 	ldw	r16,0(sp)
   92564:	dec00a04 	addi	sp,sp,40
   92568:	00905501 	jmpi	90550 <_malloc_r>
   9256c:	a8c00017 	ldw	r3,0(r21)
   92570:	90c00015 	stw	r3,0(r18)
   92574:	a8c00117 	ldw	r3,4(r21)
   92578:	90c00115 	stw	r3,4(r18)
   9257c:	00c006c4 	movi	r3,27
   92580:	19804536 	bltu	r3,r6,92698 <_realloc_r+0x470>
   92584:	90800204 	addi	r2,r18,8
   92588:	a8c00204 	addi	r3,r21,8
   9258c:	003f6306 	br	9231c <__alt_data_end+0xfffc245c>
   92590:	9005883a 	mov	r2,r18
   92594:	a8c00017 	ldw	r3,0(r21)
   92598:	b821883a 	mov	r16,r23
   9259c:	b027883a 	mov	r19,r22
   925a0:	10c00015 	stw	r3,0(r2)
   925a4:	a8c00117 	ldw	r3,4(r21)
   925a8:	10c00115 	stw	r3,4(r2)
   925ac:	a8c00217 	ldw	r3,8(r21)
   925b0:	10c00215 	stw	r3,8(r2)
   925b4:	003f6a06 	br	92360 <__alt_data_end+0xfffc24a0>
   925b8:	9c67883a 	add	r19,r19,r17
   925bc:	4445c83a 	sub	r2,r8,r17
   925c0:	e4c00215 	stw	r19,8(fp)
   925c4:	10800054 	ori	r2,r2,1
   925c8:	98800115 	stw	r2,4(r19)
   925cc:	a8bfff17 	ldw	r2,-4(r21)
   925d0:	a009883a 	mov	r4,r20
   925d4:	1080004c 	andi	r2,r2,1
   925d8:	1462b03a 	or	r17,r2,r17
   925dc:	ac7fff15 	stw	r17,-4(r21)
   925e0:	00994ac0 	call	994ac <__malloc_unlock>
   925e4:	a805883a 	mov	r2,r21
   925e8:	003f6b06 	br	92398 <__alt_data_end+0xfffc24d8>
   925ec:	a80b883a 	mov	r5,r21
   925f0:	9009883a 	mov	r4,r18
   925f4:	0090e400 	call	90e40 <memmove>
   925f8:	003f4e06 	br	92334 <__alt_data_end+0xfffc2474>
   925fc:	89000404 	addi	r4,r17,16
   92600:	b93fbc16 	blt	r23,r4,924f4 <__alt_data_end+0xfffc2634>
   92604:	b0800317 	ldw	r2,12(r22)
   92608:	b0c00217 	ldw	r3,8(r22)
   9260c:	81bfff04 	addi	r6,r16,-4
   92610:	01000904 	movi	r4,36
   92614:	18800315 	stw	r2,12(r3)
   92618:	10c00215 	stw	r3,8(r2)
   9261c:	b4800204 	addi	r18,r22,8
   92620:	21804336 	bltu	r4,r6,92730 <_realloc_r+0x508>
   92624:	008004c4 	movi	r2,19
   92628:	11803f2e 	bgeu	r2,r6,92728 <_realloc_r+0x500>
   9262c:	a8800017 	ldw	r2,0(r21)
   92630:	b0800215 	stw	r2,8(r22)
   92634:	a8800117 	ldw	r2,4(r21)
   92638:	b0800315 	stw	r2,12(r22)
   9263c:	008006c4 	movi	r2,27
   92640:	11803f36 	bltu	r2,r6,92740 <_realloc_r+0x518>
   92644:	b0800404 	addi	r2,r22,16
   92648:	ad400204 	addi	r21,r21,8
   9264c:	a8c00017 	ldw	r3,0(r21)
   92650:	10c00015 	stw	r3,0(r2)
   92654:	a8c00117 	ldw	r3,4(r21)
   92658:	10c00115 	stw	r3,4(r2)
   9265c:	a8c00217 	ldw	r3,8(r21)
   92660:	10c00215 	stw	r3,8(r2)
   92664:	b447883a 	add	r3,r22,r17
   92668:	bc45c83a 	sub	r2,r23,r17
   9266c:	e0c00215 	stw	r3,8(fp)
   92670:	10800054 	ori	r2,r2,1
   92674:	18800115 	stw	r2,4(r3)
   92678:	b0800117 	ldw	r2,4(r22)
   9267c:	a009883a 	mov	r4,r20
   92680:	1080004c 	andi	r2,r2,1
   92684:	1462b03a 	or	r17,r2,r17
   92688:	b4400115 	stw	r17,4(r22)
   9268c:	00994ac0 	call	994ac <__malloc_unlock>
   92690:	9005883a 	mov	r2,r18
   92694:	003f4006 	br	92398 <__alt_data_end+0xfffc24d8>
   92698:	a8c00217 	ldw	r3,8(r21)
   9269c:	90c00215 	stw	r3,8(r18)
   926a0:	a8c00317 	ldw	r3,12(r21)
   926a4:	90c00315 	stw	r3,12(r18)
   926a8:	30801126 	beq	r6,r2,926f0 <_realloc_r+0x4c8>
   926ac:	90800404 	addi	r2,r18,16
   926b0:	a8c00404 	addi	r3,r21,16
   926b4:	003f1906 	br	9231c <__alt_data_end+0xfffc245c>
   926b8:	90ffff17 	ldw	r3,-4(r18)
   926bc:	00bfff04 	movi	r2,-4
   926c0:	a825883a 	mov	r18,r21
   926c4:	1884703a 	and	r2,r3,r2
   926c8:	80a1883a 	add	r16,r16,r2
   926cc:	003f2406 	br	92360 <__alt_data_end+0xfffc24a0>
   926d0:	a8800217 	ldw	r2,8(r21)
   926d4:	b0800415 	stw	r2,16(r22)
   926d8:	a8800317 	ldw	r2,12(r21)
   926dc:	b0800515 	stw	r2,20(r22)
   926e0:	31000a26 	beq	r6,r4,9270c <_realloc_r+0x4e4>
   926e4:	b0800604 	addi	r2,r22,24
   926e8:	ad400404 	addi	r21,r21,16
   926ec:	003fa906 	br	92594 <__alt_data_end+0xfffc26d4>
   926f0:	a9000417 	ldw	r4,16(r21)
   926f4:	90800604 	addi	r2,r18,24
   926f8:	a8c00604 	addi	r3,r21,24
   926fc:	91000415 	stw	r4,16(r18)
   92700:	a9000517 	ldw	r4,20(r21)
   92704:	91000515 	stw	r4,20(r18)
   92708:	003f0406 	br	9231c <__alt_data_end+0xfffc245c>
   9270c:	a8c00417 	ldw	r3,16(r21)
   92710:	ad400604 	addi	r21,r21,24
   92714:	b0800804 	addi	r2,r22,32
   92718:	b0c00615 	stw	r3,24(r22)
   9271c:	a8ffff17 	ldw	r3,-4(r21)
   92720:	b0c00715 	stw	r3,28(r22)
   92724:	003f9b06 	br	92594 <__alt_data_end+0xfffc26d4>
   92728:	9005883a 	mov	r2,r18
   9272c:	003fc706 	br	9264c <__alt_data_end+0xfffc278c>
   92730:	a80b883a 	mov	r5,r21
   92734:	9009883a 	mov	r4,r18
   92738:	0090e400 	call	90e40 <memmove>
   9273c:	003fc906 	br	92664 <__alt_data_end+0xfffc27a4>
   92740:	a8800217 	ldw	r2,8(r21)
   92744:	b0800415 	stw	r2,16(r22)
   92748:	a8800317 	ldw	r2,12(r21)
   9274c:	b0800515 	stw	r2,20(r22)
   92750:	31000726 	beq	r6,r4,92770 <_realloc_r+0x548>
   92754:	b0800604 	addi	r2,r22,24
   92758:	ad400404 	addi	r21,r21,16
   9275c:	003fbb06 	br	9264c <__alt_data_end+0xfffc278c>
   92760:	a009883a 	mov	r4,r20
   92764:	00994ac0 	call	994ac <__malloc_unlock>
   92768:	0005883a 	mov	r2,zero
   9276c:	003f0a06 	br	92398 <__alt_data_end+0xfffc24d8>
   92770:	a8c00417 	ldw	r3,16(r21)
   92774:	ad400604 	addi	r21,r21,24
   92778:	b0800804 	addi	r2,r22,32
   9277c:	b0c00615 	stw	r3,24(r22)
   92780:	a8ffff17 	ldw	r3,-4(r21)
   92784:	b0c00715 	stw	r3,28(r22)
   92788:	003fb006 	br	9264c <__alt_data_end+0xfffc278c>

0009278c <__fpclassifyd>:
   9278c:	00a00034 	movhi	r2,32768
   92790:	10bfffc4 	addi	r2,r2,-1
   92794:	2884703a 	and	r2,r5,r2
   92798:	10000726 	beq	r2,zero,927b8 <__fpclassifyd+0x2c>
   9279c:	00fffc34 	movhi	r3,65520
   927a0:	019ff834 	movhi	r6,32736
   927a4:	28c7883a 	add	r3,r5,r3
   927a8:	31bfffc4 	addi	r6,r6,-1
   927ac:	30c00536 	bltu	r6,r3,927c4 <__fpclassifyd+0x38>
   927b0:	00800104 	movi	r2,4
   927b4:	f800283a 	ret
   927b8:	2000021e 	bne	r4,zero,927c4 <__fpclassifyd+0x38>
   927bc:	00800084 	movi	r2,2
   927c0:	f800283a 	ret
   927c4:	00dffc34 	movhi	r3,32752
   927c8:	019ff834 	movhi	r6,32736
   927cc:	28cb883a 	add	r5,r5,r3
   927d0:	31bfffc4 	addi	r6,r6,-1
   927d4:	317ff62e 	bgeu	r6,r5,927b0 <__alt_data_end+0xfffc28f0>
   927d8:	01400434 	movhi	r5,16
   927dc:	297fffc4 	addi	r5,r5,-1
   927e0:	28800236 	bltu	r5,r2,927ec <__fpclassifyd+0x60>
   927e4:	008000c4 	movi	r2,3
   927e8:	f800283a 	ret
   927ec:	10c00226 	beq	r2,r3,927f8 <__fpclassifyd+0x6c>
   927f0:	0005883a 	mov	r2,zero
   927f4:	f800283a 	ret
   927f8:	2005003a 	cmpeq	r2,r4,zero
   927fc:	f800283a 	ret

00092800 <_sbrk_r>:
   92800:	defffd04 	addi	sp,sp,-12
   92804:	dc000015 	stw	r16,0(sp)
   92808:	040002b4 	movhi	r16,10
   9280c:	dc400115 	stw	r17,4(sp)
   92810:	84050204 	addi	r16,r16,5128
   92814:	2023883a 	mov	r17,r4
   92818:	2809883a 	mov	r4,r5
   9281c:	dfc00215 	stw	ra,8(sp)
   92820:	80000015 	stw	zero,0(r16)
   92824:	009966c0 	call	9966c <sbrk>
   92828:	00ffffc4 	movi	r3,-1
   9282c:	10c00526 	beq	r2,r3,92844 <_sbrk_r+0x44>
   92830:	dfc00217 	ldw	ra,8(sp)
   92834:	dc400117 	ldw	r17,4(sp)
   92838:	dc000017 	ldw	r16,0(sp)
   9283c:	dec00304 	addi	sp,sp,12
   92840:	f800283a 	ret
   92844:	80c00017 	ldw	r3,0(r16)
   92848:	183ff926 	beq	r3,zero,92830 <__alt_data_end+0xfffc2970>
   9284c:	88c00015 	stw	r3,0(r17)
   92850:	003ff706 	br	92830 <__alt_data_end+0xfffc2970>

00092854 <__sread>:
   92854:	defffe04 	addi	sp,sp,-8
   92858:	dc000015 	stw	r16,0(sp)
   9285c:	2821883a 	mov	r16,r5
   92860:	2940038f 	ldh	r5,14(r5)
   92864:	dfc00115 	stw	ra,4(sp)
   92868:	0095bac0 	call	95bac <_read_r>
   9286c:	10000716 	blt	r2,zero,9288c <__sread+0x38>
   92870:	80c01417 	ldw	r3,80(r16)
   92874:	1887883a 	add	r3,r3,r2
   92878:	80c01415 	stw	r3,80(r16)
   9287c:	dfc00117 	ldw	ra,4(sp)
   92880:	dc000017 	ldw	r16,0(sp)
   92884:	dec00204 	addi	sp,sp,8
   92888:	f800283a 	ret
   9288c:	80c0030b 	ldhu	r3,12(r16)
   92890:	18fbffcc 	andi	r3,r3,61439
   92894:	80c0030d 	sth	r3,12(r16)
   92898:	dfc00117 	ldw	ra,4(sp)
   9289c:	dc000017 	ldw	r16,0(sp)
   928a0:	dec00204 	addi	sp,sp,8
   928a4:	f800283a 	ret

000928a8 <__seofread>:
   928a8:	0005883a 	mov	r2,zero
   928ac:	f800283a 	ret

000928b0 <__swrite>:
   928b0:	2880030b 	ldhu	r2,12(r5)
   928b4:	defffb04 	addi	sp,sp,-20
   928b8:	dcc00315 	stw	r19,12(sp)
   928bc:	dc800215 	stw	r18,8(sp)
   928c0:	dc400115 	stw	r17,4(sp)
   928c4:	dc000015 	stw	r16,0(sp)
   928c8:	dfc00415 	stw	ra,16(sp)
   928cc:	10c0400c 	andi	r3,r2,256
   928d0:	2821883a 	mov	r16,r5
   928d4:	2023883a 	mov	r17,r4
   928d8:	3025883a 	mov	r18,r6
   928dc:	3827883a 	mov	r19,r7
   928e0:	18000526 	beq	r3,zero,928f8 <__swrite+0x48>
   928e4:	2940038f 	ldh	r5,14(r5)
   928e8:	01c00084 	movi	r7,2
   928ec:	000d883a 	mov	r6,zero
   928f0:	0095b4c0 	call	95b4c <_lseek_r>
   928f4:	8080030b 	ldhu	r2,12(r16)
   928f8:	8140038f 	ldh	r5,14(r16)
   928fc:	10bbffcc 	andi	r2,r2,61439
   92900:	980f883a 	mov	r7,r19
   92904:	900d883a 	mov	r6,r18
   92908:	8809883a 	mov	r4,r17
   9290c:	8080030d 	sth	r2,12(r16)
   92910:	dfc00417 	ldw	ra,16(sp)
   92914:	dcc00317 	ldw	r19,12(sp)
   92918:	dc800217 	ldw	r18,8(sp)
   9291c:	dc400117 	ldw	r17,4(sp)
   92920:	dc000017 	ldw	r16,0(sp)
   92924:	dec00504 	addi	sp,sp,20
   92928:	00956181 	jmpi	95618 <_write_r>

0009292c <__sseek>:
   9292c:	defffe04 	addi	sp,sp,-8
   92930:	dc000015 	stw	r16,0(sp)
   92934:	2821883a 	mov	r16,r5
   92938:	2940038f 	ldh	r5,14(r5)
   9293c:	dfc00115 	stw	ra,4(sp)
   92940:	0095b4c0 	call	95b4c <_lseek_r>
   92944:	00ffffc4 	movi	r3,-1
   92948:	10c00826 	beq	r2,r3,9296c <__sseek+0x40>
   9294c:	80c0030b 	ldhu	r3,12(r16)
   92950:	80801415 	stw	r2,80(r16)
   92954:	18c40014 	ori	r3,r3,4096
   92958:	80c0030d 	sth	r3,12(r16)
   9295c:	dfc00117 	ldw	ra,4(sp)
   92960:	dc000017 	ldw	r16,0(sp)
   92964:	dec00204 	addi	sp,sp,8
   92968:	f800283a 	ret
   9296c:	80c0030b 	ldhu	r3,12(r16)
   92970:	18fbffcc 	andi	r3,r3,61439
   92974:	80c0030d 	sth	r3,12(r16)
   92978:	dfc00117 	ldw	ra,4(sp)
   9297c:	dc000017 	ldw	r16,0(sp)
   92980:	dec00204 	addi	sp,sp,8
   92984:	f800283a 	ret

00092988 <__sclose>:
   92988:	2940038f 	ldh	r5,14(r5)
   9298c:	00956781 	jmpi	95678 <_close_r>

00092990 <strcmp>:
   92990:	2144b03a 	or	r2,r4,r5
   92994:	108000cc 	andi	r2,r2,3
   92998:	1000171e 	bne	r2,zero,929f8 <strcmp+0x68>
   9299c:	20800017 	ldw	r2,0(r4)
   929a0:	28c00017 	ldw	r3,0(r5)
   929a4:	10c0141e 	bne	r2,r3,929f8 <strcmp+0x68>
   929a8:	027fbff4 	movhi	r9,65279
   929ac:	4a7fbfc4 	addi	r9,r9,-257
   929b0:	0086303a 	nor	r3,zero,r2
   929b4:	02202074 	movhi	r8,32897
   929b8:	1245883a 	add	r2,r2,r9
   929bc:	42202004 	addi	r8,r8,-32640
   929c0:	10c4703a 	and	r2,r2,r3
   929c4:	1204703a 	and	r2,r2,r8
   929c8:	10000226 	beq	r2,zero,929d4 <strcmp+0x44>
   929cc:	00002306 	br	92a5c <strcmp+0xcc>
   929d0:	1000221e 	bne	r2,zero,92a5c <strcmp+0xcc>
   929d4:	21000104 	addi	r4,r4,4
   929d8:	20c00017 	ldw	r3,0(r4)
   929dc:	29400104 	addi	r5,r5,4
   929e0:	29800017 	ldw	r6,0(r5)
   929e4:	1a4f883a 	add	r7,r3,r9
   929e8:	00c4303a 	nor	r2,zero,r3
   929ec:	3884703a 	and	r2,r7,r2
   929f0:	1204703a 	and	r2,r2,r8
   929f4:	19bff626 	beq	r3,r6,929d0 <__alt_data_end+0xfffc2b10>
   929f8:	20800003 	ldbu	r2,0(r4)
   929fc:	10c03fcc 	andi	r3,r2,255
   92a00:	18c0201c 	xori	r3,r3,128
   92a04:	18ffe004 	addi	r3,r3,-128
   92a08:	18000c26 	beq	r3,zero,92a3c <strcmp+0xac>
   92a0c:	29800007 	ldb	r6,0(r5)
   92a10:	19800326 	beq	r3,r6,92a20 <strcmp+0x90>
   92a14:	00001306 	br	92a64 <strcmp+0xd4>
   92a18:	29800007 	ldb	r6,0(r5)
   92a1c:	11800b1e 	bne	r2,r6,92a4c <strcmp+0xbc>
   92a20:	21000044 	addi	r4,r4,1
   92a24:	20c00003 	ldbu	r3,0(r4)
   92a28:	29400044 	addi	r5,r5,1
   92a2c:	18803fcc 	andi	r2,r3,255
   92a30:	1080201c 	xori	r2,r2,128
   92a34:	10bfe004 	addi	r2,r2,-128
   92a38:	103ff71e 	bne	r2,zero,92a18 <__alt_data_end+0xfffc2b58>
   92a3c:	0007883a 	mov	r3,zero
   92a40:	28800003 	ldbu	r2,0(r5)
   92a44:	1885c83a 	sub	r2,r3,r2
   92a48:	f800283a 	ret
   92a4c:	28800003 	ldbu	r2,0(r5)
   92a50:	18c03fcc 	andi	r3,r3,255
   92a54:	1885c83a 	sub	r2,r3,r2
   92a58:	f800283a 	ret
   92a5c:	0005883a 	mov	r2,zero
   92a60:	f800283a 	ret
   92a64:	10c03fcc 	andi	r3,r2,255
   92a68:	003ff506 	br	92a40 <__alt_data_end+0xfffc2b80>

00092a6c <__ssprint_r>:
   92a6c:	30800217 	ldw	r2,8(r6)
   92a70:	defff604 	addi	sp,sp,-40
   92a74:	dc800215 	stw	r18,8(sp)
   92a78:	dfc00915 	stw	ra,36(sp)
   92a7c:	df000815 	stw	fp,32(sp)
   92a80:	ddc00715 	stw	r23,28(sp)
   92a84:	dd800615 	stw	r22,24(sp)
   92a88:	dd400515 	stw	r21,20(sp)
   92a8c:	dd000415 	stw	r20,16(sp)
   92a90:	dcc00315 	stw	r19,12(sp)
   92a94:	dc400115 	stw	r17,4(sp)
   92a98:	dc000015 	stw	r16,0(sp)
   92a9c:	3025883a 	mov	r18,r6
   92aa0:	10005826 	beq	r2,zero,92c04 <__ssprint_r+0x198>
   92aa4:	2027883a 	mov	r19,r4
   92aa8:	35c00017 	ldw	r23,0(r6)
   92aac:	29000017 	ldw	r4,0(r5)
   92ab0:	28800217 	ldw	r2,8(r5)
   92ab4:	2823883a 	mov	r17,r5
   92ab8:	0039883a 	mov	fp,zero
   92abc:	0021883a 	mov	r16,zero
   92ac0:	80003926 	beq	r16,zero,92ba8 <__ssprint_r+0x13c>
   92ac4:	102b883a 	mov	r21,r2
   92ac8:	102d883a 	mov	r22,r2
   92acc:	80803a36 	bltu	r16,r2,92bb8 <__ssprint_r+0x14c>
   92ad0:	88c0030b 	ldhu	r3,12(r17)
   92ad4:	1881200c 	andi	r2,r3,1152
   92ad8:	10002626 	beq	r2,zero,92b74 <__ssprint_r+0x108>
   92adc:	88800517 	ldw	r2,20(r17)
   92ae0:	89400417 	ldw	r5,16(r17)
   92ae4:	81800044 	addi	r6,r16,1
   92ae8:	108f883a 	add	r7,r2,r2
   92aec:	3885883a 	add	r2,r7,r2
   92af0:	100ed7fa 	srli	r7,r2,31
   92af4:	216dc83a 	sub	r22,r4,r5
   92af8:	3589883a 	add	r4,r6,r22
   92afc:	3885883a 	add	r2,r7,r2
   92b00:	102bd07a 	srai	r21,r2,1
   92b04:	a80d883a 	mov	r6,r21
   92b08:	a900022e 	bgeu	r21,r4,92b14 <__ssprint_r+0xa8>
   92b0c:	202b883a 	mov	r21,r4
   92b10:	200d883a 	mov	r6,r4
   92b14:	18c1000c 	andi	r3,r3,1024
   92b18:	18002a26 	beq	r3,zero,92bc4 <__ssprint_r+0x158>
   92b1c:	300b883a 	mov	r5,r6
   92b20:	9809883a 	mov	r4,r19
   92b24:	00905500 	call	90550 <_malloc_r>
   92b28:	1029883a 	mov	r20,r2
   92b2c:	10002c26 	beq	r2,zero,92be0 <__ssprint_r+0x174>
   92b30:	89400417 	ldw	r5,16(r17)
   92b34:	b00d883a 	mov	r6,r22
   92b38:	1009883a 	mov	r4,r2
   92b3c:	0088e480 	call	88e48 <memcpy>
   92b40:	8880030b 	ldhu	r2,12(r17)
   92b44:	00fedfc4 	movi	r3,-1153
   92b48:	10c4703a 	and	r2,r2,r3
   92b4c:	10802014 	ori	r2,r2,128
   92b50:	8880030d 	sth	r2,12(r17)
   92b54:	a589883a 	add	r4,r20,r22
   92b58:	adadc83a 	sub	r22,r21,r22
   92b5c:	8d400515 	stw	r21,20(r17)
   92b60:	8d800215 	stw	r22,8(r17)
   92b64:	8d000415 	stw	r20,16(r17)
   92b68:	89000015 	stw	r4,0(r17)
   92b6c:	802b883a 	mov	r21,r16
   92b70:	802d883a 	mov	r22,r16
   92b74:	b00d883a 	mov	r6,r22
   92b78:	e00b883a 	mov	r5,fp
   92b7c:	0090e400 	call	90e40 <memmove>
   92b80:	88800217 	ldw	r2,8(r17)
   92b84:	89000017 	ldw	r4,0(r17)
   92b88:	90c00217 	ldw	r3,8(r18)
   92b8c:	1545c83a 	sub	r2,r2,r21
   92b90:	2589883a 	add	r4,r4,r22
   92b94:	88800215 	stw	r2,8(r17)
   92b98:	89000015 	stw	r4,0(r17)
   92b9c:	1c21c83a 	sub	r16,r3,r16
   92ba0:	94000215 	stw	r16,8(r18)
   92ba4:	80001726 	beq	r16,zero,92c04 <__ssprint_r+0x198>
   92ba8:	bf000017 	ldw	fp,0(r23)
   92bac:	bc000117 	ldw	r16,4(r23)
   92bb0:	bdc00204 	addi	r23,r23,8
   92bb4:	003fc206 	br	92ac0 <__alt_data_end+0xfffc2c00>
   92bb8:	802b883a 	mov	r21,r16
   92bbc:	802d883a 	mov	r22,r16
   92bc0:	003fec06 	br	92b74 <__alt_data_end+0xfffc2cb4>
   92bc4:	9809883a 	mov	r4,r19
   92bc8:	00922280 	call	92228 <_realloc_r>
   92bcc:	1029883a 	mov	r20,r2
   92bd0:	103fe01e 	bne	r2,zero,92b54 <__alt_data_end+0xfffc2c94>
   92bd4:	89400417 	ldw	r5,16(r17)
   92bd8:	9809883a 	mov	r4,r19
   92bdc:	008f9640 	call	8f964 <_free_r>
   92be0:	88c0030b 	ldhu	r3,12(r17)
   92be4:	00800304 	movi	r2,12
   92be8:	98800015 	stw	r2,0(r19)
   92bec:	18c01014 	ori	r3,r3,64
   92bf0:	88c0030d 	sth	r3,12(r17)
   92bf4:	00bfffc4 	movi	r2,-1
   92bf8:	90000215 	stw	zero,8(r18)
   92bfc:	90000115 	stw	zero,4(r18)
   92c00:	00000206 	br	92c0c <__ssprint_r+0x1a0>
   92c04:	90000115 	stw	zero,4(r18)
   92c08:	0005883a 	mov	r2,zero
   92c0c:	dfc00917 	ldw	ra,36(sp)
   92c10:	df000817 	ldw	fp,32(sp)
   92c14:	ddc00717 	ldw	r23,28(sp)
   92c18:	dd800617 	ldw	r22,24(sp)
   92c1c:	dd400517 	ldw	r21,20(sp)
   92c20:	dd000417 	ldw	r20,16(sp)
   92c24:	dcc00317 	ldw	r19,12(sp)
   92c28:	dc800217 	ldw	r18,8(sp)
   92c2c:	dc400117 	ldw	r17,4(sp)
   92c30:	dc000017 	ldw	r16,0(sp)
   92c34:	dec00a04 	addi	sp,sp,40
   92c38:	f800283a 	ret

00092c3c <___svfiprintf_internal_r>:
   92c3c:	2880030b 	ldhu	r2,12(r5)
   92c40:	deffc804 	addi	sp,sp,-224
   92c44:	dcc03115 	stw	r19,196(sp)
   92c48:	dfc03715 	stw	ra,220(sp)
   92c4c:	df003615 	stw	fp,216(sp)
   92c50:	ddc03515 	stw	r23,212(sp)
   92c54:	dd803415 	stw	r22,208(sp)
   92c58:	dd403315 	stw	r21,204(sp)
   92c5c:	dd003215 	stw	r20,200(sp)
   92c60:	dc803015 	stw	r18,192(sp)
   92c64:	dc402f15 	stw	r17,188(sp)
   92c68:	dc002e15 	stw	r16,184(sp)
   92c6c:	d9402715 	stw	r5,156(sp)
   92c70:	d9002a15 	stw	r4,168(sp)
   92c74:	1080200c 	andi	r2,r2,128
   92c78:	d9c02315 	stw	r7,140(sp)
   92c7c:	3027883a 	mov	r19,r6
   92c80:	10000226 	beq	r2,zero,92c8c <___svfiprintf_internal_r+0x50>
   92c84:	28800417 	ldw	r2,16(r5)
   92c88:	10041d26 	beq	r2,zero,93d00 <___svfiprintf_internal_r+0x10c4>
   92c8c:	dac01a04 	addi	r11,sp,104
   92c90:	dac01e15 	stw	r11,120(sp)
   92c94:	d8801e17 	ldw	r2,120(sp)
   92c98:	dac019c4 	addi	r11,sp,103
   92c9c:	dd402a17 	ldw	r21,168(sp)
   92ca0:	ddc02717 	ldw	r23,156(sp)
   92ca4:	058002b4 	movhi	r22,10
   92ca8:	050002b4 	movhi	r20,10
   92cac:	dac01f15 	stw	r11,124(sp)
   92cb0:	12d7c83a 	sub	r11,r2,r11
   92cb4:	b5b19504 	addi	r22,r22,-14764
   92cb8:	a5319104 	addi	r20,r20,-14780
   92cbc:	dec01a15 	stw	sp,104(sp)
   92cc0:	d8001c15 	stw	zero,112(sp)
   92cc4:	d8001b15 	stw	zero,108(sp)
   92cc8:	d811883a 	mov	r8,sp
   92ccc:	d8002915 	stw	zero,164(sp)
   92cd0:	d8002515 	stw	zero,148(sp)
   92cd4:	dac02b15 	stw	r11,172(sp)
   92cd8:	98800007 	ldb	r2,0(r19)
   92cdc:	1002dd26 	beq	r2,zero,93854 <___svfiprintf_internal_r+0xc18>
   92ce0:	00c00944 	movi	r3,37
   92ce4:	9823883a 	mov	r17,r19
   92ce8:	10c0021e 	bne	r2,r3,92cf4 <___svfiprintf_internal_r+0xb8>
   92cec:	00001406 	br	92d40 <___svfiprintf_internal_r+0x104>
   92cf0:	10c00326 	beq	r2,r3,92d00 <___svfiprintf_internal_r+0xc4>
   92cf4:	8c400044 	addi	r17,r17,1
   92cf8:	88800007 	ldb	r2,0(r17)
   92cfc:	103ffc1e 	bne	r2,zero,92cf0 <__alt_data_end+0xfffc2e30>
   92d00:	8ce1c83a 	sub	r16,r17,r19
   92d04:	80000e26 	beq	r16,zero,92d40 <___svfiprintf_internal_r+0x104>
   92d08:	d8c01c17 	ldw	r3,112(sp)
   92d0c:	d8801b17 	ldw	r2,108(sp)
   92d10:	44c00015 	stw	r19,0(r8)
   92d14:	1c07883a 	add	r3,r3,r16
   92d18:	10800044 	addi	r2,r2,1
   92d1c:	d8c01c15 	stw	r3,112(sp)
   92d20:	44000115 	stw	r16,4(r8)
   92d24:	d8801b15 	stw	r2,108(sp)
   92d28:	00c001c4 	movi	r3,7
   92d2c:	18831e16 	blt	r3,r2,939a8 <___svfiprintf_internal_r+0xd6c>
   92d30:	42000204 	addi	r8,r8,8
   92d34:	dac02517 	ldw	r11,148(sp)
   92d38:	5c17883a 	add	r11,r11,r16
   92d3c:	dac02515 	stw	r11,148(sp)
   92d40:	88800007 	ldb	r2,0(r17)
   92d44:	1002c526 	beq	r2,zero,9385c <___svfiprintf_internal_r+0xc20>
   92d48:	88c00047 	ldb	r3,1(r17)
   92d4c:	8cc00044 	addi	r19,r17,1
   92d50:	d8001d85 	stb	zero,118(sp)
   92d54:	0009883a 	mov	r4,zero
   92d58:	000f883a 	mov	r7,zero
   92d5c:	043fffc4 	movi	r16,-1
   92d60:	d8002415 	stw	zero,144(sp)
   92d64:	0025883a 	mov	r18,zero
   92d68:	01401604 	movi	r5,88
   92d6c:	01800244 	movi	r6,9
   92d70:	02800a84 	movi	r10,42
   92d74:	02401b04 	movi	r9,108
   92d78:	9cc00044 	addi	r19,r19,1
   92d7c:	18bff804 	addi	r2,r3,-32
   92d80:	2881dd36 	bltu	r5,r2,934f8 <___svfiprintf_internal_r+0x8bc>
   92d84:	100490ba 	slli	r2,r2,2
   92d88:	02c00274 	movhi	r11,9
   92d8c:	5acb6704 	addi	r11,r11,11676
   92d90:	12c5883a 	add	r2,r2,r11
   92d94:	10800017 	ldw	r2,0(r2)
   92d98:	1000683a 	jmp	r2
   92d9c:	00092f98 	cmpnei	zero,zero,9406
   92da0:	000934f8 	rdprs	zero,zero,9427
   92da4:	000934f8 	rdprs	zero,zero,9427
   92da8:	00092f8c 	andi	zero,zero,9406
   92dac:	000934f8 	rdprs	zero,zero,9427
   92db0:	000934f8 	rdprs	zero,zero,9427
   92db4:	000934f8 	rdprs	zero,zero,9427
   92db8:	000934f8 	rdprs	zero,zero,9427
   92dbc:	000934f8 	rdprs	zero,zero,9427
   92dc0:	000934f8 	rdprs	zero,zero,9427
   92dc4:	00092f00 	call	92f0 <__reset-0x76d10>
   92dc8:	000930dc 	xori	zero,zero,9411
   92dcc:	000934f8 	rdprs	zero,zero,9427
   92dd0:	00092f2c 	andhi	zero,zero,9404
   92dd4:	0009352c 	andhi	zero,zero,9428
   92dd8:	000934f8 	rdprs	zero,zero,9427
   92ddc:	00093520 	cmpeqi	zero,zero,9428
   92de0:	000934c0 	call	934c <__reset-0x76cb4>
   92de4:	000934c0 	call	934c <__reset-0x76cb4>
   92de8:	000934c0 	call	934c <__reset-0x76cb4>
   92dec:	000934c0 	call	934c <__reset-0x76cb4>
   92df0:	000934c0 	call	934c <__reset-0x76cb4>
   92df4:	000934c0 	call	934c <__reset-0x76cb4>
   92df8:	000934c0 	call	934c <__reset-0x76cb4>
   92dfc:	000934c0 	call	934c <__reset-0x76cb4>
   92e00:	000934c0 	call	934c <__reset-0x76cb4>
   92e04:	000934f8 	rdprs	zero,zero,9427
   92e08:	000934f8 	rdprs	zero,zero,9427
   92e0c:	000934f8 	rdprs	zero,zero,9427
   92e10:	000934f8 	rdprs	zero,zero,9427
   92e14:	000934f8 	rdprs	zero,zero,9427
   92e18:	000934f8 	rdprs	zero,zero,9427
   92e1c:	000934f8 	rdprs	zero,zero,9427
   92e20:	000934f8 	rdprs	zero,zero,9427
   92e24:	000934f8 	rdprs	zero,zero,9427
   92e28:	000934f8 	rdprs	zero,zero,9427
   92e2c:	0009345c 	xori	zero,zero,9425
   92e30:	000934f8 	rdprs	zero,zero,9427
   92e34:	000934f8 	rdprs	zero,zero,9427
   92e38:	000934f8 	rdprs	zero,zero,9427
   92e3c:	000934f8 	rdprs	zero,zero,9427
   92e40:	000934f8 	rdprs	zero,zero,9427
   92e44:	000934f8 	rdprs	zero,zero,9427
   92e48:	000934f8 	rdprs	zero,zero,9427
   92e4c:	000934f8 	rdprs	zero,zero,9427
   92e50:	000934f8 	rdprs	zero,zero,9427
   92e54:	000934f8 	rdprs	zero,zero,9427
   92e58:	000935d4 	movui	zero,9431
   92e5c:	000934f8 	rdprs	zero,zero,9427
   92e60:	000934f8 	rdprs	zero,zero,9427
   92e64:	000934f8 	rdprs	zero,zero,9427
   92e68:	000934f8 	rdprs	zero,zero,9427
   92e6c:	000934f8 	rdprs	zero,zero,9427
   92e70:	0009356c 	andhi	zero,zero,9429
   92e74:	000934f8 	rdprs	zero,zero,9427
   92e78:	000934f8 	rdprs	zero,zero,9427
   92e7c:	000932a0 	cmpeqi	zero,zero,9418
   92e80:	000934f8 	rdprs	zero,zero,9427
   92e84:	000934f8 	rdprs	zero,zero,9427
   92e88:	000934f8 	rdprs	zero,zero,9427
   92e8c:	000934f8 	rdprs	zero,zero,9427
   92e90:	000934f8 	rdprs	zero,zero,9427
   92e94:	000934f8 	rdprs	zero,zero,9427
   92e98:	000934f8 	rdprs	zero,zero,9427
   92e9c:	000934f8 	rdprs	zero,zero,9427
   92ea0:	000934f8 	rdprs	zero,zero,9427
   92ea4:	000934f8 	rdprs	zero,zero,9427
   92ea8:	00093190 	cmplti	zero,zero,9414
   92eac:	0009333c 	xorhi	zero,zero,9420
   92eb0:	000934f8 	rdprs	zero,zero,9427
   92eb4:	000934f8 	rdprs	zero,zero,9427
   92eb8:	000934f8 	rdprs	zero,zero,9427
   92ebc:	00093330 	cmpltui	zero,zero,9420
   92ec0:	0009333c 	xorhi	zero,zero,9420
   92ec4:	000934f8 	rdprs	zero,zero,9427
   92ec8:	000934f8 	rdprs	zero,zero,9427
   92ecc:	00093320 	cmpeqi	zero,zero,9420
   92ed0:	000934f8 	rdprs	zero,zero,9427
   92ed4:	000932e4 	muli	zero,zero,9419
   92ed8:	000930ec 	andhi	zero,zero,9411
   92edc:	00092f38 	rdprs	zero,zero,9404
   92ee0:	00093450 	cmplti	zero,zero,9425
   92ee4:	000934f8 	rdprs	zero,zero,9427
   92ee8:	00093404 	movi	zero,9424
   92eec:	000934f8 	rdprs	zero,zero,9427
   92ef0:	0009305c 	xori	zero,zero,9409
   92ef4:	000934f8 	rdprs	zero,zero,9427
   92ef8:	000934f8 	rdprs	zero,zero,9427
   92efc:	00092fb8 	rdprs	zero,zero,9406
   92f00:	dac02317 	ldw	r11,140(sp)
   92f04:	5ac00017 	ldw	r11,0(r11)
   92f08:	dac02415 	stw	r11,144(sp)
   92f0c:	dac02317 	ldw	r11,140(sp)
   92f10:	58800104 	addi	r2,r11,4
   92f14:	dac02417 	ldw	r11,144(sp)
   92f18:	5802e90e 	bge	r11,zero,93ac0 <___svfiprintf_internal_r+0xe84>
   92f1c:	dac02417 	ldw	r11,144(sp)
   92f20:	d8802315 	stw	r2,140(sp)
   92f24:	02d7c83a 	sub	r11,zero,r11
   92f28:	dac02415 	stw	r11,144(sp)
   92f2c:	94800114 	ori	r18,r18,4
   92f30:	98c00007 	ldb	r3,0(r19)
   92f34:	003f9006 	br	92d78 <__alt_data_end+0xfffc2eb8>
   92f38:	00800c04 	movi	r2,48
   92f3c:	dac02317 	ldw	r11,140(sp)
   92f40:	d8801d05 	stb	r2,116(sp)
   92f44:	00801e04 	movi	r2,120
   92f48:	d8801d45 	stb	r2,117(sp)
   92f4c:	d8001d85 	stb	zero,118(sp)
   92f50:	58c00104 	addi	r3,r11,4
   92f54:	5f000017 	ldw	fp,0(r11)
   92f58:	0013883a 	mov	r9,zero
   92f5c:	90800094 	ori	r2,r18,2
   92f60:	80032b16 	blt	r16,zero,93c10 <___svfiprintf_internal_r+0xfd4>
   92f64:	00bfdfc4 	movi	r2,-129
   92f68:	90a4703a 	and	r18,r18,r2
   92f6c:	d8c02315 	stw	r3,140(sp)
   92f70:	94800094 	ori	r18,r18,2
   92f74:	e002dc26 	beq	fp,zero,93ae8 <___svfiprintf_internal_r+0xeac>
   92f78:	010002b4 	movhi	r4,10
   92f7c:	21312904 	addi	r4,r4,-15196
   92f80:	0015883a 	mov	r10,zero
   92f84:	d9002915 	stw	r4,164(sp)
   92f88:	00002306 	br	93018 <___svfiprintf_internal_r+0x3dc>
   92f8c:	94800054 	ori	r18,r18,1
   92f90:	98c00007 	ldb	r3,0(r19)
   92f94:	003f7806 	br	92d78 <__alt_data_end+0xfffc2eb8>
   92f98:	38803fcc 	andi	r2,r7,255
   92f9c:	1080201c 	xori	r2,r2,128
   92fa0:	10bfe004 	addi	r2,r2,-128
   92fa4:	1002f31e 	bne	r2,zero,93b74 <___svfiprintf_internal_r+0xf38>
   92fa8:	01000044 	movi	r4,1
   92fac:	01c00804 	movi	r7,32
   92fb0:	98c00007 	ldb	r3,0(r19)
   92fb4:	003f7006 	br	92d78 <__alt_data_end+0xfffc2eb8>
   92fb8:	21003fcc 	andi	r4,r4,255
   92fbc:	2003aa1e 	bne	r4,zero,93e68 <___svfiprintf_internal_r+0x122c>
   92fc0:	008002b4 	movhi	r2,10
   92fc4:	10b12904 	addi	r2,r2,-15196
   92fc8:	d8802915 	stw	r2,164(sp)
   92fcc:	9080080c 	andi	r2,r18,32
   92fd0:	1000ba26 	beq	r2,zero,932bc <___svfiprintf_internal_r+0x680>
   92fd4:	dac02317 	ldw	r11,140(sp)
   92fd8:	5f000017 	ldw	fp,0(r11)
   92fdc:	5a400117 	ldw	r9,4(r11)
   92fe0:	5ac00204 	addi	r11,r11,8
   92fe4:	dac02315 	stw	r11,140(sp)
   92fe8:	9080004c 	andi	r2,r18,1
   92fec:	10029026 	beq	r2,zero,93a30 <___svfiprintf_internal_r+0xdf4>
   92ff0:	e244b03a 	or	r2,fp,r9
   92ff4:	1002d41e 	bne	r2,zero,93b48 <___svfiprintf_internal_r+0xf0c>
   92ff8:	d8001d85 	stb	zero,118(sp)
   92ffc:	80030b16 	blt	r16,zero,93c2c <___svfiprintf_internal_r+0xff0>
   93000:	00bfdfc4 	movi	r2,-129
   93004:	90a4703a 	and	r18,r18,r2
   93008:	0015883a 	mov	r10,zero
   9300c:	80002426 	beq	r16,zero,930a0 <___svfiprintf_internal_r+0x464>
   93010:	0039883a 	mov	fp,zero
   93014:	0013883a 	mov	r9,zero
   93018:	d9002917 	ldw	r4,164(sp)
   9301c:	dc401a04 	addi	r17,sp,104
   93020:	e08003cc 	andi	r2,fp,15
   93024:	4806973a 	slli	r3,r9,28
   93028:	2085883a 	add	r2,r4,r2
   9302c:	e038d13a 	srli	fp,fp,4
   93030:	10800003 	ldbu	r2,0(r2)
   93034:	4812d13a 	srli	r9,r9,4
   93038:	8c7fffc4 	addi	r17,r17,-1
   9303c:	1f38b03a 	or	fp,r3,fp
   93040:	88800005 	stb	r2,0(r17)
   93044:	e244b03a 	or	r2,fp,r9
   93048:	103ff51e 	bne	r2,zero,93020 <__alt_data_end+0xfffc3160>
   9304c:	dac01e17 	ldw	r11,120(sp)
   93050:	5c57c83a 	sub	r11,r11,r17
   93054:	dac02115 	stw	r11,132(sp)
   93058:	00001406 	br	930ac <___svfiprintf_internal_r+0x470>
   9305c:	21003fcc 	andi	r4,r4,255
   93060:	2003741e 	bne	r4,zero,93e34 <___svfiprintf_internal_r+0x11f8>
   93064:	9080080c 	andi	r2,r18,32
   93068:	10014526 	beq	r2,zero,93580 <___svfiprintf_internal_r+0x944>
   9306c:	dac02317 	ldw	r11,140(sp)
   93070:	d8001d85 	stb	zero,118(sp)
   93074:	58c00204 	addi	r3,r11,8
   93078:	5f000017 	ldw	fp,0(r11)
   9307c:	5a400117 	ldw	r9,4(r11)
   93080:	8002d916 	blt	r16,zero,93be8 <___svfiprintf_internal_r+0xfac>
   93084:	013fdfc4 	movi	r4,-129
   93088:	e244b03a 	or	r2,fp,r9
   9308c:	d8c02315 	stw	r3,140(sp)
   93090:	9124703a 	and	r18,r18,r4
   93094:	0015883a 	mov	r10,zero
   93098:	1000b91e 	bne	r2,zero,93380 <___svfiprintf_internal_r+0x744>
   9309c:	8002e61e 	bne	r16,zero,93c38 <___svfiprintf_internal_r+0xffc>
   930a0:	0021883a 	mov	r16,zero
   930a4:	d8002115 	stw	zero,132(sp)
   930a8:	dc401a04 	addi	r17,sp,104
   930ac:	d8c02117 	ldw	r3,132(sp)
   930b0:	dc002015 	stw	r16,128(sp)
   930b4:	80c0010e 	bge	r16,r3,930bc <___svfiprintf_internal_r+0x480>
   930b8:	d8c02015 	stw	r3,128(sp)
   930bc:	52803fcc 	andi	r10,r10,255
   930c0:	5280201c 	xori	r10,r10,128
   930c4:	52bfe004 	addi	r10,r10,-128
   930c8:	50003c26 	beq	r10,zero,931bc <___svfiprintf_internal_r+0x580>
   930cc:	dac02017 	ldw	r11,128(sp)
   930d0:	5ac00044 	addi	r11,r11,1
   930d4:	dac02015 	stw	r11,128(sp)
   930d8:	00003806 	br	931bc <___svfiprintf_internal_r+0x580>
   930dc:	01000044 	movi	r4,1
   930e0:	01c00ac4 	movi	r7,43
   930e4:	98c00007 	ldb	r3,0(r19)
   930e8:	003f2306 	br	92d78 <__alt_data_end+0xfffc2eb8>
   930ec:	21003fcc 	andi	r4,r4,255
   930f0:	2003481e 	bne	r4,zero,93e14 <___svfiprintf_internal_r+0x11d8>
   930f4:	9080080c 	andi	r2,r18,32
   930f8:	10013b26 	beq	r2,zero,935e8 <___svfiprintf_internal_r+0x9ac>
   930fc:	dac02317 	ldw	r11,140(sp)
   93100:	d8001d85 	stb	zero,118(sp)
   93104:	58800204 	addi	r2,r11,8
   93108:	5f000017 	ldw	fp,0(r11)
   9310c:	5a400117 	ldw	r9,4(r11)
   93110:	8002a816 	blt	r16,zero,93bb4 <___svfiprintf_internal_r+0xf78>
   93114:	013fdfc4 	movi	r4,-129
   93118:	e246b03a 	or	r3,fp,r9
   9311c:	d8802315 	stw	r2,140(sp)
   93120:	9124703a 	and	r18,r18,r4
   93124:	18013c26 	beq	r3,zero,93618 <___svfiprintf_internal_r+0x9dc>
   93128:	0015883a 	mov	r10,zero
   9312c:	dc401a04 	addi	r17,sp,104
   93130:	e006d0fa 	srli	r3,fp,3
   93134:	4808977a 	slli	r4,r9,29
   93138:	4812d0fa 	srli	r9,r9,3
   9313c:	e70001cc 	andi	fp,fp,7
   93140:	e0800c04 	addi	r2,fp,48
   93144:	8c7fffc4 	addi	r17,r17,-1
   93148:	20f8b03a 	or	fp,r4,r3
   9314c:	88800005 	stb	r2,0(r17)
   93150:	e246b03a 	or	r3,fp,r9
   93154:	183ff61e 	bne	r3,zero,93130 <__alt_data_end+0xfffc3270>
   93158:	90c0004c 	andi	r3,r18,1
   9315c:	1800a526 	beq	r3,zero,933f4 <___svfiprintf_internal_r+0x7b8>
   93160:	10803fcc 	andi	r2,r2,255
   93164:	1080201c 	xori	r2,r2,128
   93168:	10bfe004 	addi	r2,r2,-128
   9316c:	00c00c04 	movi	r3,48
   93170:	10ffb626 	beq	r2,r3,9304c <__alt_data_end+0xfffc318c>
   93174:	88ffffc5 	stb	r3,-1(r17)
   93178:	d8c01e17 	ldw	r3,120(sp)
   9317c:	88bfffc4 	addi	r2,r17,-1
   93180:	1023883a 	mov	r17,r2
   93184:	1887c83a 	sub	r3,r3,r2
   93188:	d8c02115 	stw	r3,132(sp)
   9318c:	003fc706 	br	930ac <__alt_data_end+0xfffc31ec>
   93190:	dac02317 	ldw	r11,140(sp)
   93194:	00c00044 	movi	r3,1
   93198:	d8c02015 	stw	r3,128(sp)
   9319c:	58800017 	ldw	r2,0(r11)
   931a0:	5ac00104 	addi	r11,r11,4
   931a4:	d8001d85 	stb	zero,118(sp)
   931a8:	d8801005 	stb	r2,64(sp)
   931ac:	dac02315 	stw	r11,140(sp)
   931b0:	d8c02115 	stw	r3,132(sp)
   931b4:	dc401004 	addi	r17,sp,64
   931b8:	0021883a 	mov	r16,zero
   931bc:	90c0008c 	andi	r3,r18,2
   931c0:	d8c02215 	stw	r3,136(sp)
   931c4:	18000326 	beq	r3,zero,931d4 <___svfiprintf_internal_r+0x598>
   931c8:	dac02017 	ldw	r11,128(sp)
   931cc:	5ac00084 	addi	r11,r11,2
   931d0:	dac02015 	stw	r11,128(sp)
   931d4:	90c0210c 	andi	r3,r18,132
   931d8:	d8c02615 	stw	r3,152(sp)
   931dc:	1801131e 	bne	r3,zero,9362c <___svfiprintf_internal_r+0x9f0>
   931e0:	dac02417 	ldw	r11,144(sp)
   931e4:	d8c02017 	ldw	r3,128(sp)
   931e8:	58f9c83a 	sub	fp,r11,r3
   931ec:	07010f0e 	bge	zero,fp,9362c <___svfiprintf_internal_r+0x9f0>
   931f0:	02400404 	movi	r9,16
   931f4:	d8c01c17 	ldw	r3,112(sp)
   931f8:	d8801b17 	ldw	r2,108(sp)
   931fc:	4f02d60e 	bge	r9,fp,93d58 <___svfiprintf_internal_r+0x111c>
   93200:	014002b4 	movhi	r5,10
   93204:	29719504 	addi	r5,r5,-14764
   93208:	d9402815 	stw	r5,160(sp)
   9320c:	028001c4 	movi	r10,7
   93210:	00000306 	br	93220 <___svfiprintf_internal_r+0x5e4>
   93214:	e73ffc04 	addi	fp,fp,-16
   93218:	42000204 	addi	r8,r8,8
   9321c:	4f00150e 	bge	r9,fp,93274 <___svfiprintf_internal_r+0x638>
   93220:	18c00404 	addi	r3,r3,16
   93224:	10800044 	addi	r2,r2,1
   93228:	45800015 	stw	r22,0(r8)
   9322c:	42400115 	stw	r9,4(r8)
   93230:	d8c01c15 	stw	r3,112(sp)
   93234:	d8801b15 	stw	r2,108(sp)
   93238:	50bff60e 	bge	r10,r2,93214 <__alt_data_end+0xfffc3354>
   9323c:	d9801a04 	addi	r6,sp,104
   93240:	b80b883a 	mov	r5,r23
   93244:	a809883a 	mov	r4,r21
   93248:	da402c15 	stw	r9,176(sp)
   9324c:	da802d15 	stw	r10,180(sp)
   93250:	0092a6c0 	call	92a6c <__ssprint_r>
   93254:	da402c17 	ldw	r9,176(sp)
   93258:	da802d17 	ldw	r10,180(sp)
   9325c:	1001851e 	bne	r2,zero,93874 <___svfiprintf_internal_r+0xc38>
   93260:	e73ffc04 	addi	fp,fp,-16
   93264:	d8c01c17 	ldw	r3,112(sp)
   93268:	d8801b17 	ldw	r2,108(sp)
   9326c:	d811883a 	mov	r8,sp
   93270:	4f3feb16 	blt	r9,fp,93220 <__alt_data_end+0xfffc3360>
   93274:	dac02817 	ldw	r11,160(sp)
   93278:	e0c7883a 	add	r3,fp,r3
   9327c:	10800044 	addi	r2,r2,1
   93280:	42c00015 	stw	r11,0(r8)
   93284:	47000115 	stw	fp,4(r8)
   93288:	d8c01c15 	stw	r3,112(sp)
   9328c:	d8801b15 	stw	r2,108(sp)
   93290:	010001c4 	movi	r4,7
   93294:	2081ee16 	blt	r4,r2,93a50 <___svfiprintf_internal_r+0xe14>
   93298:	42000204 	addi	r8,r8,8
   9329c:	0000e506 	br	93634 <___svfiprintf_internal_r+0x9f8>
   932a0:	21003fcc 	andi	r4,r4,255
   932a4:	2002dd1e 	bne	r4,zero,93e1c <___svfiprintf_internal_r+0x11e0>
   932a8:	008002b4 	movhi	r2,10
   932ac:	10b12404 	addi	r2,r2,-15216
   932b0:	d8802915 	stw	r2,164(sp)
   932b4:	9080080c 	andi	r2,r18,32
   932b8:	103f461e 	bne	r2,zero,92fd4 <__alt_data_end+0xfffc3114>
   932bc:	9080040c 	andi	r2,r18,16
   932c0:	10022e1e 	bne	r2,zero,93b7c <___svfiprintf_internal_r+0xf40>
   932c4:	9080100c 	andi	r2,r18,64
   932c8:	dac02317 	ldw	r11,140(sp)
   932cc:	10027326 	beq	r2,zero,93c9c <___svfiprintf_internal_r+0x1060>
   932d0:	5f00000b 	ldhu	fp,0(r11)
   932d4:	5ac00104 	addi	r11,r11,4
   932d8:	0013883a 	mov	r9,zero
   932dc:	dac02315 	stw	r11,140(sp)
   932e0:	003f4106 	br	92fe8 <__alt_data_end+0xfffc3128>
   932e4:	21003fcc 	andi	r4,r4,255
   932e8:	2002e11e 	bne	r4,zero,93e70 <___svfiprintf_internal_r+0x1234>
   932ec:	9080080c 	andi	r2,r18,32
   932f0:	1002011e 	bne	r2,zero,93af8 <___svfiprintf_internal_r+0xebc>
   932f4:	9080040c 	andi	r2,r18,16
   932f8:	10023e1e 	bne	r2,zero,93bf4 <___svfiprintf_internal_r+0xfb8>
   932fc:	9480100c 	andi	r18,r18,64
   93300:	90023c26 	beq	r18,zero,93bf4 <___svfiprintf_internal_r+0xfb8>
   93304:	dac02317 	ldw	r11,140(sp)
   93308:	58800017 	ldw	r2,0(r11)
   9330c:	5ac00104 	addi	r11,r11,4
   93310:	dac02315 	stw	r11,140(sp)
   93314:	dac02517 	ldw	r11,148(sp)
   93318:	12c0000d 	sth	r11,0(r2)
   9331c:	003e6e06 	br	92cd8 <__alt_data_end+0xfffc2e18>
   93320:	98c00007 	ldb	r3,0(r19)
   93324:	1a422926 	beq	r3,r9,93bcc <___svfiprintf_internal_r+0xf90>
   93328:	94800414 	ori	r18,r18,16
   9332c:	003e9206 	br	92d78 <__alt_data_end+0xfffc2eb8>
   93330:	94801014 	ori	r18,r18,64
   93334:	98c00007 	ldb	r3,0(r19)
   93338:	003e8f06 	br	92d78 <__alt_data_end+0xfffc2eb8>
   9333c:	21003fcc 	andi	r4,r4,255
   93340:	2002c71e 	bne	r4,zero,93e60 <___svfiprintf_internal_r+0x1224>
   93344:	9080080c 	andi	r2,r18,32
   93348:	10004926 	beq	r2,zero,93470 <___svfiprintf_internal_r+0x834>
   9334c:	dac02317 	ldw	r11,140(sp)
   93350:	58800117 	ldw	r2,4(r11)
   93354:	5f000017 	ldw	fp,0(r11)
   93358:	5ac00204 	addi	r11,r11,8
   9335c:	dac02315 	stw	r11,140(sp)
   93360:	1013883a 	mov	r9,r2
   93364:	10004b16 	blt	r2,zero,93494 <___svfiprintf_internal_r+0x858>
   93368:	da801d83 	ldbu	r10,118(sp)
   9336c:	8001cb16 	blt	r16,zero,93a9c <___svfiprintf_internal_r+0xe60>
   93370:	00ffdfc4 	movi	r3,-129
   93374:	e244b03a 	or	r2,fp,r9
   93378:	90e4703a 	and	r18,r18,r3
   9337c:	103f4726 	beq	r2,zero,9309c <__alt_data_end+0xfffc31dc>
   93380:	48008c26 	beq	r9,zero,935b4 <___svfiprintf_internal_r+0x978>
   93384:	dc802015 	stw	r18,128(sp)
   93388:	dc002115 	stw	r16,132(sp)
   9338c:	dc401a04 	addi	r17,sp,104
   93390:	e021883a 	mov	r16,fp
   93394:	da002215 	stw	r8,136(sp)
   93398:	5039883a 	mov	fp,r10
   9339c:	4825883a 	mov	r18,r9
   933a0:	8009883a 	mov	r4,r16
   933a4:	900b883a 	mov	r5,r18
   933a8:	01800284 	movi	r6,10
   933ac:	000f883a 	mov	r7,zero
   933b0:	009636c0 	call	9636c <__umoddi3>
   933b4:	10800c04 	addi	r2,r2,48
   933b8:	8c7fffc4 	addi	r17,r17,-1
   933bc:	8009883a 	mov	r4,r16
   933c0:	900b883a 	mov	r5,r18
   933c4:	88800005 	stb	r2,0(r17)
   933c8:	01800284 	movi	r6,10
   933cc:	000f883a 	mov	r7,zero
   933d0:	0095df40 	call	95df4 <__udivdi3>
   933d4:	1021883a 	mov	r16,r2
   933d8:	10c4b03a 	or	r2,r2,r3
   933dc:	1825883a 	mov	r18,r3
   933e0:	103fef1e 	bne	r2,zero,933a0 <__alt_data_end+0xfffc34e0>
   933e4:	dc802017 	ldw	r18,128(sp)
   933e8:	dc002117 	ldw	r16,132(sp)
   933ec:	da002217 	ldw	r8,136(sp)
   933f0:	e015883a 	mov	r10,fp
   933f4:	d8c01e17 	ldw	r3,120(sp)
   933f8:	1c47c83a 	sub	r3,r3,r17
   933fc:	d8c02115 	stw	r3,132(sp)
   93400:	003f2a06 	br	930ac <__alt_data_end+0xfffc31ec>
   93404:	dac02317 	ldw	r11,140(sp)
   93408:	d8001d85 	stb	zero,118(sp)
   9340c:	5c400017 	ldw	r17,0(r11)
   93410:	5f000104 	addi	fp,r11,4
   93414:	88022f26 	beq	r17,zero,93cd4 <___svfiprintf_internal_r+0x1098>
   93418:	80022516 	blt	r16,zero,93cb0 <___svfiprintf_internal_r+0x1074>
   9341c:	800d883a 	mov	r6,r16
   93420:	000b883a 	mov	r5,zero
   93424:	8809883a 	mov	r4,r17
   93428:	da002c15 	stw	r8,176(sp)
   9342c:	0090d5c0 	call	90d5c <memchr>
   93430:	da002c17 	ldw	r8,176(sp)
   93434:	10026426 	beq	r2,zero,93dc8 <___svfiprintf_internal_r+0x118c>
   93438:	1445c83a 	sub	r2,r2,r17
   9343c:	d8802115 	stw	r2,132(sp)
   93440:	da801d83 	ldbu	r10,118(sp)
   93444:	df002315 	stw	fp,140(sp)
   93448:	0021883a 	mov	r16,zero
   9344c:	003f1706 	br	930ac <__alt_data_end+0xfffc31ec>
   93450:	94800814 	ori	r18,r18,32
   93454:	98c00007 	ldb	r3,0(r19)
   93458:	003e4706 	br	92d78 <__alt_data_end+0xfffc2eb8>
   9345c:	21003fcc 	andi	r4,r4,255
   93460:	2002701e 	bne	r4,zero,93e24 <___svfiprintf_internal_r+0x11e8>
   93464:	94800414 	ori	r18,r18,16
   93468:	9080080c 	andi	r2,r18,32
   9346c:	103fb71e 	bne	r2,zero,9334c <__alt_data_end+0xfffc348c>
   93470:	9080040c 	andi	r2,r18,16
   93474:	1001ab26 	beq	r2,zero,93b24 <___svfiprintf_internal_r+0xee8>
   93478:	dac02317 	ldw	r11,140(sp)
   9347c:	5f000017 	ldw	fp,0(r11)
   93480:	5ac00104 	addi	r11,r11,4
   93484:	dac02315 	stw	r11,140(sp)
   93488:	e013d7fa 	srai	r9,fp,31
   9348c:	4805883a 	mov	r2,r9
   93490:	103fb50e 	bge	r2,zero,93368 <__alt_data_end+0xfffc34a8>
   93494:	0739c83a 	sub	fp,zero,fp
   93498:	02800b44 	movi	r10,45
   9349c:	e004c03a 	cmpne	r2,fp,zero
   934a0:	0253c83a 	sub	r9,zero,r9
   934a4:	da801d85 	stb	r10,118(sp)
   934a8:	4893c83a 	sub	r9,r9,r2
   934ac:	80023016 	blt	r16,zero,93d70 <___svfiprintf_internal_r+0x1134>
   934b0:	00bfdfc4 	movi	r2,-129
   934b4:	90a4703a 	and	r18,r18,r2
   934b8:	483fb21e 	bne	r9,zero,93384 <__alt_data_end+0xfffc34c4>
   934bc:	00003d06 	br	935b4 <___svfiprintf_internal_r+0x978>
   934c0:	9817883a 	mov	r11,r19
   934c4:	d8002415 	stw	zero,144(sp)
   934c8:	18bff404 	addi	r2,r3,-48
   934cc:	0019883a 	mov	r12,zero
   934d0:	58c00007 	ldb	r3,0(r11)
   934d4:	630002a4 	muli	r12,r12,10
   934d8:	9cc00044 	addi	r19,r19,1
   934dc:	9817883a 	mov	r11,r19
   934e0:	1319883a 	add	r12,r2,r12
   934e4:	18bff404 	addi	r2,r3,-48
   934e8:	30bff92e 	bgeu	r6,r2,934d0 <__alt_data_end+0xfffc3610>
   934ec:	db002415 	stw	r12,144(sp)
   934f0:	18bff804 	addi	r2,r3,-32
   934f4:	28be232e 	bgeu	r5,r2,92d84 <__alt_data_end+0xfffc2ec4>
   934f8:	21003fcc 	andi	r4,r4,255
   934fc:	20024b1e 	bne	r4,zero,93e2c <___svfiprintf_internal_r+0x11f0>
   93500:	1800d626 	beq	r3,zero,9385c <___svfiprintf_internal_r+0xc20>
   93504:	02c00044 	movi	r11,1
   93508:	dac02015 	stw	r11,128(sp)
   9350c:	d8c01005 	stb	r3,64(sp)
   93510:	d8001d85 	stb	zero,118(sp)
   93514:	dac02115 	stw	r11,132(sp)
   93518:	dc401004 	addi	r17,sp,64
   9351c:	003f2606 	br	931b8 <__alt_data_end+0xfffc32f8>
   93520:	94802014 	ori	r18,r18,128
   93524:	98c00007 	ldb	r3,0(r19)
   93528:	003e1306 	br	92d78 <__alt_data_end+0xfffc2eb8>
   9352c:	98c00007 	ldb	r3,0(r19)
   93530:	9ac00044 	addi	r11,r19,1
   93534:	1a822b26 	beq	r3,r10,93de4 <___svfiprintf_internal_r+0x11a8>
   93538:	18bff404 	addi	r2,r3,-48
   9353c:	0021883a 	mov	r16,zero
   93540:	30821e36 	bltu	r6,r2,93dbc <___svfiprintf_internal_r+0x1180>
   93544:	58c00007 	ldb	r3,0(r11)
   93548:	840002a4 	muli	r16,r16,10
   9354c:	5cc00044 	addi	r19,r11,1
   93550:	9817883a 	mov	r11,r19
   93554:	80a1883a 	add	r16,r16,r2
   93558:	18bff404 	addi	r2,r3,-48
   9355c:	30bff92e 	bgeu	r6,r2,93544 <__alt_data_end+0xfffc3684>
   93560:	803e060e 	bge	r16,zero,92d7c <__alt_data_end+0xfffc2ebc>
   93564:	043fffc4 	movi	r16,-1
   93568:	003e0406 	br	92d7c <__alt_data_end+0xfffc2ebc>
   9356c:	21003fcc 	andi	r4,r4,255
   93570:	2002371e 	bne	r4,zero,93e50 <___svfiprintf_internal_r+0x1214>
   93574:	94800414 	ori	r18,r18,16
   93578:	9080080c 	andi	r2,r18,32
   9357c:	103ebb1e 	bne	r2,zero,9306c <__alt_data_end+0xfffc31ac>
   93580:	9080040c 	andi	r2,r18,16
   93584:	10013b26 	beq	r2,zero,93a74 <___svfiprintf_internal_r+0xe38>
   93588:	dac02317 	ldw	r11,140(sp)
   9358c:	d8001d85 	stb	zero,118(sp)
   93590:	0013883a 	mov	r9,zero
   93594:	58800104 	addi	r2,r11,4
   93598:	5f000017 	ldw	fp,0(r11)
   9359c:	80013d16 	blt	r16,zero,93a94 <___svfiprintf_internal_r+0xe58>
   935a0:	00ffdfc4 	movi	r3,-129
   935a4:	d8802315 	stw	r2,140(sp)
   935a8:	90e4703a 	and	r18,r18,r3
   935ac:	0015883a 	mov	r10,zero
   935b0:	e03eba26 	beq	fp,zero,9309c <__alt_data_end+0xfffc31dc>
   935b4:	00800244 	movi	r2,9
   935b8:	173f7236 	bltu	r2,fp,93384 <__alt_data_end+0xfffc34c4>
   935bc:	dac02b17 	ldw	r11,172(sp)
   935c0:	e7000c04 	addi	fp,fp,48
   935c4:	df0019c5 	stb	fp,103(sp)
   935c8:	dac02115 	stw	r11,132(sp)
   935cc:	dc4019c4 	addi	r17,sp,103
   935d0:	003eb606 	br	930ac <__alt_data_end+0xfffc31ec>
   935d4:	21003fcc 	andi	r4,r4,255
   935d8:	20021f1e 	bne	r4,zero,93e58 <___svfiprintf_internal_r+0x121c>
   935dc:	94800414 	ori	r18,r18,16
   935e0:	9080080c 	andi	r2,r18,32
   935e4:	103ec51e 	bne	r2,zero,930fc <__alt_data_end+0xfffc323c>
   935e8:	9080040c 	andi	r2,r18,16
   935ec:	10016926 	beq	r2,zero,93b94 <___svfiprintf_internal_r+0xf58>
   935f0:	dac02317 	ldw	r11,140(sp)
   935f4:	d8001d85 	stb	zero,118(sp)
   935f8:	0013883a 	mov	r9,zero
   935fc:	58800104 	addi	r2,r11,4
   93600:	5f000017 	ldw	fp,0(r11)
   93604:	80016b16 	blt	r16,zero,93bb4 <___svfiprintf_internal_r+0xf78>
   93608:	00ffdfc4 	movi	r3,-129
   9360c:	d8802315 	stw	r2,140(sp)
   93610:	90e4703a 	and	r18,r18,r3
   93614:	e03ec41e 	bne	fp,zero,93128 <__alt_data_end+0xfffc3268>
   93618:	0015883a 	mov	r10,zero
   9361c:	8001c226 	beq	r16,zero,93d28 <___svfiprintf_internal_r+0x10ec>
   93620:	0039883a 	mov	fp,zero
   93624:	0013883a 	mov	r9,zero
   93628:	003ec006 	br	9312c <__alt_data_end+0xfffc326c>
   9362c:	d8c01c17 	ldw	r3,112(sp)
   93630:	d8801b17 	ldw	r2,108(sp)
   93634:	d9001d87 	ldb	r4,118(sp)
   93638:	20000b26 	beq	r4,zero,93668 <___svfiprintf_internal_r+0xa2c>
   9363c:	d9001d84 	addi	r4,sp,118
   93640:	18c00044 	addi	r3,r3,1
   93644:	10800044 	addi	r2,r2,1
   93648:	41000015 	stw	r4,0(r8)
   9364c:	01000044 	movi	r4,1
   93650:	41000115 	stw	r4,4(r8)
   93654:	d8c01c15 	stw	r3,112(sp)
   93658:	d8801b15 	stw	r2,108(sp)
   9365c:	010001c4 	movi	r4,7
   93660:	2080e116 	blt	r4,r2,939e8 <___svfiprintf_internal_r+0xdac>
   93664:	42000204 	addi	r8,r8,8
   93668:	dac02217 	ldw	r11,136(sp)
   9366c:	58000b26 	beq	r11,zero,9369c <___svfiprintf_internal_r+0xa60>
   93670:	d9001d04 	addi	r4,sp,116
   93674:	18c00084 	addi	r3,r3,2
   93678:	10800044 	addi	r2,r2,1
   9367c:	41000015 	stw	r4,0(r8)
   93680:	01000084 	movi	r4,2
   93684:	41000115 	stw	r4,4(r8)
   93688:	d8c01c15 	stw	r3,112(sp)
   9368c:	d8801b15 	stw	r2,108(sp)
   93690:	010001c4 	movi	r4,7
   93694:	2080dd16 	blt	r4,r2,93a0c <___svfiprintf_internal_r+0xdd0>
   93698:	42000204 	addi	r8,r8,8
   9369c:	dac02617 	ldw	r11,152(sp)
   936a0:	01002004 	movi	r4,128
   936a4:	59008426 	beq	r11,r4,938b8 <___svfiprintf_internal_r+0xc7c>
   936a8:	dac02117 	ldw	r11,132(sp)
   936ac:	82e1c83a 	sub	r16,r16,r11
   936b0:	0400270e 	bge	zero,r16,93750 <___svfiprintf_internal_r+0xb14>
   936b4:	01c00404 	movi	r7,16
   936b8:	3c016a0e 	bge	r7,r16,93c64 <___svfiprintf_internal_r+0x1028>
   936bc:	014002b4 	movhi	r5,10
   936c0:	29719104 	addi	r5,r5,-14780
   936c4:	d9402215 	stw	r5,136(sp)
   936c8:	070001c4 	movi	fp,7
   936cc:	00000306 	br	936dc <___svfiprintf_internal_r+0xaa0>
   936d0:	843ffc04 	addi	r16,r16,-16
   936d4:	42000204 	addi	r8,r8,8
   936d8:	3c00130e 	bge	r7,r16,93728 <___svfiprintf_internal_r+0xaec>
   936dc:	18c00404 	addi	r3,r3,16
   936e0:	10800044 	addi	r2,r2,1
   936e4:	45000015 	stw	r20,0(r8)
   936e8:	41c00115 	stw	r7,4(r8)
   936ec:	d8c01c15 	stw	r3,112(sp)
   936f0:	d8801b15 	stw	r2,108(sp)
   936f4:	e0bff60e 	bge	fp,r2,936d0 <__alt_data_end+0xfffc3810>
   936f8:	d9801a04 	addi	r6,sp,104
   936fc:	b80b883a 	mov	r5,r23
   93700:	a809883a 	mov	r4,r21
   93704:	d9c02c15 	stw	r7,176(sp)
   93708:	0092a6c0 	call	92a6c <__ssprint_r>
   9370c:	d9c02c17 	ldw	r7,176(sp)
   93710:	1000581e 	bne	r2,zero,93874 <___svfiprintf_internal_r+0xc38>
   93714:	843ffc04 	addi	r16,r16,-16
   93718:	d8c01c17 	ldw	r3,112(sp)
   9371c:	d8801b17 	ldw	r2,108(sp)
   93720:	d811883a 	mov	r8,sp
   93724:	3c3fed16 	blt	r7,r16,936dc <__alt_data_end+0xfffc381c>
   93728:	dac02217 	ldw	r11,136(sp)
   9372c:	1c07883a 	add	r3,r3,r16
   93730:	10800044 	addi	r2,r2,1
   93734:	42c00015 	stw	r11,0(r8)
   93738:	44000115 	stw	r16,4(r8)
   9373c:	d8c01c15 	stw	r3,112(sp)
   93740:	d8801b15 	stw	r2,108(sp)
   93744:	010001c4 	movi	r4,7
   93748:	20809e16 	blt	r4,r2,939c4 <___svfiprintf_internal_r+0xd88>
   9374c:	42000204 	addi	r8,r8,8
   93750:	dac02117 	ldw	r11,132(sp)
   93754:	10800044 	addi	r2,r2,1
   93758:	44400015 	stw	r17,0(r8)
   9375c:	58c7883a 	add	r3,r11,r3
   93760:	42c00115 	stw	r11,4(r8)
   93764:	d8c01c15 	stw	r3,112(sp)
   93768:	d8801b15 	stw	r2,108(sp)
   9376c:	010001c4 	movi	r4,7
   93770:	20807f16 	blt	r4,r2,93970 <___svfiprintf_internal_r+0xd34>
   93774:	42000204 	addi	r8,r8,8
   93778:	9480010c 	andi	r18,r18,4
   9377c:	90002926 	beq	r18,zero,93824 <___svfiprintf_internal_r+0xbe8>
   93780:	dac02417 	ldw	r11,144(sp)
   93784:	d8802017 	ldw	r2,128(sp)
   93788:	58a1c83a 	sub	r16,r11,r2
   9378c:	0400250e 	bge	zero,r16,93824 <___svfiprintf_internal_r+0xbe8>
   93790:	04400404 	movi	r17,16
   93794:	d8801b17 	ldw	r2,108(sp)
   93798:	8c017c0e 	bge	r17,r16,93d8c <___svfiprintf_internal_r+0x1150>
   9379c:	014002b4 	movhi	r5,10
   937a0:	29719504 	addi	r5,r5,-14764
   937a4:	d9402815 	stw	r5,160(sp)
   937a8:	048001c4 	movi	r18,7
   937ac:	00000306 	br	937bc <___svfiprintf_internal_r+0xb80>
   937b0:	843ffc04 	addi	r16,r16,-16
   937b4:	42000204 	addi	r8,r8,8
   937b8:	8c00110e 	bge	r17,r16,93800 <___svfiprintf_internal_r+0xbc4>
   937bc:	18c00404 	addi	r3,r3,16
   937c0:	10800044 	addi	r2,r2,1
   937c4:	45800015 	stw	r22,0(r8)
   937c8:	44400115 	stw	r17,4(r8)
   937cc:	d8c01c15 	stw	r3,112(sp)
   937d0:	d8801b15 	stw	r2,108(sp)
   937d4:	90bff60e 	bge	r18,r2,937b0 <__alt_data_end+0xfffc38f0>
   937d8:	d9801a04 	addi	r6,sp,104
   937dc:	b80b883a 	mov	r5,r23
   937e0:	a809883a 	mov	r4,r21
   937e4:	0092a6c0 	call	92a6c <__ssprint_r>
   937e8:	1000221e 	bne	r2,zero,93874 <___svfiprintf_internal_r+0xc38>
   937ec:	843ffc04 	addi	r16,r16,-16
   937f0:	d8c01c17 	ldw	r3,112(sp)
   937f4:	d8801b17 	ldw	r2,108(sp)
   937f8:	d811883a 	mov	r8,sp
   937fc:	8c3fef16 	blt	r17,r16,937bc <__alt_data_end+0xfffc38fc>
   93800:	dac02817 	ldw	r11,160(sp)
   93804:	1c07883a 	add	r3,r3,r16
   93808:	10800044 	addi	r2,r2,1
   9380c:	42c00015 	stw	r11,0(r8)
   93810:	44000115 	stw	r16,4(r8)
   93814:	d8c01c15 	stw	r3,112(sp)
   93818:	d8801b15 	stw	r2,108(sp)
   9381c:	010001c4 	movi	r4,7
   93820:	2080aa16 	blt	r4,r2,93acc <___svfiprintf_internal_r+0xe90>
   93824:	d8802417 	ldw	r2,144(sp)
   93828:	dac02017 	ldw	r11,128(sp)
   9382c:	12c0010e 	bge	r2,r11,93834 <___svfiprintf_internal_r+0xbf8>
   93830:	5805883a 	mov	r2,r11
   93834:	dac02517 	ldw	r11,148(sp)
   93838:	5897883a 	add	r11,r11,r2
   9383c:	dac02515 	stw	r11,148(sp)
   93840:	1800531e 	bne	r3,zero,93990 <___svfiprintf_internal_r+0xd54>
   93844:	98800007 	ldb	r2,0(r19)
   93848:	d8001b15 	stw	zero,108(sp)
   9384c:	d811883a 	mov	r8,sp
   93850:	103d231e 	bne	r2,zero,92ce0 <__alt_data_end+0xfffc2e20>
   93854:	9823883a 	mov	r17,r19
   93858:	003d3906 	br	92d40 <__alt_data_end+0xfffc2e80>
   9385c:	d8801c17 	ldw	r2,112(sp)
   93860:	10000426 	beq	r2,zero,93874 <___svfiprintf_internal_r+0xc38>
   93864:	d9402717 	ldw	r5,156(sp)
   93868:	d9002a17 	ldw	r4,168(sp)
   9386c:	d9801a04 	addi	r6,sp,104
   93870:	0092a6c0 	call	92a6c <__ssprint_r>
   93874:	dac02717 	ldw	r11,156(sp)
   93878:	d8802517 	ldw	r2,148(sp)
   9387c:	58c0030b 	ldhu	r3,12(r11)
   93880:	18c0100c 	andi	r3,r3,64
   93884:	1801381e 	bne	r3,zero,93d68 <___svfiprintf_internal_r+0x112c>
   93888:	dfc03717 	ldw	ra,220(sp)
   9388c:	df003617 	ldw	fp,216(sp)
   93890:	ddc03517 	ldw	r23,212(sp)
   93894:	dd803417 	ldw	r22,208(sp)
   93898:	dd403317 	ldw	r21,204(sp)
   9389c:	dd003217 	ldw	r20,200(sp)
   938a0:	dcc03117 	ldw	r19,196(sp)
   938a4:	dc803017 	ldw	r18,192(sp)
   938a8:	dc402f17 	ldw	r17,188(sp)
   938ac:	dc002e17 	ldw	r16,184(sp)
   938b0:	dec03804 	addi	sp,sp,224
   938b4:	f800283a 	ret
   938b8:	dac02417 	ldw	r11,144(sp)
   938bc:	d9002017 	ldw	r4,128(sp)
   938c0:	5939c83a 	sub	fp,r11,r4
   938c4:	073f780e 	bge	zero,fp,936a8 <__alt_data_end+0xfffc37e8>
   938c8:	02400404 	movi	r9,16
   938cc:	4f01370e 	bge	r9,fp,93dac <___svfiprintf_internal_r+0x1170>
   938d0:	02c002b4 	movhi	r11,10
   938d4:	5af19104 	addi	r11,r11,-14780
   938d8:	dac02215 	stw	r11,136(sp)
   938dc:	028001c4 	movi	r10,7
   938e0:	00000306 	br	938f0 <___svfiprintf_internal_r+0xcb4>
   938e4:	e73ffc04 	addi	fp,fp,-16
   938e8:	42000204 	addi	r8,r8,8
   938ec:	4f00150e 	bge	r9,fp,93944 <___svfiprintf_internal_r+0xd08>
   938f0:	18c00404 	addi	r3,r3,16
   938f4:	10800044 	addi	r2,r2,1
   938f8:	45000015 	stw	r20,0(r8)
   938fc:	42400115 	stw	r9,4(r8)
   93900:	d8c01c15 	stw	r3,112(sp)
   93904:	d8801b15 	stw	r2,108(sp)
   93908:	50bff60e 	bge	r10,r2,938e4 <__alt_data_end+0xfffc3a24>
   9390c:	d9801a04 	addi	r6,sp,104
   93910:	b80b883a 	mov	r5,r23
   93914:	a809883a 	mov	r4,r21
   93918:	da402c15 	stw	r9,176(sp)
   9391c:	da802d15 	stw	r10,180(sp)
   93920:	0092a6c0 	call	92a6c <__ssprint_r>
   93924:	da402c17 	ldw	r9,176(sp)
   93928:	da802d17 	ldw	r10,180(sp)
   9392c:	103fd11e 	bne	r2,zero,93874 <__alt_data_end+0xfffc39b4>
   93930:	e73ffc04 	addi	fp,fp,-16
   93934:	d8c01c17 	ldw	r3,112(sp)
   93938:	d8801b17 	ldw	r2,108(sp)
   9393c:	d811883a 	mov	r8,sp
   93940:	4f3feb16 	blt	r9,fp,938f0 <__alt_data_end+0xfffc3a30>
   93944:	dac02217 	ldw	r11,136(sp)
   93948:	1f07883a 	add	r3,r3,fp
   9394c:	10800044 	addi	r2,r2,1
   93950:	42c00015 	stw	r11,0(r8)
   93954:	47000115 	stw	fp,4(r8)
   93958:	d8c01c15 	stw	r3,112(sp)
   9395c:	d8801b15 	stw	r2,108(sp)
   93960:	010001c4 	movi	r4,7
   93964:	2080b616 	blt	r4,r2,93c40 <___svfiprintf_internal_r+0x1004>
   93968:	42000204 	addi	r8,r8,8
   9396c:	003f4e06 	br	936a8 <__alt_data_end+0xfffc37e8>
   93970:	d9801a04 	addi	r6,sp,104
   93974:	b80b883a 	mov	r5,r23
   93978:	a809883a 	mov	r4,r21
   9397c:	0092a6c0 	call	92a6c <__ssprint_r>
   93980:	103fbc1e 	bne	r2,zero,93874 <__alt_data_end+0xfffc39b4>
   93984:	d8c01c17 	ldw	r3,112(sp)
   93988:	d811883a 	mov	r8,sp
   9398c:	003f7a06 	br	93778 <__alt_data_end+0xfffc38b8>
   93990:	d9801a04 	addi	r6,sp,104
   93994:	b80b883a 	mov	r5,r23
   93998:	a809883a 	mov	r4,r21
   9399c:	0092a6c0 	call	92a6c <__ssprint_r>
   939a0:	103fa826 	beq	r2,zero,93844 <__alt_data_end+0xfffc3984>
   939a4:	003fb306 	br	93874 <__alt_data_end+0xfffc39b4>
   939a8:	d9801a04 	addi	r6,sp,104
   939ac:	b80b883a 	mov	r5,r23
   939b0:	a809883a 	mov	r4,r21
   939b4:	0092a6c0 	call	92a6c <__ssprint_r>
   939b8:	103fae1e 	bne	r2,zero,93874 <__alt_data_end+0xfffc39b4>
   939bc:	d811883a 	mov	r8,sp
   939c0:	003cdc06 	br	92d34 <__alt_data_end+0xfffc2e74>
   939c4:	d9801a04 	addi	r6,sp,104
   939c8:	b80b883a 	mov	r5,r23
   939cc:	a809883a 	mov	r4,r21
   939d0:	0092a6c0 	call	92a6c <__ssprint_r>
   939d4:	103fa71e 	bne	r2,zero,93874 <__alt_data_end+0xfffc39b4>
   939d8:	d8c01c17 	ldw	r3,112(sp)
   939dc:	d8801b17 	ldw	r2,108(sp)
   939e0:	d811883a 	mov	r8,sp
   939e4:	003f5a06 	br	93750 <__alt_data_end+0xfffc3890>
   939e8:	d9801a04 	addi	r6,sp,104
   939ec:	b80b883a 	mov	r5,r23
   939f0:	a809883a 	mov	r4,r21
   939f4:	0092a6c0 	call	92a6c <__ssprint_r>
   939f8:	103f9e1e 	bne	r2,zero,93874 <__alt_data_end+0xfffc39b4>
   939fc:	d8c01c17 	ldw	r3,112(sp)
   93a00:	d8801b17 	ldw	r2,108(sp)
   93a04:	d811883a 	mov	r8,sp
   93a08:	003f1706 	br	93668 <__alt_data_end+0xfffc37a8>
   93a0c:	d9801a04 	addi	r6,sp,104
   93a10:	b80b883a 	mov	r5,r23
   93a14:	a809883a 	mov	r4,r21
   93a18:	0092a6c0 	call	92a6c <__ssprint_r>
   93a1c:	103f951e 	bne	r2,zero,93874 <__alt_data_end+0xfffc39b4>
   93a20:	d8c01c17 	ldw	r3,112(sp)
   93a24:	d8801b17 	ldw	r2,108(sp)
   93a28:	d811883a 	mov	r8,sp
   93a2c:	003f1b06 	br	9369c <__alt_data_end+0xfffc37dc>
   93a30:	d8001d85 	stb	zero,118(sp)
   93a34:	80007b16 	blt	r16,zero,93c24 <___svfiprintf_internal_r+0xfe8>
   93a38:	00ffdfc4 	movi	r3,-129
   93a3c:	e244b03a 	or	r2,fp,r9
   93a40:	90e4703a 	and	r18,r18,r3
   93a44:	103d7026 	beq	r2,zero,93008 <__alt_data_end+0xfffc3148>
   93a48:	0015883a 	mov	r10,zero
   93a4c:	003d7206 	br	93018 <__alt_data_end+0xfffc3158>
   93a50:	d9801a04 	addi	r6,sp,104
   93a54:	b80b883a 	mov	r5,r23
   93a58:	a809883a 	mov	r4,r21
   93a5c:	0092a6c0 	call	92a6c <__ssprint_r>
   93a60:	103f841e 	bne	r2,zero,93874 <__alt_data_end+0xfffc39b4>
   93a64:	d8c01c17 	ldw	r3,112(sp)
   93a68:	d8801b17 	ldw	r2,108(sp)
   93a6c:	d811883a 	mov	r8,sp
   93a70:	003ef006 	br	93634 <__alt_data_end+0xfffc3774>
   93a74:	9080100c 	andi	r2,r18,64
   93a78:	d8001d85 	stb	zero,118(sp)
   93a7c:	dac02317 	ldw	r11,140(sp)
   93a80:	10008126 	beq	r2,zero,93c88 <___svfiprintf_internal_r+0x104c>
   93a84:	58800104 	addi	r2,r11,4
   93a88:	5f00000b 	ldhu	fp,0(r11)
   93a8c:	0013883a 	mov	r9,zero
   93a90:	803ec30e 	bge	r16,zero,935a0 <__alt_data_end+0xfffc36e0>
   93a94:	d8802315 	stw	r2,140(sp)
   93a98:	0015883a 	mov	r10,zero
   93a9c:	e244b03a 	or	r2,fp,r9
   93aa0:	103e371e 	bne	r2,zero,93380 <__alt_data_end+0xfffc34c0>
   93aa4:	00800044 	movi	r2,1
   93aa8:	10803fcc 	andi	r2,r2,255
   93aac:	00c00044 	movi	r3,1
   93ab0:	10c06126 	beq	r2,r3,93c38 <___svfiprintf_internal_r+0xffc>
   93ab4:	00c00084 	movi	r3,2
   93ab8:	10fd5526 	beq	r2,r3,93010 <__alt_data_end+0xfffc3150>
   93abc:	003ed806 	br	93620 <__alt_data_end+0xfffc3760>
   93ac0:	d8802315 	stw	r2,140(sp)
   93ac4:	98c00007 	ldb	r3,0(r19)
   93ac8:	003cab06 	br	92d78 <__alt_data_end+0xfffc2eb8>
   93acc:	d9801a04 	addi	r6,sp,104
   93ad0:	b80b883a 	mov	r5,r23
   93ad4:	a809883a 	mov	r4,r21
   93ad8:	0092a6c0 	call	92a6c <__ssprint_r>
   93adc:	103f651e 	bne	r2,zero,93874 <__alt_data_end+0xfffc39b4>
   93ae0:	d8c01c17 	ldw	r3,112(sp)
   93ae4:	003f4f06 	br	93824 <__alt_data_end+0xfffc3964>
   93ae8:	008002b4 	movhi	r2,10
   93aec:	10b12904 	addi	r2,r2,-15196
   93af0:	d8802915 	stw	r2,164(sp)
   93af4:	003d4406 	br	93008 <__alt_data_end+0xfffc3148>
   93af8:	dac02317 	ldw	r11,140(sp)
   93afc:	58800017 	ldw	r2,0(r11)
   93b00:	dac02517 	ldw	r11,148(sp)
   93b04:	5807d7fa 	srai	r3,r11,31
   93b08:	dac02317 	ldw	r11,140(sp)
   93b0c:	10c00115 	stw	r3,4(r2)
   93b10:	5ac00104 	addi	r11,r11,4
   93b14:	dac02315 	stw	r11,140(sp)
   93b18:	dac02517 	ldw	r11,148(sp)
   93b1c:	12c00015 	stw	r11,0(r2)
   93b20:	003c6d06 	br	92cd8 <__alt_data_end+0xfffc2e18>
   93b24:	9080100c 	andi	r2,r18,64
   93b28:	dac02317 	ldw	r11,140(sp)
   93b2c:	103e5326 	beq	r2,zero,9347c <__alt_data_end+0xfffc35bc>
   93b30:	5f00000f 	ldh	fp,0(r11)
   93b34:	5ac00104 	addi	r11,r11,4
   93b38:	dac02315 	stw	r11,140(sp)
   93b3c:	e013d7fa 	srai	r9,fp,31
   93b40:	4805883a 	mov	r2,r9
   93b44:	003e0706 	br	93364 <__alt_data_end+0xfffc34a4>
   93b48:	00800c04 	movi	r2,48
   93b4c:	d8801d05 	stb	r2,116(sp)
   93b50:	d8c01d45 	stb	r3,117(sp)
   93b54:	d8001d85 	stb	zero,118(sp)
   93b58:	90800094 	ori	r2,r18,2
   93b5c:	80008f16 	blt	r16,zero,93d9c <___svfiprintf_internal_r+0x1160>
   93b60:	00bfdfc4 	movi	r2,-129
   93b64:	90a4703a 	and	r18,r18,r2
   93b68:	94800094 	ori	r18,r18,2
   93b6c:	0015883a 	mov	r10,zero
   93b70:	003d2906 	br	93018 <__alt_data_end+0xfffc3158>
   93b74:	98c00007 	ldb	r3,0(r19)
   93b78:	003c7f06 	br	92d78 <__alt_data_end+0xfffc2eb8>
   93b7c:	dac02317 	ldw	r11,140(sp)
   93b80:	0013883a 	mov	r9,zero
   93b84:	5f000017 	ldw	fp,0(r11)
   93b88:	5ac00104 	addi	r11,r11,4
   93b8c:	dac02315 	stw	r11,140(sp)
   93b90:	003d1506 	br	92fe8 <__alt_data_end+0xfffc3128>
   93b94:	9080100c 	andi	r2,r18,64
   93b98:	d8001d85 	stb	zero,118(sp)
   93b9c:	dac02317 	ldw	r11,140(sp)
   93ba0:	10003426 	beq	r2,zero,93c74 <___svfiprintf_internal_r+0x1038>
   93ba4:	58800104 	addi	r2,r11,4
   93ba8:	5f00000b 	ldhu	fp,0(r11)
   93bac:	0013883a 	mov	r9,zero
   93bb0:	803e950e 	bge	r16,zero,93608 <__alt_data_end+0xfffc3748>
   93bb4:	e246b03a 	or	r3,fp,r9
   93bb8:	d8802315 	stw	r2,140(sp)
   93bbc:	183d5a1e 	bne	r3,zero,93128 <__alt_data_end+0xfffc3268>
   93bc0:	0015883a 	mov	r10,zero
   93bc4:	0005883a 	mov	r2,zero
   93bc8:	003fb706 	br	93aa8 <__alt_data_end+0xfffc3be8>
   93bcc:	98c00043 	ldbu	r3,1(r19)
   93bd0:	94800814 	ori	r18,r18,32
   93bd4:	9cc00044 	addi	r19,r19,1
   93bd8:	18c03fcc 	andi	r3,r3,255
   93bdc:	18c0201c 	xori	r3,r3,128
   93be0:	18ffe004 	addi	r3,r3,-128
   93be4:	003c6406 	br	92d78 <__alt_data_end+0xfffc2eb8>
   93be8:	d8c02315 	stw	r3,140(sp)
   93bec:	0015883a 	mov	r10,zero
   93bf0:	003faa06 	br	93a9c <__alt_data_end+0xfffc3bdc>
   93bf4:	dac02317 	ldw	r11,140(sp)
   93bf8:	58800017 	ldw	r2,0(r11)
   93bfc:	5ac00104 	addi	r11,r11,4
   93c00:	dac02315 	stw	r11,140(sp)
   93c04:	dac02517 	ldw	r11,148(sp)
   93c08:	12c00015 	stw	r11,0(r2)
   93c0c:	003c3206 	br	92cd8 <__alt_data_end+0xfffc2e18>
   93c10:	010002b4 	movhi	r4,10
   93c14:	21312904 	addi	r4,r4,-15196
   93c18:	d9002915 	stw	r4,164(sp)
   93c1c:	d8c02315 	stw	r3,140(sp)
   93c20:	1025883a 	mov	r18,r2
   93c24:	e244b03a 	or	r2,fp,r9
   93c28:	103f871e 	bne	r2,zero,93a48 <__alt_data_end+0xfffc3b88>
   93c2c:	0015883a 	mov	r10,zero
   93c30:	00800084 	movi	r2,2
   93c34:	003f9c06 	br	93aa8 <__alt_data_end+0xfffc3be8>
   93c38:	0039883a 	mov	fp,zero
   93c3c:	003e5f06 	br	935bc <__alt_data_end+0xfffc36fc>
   93c40:	d9801a04 	addi	r6,sp,104
   93c44:	b80b883a 	mov	r5,r23
   93c48:	a809883a 	mov	r4,r21
   93c4c:	0092a6c0 	call	92a6c <__ssprint_r>
   93c50:	103f081e 	bne	r2,zero,93874 <__alt_data_end+0xfffc39b4>
   93c54:	d8c01c17 	ldw	r3,112(sp)
   93c58:	d8801b17 	ldw	r2,108(sp)
   93c5c:	d811883a 	mov	r8,sp
   93c60:	003e9106 	br	936a8 <__alt_data_end+0xfffc37e8>
   93c64:	010002b4 	movhi	r4,10
   93c68:	21319104 	addi	r4,r4,-14780
   93c6c:	d9002215 	stw	r4,136(sp)
   93c70:	003ead06 	br	93728 <__alt_data_end+0xfffc3868>
   93c74:	58800104 	addi	r2,r11,4
   93c78:	5f000017 	ldw	fp,0(r11)
   93c7c:	0013883a 	mov	r9,zero
   93c80:	803e610e 	bge	r16,zero,93608 <__alt_data_end+0xfffc3748>
   93c84:	003fcb06 	br	93bb4 <__alt_data_end+0xfffc3cf4>
   93c88:	58800104 	addi	r2,r11,4
   93c8c:	5f000017 	ldw	fp,0(r11)
   93c90:	0013883a 	mov	r9,zero
   93c94:	803e420e 	bge	r16,zero,935a0 <__alt_data_end+0xfffc36e0>
   93c98:	003f7e06 	br	93a94 <__alt_data_end+0xfffc3bd4>
   93c9c:	5f000017 	ldw	fp,0(r11)
   93ca0:	5ac00104 	addi	r11,r11,4
   93ca4:	0013883a 	mov	r9,zero
   93ca8:	dac02315 	stw	r11,140(sp)
   93cac:	003cce06 	br	92fe8 <__alt_data_end+0xfffc3128>
   93cb0:	8809883a 	mov	r4,r17
   93cb4:	da002c15 	stw	r8,176(sp)
   93cb8:	00891b40 	call	891b4 <strlen>
   93cbc:	d8802115 	stw	r2,132(sp)
   93cc0:	da801d83 	ldbu	r10,118(sp)
   93cc4:	df002315 	stw	fp,140(sp)
   93cc8:	0021883a 	mov	r16,zero
   93ccc:	da002c17 	ldw	r8,176(sp)
   93cd0:	003cf606 	br	930ac <__alt_data_end+0xfffc31ec>
   93cd4:	00800184 	movi	r2,6
   93cd8:	1400012e 	bgeu	r2,r16,93ce0 <___svfiprintf_internal_r+0x10a4>
   93cdc:	1021883a 	mov	r16,r2
   93ce0:	dc002115 	stw	r16,132(sp)
   93ce4:	8005883a 	mov	r2,r16
   93ce8:	80003c16 	blt	r16,zero,93ddc <___svfiprintf_internal_r+0x11a0>
   93cec:	044002b4 	movhi	r17,10
   93cf0:	d8802015 	stw	r2,128(sp)
   93cf4:	df002315 	stw	fp,140(sp)
   93cf8:	8c712e04 	addi	r17,r17,-15176
   93cfc:	003d2e06 	br	931b8 <__alt_data_end+0xfffc32f8>
   93d00:	04001004 	movi	r16,64
   93d04:	800b883a 	mov	r5,r16
   93d08:	00905500 	call	90550 <_malloc_r>
   93d0c:	dac02717 	ldw	r11,156(sp)
   93d10:	58800015 	stw	r2,0(r11)
   93d14:	58800415 	stw	r2,16(r11)
   93d18:	10004826 	beq	r2,zero,93e3c <___svfiprintf_internal_r+0x1200>
   93d1c:	dac02717 	ldw	r11,156(sp)
   93d20:	5c000515 	stw	r16,20(r11)
   93d24:	003bd906 	br	92c8c <__alt_data_end+0xfffc2dcc>
   93d28:	9080004c 	andi	r2,r18,1
   93d2c:	0015883a 	mov	r10,zero
   93d30:	10000626 	beq	r2,zero,93d4c <___svfiprintf_internal_r+0x1110>
   93d34:	dac02b17 	ldw	r11,172(sp)
   93d38:	00800c04 	movi	r2,48
   93d3c:	d88019c5 	stb	r2,103(sp)
   93d40:	dac02115 	stw	r11,132(sp)
   93d44:	dc4019c4 	addi	r17,sp,103
   93d48:	003cd806 	br	930ac <__alt_data_end+0xfffc31ec>
   93d4c:	d8002115 	stw	zero,132(sp)
   93d50:	dc401a04 	addi	r17,sp,104
   93d54:	003cd506 	br	930ac <__alt_data_end+0xfffc31ec>
   93d58:	010002b4 	movhi	r4,10
   93d5c:	21319504 	addi	r4,r4,-14764
   93d60:	d9002815 	stw	r4,160(sp)
   93d64:	003d4306 	br	93274 <__alt_data_end+0xfffc33b4>
   93d68:	00bfffc4 	movi	r2,-1
   93d6c:	003ec606 	br	93888 <__alt_data_end+0xfffc39c8>
   93d70:	00800044 	movi	r2,1
   93d74:	10803fcc 	andi	r2,r2,255
   93d78:	00c00044 	movi	r3,1
   93d7c:	10fd8026 	beq	r2,r3,93380 <__alt_data_end+0xfffc34c0>
   93d80:	00c00084 	movi	r3,2
   93d84:	10fca426 	beq	r2,r3,93018 <__alt_data_end+0xfffc3158>
   93d88:	003ce806 	br	9312c <__alt_data_end+0xfffc326c>
   93d8c:	010002b4 	movhi	r4,10
   93d90:	21319504 	addi	r4,r4,-14764
   93d94:	d9002815 	stw	r4,160(sp)
   93d98:	003e9906 	br	93800 <__alt_data_end+0xfffc3940>
   93d9c:	1025883a 	mov	r18,r2
   93da0:	0015883a 	mov	r10,zero
   93da4:	00800084 	movi	r2,2
   93da8:	003ff206 	br	93d74 <__alt_data_end+0xfffc3eb4>
   93dac:	014002b4 	movhi	r5,10
   93db0:	29719104 	addi	r5,r5,-14780
   93db4:	d9402215 	stw	r5,136(sp)
   93db8:	003ee206 	br	93944 <__alt_data_end+0xfffc3a84>
   93dbc:	5827883a 	mov	r19,r11
   93dc0:	0021883a 	mov	r16,zero
   93dc4:	003bed06 	br	92d7c <__alt_data_end+0xfffc2ebc>
   93dc8:	dc002115 	stw	r16,132(sp)
   93dcc:	da801d83 	ldbu	r10,118(sp)
   93dd0:	df002315 	stw	fp,140(sp)
   93dd4:	0021883a 	mov	r16,zero
   93dd8:	003cb406 	br	930ac <__alt_data_end+0xfffc31ec>
   93ddc:	0005883a 	mov	r2,zero
   93de0:	003fc206 	br	93cec <__alt_data_end+0xfffc3e2c>
   93de4:	d8802317 	ldw	r2,140(sp)
   93de8:	98c00043 	ldbu	r3,1(r19)
   93dec:	5827883a 	mov	r19,r11
   93df0:	14000017 	ldw	r16,0(r2)
   93df4:	10800104 	addi	r2,r2,4
   93df8:	d8802315 	stw	r2,140(sp)
   93dfc:	803f760e 	bge	r16,zero,93bd8 <__alt_data_end+0xfffc3d18>
   93e00:	18c03fcc 	andi	r3,r3,255
   93e04:	18c0201c 	xori	r3,r3,128
   93e08:	043fffc4 	movi	r16,-1
   93e0c:	18ffe004 	addi	r3,r3,-128
   93e10:	003bd906 	br	92d78 <__alt_data_end+0xfffc2eb8>
   93e14:	d9c01d85 	stb	r7,118(sp)
   93e18:	003cb606 	br	930f4 <__alt_data_end+0xfffc3234>
   93e1c:	d9c01d85 	stb	r7,118(sp)
   93e20:	003d2106 	br	932a8 <__alt_data_end+0xfffc33e8>
   93e24:	d9c01d85 	stb	r7,118(sp)
   93e28:	003d8e06 	br	93464 <__alt_data_end+0xfffc35a4>
   93e2c:	d9c01d85 	stb	r7,118(sp)
   93e30:	003db306 	br	93500 <__alt_data_end+0xfffc3640>
   93e34:	d9c01d85 	stb	r7,118(sp)
   93e38:	003c8a06 	br	93064 <__alt_data_end+0xfffc31a4>
   93e3c:	dac02a17 	ldw	r11,168(sp)
   93e40:	00800304 	movi	r2,12
   93e44:	58800015 	stw	r2,0(r11)
   93e48:	00bfffc4 	movi	r2,-1
   93e4c:	003e8e06 	br	93888 <__alt_data_end+0xfffc39c8>
   93e50:	d9c01d85 	stb	r7,118(sp)
   93e54:	003dc706 	br	93574 <__alt_data_end+0xfffc36b4>
   93e58:	d9c01d85 	stb	r7,118(sp)
   93e5c:	003ddf06 	br	935dc <__alt_data_end+0xfffc371c>
   93e60:	d9c01d85 	stb	r7,118(sp)
   93e64:	003d3706 	br	93344 <__alt_data_end+0xfffc3484>
   93e68:	d9c01d85 	stb	r7,118(sp)
   93e6c:	003c5406 	br	92fc0 <__alt_data_end+0xfffc3100>
   93e70:	d9c01d85 	stb	r7,118(sp)
   93e74:	003d1d06 	br	932ec <__alt_data_end+0xfffc342c>

00093e78 <__sprint_r.part.0>:
   93e78:	28801917 	ldw	r2,100(r5)
   93e7c:	defff604 	addi	sp,sp,-40
   93e80:	dd400515 	stw	r21,20(sp)
   93e84:	dfc00915 	stw	ra,36(sp)
   93e88:	df000815 	stw	fp,32(sp)
   93e8c:	ddc00715 	stw	r23,28(sp)
   93e90:	dd800615 	stw	r22,24(sp)
   93e94:	dd000415 	stw	r20,16(sp)
   93e98:	dcc00315 	stw	r19,12(sp)
   93e9c:	dc800215 	stw	r18,8(sp)
   93ea0:	dc400115 	stw	r17,4(sp)
   93ea4:	dc000015 	stw	r16,0(sp)
   93ea8:	1088000c 	andi	r2,r2,8192
   93eac:	302b883a 	mov	r21,r6
   93eb0:	10002e26 	beq	r2,zero,93f6c <__sprint_r.part.0+0xf4>
   93eb4:	30800217 	ldw	r2,8(r6)
   93eb8:	35800017 	ldw	r22,0(r6)
   93ebc:	10002926 	beq	r2,zero,93f64 <__sprint_r.part.0+0xec>
   93ec0:	2827883a 	mov	r19,r5
   93ec4:	2029883a 	mov	r20,r4
   93ec8:	b5c00104 	addi	r23,r22,4
   93ecc:	04bfffc4 	movi	r18,-1
   93ed0:	bc400017 	ldw	r17,0(r23)
   93ed4:	b4000017 	ldw	r16,0(r22)
   93ed8:	0039883a 	mov	fp,zero
   93edc:	8822d0ba 	srli	r17,r17,2
   93ee0:	8800031e 	bne	r17,zero,93ef0 <__sprint_r.part.0+0x78>
   93ee4:	00001806 	br	93f48 <__sprint_r.part.0+0xd0>
   93ee8:	84000104 	addi	r16,r16,4
   93eec:	8f001526 	beq	r17,fp,93f44 <__sprint_r.part.0+0xcc>
   93ef0:	81400017 	ldw	r5,0(r16)
   93ef4:	980d883a 	mov	r6,r19
   93ef8:	a009883a 	mov	r4,r20
   93efc:	00959f80 	call	959f8 <_fputwc_r>
   93f00:	e7000044 	addi	fp,fp,1
   93f04:	14bff81e 	bne	r2,r18,93ee8 <__alt_data_end+0xfffc4028>
   93f08:	9005883a 	mov	r2,r18
   93f0c:	a8000215 	stw	zero,8(r21)
   93f10:	a8000115 	stw	zero,4(r21)
   93f14:	dfc00917 	ldw	ra,36(sp)
   93f18:	df000817 	ldw	fp,32(sp)
   93f1c:	ddc00717 	ldw	r23,28(sp)
   93f20:	dd800617 	ldw	r22,24(sp)
   93f24:	dd400517 	ldw	r21,20(sp)
   93f28:	dd000417 	ldw	r20,16(sp)
   93f2c:	dcc00317 	ldw	r19,12(sp)
   93f30:	dc800217 	ldw	r18,8(sp)
   93f34:	dc400117 	ldw	r17,4(sp)
   93f38:	dc000017 	ldw	r16,0(sp)
   93f3c:	dec00a04 	addi	sp,sp,40
   93f40:	f800283a 	ret
   93f44:	a8800217 	ldw	r2,8(r21)
   93f48:	8c63883a 	add	r17,r17,r17
   93f4c:	8c63883a 	add	r17,r17,r17
   93f50:	1445c83a 	sub	r2,r2,r17
   93f54:	a8800215 	stw	r2,8(r21)
   93f58:	b5800204 	addi	r22,r22,8
   93f5c:	bdc00204 	addi	r23,r23,8
   93f60:	103fdb1e 	bne	r2,zero,93ed0 <__alt_data_end+0xfffc4010>
   93f64:	0005883a 	mov	r2,zero
   93f68:	003fe806 	br	93f0c <__alt_data_end+0xfffc404c>
   93f6c:	008fc740 	call	8fc74 <__sfvwrite_r>
   93f70:	003fe606 	br	93f0c <__alt_data_end+0xfffc404c>

00093f74 <__sprint_r>:
   93f74:	30c00217 	ldw	r3,8(r6)
   93f78:	18000126 	beq	r3,zero,93f80 <__sprint_r+0xc>
   93f7c:	0093e781 	jmpi	93e78 <__sprint_r.part.0>
   93f80:	30000115 	stw	zero,4(r6)
   93f84:	0005883a 	mov	r2,zero
   93f88:	f800283a 	ret

00093f8c <___vfiprintf_internal_r>:
   93f8c:	deffc904 	addi	sp,sp,-220
   93f90:	df003515 	stw	fp,212(sp)
   93f94:	dd003115 	stw	r20,196(sp)
   93f98:	dfc03615 	stw	ra,216(sp)
   93f9c:	ddc03415 	stw	r23,208(sp)
   93fa0:	dd803315 	stw	r22,204(sp)
   93fa4:	dd403215 	stw	r21,200(sp)
   93fa8:	dcc03015 	stw	r19,192(sp)
   93fac:	dc802f15 	stw	r18,188(sp)
   93fb0:	dc402e15 	stw	r17,184(sp)
   93fb4:	dc002d15 	stw	r16,180(sp)
   93fb8:	d9002015 	stw	r4,128(sp)
   93fbc:	d9c02215 	stw	r7,136(sp)
   93fc0:	2829883a 	mov	r20,r5
   93fc4:	3039883a 	mov	fp,r6
   93fc8:	20000226 	beq	r4,zero,93fd4 <___vfiprintf_internal_r+0x48>
   93fcc:	20800e17 	ldw	r2,56(r4)
   93fd0:	1000cf26 	beq	r2,zero,94310 <___vfiprintf_internal_r+0x384>
   93fd4:	a080030b 	ldhu	r2,12(r20)
   93fd8:	10c8000c 	andi	r3,r2,8192
   93fdc:	1800061e 	bne	r3,zero,93ff8 <___vfiprintf_internal_r+0x6c>
   93fe0:	a1001917 	ldw	r4,100(r20)
   93fe4:	00f7ffc4 	movi	r3,-8193
   93fe8:	10880014 	ori	r2,r2,8192
   93fec:	20c6703a 	and	r3,r4,r3
   93ff0:	a080030d 	sth	r2,12(r20)
   93ff4:	a0c01915 	stw	r3,100(r20)
   93ff8:	10c0020c 	andi	r3,r2,8
   93ffc:	1800a926 	beq	r3,zero,942a4 <___vfiprintf_internal_r+0x318>
   94000:	a0c00417 	ldw	r3,16(r20)
   94004:	1800a726 	beq	r3,zero,942a4 <___vfiprintf_internal_r+0x318>
   94008:	1080068c 	andi	r2,r2,26
   9400c:	00c00284 	movi	r3,10
   94010:	10c0ac26 	beq	r2,r3,942c4 <___vfiprintf_internal_r+0x338>
   94014:	da801a04 	addi	r10,sp,104
   94018:	da801e15 	stw	r10,120(sp)
   9401c:	d8801e17 	ldw	r2,120(sp)
   94020:	da8019c4 	addi	r10,sp,103
   94024:	058002b4 	movhi	r22,10
   94028:	05c002b4 	movhi	r23,10
   9402c:	da801f15 	stw	r10,124(sp)
   94030:	1295c83a 	sub	r10,r2,r10
   94034:	b5b19d04 	addi	r22,r22,-14732
   94038:	bdf19904 	addi	r23,r23,-14748
   9403c:	dec01a15 	stw	sp,104(sp)
   94040:	d8001c15 	stw	zero,112(sp)
   94044:	d8001b15 	stw	zero,108(sp)
   94048:	d8002615 	stw	zero,152(sp)
   9404c:	d8002315 	stw	zero,140(sp)
   94050:	da802715 	stw	r10,156(sp)
   94054:	d811883a 	mov	r8,sp
   94058:	dd002115 	stw	r20,132(sp)
   9405c:	e021883a 	mov	r16,fp
   94060:	80800007 	ldb	r2,0(r16)
   94064:	1003ea26 	beq	r2,zero,95010 <___vfiprintf_internal_r+0x1084>
   94068:	00c00944 	movi	r3,37
   9406c:	8025883a 	mov	r18,r16
   94070:	10c0021e 	bne	r2,r3,9407c <___vfiprintf_internal_r+0xf0>
   94074:	00001606 	br	940d0 <___vfiprintf_internal_r+0x144>
   94078:	10c00326 	beq	r2,r3,94088 <___vfiprintf_internal_r+0xfc>
   9407c:	94800044 	addi	r18,r18,1
   94080:	90800007 	ldb	r2,0(r18)
   94084:	103ffc1e 	bne	r2,zero,94078 <__alt_data_end+0xfffc41b8>
   94088:	9423c83a 	sub	r17,r18,r16
   9408c:	88001026 	beq	r17,zero,940d0 <___vfiprintf_internal_r+0x144>
   94090:	d8c01c17 	ldw	r3,112(sp)
   94094:	d8801b17 	ldw	r2,108(sp)
   94098:	44000015 	stw	r16,0(r8)
   9409c:	88c7883a 	add	r3,r17,r3
   940a0:	10800044 	addi	r2,r2,1
   940a4:	44400115 	stw	r17,4(r8)
   940a8:	d8c01c15 	stw	r3,112(sp)
   940ac:	d8801b15 	stw	r2,108(sp)
   940b0:	010001c4 	movi	r4,7
   940b4:	2080760e 	bge	r4,r2,94290 <___vfiprintf_internal_r+0x304>
   940b8:	1803821e 	bne	r3,zero,94ec4 <___vfiprintf_internal_r+0xf38>
   940bc:	da802317 	ldw	r10,140(sp)
   940c0:	d8001b15 	stw	zero,108(sp)
   940c4:	d811883a 	mov	r8,sp
   940c8:	5455883a 	add	r10,r10,r17
   940cc:	da802315 	stw	r10,140(sp)
   940d0:	90800007 	ldb	r2,0(r18)
   940d4:	10044626 	beq	r2,zero,951f0 <___vfiprintf_internal_r+0x1264>
   940d8:	90c00047 	ldb	r3,1(r18)
   940dc:	94000044 	addi	r16,r18,1
   940e0:	d8001d85 	stb	zero,118(sp)
   940e4:	0009883a 	mov	r4,zero
   940e8:	000f883a 	mov	r7,zero
   940ec:	027fffc4 	movi	r9,-1
   940f0:	0023883a 	mov	r17,zero
   940f4:	0029883a 	mov	r20,zero
   940f8:	01401604 	movi	r5,88
   940fc:	01800244 	movi	r6,9
   94100:	03400a84 	movi	r13,42
   94104:	03001b04 	movi	r12,108
   94108:	84000044 	addi	r16,r16,1
   9410c:	18bff804 	addi	r2,r3,-32
   94110:	28827336 	bltu	r5,r2,94ae0 <___vfiprintf_internal_r+0xb54>
   94114:	100490ba 	slli	r2,r2,2
   94118:	02800274 	movhi	r10,9
   9411c:	52904b04 	addi	r10,r10,16684
   94120:	1285883a 	add	r2,r2,r10
   94124:	10800017 	ldw	r2,0(r2)
   94128:	1000683a 	jmp	r2
   9412c:	00094814 	movui	zero,9504
   94130:	00094ae0 	cmpeqi	zero,zero,9515
   94134:	00094ae0 	cmpeqi	zero,zero,9515
   94138:	00094834 	movhi	zero,9504
   9413c:	00094ae0 	cmpeqi	zero,zero,9515
   94140:	00094ae0 	cmpeqi	zero,zero,9515
   94144:	00094ae0 	cmpeqi	zero,zero,9515
   94148:	00094ae0 	cmpeqi	zero,zero,9515
   9414c:	00094ae0 	cmpeqi	zero,zero,9515
   94150:	00094ae0 	cmpeqi	zero,zero,9515
   94154:	00094a1c 	xori	zero,zero,9512
   94158:	00094a38 	rdprs	zero,zero,9512
   9415c:	00094ae0 	cmpeqi	zero,zero,9515
   94160:	00094320 	cmpeqi	zero,zero,9484
   94164:	00094a48 	cmpgei	zero,zero,9513
   94168:	00094ae0 	cmpeqi	zero,zero,9515
   9416c:	00094840 	call	9484 <__reset-0x76b7c>
   94170:	0009484c 	andi	zero,zero,9505
   94174:	0009484c 	andi	zero,zero,9505
   94178:	0009484c 	andi	zero,zero,9505
   9417c:	0009484c 	andi	zero,zero,9505
   94180:	0009484c 	andi	zero,zero,9505
   94184:	0009484c 	andi	zero,zero,9505
   94188:	0009484c 	andi	zero,zero,9505
   9418c:	0009484c 	andi	zero,zero,9505
   94190:	0009484c 	andi	zero,zero,9505
   94194:	00094ae0 	cmpeqi	zero,zero,9515
   94198:	00094ae0 	cmpeqi	zero,zero,9515
   9419c:	00094ae0 	cmpeqi	zero,zero,9515
   941a0:	00094ae0 	cmpeqi	zero,zero,9515
   941a4:	00094ae0 	cmpeqi	zero,zero,9515
   941a8:	00094ae0 	cmpeqi	zero,zero,9515
   941ac:	00094ae0 	cmpeqi	zero,zero,9515
   941b0:	00094ae0 	cmpeqi	zero,zero,9515
   941b4:	00094ae0 	cmpeqi	zero,zero,9515
   941b8:	00094ae0 	cmpeqi	zero,zero,9515
   941bc:	00094878 	rdprs	zero,zero,9505
   941c0:	00094ae0 	cmpeqi	zero,zero,9515
   941c4:	00094ae0 	cmpeqi	zero,zero,9515
   941c8:	00094ae0 	cmpeqi	zero,zero,9515
   941cc:	00094ae0 	cmpeqi	zero,zero,9515
   941d0:	00094ae0 	cmpeqi	zero,zero,9515
   941d4:	00094ae0 	cmpeqi	zero,zero,9515
   941d8:	00094ae0 	cmpeqi	zero,zero,9515
   941dc:	00094ae0 	cmpeqi	zero,zero,9515
   941e0:	00094ae0 	cmpeqi	zero,zero,9515
   941e4:	00094ae0 	cmpeqi	zero,zero,9515
   941e8:	000948b0 	cmpltui	zero,zero,9506
   941ec:	00094ae0 	cmpeqi	zero,zero,9515
   941f0:	00094ae0 	cmpeqi	zero,zero,9515
   941f4:	00094ae0 	cmpeqi	zero,zero,9515
   941f8:	00094ae0 	cmpeqi	zero,zero,9515
   941fc:	00094ae0 	cmpeqi	zero,zero,9515
   94200:	00094908 	cmpgei	zero,zero,9508
   94204:	00094ae0 	cmpeqi	zero,zero,9515
   94208:	00094ae0 	cmpeqi	zero,zero,9515
   9420c:	00094978 	rdprs	zero,zero,9509
   94210:	00094ae0 	cmpeqi	zero,zero,9515
   94214:	00094ae0 	cmpeqi	zero,zero,9515
   94218:	00094ae0 	cmpeqi	zero,zero,9515
   9421c:	00094ae0 	cmpeqi	zero,zero,9515
   94220:	00094ae0 	cmpeqi	zero,zero,9515
   94224:	00094ae0 	cmpeqi	zero,zero,9515
   94228:	00094ae0 	cmpeqi	zero,zero,9515
   9422c:	00094ae0 	cmpeqi	zero,zero,9515
   94230:	00094ae0 	cmpeqi	zero,zero,9515
   94234:	00094ae0 	cmpeqi	zero,zero,9515
   94238:	00094724 	muli	zero,zero,9500
   9423c:	00094750 	cmplti	zero,zero,9501
   94240:	00094ae0 	cmpeqi	zero,zero,9515
   94244:	00094ae0 	cmpeqi	zero,zero,9515
   94248:	00094ae0 	cmpeqi	zero,zero,9515
   9424c:	00094a88 	cmpgei	zero,zero,9514
   94250:	00094750 	cmplti	zero,zero,9501
   94254:	00094ae0 	cmpeqi	zero,zero,9515
   94258:	00094ae0 	cmpeqi	zero,zero,9515
   9425c:	000945e4 	muli	zero,zero,9495
   94260:	00094ae0 	cmpeqi	zero,zero,9515
   94264:	000945f4 	movhi	zero,9495
   94268:	00094630 	cmpltui	zero,zero,9496
   9426c:	0009432c 	andhi	zero,zero,9484
   94270:	000945d8 	cmpnei	zero,zero,9495
   94274:	00094ae0 	cmpeqi	zero,zero,9515
   94278:	000949b4 	movhi	zero,9510
   9427c:	00094ae0 	cmpeqi	zero,zero,9515
   94280:	00094a0c 	andi	zero,zero,9512
   94284:	00094ae0 	cmpeqi	zero,zero,9515
   94288:	00094ae0 	cmpeqi	zero,zero,9515
   9428c:	000946d0 	cmplti	zero,zero,9499
   94290:	42000204 	addi	r8,r8,8
   94294:	da802317 	ldw	r10,140(sp)
   94298:	5455883a 	add	r10,r10,r17
   9429c:	da802315 	stw	r10,140(sp)
   942a0:	003f8b06 	br	940d0 <__alt_data_end+0xfffc4210>
   942a4:	d9002017 	ldw	r4,128(sp)
   942a8:	a00b883a 	mov	r5,r20
   942ac:	008d81c0 	call	8d81c <__swsetup_r>
   942b0:	1003b11e 	bne	r2,zero,95178 <___vfiprintf_internal_r+0x11ec>
   942b4:	a080030b 	ldhu	r2,12(r20)
   942b8:	00c00284 	movi	r3,10
   942bc:	1080068c 	andi	r2,r2,26
   942c0:	10ff541e 	bne	r2,r3,94014 <__alt_data_end+0xfffc4154>
   942c4:	a080038f 	ldh	r2,14(r20)
   942c8:	103f5216 	blt	r2,zero,94014 <__alt_data_end+0xfffc4154>
   942cc:	d9c02217 	ldw	r7,136(sp)
   942d0:	d9002017 	ldw	r4,128(sp)
   942d4:	e00d883a 	mov	r6,fp
   942d8:	a00b883a 	mov	r5,r20
   942dc:	00954040 	call	95404 <__sbprintf>
   942e0:	dfc03617 	ldw	ra,216(sp)
   942e4:	df003517 	ldw	fp,212(sp)
   942e8:	ddc03417 	ldw	r23,208(sp)
   942ec:	dd803317 	ldw	r22,204(sp)
   942f0:	dd403217 	ldw	r21,200(sp)
   942f4:	dd003117 	ldw	r20,196(sp)
   942f8:	dcc03017 	ldw	r19,192(sp)
   942fc:	dc802f17 	ldw	r18,188(sp)
   94300:	dc402e17 	ldw	r17,184(sp)
   94304:	dc002d17 	ldw	r16,180(sp)
   94308:	dec03704 	addi	sp,sp,220
   9430c:	f800283a 	ret
   94310:	008f7f00 	call	8f7f0 <__sinit>
   94314:	003f2f06 	br	93fd4 <__alt_data_end+0xfffc4114>
   94318:	0463c83a 	sub	r17,zero,r17
   9431c:	d8802215 	stw	r2,136(sp)
   94320:	a5000114 	ori	r20,r20,4
   94324:	80c00007 	ldb	r3,0(r16)
   94328:	003f7706 	br	94108 <__alt_data_end+0xfffc4248>
   9432c:	00800c04 	movi	r2,48
   94330:	da802217 	ldw	r10,136(sp)
   94334:	d8801d05 	stb	r2,116(sp)
   94338:	00801e04 	movi	r2,120
   9433c:	d8801d45 	stb	r2,117(sp)
   94340:	d8001d85 	stb	zero,118(sp)
   94344:	50c00104 	addi	r3,r10,4
   94348:	54800017 	ldw	r18,0(r10)
   9434c:	0027883a 	mov	r19,zero
   94350:	a0800094 	ori	r2,r20,2
   94354:	48030b16 	blt	r9,zero,94f84 <___vfiprintf_internal_r+0xff8>
   94358:	00bfdfc4 	movi	r2,-129
   9435c:	a096703a 	and	r11,r20,r2
   94360:	d8c02215 	stw	r3,136(sp)
   94364:	5d000094 	ori	r20,r11,2
   94368:	90032b1e 	bne	r18,zero,95018 <___vfiprintf_internal_r+0x108c>
   9436c:	008002b4 	movhi	r2,10
   94370:	10b12904 	addi	r2,r2,-15196
   94374:	d8802615 	stw	r2,152(sp)
   94378:	0039883a 	mov	fp,zero
   9437c:	48017b1e 	bne	r9,zero,9496c <___vfiprintf_internal_r+0x9e0>
   94380:	0013883a 	mov	r9,zero
   94384:	0027883a 	mov	r19,zero
   94388:	dd401a04 	addi	r21,sp,104
   9438c:	4825883a 	mov	r18,r9
   94390:	4cc0010e 	bge	r9,r19,94398 <___vfiprintf_internal_r+0x40c>
   94394:	9825883a 	mov	r18,r19
   94398:	e7003fcc 	andi	fp,fp,255
   9439c:	e700201c 	xori	fp,fp,128
   943a0:	e73fe004 	addi	fp,fp,-128
   943a4:	e0000126 	beq	fp,zero,943ac <___vfiprintf_internal_r+0x420>
   943a8:	94800044 	addi	r18,r18,1
   943ac:	a380008c 	andi	r14,r20,2
   943b0:	70000126 	beq	r14,zero,943b8 <___vfiprintf_internal_r+0x42c>
   943b4:	94800084 	addi	r18,r18,2
   943b8:	a700210c 	andi	fp,r20,132
   943bc:	e001df1e 	bne	fp,zero,94b3c <___vfiprintf_internal_r+0xbb0>
   943c0:	8c87c83a 	sub	r3,r17,r18
   943c4:	00c1dd0e 	bge	zero,r3,94b3c <___vfiprintf_internal_r+0xbb0>
   943c8:	01c00404 	movi	r7,16
   943cc:	d8801c17 	ldw	r2,112(sp)
   943d0:	38c3ad0e 	bge	r7,r3,95288 <___vfiprintf_internal_r+0x12fc>
   943d4:	028002b4 	movhi	r10,10
   943d8:	52b19d04 	addi	r10,r10,-14732
   943dc:	dc002915 	stw	r16,164(sp)
   943e0:	d9801b17 	ldw	r6,108(sp)
   943e4:	da802415 	stw	r10,144(sp)
   943e8:	03c001c4 	movi	r15,7
   943ec:	da402515 	stw	r9,148(sp)
   943f0:	db802815 	stw	r14,160(sp)
   943f4:	1821883a 	mov	r16,r3
   943f8:	00000506 	br	94410 <___vfiprintf_internal_r+0x484>
   943fc:	31400084 	addi	r5,r6,2
   94400:	42000204 	addi	r8,r8,8
   94404:	200d883a 	mov	r6,r4
   94408:	843ffc04 	addi	r16,r16,-16
   9440c:	3c000d0e 	bge	r7,r16,94444 <___vfiprintf_internal_r+0x4b8>
   94410:	10800404 	addi	r2,r2,16
   94414:	31000044 	addi	r4,r6,1
   94418:	45800015 	stw	r22,0(r8)
   9441c:	41c00115 	stw	r7,4(r8)
   94420:	d8801c15 	stw	r2,112(sp)
   94424:	d9001b15 	stw	r4,108(sp)
   94428:	793ff40e 	bge	r15,r4,943fc <__alt_data_end+0xfffc453c>
   9442c:	1001b51e 	bne	r2,zero,94b04 <___vfiprintf_internal_r+0xb78>
   94430:	843ffc04 	addi	r16,r16,-16
   94434:	000d883a 	mov	r6,zero
   94438:	01400044 	movi	r5,1
   9443c:	d811883a 	mov	r8,sp
   94440:	3c3ff316 	blt	r7,r16,94410 <__alt_data_end+0xfffc4550>
   94444:	8007883a 	mov	r3,r16
   94448:	da402517 	ldw	r9,148(sp)
   9444c:	db802817 	ldw	r14,160(sp)
   94450:	dc002917 	ldw	r16,164(sp)
   94454:	da802417 	ldw	r10,144(sp)
   94458:	1885883a 	add	r2,r3,r2
   9445c:	40c00115 	stw	r3,4(r8)
   94460:	42800015 	stw	r10,0(r8)
   94464:	d8801c15 	stw	r2,112(sp)
   94468:	d9401b15 	stw	r5,108(sp)
   9446c:	00c001c4 	movi	r3,7
   94470:	19426016 	blt	r3,r5,94df4 <___vfiprintf_internal_r+0xe68>
   94474:	d8c01d87 	ldb	r3,118(sp)
   94478:	42000204 	addi	r8,r8,8
   9447c:	29000044 	addi	r4,r5,1
   94480:	1801b31e 	bne	r3,zero,94b50 <___vfiprintf_internal_r+0xbc4>
   94484:	7001c026 	beq	r14,zero,94b88 <___vfiprintf_internal_r+0xbfc>
   94488:	d8c01d04 	addi	r3,sp,116
   9448c:	10800084 	addi	r2,r2,2
   94490:	40c00015 	stw	r3,0(r8)
   94494:	00c00084 	movi	r3,2
   94498:	40c00115 	stw	r3,4(r8)
   9449c:	d8801c15 	stw	r2,112(sp)
   944a0:	d9001b15 	stw	r4,108(sp)
   944a4:	00c001c4 	movi	r3,7
   944a8:	1902650e 	bge	r3,r4,94e40 <___vfiprintf_internal_r+0xeb4>
   944ac:	10029a1e 	bne	r2,zero,94f18 <___vfiprintf_internal_r+0xf8c>
   944b0:	00c02004 	movi	r3,128
   944b4:	01000044 	movi	r4,1
   944b8:	000b883a 	mov	r5,zero
   944bc:	d811883a 	mov	r8,sp
   944c0:	e0c1b31e 	bne	fp,r3,94b90 <___vfiprintf_internal_r+0xc04>
   944c4:	8cb9c83a 	sub	fp,r17,r18
   944c8:	0701b10e 	bge	zero,fp,94b90 <___vfiprintf_internal_r+0xc04>
   944cc:	01c00404 	movi	r7,16
   944d0:	3f03890e 	bge	r7,fp,952f8 <___vfiprintf_internal_r+0x136c>
   944d4:	00c002b4 	movhi	r3,10
   944d8:	18f19904 	addi	r3,r3,-14748
   944dc:	d8c02415 	stw	r3,144(sp)
   944e0:	8007883a 	mov	r3,r16
   944e4:	034001c4 	movi	r13,7
   944e8:	e021883a 	mov	r16,fp
   944ec:	da402515 	stw	r9,148(sp)
   944f0:	1839883a 	mov	fp,r3
   944f4:	00000506 	br	9450c <___vfiprintf_internal_r+0x580>
   944f8:	29800084 	addi	r6,r5,2
   944fc:	42000204 	addi	r8,r8,8
   94500:	180b883a 	mov	r5,r3
   94504:	843ffc04 	addi	r16,r16,-16
   94508:	3c000d0e 	bge	r7,r16,94540 <___vfiprintf_internal_r+0x5b4>
   9450c:	10800404 	addi	r2,r2,16
   94510:	28c00044 	addi	r3,r5,1
   94514:	45c00015 	stw	r23,0(r8)
   94518:	41c00115 	stw	r7,4(r8)
   9451c:	d8801c15 	stw	r2,112(sp)
   94520:	d8c01b15 	stw	r3,108(sp)
   94524:	68fff40e 	bge	r13,r3,944f8 <__alt_data_end+0xfffc4638>
   94528:	1002241e 	bne	r2,zero,94dbc <___vfiprintf_internal_r+0xe30>
   9452c:	843ffc04 	addi	r16,r16,-16
   94530:	01800044 	movi	r6,1
   94534:	000b883a 	mov	r5,zero
   94538:	d811883a 	mov	r8,sp
   9453c:	3c3ff316 	blt	r7,r16,9450c <__alt_data_end+0xfffc464c>
   94540:	da402517 	ldw	r9,148(sp)
   94544:	e007883a 	mov	r3,fp
   94548:	8039883a 	mov	fp,r16
   9454c:	1821883a 	mov	r16,r3
   94550:	d8c02417 	ldw	r3,144(sp)
   94554:	1705883a 	add	r2,r2,fp
   94558:	47000115 	stw	fp,4(r8)
   9455c:	40c00015 	stw	r3,0(r8)
   94560:	d8801c15 	stw	r2,112(sp)
   94564:	d9801b15 	stw	r6,108(sp)
   94568:	00c001c4 	movi	r3,7
   9456c:	19827616 	blt	r3,r6,94f48 <___vfiprintf_internal_r+0xfbc>
   94570:	4cf9c83a 	sub	fp,r9,r19
   94574:	42000204 	addi	r8,r8,8
   94578:	31000044 	addi	r4,r6,1
   9457c:	300b883a 	mov	r5,r6
   94580:	07018516 	blt	zero,fp,94b98 <___vfiprintf_internal_r+0xc0c>
   94584:	9885883a 	add	r2,r19,r2
   94588:	45400015 	stw	r21,0(r8)
   9458c:	44c00115 	stw	r19,4(r8)
   94590:	d8801c15 	stw	r2,112(sp)
   94594:	d9001b15 	stw	r4,108(sp)
   94598:	00c001c4 	movi	r3,7
   9459c:	1901dd0e 	bge	r3,r4,94d14 <___vfiprintf_internal_r+0xd88>
   945a0:	1002401e 	bne	r2,zero,94ea4 <___vfiprintf_internal_r+0xf18>
   945a4:	d8001b15 	stw	zero,108(sp)
   945a8:	a2c0010c 	andi	r11,r20,4
   945ac:	58000226 	beq	r11,zero,945b8 <___vfiprintf_internal_r+0x62c>
   945b0:	8ca7c83a 	sub	r19,r17,r18
   945b4:	04c2f216 	blt	zero,r19,95180 <___vfiprintf_internal_r+0x11f4>
   945b8:	8c80010e 	bge	r17,r18,945c0 <___vfiprintf_internal_r+0x634>
   945bc:	9023883a 	mov	r17,r18
   945c0:	da802317 	ldw	r10,140(sp)
   945c4:	5455883a 	add	r10,r10,r17
   945c8:	da802315 	stw	r10,140(sp)
   945cc:	d8001b15 	stw	zero,108(sp)
   945d0:	d811883a 	mov	r8,sp
   945d4:	003ea206 	br	94060 <__alt_data_end+0xfffc41a0>
   945d8:	a5000814 	ori	r20,r20,32
   945dc:	80c00007 	ldb	r3,0(r16)
   945e0:	003ec906 	br	94108 <__alt_data_end+0xfffc4248>
   945e4:	80c00007 	ldb	r3,0(r16)
   945e8:	1b030926 	beq	r3,r12,95210 <___vfiprintf_internal_r+0x1284>
   945ec:	a5000414 	ori	r20,r20,16
   945f0:	003ec506 	br	94108 <__alt_data_end+0xfffc4248>
   945f4:	21003fcc 	andi	r4,r4,255
   945f8:	20035e1e 	bne	r4,zero,95374 <___vfiprintf_internal_r+0x13e8>
   945fc:	a080080c 	andi	r2,r20,32
   94600:	1002a526 	beq	r2,zero,95098 <___vfiprintf_internal_r+0x110c>
   94604:	da802217 	ldw	r10,136(sp)
   94608:	50800017 	ldw	r2,0(r10)
   9460c:	da802317 	ldw	r10,140(sp)
   94610:	5007d7fa 	srai	r3,r10,31
   94614:	da802217 	ldw	r10,136(sp)
   94618:	10c00115 	stw	r3,4(r2)
   9461c:	52800104 	addi	r10,r10,4
   94620:	da802215 	stw	r10,136(sp)
   94624:	da802317 	ldw	r10,140(sp)
   94628:	12800015 	stw	r10,0(r2)
   9462c:	003e8c06 	br	94060 <__alt_data_end+0xfffc41a0>
   94630:	21003fcc 	andi	r4,r4,255
   94634:	2003511e 	bne	r4,zero,9537c <___vfiprintf_internal_r+0x13f0>
   94638:	a080080c 	andi	r2,r20,32
   9463c:	1000a126 	beq	r2,zero,948c4 <___vfiprintf_internal_r+0x938>
   94640:	da802217 	ldw	r10,136(sp)
   94644:	d8001d85 	stb	zero,118(sp)
   94648:	50800204 	addi	r2,r10,8
   9464c:	54800017 	ldw	r18,0(r10)
   94650:	54c00117 	ldw	r19,4(r10)
   94654:	4802b416 	blt	r9,zero,95128 <___vfiprintf_internal_r+0x119c>
   94658:	013fdfc4 	movi	r4,-129
   9465c:	94c6b03a 	or	r3,r18,r19
   94660:	d8802215 	stw	r2,136(sp)
   94664:	a128703a 	and	r20,r20,r4
   94668:	1800a226 	beq	r3,zero,948f4 <___vfiprintf_internal_r+0x968>
   9466c:	0039883a 	mov	fp,zero
   94670:	dd401a04 	addi	r21,sp,104
   94674:	9006d0fa 	srli	r3,r18,3
   94678:	9808977a 	slli	r4,r19,29
   9467c:	9826d0fa 	srli	r19,r19,3
   94680:	948001cc 	andi	r18,r18,7
   94684:	90800c04 	addi	r2,r18,48
   94688:	ad7fffc4 	addi	r21,r21,-1
   9468c:	20e4b03a 	or	r18,r4,r3
   94690:	a8800005 	stb	r2,0(r21)
   94694:	94c6b03a 	or	r3,r18,r19
   94698:	183ff61e 	bne	r3,zero,94674 <__alt_data_end+0xfffc47b4>
   9469c:	a0c0004c 	andi	r3,r20,1
   946a0:	18005926 	beq	r3,zero,94808 <___vfiprintf_internal_r+0x87c>
   946a4:	10803fcc 	andi	r2,r2,255
   946a8:	1080201c 	xori	r2,r2,128
   946ac:	10bfe004 	addi	r2,r2,-128
   946b0:	00c00c04 	movi	r3,48
   946b4:	10c05426 	beq	r2,r3,94808 <___vfiprintf_internal_r+0x87c>
   946b8:	da801e17 	ldw	r10,120(sp)
   946bc:	a8bfffc4 	addi	r2,r21,-1
   946c0:	a8ffffc5 	stb	r3,-1(r21)
   946c4:	50a7c83a 	sub	r19,r10,r2
   946c8:	102b883a 	mov	r21,r2
   946cc:	003f2f06 	br	9438c <__alt_data_end+0xfffc44cc>
   946d0:	21003fcc 	andi	r4,r4,255
   946d4:	2003421e 	bne	r4,zero,953e0 <___vfiprintf_internal_r+0x1454>
   946d8:	008002b4 	movhi	r2,10
   946dc:	10b12904 	addi	r2,r2,-15196
   946e0:	d8802615 	stw	r2,152(sp)
   946e4:	a080080c 	andi	r2,r20,32
   946e8:	1000aa26 	beq	r2,zero,94994 <___vfiprintf_internal_r+0xa08>
   946ec:	da802217 	ldw	r10,136(sp)
   946f0:	54800017 	ldw	r18,0(r10)
   946f4:	54c00117 	ldw	r19,4(r10)
   946f8:	52800204 	addi	r10,r10,8
   946fc:	da802215 	stw	r10,136(sp)
   94700:	a080004c 	andi	r2,r20,1
   94704:	1001d226 	beq	r2,zero,94e50 <___vfiprintf_internal_r+0xec4>
   94708:	94c4b03a 	or	r2,r18,r19
   9470c:	1002351e 	bne	r2,zero,94fe4 <___vfiprintf_internal_r+0x1058>
   94710:	d8001d85 	stb	zero,118(sp)
   94714:	48022216 	blt	r9,zero,94fa0 <___vfiprintf_internal_r+0x1014>
   94718:	00bfdfc4 	movi	r2,-129
   9471c:	a0a8703a 	and	r20,r20,r2
   94720:	003f1506 	br	94378 <__alt_data_end+0xfffc44b8>
   94724:	da802217 	ldw	r10,136(sp)
   94728:	04800044 	movi	r18,1
   9472c:	d8001d85 	stb	zero,118(sp)
   94730:	50800017 	ldw	r2,0(r10)
   94734:	52800104 	addi	r10,r10,4
   94738:	da802215 	stw	r10,136(sp)
   9473c:	d8801005 	stb	r2,64(sp)
   94740:	9027883a 	mov	r19,r18
   94744:	dd401004 	addi	r21,sp,64
   94748:	0013883a 	mov	r9,zero
   9474c:	003f1706 	br	943ac <__alt_data_end+0xfffc44ec>
   94750:	21003fcc 	andi	r4,r4,255
   94754:	2003201e 	bne	r4,zero,953d8 <___vfiprintf_internal_r+0x144c>
   94758:	a080080c 	andi	r2,r20,32
   9475c:	10004b26 	beq	r2,zero,9488c <___vfiprintf_internal_r+0x900>
   94760:	da802217 	ldw	r10,136(sp)
   94764:	50800117 	ldw	r2,4(r10)
   94768:	54800017 	ldw	r18,0(r10)
   9476c:	52800204 	addi	r10,r10,8
   94770:	da802215 	stw	r10,136(sp)
   94774:	1027883a 	mov	r19,r2
   94778:	10022c16 	blt	r2,zero,9502c <___vfiprintf_internal_r+0x10a0>
   9477c:	df001d83 	ldbu	fp,118(sp)
   94780:	48007216 	blt	r9,zero,9494c <___vfiprintf_internal_r+0x9c0>
   94784:	00ffdfc4 	movi	r3,-129
   94788:	94c4b03a 	or	r2,r18,r19
   9478c:	a0e8703a 	and	r20,r20,r3
   94790:	1000cc26 	beq	r2,zero,94ac4 <___vfiprintf_internal_r+0xb38>
   94794:	98021026 	beq	r19,zero,94fd8 <___vfiprintf_internal_r+0x104c>
   94798:	dc402415 	stw	r17,144(sp)
   9479c:	dc002515 	stw	r16,148(sp)
   947a0:	9823883a 	mov	r17,r19
   947a4:	9021883a 	mov	r16,r18
   947a8:	dd401a04 	addi	r21,sp,104
   947ac:	4825883a 	mov	r18,r9
   947b0:	4027883a 	mov	r19,r8
   947b4:	8009883a 	mov	r4,r16
   947b8:	880b883a 	mov	r5,r17
   947bc:	01800284 	movi	r6,10
   947c0:	000f883a 	mov	r7,zero
   947c4:	009636c0 	call	9636c <__umoddi3>
   947c8:	10800c04 	addi	r2,r2,48
   947cc:	ad7fffc4 	addi	r21,r21,-1
   947d0:	8009883a 	mov	r4,r16
   947d4:	880b883a 	mov	r5,r17
   947d8:	a8800005 	stb	r2,0(r21)
   947dc:	01800284 	movi	r6,10
   947e0:	000f883a 	mov	r7,zero
   947e4:	0095df40 	call	95df4 <__udivdi3>
   947e8:	1021883a 	mov	r16,r2
   947ec:	10c4b03a 	or	r2,r2,r3
   947f0:	1823883a 	mov	r17,r3
   947f4:	103fef1e 	bne	r2,zero,947b4 <__alt_data_end+0xfffc48f4>
   947f8:	dc402417 	ldw	r17,144(sp)
   947fc:	dc002517 	ldw	r16,148(sp)
   94800:	9013883a 	mov	r9,r18
   94804:	9811883a 	mov	r8,r19
   94808:	da801e17 	ldw	r10,120(sp)
   9480c:	5567c83a 	sub	r19,r10,r21
   94810:	003ede06 	br	9438c <__alt_data_end+0xfffc44cc>
   94814:	38803fcc 	andi	r2,r7,255
   94818:	1080201c 	xori	r2,r2,128
   9481c:	10bfe004 	addi	r2,r2,-128
   94820:	1002371e 	bne	r2,zero,95100 <___vfiprintf_internal_r+0x1174>
   94824:	01000044 	movi	r4,1
   94828:	01c00804 	movi	r7,32
   9482c:	80c00007 	ldb	r3,0(r16)
   94830:	003e3506 	br	94108 <__alt_data_end+0xfffc4248>
   94834:	a5000054 	ori	r20,r20,1
   94838:	80c00007 	ldb	r3,0(r16)
   9483c:	003e3206 	br	94108 <__alt_data_end+0xfffc4248>
   94840:	a5002014 	ori	r20,r20,128
   94844:	80c00007 	ldb	r3,0(r16)
   94848:	003e2f06 	br	94108 <__alt_data_end+0xfffc4248>
   9484c:	8015883a 	mov	r10,r16
   94850:	0023883a 	mov	r17,zero
   94854:	18bff404 	addi	r2,r3,-48
   94858:	50c00007 	ldb	r3,0(r10)
   9485c:	8c4002a4 	muli	r17,r17,10
   94860:	84000044 	addi	r16,r16,1
   94864:	8015883a 	mov	r10,r16
   94868:	1463883a 	add	r17,r2,r17
   9486c:	18bff404 	addi	r2,r3,-48
   94870:	30bff92e 	bgeu	r6,r2,94858 <__alt_data_end+0xfffc4998>
   94874:	003e2506 	br	9410c <__alt_data_end+0xfffc424c>
   94878:	21003fcc 	andi	r4,r4,255
   9487c:	2002d41e 	bne	r4,zero,953d0 <___vfiprintf_internal_r+0x1444>
   94880:	a5000414 	ori	r20,r20,16
   94884:	a080080c 	andi	r2,r20,32
   94888:	103fb51e 	bne	r2,zero,94760 <__alt_data_end+0xfffc48a0>
   9488c:	a080040c 	andi	r2,r20,16
   94890:	1001f826 	beq	r2,zero,95074 <___vfiprintf_internal_r+0x10e8>
   94894:	da802217 	ldw	r10,136(sp)
   94898:	54800017 	ldw	r18,0(r10)
   9489c:	52800104 	addi	r10,r10,4
   948a0:	da802215 	stw	r10,136(sp)
   948a4:	9027d7fa 	srai	r19,r18,31
   948a8:	9805883a 	mov	r2,r19
   948ac:	003fb206 	br	94778 <__alt_data_end+0xfffc48b8>
   948b0:	21003fcc 	andi	r4,r4,255
   948b4:	2002c41e 	bne	r4,zero,953c8 <___vfiprintf_internal_r+0x143c>
   948b8:	a5000414 	ori	r20,r20,16
   948bc:	a080080c 	andi	r2,r20,32
   948c0:	103f5f1e 	bne	r2,zero,94640 <__alt_data_end+0xfffc4780>
   948c4:	a080040c 	andi	r2,r20,16
   948c8:	10020f26 	beq	r2,zero,95108 <___vfiprintf_internal_r+0x117c>
   948cc:	da802217 	ldw	r10,136(sp)
   948d0:	d8001d85 	stb	zero,118(sp)
   948d4:	0027883a 	mov	r19,zero
   948d8:	50800104 	addi	r2,r10,4
   948dc:	54800017 	ldw	r18,0(r10)
   948e0:	48021116 	blt	r9,zero,95128 <___vfiprintf_internal_r+0x119c>
   948e4:	00ffdfc4 	movi	r3,-129
   948e8:	d8802215 	stw	r2,136(sp)
   948ec:	a0e8703a 	and	r20,r20,r3
   948f0:	903f5e1e 	bne	r18,zero,9466c <__alt_data_end+0xfffc47ac>
   948f4:	0039883a 	mov	fp,zero
   948f8:	4802a626 	beq	r9,zero,95394 <___vfiprintf_internal_r+0x1408>
   948fc:	0025883a 	mov	r18,zero
   94900:	0027883a 	mov	r19,zero
   94904:	003f5a06 	br	94670 <__alt_data_end+0xfffc47b0>
   94908:	21003fcc 	andi	r4,r4,255
   9490c:	20029f1e 	bne	r4,zero,9538c <___vfiprintf_internal_r+0x1400>
   94910:	a5000414 	ori	r20,r20,16
   94914:	a080080c 	andi	r2,r20,32
   94918:	10005e1e 	bne	r2,zero,94a94 <___vfiprintf_internal_r+0xb08>
   9491c:	a080040c 	andi	r2,r20,16
   94920:	1001a21e 	bne	r2,zero,94fac <___vfiprintf_internal_r+0x1020>
   94924:	a080100c 	andi	r2,r20,64
   94928:	d8001d85 	stb	zero,118(sp)
   9492c:	da802217 	ldw	r10,136(sp)
   94930:	1002231e 	bne	r2,zero,951c0 <___vfiprintf_internal_r+0x1234>
   94934:	50800104 	addi	r2,r10,4
   94938:	54800017 	ldw	r18,0(r10)
   9493c:	0027883a 	mov	r19,zero
   94940:	4801a00e 	bge	r9,zero,94fc4 <___vfiprintf_internal_r+0x1038>
   94944:	d8802215 	stw	r2,136(sp)
   94948:	0039883a 	mov	fp,zero
   9494c:	94c4b03a 	or	r2,r18,r19
   94950:	103f901e 	bne	r2,zero,94794 <__alt_data_end+0xfffc48d4>
   94954:	00800044 	movi	r2,1
   94958:	10803fcc 	andi	r2,r2,255
   9495c:	00c00044 	movi	r3,1
   94960:	10c05926 	beq	r2,r3,94ac8 <___vfiprintf_internal_r+0xb3c>
   94964:	00c00084 	movi	r3,2
   94968:	10ffe41e 	bne	r2,r3,948fc <__alt_data_end+0xfffc4a3c>
   9496c:	0025883a 	mov	r18,zero
   94970:	0027883a 	mov	r19,zero
   94974:	00013d06 	br	94e6c <___vfiprintf_internal_r+0xee0>
   94978:	21003fcc 	andi	r4,r4,255
   9497c:	2002811e 	bne	r4,zero,95384 <___vfiprintf_internal_r+0x13f8>
   94980:	008002b4 	movhi	r2,10
   94984:	10b12404 	addi	r2,r2,-15216
   94988:	d8802615 	stw	r2,152(sp)
   9498c:	a080080c 	andi	r2,r20,32
   94990:	103f561e 	bne	r2,zero,946ec <__alt_data_end+0xfffc482c>
   94994:	a080040c 	andi	r2,r20,16
   94998:	1001d126 	beq	r2,zero,950e0 <___vfiprintf_internal_r+0x1154>
   9499c:	da802217 	ldw	r10,136(sp)
   949a0:	0027883a 	mov	r19,zero
   949a4:	54800017 	ldw	r18,0(r10)
   949a8:	52800104 	addi	r10,r10,4
   949ac:	da802215 	stw	r10,136(sp)
   949b0:	003f5306 	br	94700 <__alt_data_end+0xfffc4840>
   949b4:	da802217 	ldw	r10,136(sp)
   949b8:	d8001d85 	stb	zero,118(sp)
   949bc:	55400017 	ldw	r21,0(r10)
   949c0:	50c00104 	addi	r3,r10,4
   949c4:	a8024226 	beq	r21,zero,952d0 <___vfiprintf_internal_r+0x1344>
   949c8:	48021816 	blt	r9,zero,9522c <___vfiprintf_internal_r+0x12a0>
   949cc:	480d883a 	mov	r6,r9
   949d0:	000b883a 	mov	r5,zero
   949d4:	a809883a 	mov	r4,r21
   949d8:	d8c02a15 	stw	r3,168(sp)
   949dc:	da002b15 	stw	r8,172(sp)
   949e0:	da402c15 	stw	r9,176(sp)
   949e4:	0090d5c0 	call	90d5c <memchr>
   949e8:	d8c02a17 	ldw	r3,168(sp)
   949ec:	da002b17 	ldw	r8,172(sp)
   949f0:	da402c17 	ldw	r9,176(sp)
   949f4:	10024826 	beq	r2,zero,95318 <___vfiprintf_internal_r+0x138c>
   949f8:	1567c83a 	sub	r19,r2,r21
   949fc:	df001d83 	ldbu	fp,118(sp)
   94a00:	d8c02215 	stw	r3,136(sp)
   94a04:	0013883a 	mov	r9,zero
   94a08:	003e6006 	br	9438c <__alt_data_end+0xfffc44cc>
   94a0c:	21003fcc 	andi	r4,r4,255
   94a10:	203fc026 	beq	r4,zero,94914 <__alt_data_end+0xfffc4a54>
   94a14:	d9c01d85 	stb	r7,118(sp)
   94a18:	003fbe06 	br	94914 <__alt_data_end+0xfffc4a54>
   94a1c:	da802217 	ldw	r10,136(sp)
   94a20:	54400017 	ldw	r17,0(r10)
   94a24:	50800104 	addi	r2,r10,4
   94a28:	883e3b16 	blt	r17,zero,94318 <__alt_data_end+0xfffc4458>
   94a2c:	d8802215 	stw	r2,136(sp)
   94a30:	80c00007 	ldb	r3,0(r16)
   94a34:	003db406 	br	94108 <__alt_data_end+0xfffc4248>
   94a38:	01000044 	movi	r4,1
   94a3c:	01c00ac4 	movi	r7,43
   94a40:	80c00007 	ldb	r3,0(r16)
   94a44:	003db006 	br	94108 <__alt_data_end+0xfffc4248>
   94a48:	80c00007 	ldb	r3,0(r16)
   94a4c:	82800044 	addi	r10,r16,1
   94a50:	1b423c26 	beq	r3,r13,95344 <___vfiprintf_internal_r+0x13b8>
   94a54:	18bff404 	addi	r2,r3,-48
   94a58:	0013883a 	mov	r9,zero
   94a5c:	30822b36 	bltu	r6,r2,9530c <___vfiprintf_internal_r+0x1380>
   94a60:	50c00007 	ldb	r3,0(r10)
   94a64:	4a4002a4 	muli	r9,r9,10
   94a68:	54000044 	addi	r16,r10,1
   94a6c:	8015883a 	mov	r10,r16
   94a70:	4893883a 	add	r9,r9,r2
   94a74:	18bff404 	addi	r2,r3,-48
   94a78:	30bff92e 	bgeu	r6,r2,94a60 <__alt_data_end+0xfffc4ba0>
   94a7c:	483da30e 	bge	r9,zero,9410c <__alt_data_end+0xfffc424c>
   94a80:	027fffc4 	movi	r9,-1
   94a84:	003da106 	br	9410c <__alt_data_end+0xfffc424c>
   94a88:	a5001014 	ori	r20,r20,64
   94a8c:	80c00007 	ldb	r3,0(r16)
   94a90:	003d9d06 	br	94108 <__alt_data_end+0xfffc4248>
   94a94:	da802217 	ldw	r10,136(sp)
   94a98:	d8001d85 	stb	zero,118(sp)
   94a9c:	50c00204 	addi	r3,r10,8
   94aa0:	54800017 	ldw	r18,0(r10)
   94aa4:	54c00117 	ldw	r19,4(r10)
   94aa8:	4801ca16 	blt	r9,zero,951d4 <___vfiprintf_internal_r+0x1248>
   94aac:	013fdfc4 	movi	r4,-129
   94ab0:	94c4b03a 	or	r2,r18,r19
   94ab4:	d8c02215 	stw	r3,136(sp)
   94ab8:	a128703a 	and	r20,r20,r4
   94abc:	0039883a 	mov	fp,zero
   94ac0:	103f341e 	bne	r2,zero,94794 <__alt_data_end+0xfffc48d4>
   94ac4:	483e2e26 	beq	r9,zero,94380 <__alt_data_end+0xfffc44c0>
   94ac8:	0025883a 	mov	r18,zero
   94acc:	94800c04 	addi	r18,r18,48
   94ad0:	dc8019c5 	stb	r18,103(sp)
   94ad4:	dcc02717 	ldw	r19,156(sp)
   94ad8:	dd4019c4 	addi	r21,sp,103
   94adc:	003e2b06 	br	9438c <__alt_data_end+0xfffc44cc>
   94ae0:	21003fcc 	andi	r4,r4,255
   94ae4:	2002361e 	bne	r4,zero,953c0 <___vfiprintf_internal_r+0x1434>
   94ae8:	1801c126 	beq	r3,zero,951f0 <___vfiprintf_internal_r+0x1264>
   94aec:	04800044 	movi	r18,1
   94af0:	d8c01005 	stb	r3,64(sp)
   94af4:	d8001d85 	stb	zero,118(sp)
   94af8:	9027883a 	mov	r19,r18
   94afc:	dd401004 	addi	r21,sp,64
   94b00:	003f1106 	br	94748 <__alt_data_end+0xfffc4888>
   94b04:	d9402117 	ldw	r5,132(sp)
   94b08:	d9002017 	ldw	r4,128(sp)
   94b0c:	d9801a04 	addi	r6,sp,104
   94b10:	d9c02b15 	stw	r7,172(sp)
   94b14:	dbc02a15 	stw	r15,168(sp)
   94b18:	0093e780 	call	93e78 <__sprint_r.part.0>
   94b1c:	d9c02b17 	ldw	r7,172(sp)
   94b20:	dbc02a17 	ldw	r15,168(sp)
   94b24:	10006d1e 	bne	r2,zero,94cdc <___vfiprintf_internal_r+0xd50>
   94b28:	d9801b17 	ldw	r6,108(sp)
   94b2c:	d8801c17 	ldw	r2,112(sp)
   94b30:	d811883a 	mov	r8,sp
   94b34:	31400044 	addi	r5,r6,1
   94b38:	003e3306 	br	94408 <__alt_data_end+0xfffc4548>
   94b3c:	d9401b17 	ldw	r5,108(sp)
   94b40:	d8801c17 	ldw	r2,112(sp)
   94b44:	29000044 	addi	r4,r5,1
   94b48:	d8c01d87 	ldb	r3,118(sp)
   94b4c:	183e4d26 	beq	r3,zero,94484 <__alt_data_end+0xfffc45c4>
   94b50:	00c00044 	movi	r3,1
   94b54:	d9401d84 	addi	r5,sp,118
   94b58:	10c5883a 	add	r2,r2,r3
   94b5c:	41400015 	stw	r5,0(r8)
   94b60:	40c00115 	stw	r3,4(r8)
   94b64:	d8801c15 	stw	r2,112(sp)
   94b68:	d9001b15 	stw	r4,108(sp)
   94b6c:	014001c4 	movi	r5,7
   94b70:	2900a90e 	bge	r5,r4,94e18 <___vfiprintf_internal_r+0xe8c>
   94b74:	1000da1e 	bne	r2,zero,94ee0 <___vfiprintf_internal_r+0xf54>
   94b78:	7000ab1e 	bne	r14,zero,94e28 <___vfiprintf_internal_r+0xe9c>
   94b7c:	000b883a 	mov	r5,zero
   94b80:	1809883a 	mov	r4,r3
   94b84:	d811883a 	mov	r8,sp
   94b88:	00c02004 	movi	r3,128
   94b8c:	e0fe4d26 	beq	fp,r3,944c4 <__alt_data_end+0xfffc4604>
   94b90:	4cf9c83a 	sub	fp,r9,r19
   94b94:	073e7b0e 	bge	zero,fp,94584 <__alt_data_end+0xfffc46c4>
   94b98:	01c00404 	movi	r7,16
   94b9c:	3f01900e 	bge	r7,fp,951e0 <___vfiprintf_internal_r+0x1254>
   94ba0:	00c002b4 	movhi	r3,10
   94ba4:	18f19904 	addi	r3,r3,-14748
   94ba8:	d8c02415 	stw	r3,144(sp)
   94bac:	034001c4 	movi	r13,7
   94bb0:	00000506 	br	94bc8 <___vfiprintf_internal_r+0xc3c>
   94bb4:	29000084 	addi	r4,r5,2
   94bb8:	42000204 	addi	r8,r8,8
   94bbc:	180b883a 	mov	r5,r3
   94bc0:	e73ffc04 	addi	fp,fp,-16
   94bc4:	3f000d0e 	bge	r7,fp,94bfc <___vfiprintf_internal_r+0xc70>
   94bc8:	10800404 	addi	r2,r2,16
   94bcc:	28c00044 	addi	r3,r5,1
   94bd0:	45c00015 	stw	r23,0(r8)
   94bd4:	41c00115 	stw	r7,4(r8)
   94bd8:	d8801c15 	stw	r2,112(sp)
   94bdc:	d8c01b15 	stw	r3,108(sp)
   94be0:	68fff40e 	bge	r13,r3,94bb4 <__alt_data_end+0xfffc4cf4>
   94be4:	1000101e 	bne	r2,zero,94c28 <___vfiprintf_internal_r+0xc9c>
   94be8:	e73ffc04 	addi	fp,fp,-16
   94bec:	01000044 	movi	r4,1
   94bf0:	000b883a 	mov	r5,zero
   94bf4:	d811883a 	mov	r8,sp
   94bf8:	3f3ff316 	blt	r7,fp,94bc8 <__alt_data_end+0xfffc4d08>
   94bfc:	da802417 	ldw	r10,144(sp)
   94c00:	1705883a 	add	r2,r2,fp
   94c04:	47000115 	stw	fp,4(r8)
   94c08:	42800015 	stw	r10,0(r8)
   94c0c:	d8801c15 	stw	r2,112(sp)
   94c10:	d9001b15 	stw	r4,108(sp)
   94c14:	00c001c4 	movi	r3,7
   94c18:	19003616 	blt	r3,r4,94cf4 <___vfiprintf_internal_r+0xd68>
   94c1c:	42000204 	addi	r8,r8,8
   94c20:	21000044 	addi	r4,r4,1
   94c24:	003e5706 	br	94584 <__alt_data_end+0xfffc46c4>
   94c28:	d9402117 	ldw	r5,132(sp)
   94c2c:	d9002017 	ldw	r4,128(sp)
   94c30:	d9801a04 	addi	r6,sp,104
   94c34:	d9c02b15 	stw	r7,172(sp)
   94c38:	db402a15 	stw	r13,168(sp)
   94c3c:	0093e780 	call	93e78 <__sprint_r.part.0>
   94c40:	d9c02b17 	ldw	r7,172(sp)
   94c44:	db402a17 	ldw	r13,168(sp)
   94c48:	1000241e 	bne	r2,zero,94cdc <___vfiprintf_internal_r+0xd50>
   94c4c:	d9401b17 	ldw	r5,108(sp)
   94c50:	d8801c17 	ldw	r2,112(sp)
   94c54:	d811883a 	mov	r8,sp
   94c58:	29000044 	addi	r4,r5,1
   94c5c:	003fd806 	br	94bc0 <__alt_data_end+0xfffc4d00>
   94c60:	d9401b17 	ldw	r5,108(sp)
   94c64:	00c002b4 	movhi	r3,10
   94c68:	18f19d04 	addi	r3,r3,-14732
   94c6c:	d8c02415 	stw	r3,144(sp)
   94c70:	29400044 	addi	r5,r5,1
   94c74:	d8c02417 	ldw	r3,144(sp)
   94c78:	14c5883a 	add	r2,r2,r19
   94c7c:	44c00115 	stw	r19,4(r8)
   94c80:	40c00015 	stw	r3,0(r8)
   94c84:	d8801c15 	stw	r2,112(sp)
   94c88:	d9401b15 	stw	r5,108(sp)
   94c8c:	00c001c4 	movi	r3,7
   94c90:	1940070e 	bge	r3,r5,94cb0 <___vfiprintf_internal_r+0xd24>
   94c94:	103e4826 	beq	r2,zero,945b8 <__alt_data_end+0xfffc46f8>
   94c98:	d9402117 	ldw	r5,132(sp)
   94c9c:	d9002017 	ldw	r4,128(sp)
   94ca0:	d9801a04 	addi	r6,sp,104
   94ca4:	0093e780 	call	93e78 <__sprint_r.part.0>
   94ca8:	10000c1e 	bne	r2,zero,94cdc <___vfiprintf_internal_r+0xd50>
   94cac:	d8801c17 	ldw	r2,112(sp)
   94cb0:	8c80010e 	bge	r17,r18,94cb8 <___vfiprintf_internal_r+0xd2c>
   94cb4:	9023883a 	mov	r17,r18
   94cb8:	da802317 	ldw	r10,140(sp)
   94cbc:	5455883a 	add	r10,r10,r17
   94cc0:	da802315 	stw	r10,140(sp)
   94cc4:	103e4126 	beq	r2,zero,945cc <__alt_data_end+0xfffc470c>
   94cc8:	d9402117 	ldw	r5,132(sp)
   94ccc:	d9002017 	ldw	r4,128(sp)
   94cd0:	d9801a04 	addi	r6,sp,104
   94cd4:	0093e780 	call	93e78 <__sprint_r.part.0>
   94cd8:	103e3c26 	beq	r2,zero,945cc <__alt_data_end+0xfffc470c>
   94cdc:	dd002117 	ldw	r20,132(sp)
   94ce0:	a080030b 	ldhu	r2,12(r20)
   94ce4:	1080100c 	andi	r2,r2,64
   94ce8:	1001231e 	bne	r2,zero,95178 <___vfiprintf_internal_r+0x11ec>
   94cec:	d8802317 	ldw	r2,140(sp)
   94cf0:	003d7b06 	br	942e0 <__alt_data_end+0xfffc4420>
   94cf4:	1000991e 	bne	r2,zero,94f5c <___vfiprintf_internal_r+0xfd0>
   94cf8:	00c00044 	movi	r3,1
   94cfc:	9805883a 	mov	r2,r19
   94d00:	dd400015 	stw	r21,0(sp)
   94d04:	dcc00115 	stw	r19,4(sp)
   94d08:	dcc01c15 	stw	r19,112(sp)
   94d0c:	d8c01b15 	stw	r3,108(sp)
   94d10:	d811883a 	mov	r8,sp
   94d14:	42000204 	addi	r8,r8,8
   94d18:	a2c0010c 	andi	r11,r20,4
   94d1c:	583fe426 	beq	r11,zero,94cb0 <__alt_data_end+0xfffc4df0>
   94d20:	8ca7c83a 	sub	r19,r17,r18
   94d24:	04ffe20e 	bge	zero,r19,94cb0 <__alt_data_end+0xfffc4df0>
   94d28:	01c00404 	movi	r7,16
   94d2c:	3cffcc0e 	bge	r7,r19,94c60 <__alt_data_end+0xfffc4da0>
   94d30:	028002b4 	movhi	r10,10
   94d34:	52b19d04 	addi	r10,r10,-14732
   94d38:	d9001b17 	ldw	r4,108(sp)
   94d3c:	da802415 	stw	r10,144(sp)
   94d40:	382b883a 	mov	r21,r7
   94d44:	050001c4 	movi	r20,7
   94d48:	df002017 	ldw	fp,128(sp)
   94d4c:	00000506 	br	94d64 <___vfiprintf_internal_r+0xdd8>
   94d50:	21400084 	addi	r5,r4,2
   94d54:	42000204 	addi	r8,r8,8
   94d58:	1809883a 	mov	r4,r3
   94d5c:	9cfffc04 	addi	r19,r19,-16
   94d60:	acffc40e 	bge	r21,r19,94c74 <__alt_data_end+0xfffc4db4>
   94d64:	10800404 	addi	r2,r2,16
   94d68:	20c00044 	addi	r3,r4,1
   94d6c:	45800015 	stw	r22,0(r8)
   94d70:	45400115 	stw	r21,4(r8)
   94d74:	d8801c15 	stw	r2,112(sp)
   94d78:	d8c01b15 	stw	r3,108(sp)
   94d7c:	a0fff40e 	bge	r20,r3,94d50 <__alt_data_end+0xfffc4e90>
   94d80:	1000041e 	bne	r2,zero,94d94 <___vfiprintf_internal_r+0xe08>
   94d84:	01400044 	movi	r5,1
   94d88:	0009883a 	mov	r4,zero
   94d8c:	d811883a 	mov	r8,sp
   94d90:	003ff206 	br	94d5c <__alt_data_end+0xfffc4e9c>
   94d94:	d9402117 	ldw	r5,132(sp)
   94d98:	d9801a04 	addi	r6,sp,104
   94d9c:	e009883a 	mov	r4,fp
   94da0:	0093e780 	call	93e78 <__sprint_r.part.0>
   94da4:	103fcd1e 	bne	r2,zero,94cdc <__alt_data_end+0xfffc4e1c>
   94da8:	d9001b17 	ldw	r4,108(sp)
   94dac:	d8801c17 	ldw	r2,112(sp)
   94db0:	d811883a 	mov	r8,sp
   94db4:	21400044 	addi	r5,r4,1
   94db8:	003fe806 	br	94d5c <__alt_data_end+0xfffc4e9c>
   94dbc:	d9402117 	ldw	r5,132(sp)
   94dc0:	d9002017 	ldw	r4,128(sp)
   94dc4:	d9801a04 	addi	r6,sp,104
   94dc8:	d9c02b15 	stw	r7,172(sp)
   94dcc:	db402a15 	stw	r13,168(sp)
   94dd0:	0093e780 	call	93e78 <__sprint_r.part.0>
   94dd4:	d9c02b17 	ldw	r7,172(sp)
   94dd8:	db402a17 	ldw	r13,168(sp)
   94ddc:	103fbf1e 	bne	r2,zero,94cdc <__alt_data_end+0xfffc4e1c>
   94de0:	d9401b17 	ldw	r5,108(sp)
   94de4:	d8801c17 	ldw	r2,112(sp)
   94de8:	d811883a 	mov	r8,sp
   94dec:	29800044 	addi	r6,r5,1
   94df0:	003dc406 	br	94504 <__alt_data_end+0xfffc4644>
   94df4:	1000d21e 	bne	r2,zero,95140 <___vfiprintf_internal_r+0x11b4>
   94df8:	d8c01d87 	ldb	r3,118(sp)
   94dfc:	18009526 	beq	r3,zero,95054 <___vfiprintf_internal_r+0x10c8>
   94e00:	00800044 	movi	r2,1
   94e04:	d8c01d84 	addi	r3,sp,118
   94e08:	1009883a 	mov	r4,r2
   94e0c:	d8c00015 	stw	r3,0(sp)
   94e10:	d8800115 	stw	r2,4(sp)
   94e14:	d811883a 	mov	r8,sp
   94e18:	200b883a 	mov	r5,r4
   94e1c:	42000204 	addi	r8,r8,8
   94e20:	21000044 	addi	r4,r4,1
   94e24:	003d9706 	br	94484 <__alt_data_end+0xfffc45c4>
   94e28:	d9001d04 	addi	r4,sp,116
   94e2c:	00800084 	movi	r2,2
   94e30:	d9000015 	stw	r4,0(sp)
   94e34:	d8800115 	stw	r2,4(sp)
   94e38:	1809883a 	mov	r4,r3
   94e3c:	d811883a 	mov	r8,sp
   94e40:	200b883a 	mov	r5,r4
   94e44:	42000204 	addi	r8,r8,8
   94e48:	21000044 	addi	r4,r4,1
   94e4c:	003f4e06 	br	94b88 <__alt_data_end+0xfffc4cc8>
   94e50:	d8001d85 	stb	zero,118(sp)
   94e54:	48005016 	blt	r9,zero,94f98 <___vfiprintf_internal_r+0x100c>
   94e58:	00ffdfc4 	movi	r3,-129
   94e5c:	94c4b03a 	or	r2,r18,r19
   94e60:	a0e8703a 	and	r20,r20,r3
   94e64:	103d4426 	beq	r2,zero,94378 <__alt_data_end+0xfffc44b8>
   94e68:	0039883a 	mov	fp,zero
   94e6c:	d9002617 	ldw	r4,152(sp)
   94e70:	dd401a04 	addi	r21,sp,104
   94e74:	908003cc 	andi	r2,r18,15
   94e78:	9806973a 	slli	r3,r19,28
   94e7c:	2085883a 	add	r2,r4,r2
   94e80:	9024d13a 	srli	r18,r18,4
   94e84:	10800003 	ldbu	r2,0(r2)
   94e88:	9826d13a 	srli	r19,r19,4
   94e8c:	ad7fffc4 	addi	r21,r21,-1
   94e90:	1ca4b03a 	or	r18,r3,r18
   94e94:	a8800005 	stb	r2,0(r21)
   94e98:	94c4b03a 	or	r2,r18,r19
   94e9c:	103ff51e 	bne	r2,zero,94e74 <__alt_data_end+0xfffc4fb4>
   94ea0:	003e5906 	br	94808 <__alt_data_end+0xfffc4948>
   94ea4:	d9402117 	ldw	r5,132(sp)
   94ea8:	d9002017 	ldw	r4,128(sp)
   94eac:	d9801a04 	addi	r6,sp,104
   94eb0:	0093e780 	call	93e78 <__sprint_r.part.0>
   94eb4:	103f891e 	bne	r2,zero,94cdc <__alt_data_end+0xfffc4e1c>
   94eb8:	d8801c17 	ldw	r2,112(sp)
   94ebc:	d811883a 	mov	r8,sp
   94ec0:	003f9506 	br	94d18 <__alt_data_end+0xfffc4e58>
   94ec4:	d9402117 	ldw	r5,132(sp)
   94ec8:	d9002017 	ldw	r4,128(sp)
   94ecc:	d9801a04 	addi	r6,sp,104
   94ed0:	0093e780 	call	93e78 <__sprint_r.part.0>
   94ed4:	103f811e 	bne	r2,zero,94cdc <__alt_data_end+0xfffc4e1c>
   94ed8:	d811883a 	mov	r8,sp
   94edc:	003ced06 	br	94294 <__alt_data_end+0xfffc43d4>
   94ee0:	d9402117 	ldw	r5,132(sp)
   94ee4:	d9002017 	ldw	r4,128(sp)
   94ee8:	d9801a04 	addi	r6,sp,104
   94eec:	da402c15 	stw	r9,176(sp)
   94ef0:	db802a15 	stw	r14,168(sp)
   94ef4:	0093e780 	call	93e78 <__sprint_r.part.0>
   94ef8:	da402c17 	ldw	r9,176(sp)
   94efc:	db802a17 	ldw	r14,168(sp)
   94f00:	103f761e 	bne	r2,zero,94cdc <__alt_data_end+0xfffc4e1c>
   94f04:	d9401b17 	ldw	r5,108(sp)
   94f08:	d8801c17 	ldw	r2,112(sp)
   94f0c:	d811883a 	mov	r8,sp
   94f10:	29000044 	addi	r4,r5,1
   94f14:	003d5b06 	br	94484 <__alt_data_end+0xfffc45c4>
   94f18:	d9402117 	ldw	r5,132(sp)
   94f1c:	d9002017 	ldw	r4,128(sp)
   94f20:	d9801a04 	addi	r6,sp,104
   94f24:	da402c15 	stw	r9,176(sp)
   94f28:	0093e780 	call	93e78 <__sprint_r.part.0>
   94f2c:	da402c17 	ldw	r9,176(sp)
   94f30:	103f6a1e 	bne	r2,zero,94cdc <__alt_data_end+0xfffc4e1c>
   94f34:	d9401b17 	ldw	r5,108(sp)
   94f38:	d8801c17 	ldw	r2,112(sp)
   94f3c:	d811883a 	mov	r8,sp
   94f40:	29000044 	addi	r4,r5,1
   94f44:	003f1006 	br	94b88 <__alt_data_end+0xfffc4cc8>
   94f48:	1000c31e 	bne	r2,zero,95258 <___vfiprintf_internal_r+0x12cc>
   94f4c:	01000044 	movi	r4,1
   94f50:	000b883a 	mov	r5,zero
   94f54:	d811883a 	mov	r8,sp
   94f58:	003f0d06 	br	94b90 <__alt_data_end+0xfffc4cd0>
   94f5c:	d9402117 	ldw	r5,132(sp)
   94f60:	d9002017 	ldw	r4,128(sp)
   94f64:	d9801a04 	addi	r6,sp,104
   94f68:	0093e780 	call	93e78 <__sprint_r.part.0>
   94f6c:	103f5b1e 	bne	r2,zero,94cdc <__alt_data_end+0xfffc4e1c>
   94f70:	d9001b17 	ldw	r4,108(sp)
   94f74:	d8801c17 	ldw	r2,112(sp)
   94f78:	d811883a 	mov	r8,sp
   94f7c:	21000044 	addi	r4,r4,1
   94f80:	003d8006 	br	94584 <__alt_data_end+0xfffc46c4>
   94f84:	010002b4 	movhi	r4,10
   94f88:	21312904 	addi	r4,r4,-15196
   94f8c:	d9002615 	stw	r4,152(sp)
   94f90:	d8c02215 	stw	r3,136(sp)
   94f94:	1029883a 	mov	r20,r2
   94f98:	94c4b03a 	or	r2,r18,r19
   94f9c:	103fb21e 	bne	r2,zero,94e68 <__alt_data_end+0xfffc4fa8>
   94fa0:	0039883a 	mov	fp,zero
   94fa4:	00800084 	movi	r2,2
   94fa8:	003e6b06 	br	94958 <__alt_data_end+0xfffc4a98>
   94fac:	da802217 	ldw	r10,136(sp)
   94fb0:	d8001d85 	stb	zero,118(sp)
   94fb4:	0027883a 	mov	r19,zero
   94fb8:	50800104 	addi	r2,r10,4
   94fbc:	54800017 	ldw	r18,0(r10)
   94fc0:	483e6016 	blt	r9,zero,94944 <__alt_data_end+0xfffc4a84>
   94fc4:	00ffdfc4 	movi	r3,-129
   94fc8:	d8802215 	stw	r2,136(sp)
   94fcc:	a0e8703a 	and	r20,r20,r3
   94fd0:	0039883a 	mov	fp,zero
   94fd4:	903ebb26 	beq	r18,zero,94ac4 <__alt_data_end+0xfffc4c04>
   94fd8:	00800244 	movi	r2,9
   94fdc:	14bdee36 	bltu	r2,r18,94798 <__alt_data_end+0xfffc48d8>
   94fe0:	003eba06 	br	94acc <__alt_data_end+0xfffc4c0c>
   94fe4:	00800c04 	movi	r2,48
   94fe8:	d8c01d45 	stb	r3,117(sp)
   94fec:	d8801d05 	stb	r2,116(sp)
   94ff0:	d8001d85 	stb	zero,118(sp)
   94ff4:	a0c00094 	ori	r3,r20,2
   94ff8:	4800a916 	blt	r9,zero,952a0 <___vfiprintf_internal_r+0x1314>
   94ffc:	00bfdfc4 	movi	r2,-129
   95000:	a096703a 	and	r11,r20,r2
   95004:	5d000094 	ori	r20,r11,2
   95008:	0039883a 	mov	fp,zero
   9500c:	003f9706 	br	94e6c <__alt_data_end+0xfffc4fac>
   95010:	8025883a 	mov	r18,r16
   95014:	003c2e06 	br	940d0 <__alt_data_end+0xfffc4210>
   95018:	008002b4 	movhi	r2,10
   9501c:	10b12904 	addi	r2,r2,-15196
   95020:	0039883a 	mov	fp,zero
   95024:	d8802615 	stw	r2,152(sp)
   95028:	003f9006 	br	94e6c <__alt_data_end+0xfffc4fac>
   9502c:	04a5c83a 	sub	r18,zero,r18
   95030:	07000b44 	movi	fp,45
   95034:	9004c03a 	cmpne	r2,r18,zero
   95038:	04e7c83a 	sub	r19,zero,r19
   9503c:	df001d85 	stb	fp,118(sp)
   95040:	98a7c83a 	sub	r19,r19,r2
   95044:	48009f16 	blt	r9,zero,952c4 <___vfiprintf_internal_r+0x1338>
   95048:	00bfdfc4 	movi	r2,-129
   9504c:	a0a8703a 	and	r20,r20,r2
   95050:	003dd006 	br	94794 <__alt_data_end+0xfffc48d4>
   95054:	70004c26 	beq	r14,zero,95188 <___vfiprintf_internal_r+0x11fc>
   95058:	00800084 	movi	r2,2
   9505c:	d8c01d04 	addi	r3,sp,116
   95060:	d8c00015 	stw	r3,0(sp)
   95064:	d8800115 	stw	r2,4(sp)
   95068:	01000044 	movi	r4,1
   9506c:	d811883a 	mov	r8,sp
   95070:	003f7306 	br	94e40 <__alt_data_end+0xfffc4f80>
   95074:	a080100c 	andi	r2,r20,64
   95078:	da802217 	ldw	r10,136(sp)
   9507c:	103e0626 	beq	r2,zero,94898 <__alt_data_end+0xfffc49d8>
   95080:	5480000f 	ldh	r18,0(r10)
   95084:	52800104 	addi	r10,r10,4
   95088:	da802215 	stw	r10,136(sp)
   9508c:	9027d7fa 	srai	r19,r18,31
   95090:	9805883a 	mov	r2,r19
   95094:	003db806 	br	94778 <__alt_data_end+0xfffc48b8>
   95098:	a080040c 	andi	r2,r20,16
   9509c:	1000091e 	bne	r2,zero,950c4 <___vfiprintf_internal_r+0x1138>
   950a0:	a2c0100c 	andi	r11,r20,64
   950a4:	58000726 	beq	r11,zero,950c4 <___vfiprintf_internal_r+0x1138>
   950a8:	da802217 	ldw	r10,136(sp)
   950ac:	50800017 	ldw	r2,0(r10)
   950b0:	52800104 	addi	r10,r10,4
   950b4:	da802215 	stw	r10,136(sp)
   950b8:	da802317 	ldw	r10,140(sp)
   950bc:	1280000d 	sth	r10,0(r2)
   950c0:	003be706 	br	94060 <__alt_data_end+0xfffc41a0>
   950c4:	da802217 	ldw	r10,136(sp)
   950c8:	50800017 	ldw	r2,0(r10)
   950cc:	52800104 	addi	r10,r10,4
   950d0:	da802215 	stw	r10,136(sp)
   950d4:	da802317 	ldw	r10,140(sp)
   950d8:	12800015 	stw	r10,0(r2)
   950dc:	003be006 	br	94060 <__alt_data_end+0xfffc41a0>
   950e0:	a080100c 	andi	r2,r20,64
   950e4:	da802217 	ldw	r10,136(sp)
   950e8:	10003026 	beq	r2,zero,951ac <___vfiprintf_internal_r+0x1220>
   950ec:	5480000b 	ldhu	r18,0(r10)
   950f0:	52800104 	addi	r10,r10,4
   950f4:	0027883a 	mov	r19,zero
   950f8:	da802215 	stw	r10,136(sp)
   950fc:	003d8006 	br	94700 <__alt_data_end+0xfffc4840>
   95100:	80c00007 	ldb	r3,0(r16)
   95104:	003c0006 	br	94108 <__alt_data_end+0xfffc4248>
   95108:	a080100c 	andi	r2,r20,64
   9510c:	d8001d85 	stb	zero,118(sp)
   95110:	da802217 	ldw	r10,136(sp)
   95114:	1000201e 	bne	r2,zero,95198 <___vfiprintf_internal_r+0x120c>
   95118:	50800104 	addi	r2,r10,4
   9511c:	54800017 	ldw	r18,0(r10)
   95120:	0027883a 	mov	r19,zero
   95124:	483def0e 	bge	r9,zero,948e4 <__alt_data_end+0xfffc4a24>
   95128:	94c6b03a 	or	r3,r18,r19
   9512c:	d8802215 	stw	r2,136(sp)
   95130:	183d4e1e 	bne	r3,zero,9466c <__alt_data_end+0xfffc47ac>
   95134:	0039883a 	mov	fp,zero
   95138:	0005883a 	mov	r2,zero
   9513c:	003e0606 	br	94958 <__alt_data_end+0xfffc4a98>
   95140:	d9402117 	ldw	r5,132(sp)
   95144:	d9002017 	ldw	r4,128(sp)
   95148:	d9801a04 	addi	r6,sp,104
   9514c:	da402c15 	stw	r9,176(sp)
   95150:	db802a15 	stw	r14,168(sp)
   95154:	0093e780 	call	93e78 <__sprint_r.part.0>
   95158:	da402c17 	ldw	r9,176(sp)
   9515c:	db802a17 	ldw	r14,168(sp)
   95160:	103ede1e 	bne	r2,zero,94cdc <__alt_data_end+0xfffc4e1c>
   95164:	d9401b17 	ldw	r5,108(sp)
   95168:	d8801c17 	ldw	r2,112(sp)
   9516c:	d811883a 	mov	r8,sp
   95170:	29000044 	addi	r4,r5,1
   95174:	003e7406 	br	94b48 <__alt_data_end+0xfffc4c88>
   95178:	00bfffc4 	movi	r2,-1
   9517c:	003c5806 	br	942e0 <__alt_data_end+0xfffc4420>
   95180:	d811883a 	mov	r8,sp
   95184:	003ee806 	br	94d28 <__alt_data_end+0xfffc4e68>
   95188:	000b883a 	mov	r5,zero
   9518c:	01000044 	movi	r4,1
   95190:	d811883a 	mov	r8,sp
   95194:	003e7c06 	br	94b88 <__alt_data_end+0xfffc4cc8>
   95198:	50800104 	addi	r2,r10,4
   9519c:	5480000b 	ldhu	r18,0(r10)
   951a0:	0027883a 	mov	r19,zero
   951a4:	483dcf0e 	bge	r9,zero,948e4 <__alt_data_end+0xfffc4a24>
   951a8:	003fdf06 	br	95128 <__alt_data_end+0xfffc5268>
   951ac:	54800017 	ldw	r18,0(r10)
   951b0:	52800104 	addi	r10,r10,4
   951b4:	0027883a 	mov	r19,zero
   951b8:	da802215 	stw	r10,136(sp)
   951bc:	003d5006 	br	94700 <__alt_data_end+0xfffc4840>
   951c0:	50800104 	addi	r2,r10,4
   951c4:	5480000b 	ldhu	r18,0(r10)
   951c8:	0027883a 	mov	r19,zero
   951cc:	483f7d0e 	bge	r9,zero,94fc4 <__alt_data_end+0xfffc5104>
   951d0:	003ddc06 	br	94944 <__alt_data_end+0xfffc4a84>
   951d4:	d8c02215 	stw	r3,136(sp)
   951d8:	0039883a 	mov	fp,zero
   951dc:	003ddb06 	br	9494c <__alt_data_end+0xfffc4a8c>
   951e0:	028002b4 	movhi	r10,10
   951e4:	52b19904 	addi	r10,r10,-14748
   951e8:	da802415 	stw	r10,144(sp)
   951ec:	003e8306 	br	94bfc <__alt_data_end+0xfffc4d3c>
   951f0:	d8801c17 	ldw	r2,112(sp)
   951f4:	dd002117 	ldw	r20,132(sp)
   951f8:	103eb926 	beq	r2,zero,94ce0 <__alt_data_end+0xfffc4e20>
   951fc:	d9002017 	ldw	r4,128(sp)
   95200:	d9801a04 	addi	r6,sp,104
   95204:	a00b883a 	mov	r5,r20
   95208:	0093e780 	call	93e78 <__sprint_r.part.0>
   9520c:	003eb406 	br	94ce0 <__alt_data_end+0xfffc4e20>
   95210:	80c00043 	ldbu	r3,1(r16)
   95214:	a5000814 	ori	r20,r20,32
   95218:	84000044 	addi	r16,r16,1
   9521c:	18c03fcc 	andi	r3,r3,255
   95220:	18c0201c 	xori	r3,r3,128
   95224:	18ffe004 	addi	r3,r3,-128
   95228:	003bb706 	br	94108 <__alt_data_end+0xfffc4248>
   9522c:	a809883a 	mov	r4,r21
   95230:	d8c02a15 	stw	r3,168(sp)
   95234:	da002b15 	stw	r8,172(sp)
   95238:	00891b40 	call	891b4 <strlen>
   9523c:	d8c02a17 	ldw	r3,168(sp)
   95240:	1027883a 	mov	r19,r2
   95244:	df001d83 	ldbu	fp,118(sp)
   95248:	d8c02215 	stw	r3,136(sp)
   9524c:	0013883a 	mov	r9,zero
   95250:	da002b17 	ldw	r8,172(sp)
   95254:	003c4d06 	br	9438c <__alt_data_end+0xfffc44cc>
   95258:	d9402117 	ldw	r5,132(sp)
   9525c:	d9002017 	ldw	r4,128(sp)
   95260:	d9801a04 	addi	r6,sp,104
   95264:	da402c15 	stw	r9,176(sp)
   95268:	0093e780 	call	93e78 <__sprint_r.part.0>
   9526c:	da402c17 	ldw	r9,176(sp)
   95270:	103e9a1e 	bne	r2,zero,94cdc <__alt_data_end+0xfffc4e1c>
   95274:	d9401b17 	ldw	r5,108(sp)
   95278:	d8801c17 	ldw	r2,112(sp)
   9527c:	d811883a 	mov	r8,sp
   95280:	29000044 	addi	r4,r5,1
   95284:	003e4206 	br	94b90 <__alt_data_end+0xfffc4cd0>
   95288:	d9401b17 	ldw	r5,108(sp)
   9528c:	010002b4 	movhi	r4,10
   95290:	21319d04 	addi	r4,r4,-14732
   95294:	d9002415 	stw	r4,144(sp)
   95298:	29400044 	addi	r5,r5,1
   9529c:	003c6d06 	br	94454 <__alt_data_end+0xfffc4594>
   952a0:	0039883a 	mov	fp,zero
   952a4:	00800084 	movi	r2,2
   952a8:	10803fcc 	andi	r2,r2,255
   952ac:	01000044 	movi	r4,1
   952b0:	11001e26 	beq	r2,r4,9532c <___vfiprintf_internal_r+0x13a0>
   952b4:	01000084 	movi	r4,2
   952b8:	11001e1e 	bne	r2,r4,95334 <___vfiprintf_internal_r+0x13a8>
   952bc:	1829883a 	mov	r20,r3
   952c0:	003eea06 	br	94e6c <__alt_data_end+0xfffc4fac>
   952c4:	a007883a 	mov	r3,r20
   952c8:	00800044 	movi	r2,1
   952cc:	003ff606 	br	952a8 <__alt_data_end+0xfffc53e8>
   952d0:	00800184 	movi	r2,6
   952d4:	1240012e 	bgeu	r2,r9,952dc <___vfiprintf_internal_r+0x1350>
   952d8:	1013883a 	mov	r9,r2
   952dc:	4827883a 	mov	r19,r9
   952e0:	4825883a 	mov	r18,r9
   952e4:	48001516 	blt	r9,zero,9533c <___vfiprintf_internal_r+0x13b0>
   952e8:	054002b4 	movhi	r21,10
   952ec:	d8c02215 	stw	r3,136(sp)
   952f0:	ad712e04 	addi	r21,r21,-15176
   952f4:	003d1406 	br	94748 <__alt_data_end+0xfffc4888>
   952f8:	028002b4 	movhi	r10,10
   952fc:	52b19904 	addi	r10,r10,-14748
   95300:	da802415 	stw	r10,144(sp)
   95304:	200d883a 	mov	r6,r4
   95308:	003c9106 	br	94550 <__alt_data_end+0xfffc4690>
   9530c:	5021883a 	mov	r16,r10
   95310:	0013883a 	mov	r9,zero
   95314:	003b7d06 	br	9410c <__alt_data_end+0xfffc424c>
   95318:	4827883a 	mov	r19,r9
   9531c:	df001d83 	ldbu	fp,118(sp)
   95320:	d8c02215 	stw	r3,136(sp)
   95324:	0013883a 	mov	r9,zero
   95328:	003c1806 	br	9438c <__alt_data_end+0xfffc44cc>
   9532c:	1829883a 	mov	r20,r3
   95330:	003d1806 	br	94794 <__alt_data_end+0xfffc48d4>
   95334:	1829883a 	mov	r20,r3
   95338:	003ccd06 	br	94670 <__alt_data_end+0xfffc47b0>
   9533c:	0025883a 	mov	r18,zero
   95340:	003fe906 	br	952e8 <__alt_data_end+0xfffc5428>
   95344:	d8802217 	ldw	r2,136(sp)
   95348:	80c00043 	ldbu	r3,1(r16)
   9534c:	5021883a 	mov	r16,r10
   95350:	12400017 	ldw	r9,0(r2)
   95354:	10800104 	addi	r2,r2,4
   95358:	d8802215 	stw	r2,136(sp)
   9535c:	483faf0e 	bge	r9,zero,9521c <__alt_data_end+0xfffc535c>
   95360:	18c03fcc 	andi	r3,r3,255
   95364:	18c0201c 	xori	r3,r3,128
   95368:	027fffc4 	movi	r9,-1
   9536c:	18ffe004 	addi	r3,r3,-128
   95370:	003b6506 	br	94108 <__alt_data_end+0xfffc4248>
   95374:	d9c01d85 	stb	r7,118(sp)
   95378:	003ca006 	br	945fc <__alt_data_end+0xfffc473c>
   9537c:	d9c01d85 	stb	r7,118(sp)
   95380:	003cad06 	br	94638 <__alt_data_end+0xfffc4778>
   95384:	d9c01d85 	stb	r7,118(sp)
   95388:	003d7d06 	br	94980 <__alt_data_end+0xfffc4ac0>
   9538c:	d9c01d85 	stb	r7,118(sp)
   95390:	003d5f06 	br	94910 <__alt_data_end+0xfffc4a50>
   95394:	a080004c 	andi	r2,r20,1
   95398:	0039883a 	mov	fp,zero
   9539c:	10000526 	beq	r2,zero,953b4 <___vfiprintf_internal_r+0x1428>
   953a0:	00800c04 	movi	r2,48
   953a4:	d88019c5 	stb	r2,103(sp)
   953a8:	dcc02717 	ldw	r19,156(sp)
   953ac:	dd4019c4 	addi	r21,sp,103
   953b0:	003bf606 	br	9438c <__alt_data_end+0xfffc44cc>
   953b4:	0027883a 	mov	r19,zero
   953b8:	dd401a04 	addi	r21,sp,104
   953bc:	003bf306 	br	9438c <__alt_data_end+0xfffc44cc>
   953c0:	d9c01d85 	stb	r7,118(sp)
   953c4:	003dc806 	br	94ae8 <__alt_data_end+0xfffc4c28>
   953c8:	d9c01d85 	stb	r7,118(sp)
   953cc:	003d3a06 	br	948b8 <__alt_data_end+0xfffc49f8>
   953d0:	d9c01d85 	stb	r7,118(sp)
   953d4:	003d2a06 	br	94880 <__alt_data_end+0xfffc49c0>
   953d8:	d9c01d85 	stb	r7,118(sp)
   953dc:	003cde06 	br	94758 <__alt_data_end+0xfffc4898>
   953e0:	d9c01d85 	stb	r7,118(sp)
   953e4:	003cbc06 	br	946d8 <__alt_data_end+0xfffc4818>

000953e8 <__vfiprintf_internal>:
   953e8:	008002b4 	movhi	r2,10
   953ec:	10bb5c04 	addi	r2,r2,-4752
   953f0:	300f883a 	mov	r7,r6
   953f4:	280d883a 	mov	r6,r5
   953f8:	200b883a 	mov	r5,r4
   953fc:	11000017 	ldw	r4,0(r2)
   95400:	0093f8c1 	jmpi	93f8c <___vfiprintf_internal_r>

00095404 <__sbprintf>:
   95404:	2880030b 	ldhu	r2,12(r5)
   95408:	2ac01917 	ldw	r11,100(r5)
   9540c:	2a80038b 	ldhu	r10,14(r5)
   95410:	2a400717 	ldw	r9,28(r5)
   95414:	2a000917 	ldw	r8,36(r5)
   95418:	defee204 	addi	sp,sp,-1144
   9541c:	00c10004 	movi	r3,1024
   95420:	dc011a15 	stw	r16,1128(sp)
   95424:	10bfff4c 	andi	r2,r2,65533
   95428:	2821883a 	mov	r16,r5
   9542c:	d8cb883a 	add	r5,sp,r3
   95430:	dc811c15 	stw	r18,1136(sp)
   95434:	dc411b15 	stw	r17,1132(sp)
   95438:	dfc11d15 	stw	ra,1140(sp)
   9543c:	2025883a 	mov	r18,r4
   95440:	d881030d 	sth	r2,1036(sp)
   95444:	dac11915 	stw	r11,1124(sp)
   95448:	da81038d 	sth	r10,1038(sp)
   9544c:	da410715 	stw	r9,1052(sp)
   95450:	da010915 	stw	r8,1060(sp)
   95454:	dec10015 	stw	sp,1024(sp)
   95458:	dec10415 	stw	sp,1040(sp)
   9545c:	d8c10215 	stw	r3,1032(sp)
   95460:	d8c10515 	stw	r3,1044(sp)
   95464:	d8010615 	stw	zero,1048(sp)
   95468:	0093f8c0 	call	93f8c <___vfiprintf_internal_r>
   9546c:	1023883a 	mov	r17,r2
   95470:	10000416 	blt	r2,zero,95484 <__sbprintf+0x80>
   95474:	d9410004 	addi	r5,sp,1024
   95478:	9009883a 	mov	r4,r18
   9547c:	008f4140 	call	8f414 <_fflush_r>
   95480:	10000d1e 	bne	r2,zero,954b8 <__sbprintf+0xb4>
   95484:	d881030b 	ldhu	r2,1036(sp)
   95488:	1080100c 	andi	r2,r2,64
   9548c:	10000326 	beq	r2,zero,9549c <__sbprintf+0x98>
   95490:	8080030b 	ldhu	r2,12(r16)
   95494:	10801014 	ori	r2,r2,64
   95498:	8080030d 	sth	r2,12(r16)
   9549c:	8805883a 	mov	r2,r17
   954a0:	dfc11d17 	ldw	ra,1140(sp)
   954a4:	dc811c17 	ldw	r18,1136(sp)
   954a8:	dc411b17 	ldw	r17,1132(sp)
   954ac:	dc011a17 	ldw	r16,1128(sp)
   954b0:	dec11e04 	addi	sp,sp,1144
   954b4:	f800283a 	ret
   954b8:	047fffc4 	movi	r17,-1
   954bc:	003ff106 	br	95484 <__alt_data_end+0xfffc55c4>

000954c0 <__swbuf_r>:
   954c0:	defffb04 	addi	sp,sp,-20
   954c4:	dcc00315 	stw	r19,12(sp)
   954c8:	dc800215 	stw	r18,8(sp)
   954cc:	dc000015 	stw	r16,0(sp)
   954d0:	dfc00415 	stw	ra,16(sp)
   954d4:	dc400115 	stw	r17,4(sp)
   954d8:	2025883a 	mov	r18,r4
   954dc:	2827883a 	mov	r19,r5
   954e0:	3021883a 	mov	r16,r6
   954e4:	20000226 	beq	r4,zero,954f0 <__swbuf_r+0x30>
   954e8:	20800e17 	ldw	r2,56(r4)
   954ec:	10004226 	beq	r2,zero,955f8 <__swbuf_r+0x138>
   954f0:	80800617 	ldw	r2,24(r16)
   954f4:	8100030b 	ldhu	r4,12(r16)
   954f8:	80800215 	stw	r2,8(r16)
   954fc:	2080020c 	andi	r2,r4,8
   95500:	10003626 	beq	r2,zero,955dc <__swbuf_r+0x11c>
   95504:	80c00417 	ldw	r3,16(r16)
   95508:	18003426 	beq	r3,zero,955dc <__swbuf_r+0x11c>
   9550c:	2088000c 	andi	r2,r4,8192
   95510:	9c403fcc 	andi	r17,r19,255
   95514:	10001a26 	beq	r2,zero,95580 <__swbuf_r+0xc0>
   95518:	80800017 	ldw	r2,0(r16)
   9551c:	81000517 	ldw	r4,20(r16)
   95520:	10c7c83a 	sub	r3,r2,r3
   95524:	1900200e 	bge	r3,r4,955a8 <__swbuf_r+0xe8>
   95528:	18c00044 	addi	r3,r3,1
   9552c:	81000217 	ldw	r4,8(r16)
   95530:	11400044 	addi	r5,r2,1
   95534:	81400015 	stw	r5,0(r16)
   95538:	213fffc4 	addi	r4,r4,-1
   9553c:	81000215 	stw	r4,8(r16)
   95540:	14c00005 	stb	r19,0(r2)
   95544:	80800517 	ldw	r2,20(r16)
   95548:	10c01e26 	beq	r2,r3,955c4 <__swbuf_r+0x104>
   9554c:	8080030b 	ldhu	r2,12(r16)
   95550:	1080004c 	andi	r2,r2,1
   95554:	10000226 	beq	r2,zero,95560 <__swbuf_r+0xa0>
   95558:	00800284 	movi	r2,10
   9555c:	88801926 	beq	r17,r2,955c4 <__swbuf_r+0x104>
   95560:	8805883a 	mov	r2,r17
   95564:	dfc00417 	ldw	ra,16(sp)
   95568:	dcc00317 	ldw	r19,12(sp)
   9556c:	dc800217 	ldw	r18,8(sp)
   95570:	dc400117 	ldw	r17,4(sp)
   95574:	dc000017 	ldw	r16,0(sp)
   95578:	dec00504 	addi	sp,sp,20
   9557c:	f800283a 	ret
   95580:	81401917 	ldw	r5,100(r16)
   95584:	00b7ffc4 	movi	r2,-8193
   95588:	21080014 	ori	r4,r4,8192
   9558c:	2884703a 	and	r2,r5,r2
   95590:	80801915 	stw	r2,100(r16)
   95594:	80800017 	ldw	r2,0(r16)
   95598:	8100030d 	sth	r4,12(r16)
   9559c:	81000517 	ldw	r4,20(r16)
   955a0:	10c7c83a 	sub	r3,r2,r3
   955a4:	193fe016 	blt	r3,r4,95528 <__alt_data_end+0xfffc5668>
   955a8:	800b883a 	mov	r5,r16
   955ac:	9009883a 	mov	r4,r18
   955b0:	008f4140 	call	8f414 <_fflush_r>
   955b4:	1000071e 	bne	r2,zero,955d4 <__swbuf_r+0x114>
   955b8:	80800017 	ldw	r2,0(r16)
   955bc:	00c00044 	movi	r3,1
   955c0:	003fda06 	br	9552c <__alt_data_end+0xfffc566c>
   955c4:	800b883a 	mov	r5,r16
   955c8:	9009883a 	mov	r4,r18
   955cc:	008f4140 	call	8f414 <_fflush_r>
   955d0:	103fe326 	beq	r2,zero,95560 <__alt_data_end+0xfffc56a0>
   955d4:	00bfffc4 	movi	r2,-1
   955d8:	003fe206 	br	95564 <__alt_data_end+0xfffc56a4>
   955dc:	800b883a 	mov	r5,r16
   955e0:	9009883a 	mov	r4,r18
   955e4:	008d81c0 	call	8d81c <__swsetup_r>
   955e8:	103ffa1e 	bne	r2,zero,955d4 <__alt_data_end+0xfffc5714>
   955ec:	8100030b 	ldhu	r4,12(r16)
   955f0:	80c00417 	ldw	r3,16(r16)
   955f4:	003fc506 	br	9550c <__alt_data_end+0xfffc564c>
   955f8:	008f7f00 	call	8f7f0 <__sinit>
   955fc:	003fbc06 	br	954f0 <__alt_data_end+0xfffc5630>

00095600 <__swbuf>:
   95600:	008002b4 	movhi	r2,10
   95604:	10bb5c04 	addi	r2,r2,-4752
   95608:	280d883a 	mov	r6,r5
   9560c:	200b883a 	mov	r5,r4
   95610:	11000017 	ldw	r4,0(r2)
   95614:	00954c01 	jmpi	954c0 <__swbuf_r>

00095618 <_write_r>:
   95618:	defffd04 	addi	sp,sp,-12
   9561c:	2805883a 	mov	r2,r5
   95620:	dc000015 	stw	r16,0(sp)
   95624:	040002b4 	movhi	r16,10
   95628:	dc400115 	stw	r17,4(sp)
   9562c:	300b883a 	mov	r5,r6
   95630:	84050204 	addi	r16,r16,5128
   95634:	2023883a 	mov	r17,r4
   95638:	380d883a 	mov	r6,r7
   9563c:	1009883a 	mov	r4,r2
   95640:	dfc00215 	stw	ra,8(sp)
   95644:	80000015 	stw	zero,0(r16)
   95648:	009992c0 	call	9992c <write>
   9564c:	00ffffc4 	movi	r3,-1
   95650:	10c00526 	beq	r2,r3,95668 <_write_r+0x50>
   95654:	dfc00217 	ldw	ra,8(sp)
   95658:	dc400117 	ldw	r17,4(sp)
   9565c:	dc000017 	ldw	r16,0(sp)
   95660:	dec00304 	addi	sp,sp,12
   95664:	f800283a 	ret
   95668:	80c00017 	ldw	r3,0(r16)
   9566c:	183ff926 	beq	r3,zero,95654 <__alt_data_end+0xfffc5794>
   95670:	88c00015 	stw	r3,0(r17)
   95674:	003ff706 	br	95654 <__alt_data_end+0xfffc5794>

00095678 <_close_r>:
   95678:	defffd04 	addi	sp,sp,-12
   9567c:	dc000015 	stw	r16,0(sp)
   95680:	040002b4 	movhi	r16,10
   95684:	dc400115 	stw	r17,4(sp)
   95688:	84050204 	addi	r16,r16,5128
   9568c:	2023883a 	mov	r17,r4
   95690:	2809883a 	mov	r4,r5
   95694:	dfc00215 	stw	ra,8(sp)
   95698:	80000015 	stw	zero,0(r16)
   9569c:	0098f480 	call	98f48 <close>
   956a0:	00ffffc4 	movi	r3,-1
   956a4:	10c00526 	beq	r2,r3,956bc <_close_r+0x44>
   956a8:	dfc00217 	ldw	ra,8(sp)
   956ac:	dc400117 	ldw	r17,4(sp)
   956b0:	dc000017 	ldw	r16,0(sp)
   956b4:	dec00304 	addi	sp,sp,12
   956b8:	f800283a 	ret
   956bc:	80c00017 	ldw	r3,0(r16)
   956c0:	183ff926 	beq	r3,zero,956a8 <__alt_data_end+0xfffc57e8>
   956c4:	88c00015 	stw	r3,0(r17)
   956c8:	003ff706 	br	956a8 <__alt_data_end+0xfffc57e8>

000956cc <_calloc_r>:
   956cc:	298b383a 	mul	r5,r5,r6
   956d0:	defffe04 	addi	sp,sp,-8
   956d4:	dfc00115 	stw	ra,4(sp)
   956d8:	dc000015 	stw	r16,0(sp)
   956dc:	00905500 	call	90550 <_malloc_r>
   956e0:	10002926 	beq	r2,zero,95788 <_calloc_r+0xbc>
   956e4:	11bfff17 	ldw	r6,-4(r2)
   956e8:	1021883a 	mov	r16,r2
   956ec:	00bfff04 	movi	r2,-4
   956f0:	308c703a 	and	r6,r6,r2
   956f4:	00c00904 	movi	r3,36
   956f8:	308d883a 	add	r6,r6,r2
   956fc:	19801636 	bltu	r3,r6,95758 <_calloc_r+0x8c>
   95700:	008004c4 	movi	r2,19
   95704:	11800b2e 	bgeu	r2,r6,95734 <_calloc_r+0x68>
   95708:	80000015 	stw	zero,0(r16)
   9570c:	80000115 	stw	zero,4(r16)
   95710:	008006c4 	movi	r2,27
   95714:	11801a2e 	bgeu	r2,r6,95780 <_calloc_r+0xb4>
   95718:	80000215 	stw	zero,8(r16)
   9571c:	80000315 	stw	zero,12(r16)
   95720:	30c0151e 	bne	r6,r3,95778 <_calloc_r+0xac>
   95724:	80000415 	stw	zero,16(r16)
   95728:	80800604 	addi	r2,r16,24
   9572c:	80000515 	stw	zero,20(r16)
   95730:	00000106 	br	95738 <_calloc_r+0x6c>
   95734:	8005883a 	mov	r2,r16
   95738:	10000015 	stw	zero,0(r2)
   9573c:	10000115 	stw	zero,4(r2)
   95740:	10000215 	stw	zero,8(r2)
   95744:	8005883a 	mov	r2,r16
   95748:	dfc00117 	ldw	ra,4(sp)
   9574c:	dc000017 	ldw	r16,0(sp)
   95750:	dec00204 	addi	sp,sp,8
   95754:	f800283a 	ret
   95758:	000b883a 	mov	r5,zero
   9575c:	8009883a 	mov	r4,r16
   95760:	0090f9c0 	call	90f9c <memset>
   95764:	8005883a 	mov	r2,r16
   95768:	dfc00117 	ldw	ra,4(sp)
   9576c:	dc000017 	ldw	r16,0(sp)
   95770:	dec00204 	addi	sp,sp,8
   95774:	f800283a 	ret
   95778:	80800404 	addi	r2,r16,16
   9577c:	003fee06 	br	95738 <__alt_data_end+0xfffc5878>
   95780:	80800204 	addi	r2,r16,8
   95784:	003fec06 	br	95738 <__alt_data_end+0xfffc5878>
   95788:	0005883a 	mov	r2,zero
   9578c:	003fee06 	br	95748 <__alt_data_end+0xfffc5888>

00095790 <_fclose_r>:
   95790:	28003926 	beq	r5,zero,95878 <_fclose_r+0xe8>
   95794:	defffc04 	addi	sp,sp,-16
   95798:	dc400115 	stw	r17,4(sp)
   9579c:	dc000015 	stw	r16,0(sp)
   957a0:	dfc00315 	stw	ra,12(sp)
   957a4:	dc800215 	stw	r18,8(sp)
   957a8:	2023883a 	mov	r17,r4
   957ac:	2821883a 	mov	r16,r5
   957b0:	20000226 	beq	r4,zero,957bc <_fclose_r+0x2c>
   957b4:	20800e17 	ldw	r2,56(r4)
   957b8:	10002726 	beq	r2,zero,95858 <_fclose_r+0xc8>
   957bc:	8080030f 	ldh	r2,12(r16)
   957c0:	1000071e 	bne	r2,zero,957e0 <_fclose_r+0x50>
   957c4:	0005883a 	mov	r2,zero
   957c8:	dfc00317 	ldw	ra,12(sp)
   957cc:	dc800217 	ldw	r18,8(sp)
   957d0:	dc400117 	ldw	r17,4(sp)
   957d4:	dc000017 	ldw	r16,0(sp)
   957d8:	dec00404 	addi	sp,sp,16
   957dc:	f800283a 	ret
   957e0:	800b883a 	mov	r5,r16
   957e4:	8809883a 	mov	r4,r17
   957e8:	008f1f80 	call	8f1f8 <__sflush_r>
   957ec:	1025883a 	mov	r18,r2
   957f0:	80800b17 	ldw	r2,44(r16)
   957f4:	10000426 	beq	r2,zero,95808 <_fclose_r+0x78>
   957f8:	81400717 	ldw	r5,28(r16)
   957fc:	8809883a 	mov	r4,r17
   95800:	103ee83a 	callr	r2
   95804:	10001616 	blt	r2,zero,95860 <_fclose_r+0xd0>
   95808:	8080030b 	ldhu	r2,12(r16)
   9580c:	1080200c 	andi	r2,r2,128
   95810:	1000151e 	bne	r2,zero,95868 <_fclose_r+0xd8>
   95814:	81400c17 	ldw	r5,48(r16)
   95818:	28000526 	beq	r5,zero,95830 <_fclose_r+0xa0>
   9581c:	80801004 	addi	r2,r16,64
   95820:	28800226 	beq	r5,r2,9582c <_fclose_r+0x9c>
   95824:	8809883a 	mov	r4,r17
   95828:	008f9640 	call	8f964 <_free_r>
   9582c:	80000c15 	stw	zero,48(r16)
   95830:	81401117 	ldw	r5,68(r16)
   95834:	28000326 	beq	r5,zero,95844 <_fclose_r+0xb4>
   95838:	8809883a 	mov	r4,r17
   9583c:	008f9640 	call	8f964 <_free_r>
   95840:	80001115 	stw	zero,68(r16)
   95844:	008f8000 	call	8f800 <__sfp_lock_acquire>
   95848:	8000030d 	sth	zero,12(r16)
   9584c:	008f8040 	call	8f804 <__sfp_lock_release>
   95850:	9005883a 	mov	r2,r18
   95854:	003fdc06 	br	957c8 <__alt_data_end+0xfffc5908>
   95858:	008f7f00 	call	8f7f0 <__sinit>
   9585c:	003fd706 	br	957bc <__alt_data_end+0xfffc58fc>
   95860:	04bfffc4 	movi	r18,-1
   95864:	003fe806 	br	95808 <__alt_data_end+0xfffc5948>
   95868:	81400417 	ldw	r5,16(r16)
   9586c:	8809883a 	mov	r4,r17
   95870:	008f9640 	call	8f964 <_free_r>
   95874:	003fe706 	br	95814 <__alt_data_end+0xfffc5954>
   95878:	0005883a 	mov	r2,zero
   9587c:	f800283a 	ret

00095880 <fclose>:
   95880:	008002b4 	movhi	r2,10
   95884:	10bb5c04 	addi	r2,r2,-4752
   95888:	200b883a 	mov	r5,r4
   9588c:	11000017 	ldw	r4,0(r2)
   95890:	00957901 	jmpi	95790 <_fclose_r>

00095894 <__fputwc>:
   95894:	defff804 	addi	sp,sp,-32
   95898:	dcc00415 	stw	r19,16(sp)
   9589c:	dc800315 	stw	r18,12(sp)
   958a0:	dc000115 	stw	r16,4(sp)
   958a4:	dfc00715 	stw	ra,28(sp)
   958a8:	dd400615 	stw	r21,24(sp)
   958ac:	dd000515 	stw	r20,20(sp)
   958b0:	dc400215 	stw	r17,8(sp)
   958b4:	2027883a 	mov	r19,r4
   958b8:	2825883a 	mov	r18,r5
   958bc:	3021883a 	mov	r16,r6
   958c0:	00903400 	call	90340 <__locale_mb_cur_max>
   958c4:	00c00044 	movi	r3,1
   958c8:	10c03e26 	beq	r2,r3,959c4 <__fputwc+0x130>
   958cc:	81c01704 	addi	r7,r16,92
   958d0:	900d883a 	mov	r6,r18
   958d4:	d80b883a 	mov	r5,sp
   958d8:	9809883a 	mov	r4,r19
   958dc:	0095c0c0 	call	95c0c <_wcrtomb_r>
   958e0:	1029883a 	mov	r20,r2
   958e4:	00bfffc4 	movi	r2,-1
   958e8:	a0802026 	beq	r20,r2,9596c <__fputwc+0xd8>
   958ec:	d9400003 	ldbu	r5,0(sp)
   958f0:	a0001c26 	beq	r20,zero,95964 <__fputwc+0xd0>
   958f4:	0023883a 	mov	r17,zero
   958f8:	05400284 	movi	r21,10
   958fc:	00000906 	br	95924 <__fputwc+0x90>
   95900:	80800017 	ldw	r2,0(r16)
   95904:	11400005 	stb	r5,0(r2)
   95908:	80c00017 	ldw	r3,0(r16)
   9590c:	18c00044 	addi	r3,r3,1
   95910:	80c00015 	stw	r3,0(r16)
   95914:	8c400044 	addi	r17,r17,1
   95918:	dc45883a 	add	r2,sp,r17
   9591c:	8d00112e 	bgeu	r17,r20,95964 <__fputwc+0xd0>
   95920:	11400003 	ldbu	r5,0(r2)
   95924:	80c00217 	ldw	r3,8(r16)
   95928:	18ffffc4 	addi	r3,r3,-1
   9592c:	80c00215 	stw	r3,8(r16)
   95930:	183ff30e 	bge	r3,zero,95900 <__alt_data_end+0xfffc5a40>
   95934:	80800617 	ldw	r2,24(r16)
   95938:	18801916 	blt	r3,r2,959a0 <__fputwc+0x10c>
   9593c:	80800017 	ldw	r2,0(r16)
   95940:	11400005 	stb	r5,0(r2)
   95944:	80800017 	ldw	r2,0(r16)
   95948:	10c00003 	ldbu	r3,0(r2)
   9594c:	10800044 	addi	r2,r2,1
   95950:	1d402326 	beq	r3,r21,959e0 <__fputwc+0x14c>
   95954:	80800015 	stw	r2,0(r16)
   95958:	8c400044 	addi	r17,r17,1
   9595c:	dc45883a 	add	r2,sp,r17
   95960:	8d3fef36 	bltu	r17,r20,95920 <__alt_data_end+0xfffc5a60>
   95964:	9005883a 	mov	r2,r18
   95968:	00000406 	br	9597c <__fputwc+0xe8>
   9596c:	80c0030b 	ldhu	r3,12(r16)
   95970:	a005883a 	mov	r2,r20
   95974:	18c01014 	ori	r3,r3,64
   95978:	80c0030d 	sth	r3,12(r16)
   9597c:	dfc00717 	ldw	ra,28(sp)
   95980:	dd400617 	ldw	r21,24(sp)
   95984:	dd000517 	ldw	r20,20(sp)
   95988:	dcc00417 	ldw	r19,16(sp)
   9598c:	dc800317 	ldw	r18,12(sp)
   95990:	dc400217 	ldw	r17,8(sp)
   95994:	dc000117 	ldw	r16,4(sp)
   95998:	dec00804 	addi	sp,sp,32
   9599c:	f800283a 	ret
   959a0:	800d883a 	mov	r6,r16
   959a4:	29403fcc 	andi	r5,r5,255
   959a8:	9809883a 	mov	r4,r19
   959ac:	00954c00 	call	954c0 <__swbuf_r>
   959b0:	10bfffe0 	cmpeqi	r2,r2,-1
   959b4:	10803fcc 	andi	r2,r2,255
   959b8:	103fd626 	beq	r2,zero,95914 <__alt_data_end+0xfffc5a54>
   959bc:	00bfffc4 	movi	r2,-1
   959c0:	003fee06 	br	9597c <__alt_data_end+0xfffc5abc>
   959c4:	90ffffc4 	addi	r3,r18,-1
   959c8:	01003f84 	movi	r4,254
   959cc:	20ffbf36 	bltu	r4,r3,958cc <__alt_data_end+0xfffc5a0c>
   959d0:	900b883a 	mov	r5,r18
   959d4:	dc800005 	stb	r18,0(sp)
   959d8:	1029883a 	mov	r20,r2
   959dc:	003fc506 	br	958f4 <__alt_data_end+0xfffc5a34>
   959e0:	800d883a 	mov	r6,r16
   959e4:	a80b883a 	mov	r5,r21
   959e8:	9809883a 	mov	r4,r19
   959ec:	00954c00 	call	954c0 <__swbuf_r>
   959f0:	10bfffe0 	cmpeqi	r2,r2,-1
   959f4:	003fef06 	br	959b4 <__alt_data_end+0xfffc5af4>

000959f8 <_fputwc_r>:
   959f8:	3080030b 	ldhu	r2,12(r6)
   959fc:	10c8000c 	andi	r3,r2,8192
   95a00:	1800051e 	bne	r3,zero,95a18 <_fputwc_r+0x20>
   95a04:	30c01917 	ldw	r3,100(r6)
   95a08:	10880014 	ori	r2,r2,8192
   95a0c:	3080030d 	sth	r2,12(r6)
   95a10:	18880014 	ori	r2,r3,8192
   95a14:	30801915 	stw	r2,100(r6)
   95a18:	00958941 	jmpi	95894 <__fputwc>

00095a1c <fputwc>:
   95a1c:	008002b4 	movhi	r2,10
   95a20:	defffc04 	addi	sp,sp,-16
   95a24:	10bb5c04 	addi	r2,r2,-4752
   95a28:	dc000115 	stw	r16,4(sp)
   95a2c:	14000017 	ldw	r16,0(r2)
   95a30:	dc400215 	stw	r17,8(sp)
   95a34:	dfc00315 	stw	ra,12(sp)
   95a38:	2023883a 	mov	r17,r4
   95a3c:	80000226 	beq	r16,zero,95a48 <fputwc+0x2c>
   95a40:	80800e17 	ldw	r2,56(r16)
   95a44:	10001026 	beq	r2,zero,95a88 <fputwc+0x6c>
   95a48:	2880030b 	ldhu	r2,12(r5)
   95a4c:	10c8000c 	andi	r3,r2,8192
   95a50:	1800051e 	bne	r3,zero,95a68 <fputwc+0x4c>
   95a54:	28c01917 	ldw	r3,100(r5)
   95a58:	10880014 	ori	r2,r2,8192
   95a5c:	2880030d 	sth	r2,12(r5)
   95a60:	18880014 	ori	r2,r3,8192
   95a64:	28801915 	stw	r2,100(r5)
   95a68:	280d883a 	mov	r6,r5
   95a6c:	8009883a 	mov	r4,r16
   95a70:	880b883a 	mov	r5,r17
   95a74:	dfc00317 	ldw	ra,12(sp)
   95a78:	dc400217 	ldw	r17,8(sp)
   95a7c:	dc000117 	ldw	r16,4(sp)
   95a80:	dec00404 	addi	sp,sp,16
   95a84:	00958941 	jmpi	95894 <__fputwc>
   95a88:	8009883a 	mov	r4,r16
   95a8c:	d9400015 	stw	r5,0(sp)
   95a90:	008f7f00 	call	8f7f0 <__sinit>
   95a94:	d9400017 	ldw	r5,0(sp)
   95a98:	003feb06 	br	95a48 <__alt_data_end+0xfffc5b88>

00095a9c <_fstat_r>:
   95a9c:	defffd04 	addi	sp,sp,-12
   95aa0:	2805883a 	mov	r2,r5
   95aa4:	dc000015 	stw	r16,0(sp)
   95aa8:	040002b4 	movhi	r16,10
   95aac:	dc400115 	stw	r17,4(sp)
   95ab0:	84050204 	addi	r16,r16,5128
   95ab4:	2023883a 	mov	r17,r4
   95ab8:	300b883a 	mov	r5,r6
   95abc:	1009883a 	mov	r4,r2
   95ac0:	dfc00215 	stw	ra,8(sp)
   95ac4:	80000015 	stw	zero,0(r16)
   95ac8:	00990800 	call	99080 <fstat>
   95acc:	00ffffc4 	movi	r3,-1
   95ad0:	10c00526 	beq	r2,r3,95ae8 <_fstat_r+0x4c>
   95ad4:	dfc00217 	ldw	ra,8(sp)
   95ad8:	dc400117 	ldw	r17,4(sp)
   95adc:	dc000017 	ldw	r16,0(sp)
   95ae0:	dec00304 	addi	sp,sp,12
   95ae4:	f800283a 	ret
   95ae8:	80c00017 	ldw	r3,0(r16)
   95aec:	183ff926 	beq	r3,zero,95ad4 <__alt_data_end+0xfffc5c14>
   95af0:	88c00015 	stw	r3,0(r17)
   95af4:	003ff706 	br	95ad4 <__alt_data_end+0xfffc5c14>

00095af8 <_isatty_r>:
   95af8:	defffd04 	addi	sp,sp,-12
   95afc:	dc000015 	stw	r16,0(sp)
   95b00:	040002b4 	movhi	r16,10
   95b04:	dc400115 	stw	r17,4(sp)
   95b08:	84050204 	addi	r16,r16,5128
   95b0c:	2023883a 	mov	r17,r4
   95b10:	2809883a 	mov	r4,r5
   95b14:	dfc00215 	stw	ra,8(sp)
   95b18:	80000015 	stw	zero,0(r16)
   95b1c:	009916c0 	call	9916c <isatty>
   95b20:	00ffffc4 	movi	r3,-1
   95b24:	10c00526 	beq	r2,r3,95b3c <_isatty_r+0x44>
   95b28:	dfc00217 	ldw	ra,8(sp)
   95b2c:	dc400117 	ldw	r17,4(sp)
   95b30:	dc000017 	ldw	r16,0(sp)
   95b34:	dec00304 	addi	sp,sp,12
   95b38:	f800283a 	ret
   95b3c:	80c00017 	ldw	r3,0(r16)
   95b40:	183ff926 	beq	r3,zero,95b28 <__alt_data_end+0xfffc5c68>
   95b44:	88c00015 	stw	r3,0(r17)
   95b48:	003ff706 	br	95b28 <__alt_data_end+0xfffc5c68>

00095b4c <_lseek_r>:
   95b4c:	defffd04 	addi	sp,sp,-12
   95b50:	2805883a 	mov	r2,r5
   95b54:	dc000015 	stw	r16,0(sp)
   95b58:	040002b4 	movhi	r16,10
   95b5c:	dc400115 	stw	r17,4(sp)
   95b60:	300b883a 	mov	r5,r6
   95b64:	84050204 	addi	r16,r16,5128
   95b68:	2023883a 	mov	r17,r4
   95b6c:	380d883a 	mov	r6,r7
   95b70:	1009883a 	mov	r4,r2
   95b74:	dfc00215 	stw	ra,8(sp)
   95b78:	80000015 	stw	zero,0(r16)
   95b7c:	00993380 	call	99338 <lseek>
   95b80:	00ffffc4 	movi	r3,-1
   95b84:	10c00526 	beq	r2,r3,95b9c <_lseek_r+0x50>
   95b88:	dfc00217 	ldw	ra,8(sp)
   95b8c:	dc400117 	ldw	r17,4(sp)
   95b90:	dc000017 	ldw	r16,0(sp)
   95b94:	dec00304 	addi	sp,sp,12
   95b98:	f800283a 	ret
   95b9c:	80c00017 	ldw	r3,0(r16)
   95ba0:	183ff926 	beq	r3,zero,95b88 <__alt_data_end+0xfffc5cc8>
   95ba4:	88c00015 	stw	r3,0(r17)
   95ba8:	003ff706 	br	95b88 <__alt_data_end+0xfffc5cc8>

00095bac <_read_r>:
   95bac:	defffd04 	addi	sp,sp,-12
   95bb0:	2805883a 	mov	r2,r5
   95bb4:	dc000015 	stw	r16,0(sp)
   95bb8:	040002b4 	movhi	r16,10
   95bbc:	dc400115 	stw	r17,4(sp)
   95bc0:	300b883a 	mov	r5,r6
   95bc4:	84050204 	addi	r16,r16,5128
   95bc8:	2023883a 	mov	r17,r4
   95bcc:	380d883a 	mov	r6,r7
   95bd0:	1009883a 	mov	r4,r2
   95bd4:	dfc00215 	stw	ra,8(sp)
   95bd8:	80000015 	stw	zero,0(r16)
   95bdc:	009950c0 	call	9950c <read>
   95be0:	00ffffc4 	movi	r3,-1
   95be4:	10c00526 	beq	r2,r3,95bfc <_read_r+0x50>
   95be8:	dfc00217 	ldw	ra,8(sp)
   95bec:	dc400117 	ldw	r17,4(sp)
   95bf0:	dc000017 	ldw	r16,0(sp)
   95bf4:	dec00304 	addi	sp,sp,12
   95bf8:	f800283a 	ret
   95bfc:	80c00017 	ldw	r3,0(r16)
   95c00:	183ff926 	beq	r3,zero,95be8 <__alt_data_end+0xfffc5d28>
   95c04:	88c00015 	stw	r3,0(r17)
   95c08:	003ff706 	br	95be8 <__alt_data_end+0xfffc5d28>

00095c0c <_wcrtomb_r>:
   95c0c:	defff604 	addi	sp,sp,-40
   95c10:	008002b4 	movhi	r2,10
   95c14:	dc800815 	stw	r18,32(sp)
   95c18:	dc400715 	stw	r17,28(sp)
   95c1c:	dc000615 	stw	r16,24(sp)
   95c20:	10bb6004 	addi	r2,r2,-4736
   95c24:	dfc00915 	stw	ra,36(sp)
   95c28:	2021883a 	mov	r16,r4
   95c2c:	3823883a 	mov	r17,r7
   95c30:	14800017 	ldw	r18,0(r2)
   95c34:	28001426 	beq	r5,zero,95c88 <_wcrtomb_r+0x7c>
   95c38:	d9400415 	stw	r5,16(sp)
   95c3c:	d9800515 	stw	r6,20(sp)
   95c40:	00903340 	call	90334 <__locale_charset>
   95c44:	d9800517 	ldw	r6,20(sp)
   95c48:	d9400417 	ldw	r5,16(sp)
   95c4c:	100f883a 	mov	r7,r2
   95c50:	dc400015 	stw	r17,0(sp)
   95c54:	8009883a 	mov	r4,r16
   95c58:	903ee83a 	callr	r18
   95c5c:	00ffffc4 	movi	r3,-1
   95c60:	10c0031e 	bne	r2,r3,95c70 <_wcrtomb_r+0x64>
   95c64:	88000015 	stw	zero,0(r17)
   95c68:	00c02284 	movi	r3,138
   95c6c:	80c00015 	stw	r3,0(r16)
   95c70:	dfc00917 	ldw	ra,36(sp)
   95c74:	dc800817 	ldw	r18,32(sp)
   95c78:	dc400717 	ldw	r17,28(sp)
   95c7c:	dc000617 	ldw	r16,24(sp)
   95c80:	dec00a04 	addi	sp,sp,40
   95c84:	f800283a 	ret
   95c88:	00903340 	call	90334 <__locale_charset>
   95c8c:	100f883a 	mov	r7,r2
   95c90:	dc400015 	stw	r17,0(sp)
   95c94:	000d883a 	mov	r6,zero
   95c98:	d9400104 	addi	r5,sp,4
   95c9c:	8009883a 	mov	r4,r16
   95ca0:	903ee83a 	callr	r18
   95ca4:	003fed06 	br	95c5c <__alt_data_end+0xfffc5d9c>

00095ca8 <wcrtomb>:
   95ca8:	defff604 	addi	sp,sp,-40
   95cac:	008002b4 	movhi	r2,10
   95cb0:	dc800615 	stw	r18,24(sp)
   95cb4:	dc400515 	stw	r17,20(sp)
   95cb8:	10bb5c04 	addi	r2,r2,-4752
   95cbc:	dfc00915 	stw	ra,36(sp)
   95cc0:	dd000815 	stw	r20,32(sp)
   95cc4:	dcc00715 	stw	r19,28(sp)
   95cc8:	dc000415 	stw	r16,16(sp)
   95ccc:	3025883a 	mov	r18,r6
   95cd0:	14400017 	ldw	r17,0(r2)
   95cd4:	20001926 	beq	r4,zero,95d3c <wcrtomb+0x94>
   95cd8:	008002b4 	movhi	r2,10
   95cdc:	10bb6004 	addi	r2,r2,-4736
   95ce0:	15000017 	ldw	r20,0(r2)
   95ce4:	2021883a 	mov	r16,r4
   95ce8:	2827883a 	mov	r19,r5
   95cec:	00903340 	call	90334 <__locale_charset>
   95cf0:	100f883a 	mov	r7,r2
   95cf4:	dc800015 	stw	r18,0(sp)
   95cf8:	980d883a 	mov	r6,r19
   95cfc:	800b883a 	mov	r5,r16
   95d00:	8809883a 	mov	r4,r17
   95d04:	a03ee83a 	callr	r20
   95d08:	00ffffc4 	movi	r3,-1
   95d0c:	10c0031e 	bne	r2,r3,95d1c <wcrtomb+0x74>
   95d10:	90000015 	stw	zero,0(r18)
   95d14:	00c02284 	movi	r3,138
   95d18:	88c00015 	stw	r3,0(r17)
   95d1c:	dfc00917 	ldw	ra,36(sp)
   95d20:	dd000817 	ldw	r20,32(sp)
   95d24:	dcc00717 	ldw	r19,28(sp)
   95d28:	dc800617 	ldw	r18,24(sp)
   95d2c:	dc400517 	ldw	r17,20(sp)
   95d30:	dc000417 	ldw	r16,16(sp)
   95d34:	dec00a04 	addi	sp,sp,40
   95d38:	f800283a 	ret
   95d3c:	008002b4 	movhi	r2,10
   95d40:	10bb6004 	addi	r2,r2,-4736
   95d44:	14000017 	ldw	r16,0(r2)
   95d48:	00903340 	call	90334 <__locale_charset>
   95d4c:	100f883a 	mov	r7,r2
   95d50:	dc800015 	stw	r18,0(sp)
   95d54:	000d883a 	mov	r6,zero
   95d58:	d9400104 	addi	r5,sp,4
   95d5c:	8809883a 	mov	r4,r17
   95d60:	803ee83a 	callr	r16
   95d64:	003fe806 	br	95d08 <__alt_data_end+0xfffc5e48>

00095d68 <__ascii_wctomb>:
   95d68:	28000526 	beq	r5,zero,95d80 <__ascii_wctomb+0x18>
   95d6c:	00803fc4 	movi	r2,255
   95d70:	11800536 	bltu	r2,r6,95d88 <__ascii_wctomb+0x20>
   95d74:	29800005 	stb	r6,0(r5)
   95d78:	00800044 	movi	r2,1
   95d7c:	f800283a 	ret
   95d80:	0005883a 	mov	r2,zero
   95d84:	f800283a 	ret
   95d88:	00802284 	movi	r2,138
   95d8c:	20800015 	stw	r2,0(r4)
   95d90:	00bfffc4 	movi	r2,-1
   95d94:	f800283a 	ret

00095d98 <_wctomb_r>:
   95d98:	008002b4 	movhi	r2,10
   95d9c:	defff904 	addi	sp,sp,-28
   95da0:	10bb6004 	addi	r2,r2,-4736
   95da4:	dfc00615 	stw	ra,24(sp)
   95da8:	dc400515 	stw	r17,20(sp)
   95dac:	dc000415 	stw	r16,16(sp)
   95db0:	3823883a 	mov	r17,r7
   95db4:	14000017 	ldw	r16,0(r2)
   95db8:	d9000115 	stw	r4,4(sp)
   95dbc:	d9400215 	stw	r5,8(sp)
   95dc0:	d9800315 	stw	r6,12(sp)
   95dc4:	00903340 	call	90334 <__locale_charset>
   95dc8:	d9800317 	ldw	r6,12(sp)
   95dcc:	d9400217 	ldw	r5,8(sp)
   95dd0:	d9000117 	ldw	r4,4(sp)
   95dd4:	100f883a 	mov	r7,r2
   95dd8:	dc400015 	stw	r17,0(sp)
   95ddc:	803ee83a 	callr	r16
   95de0:	dfc00617 	ldw	ra,24(sp)
   95de4:	dc400517 	ldw	r17,20(sp)
   95de8:	dc000417 	ldw	r16,16(sp)
   95dec:	dec00704 	addi	sp,sp,28
   95df0:	f800283a 	ret

00095df4 <__udivdi3>:
   95df4:	defff504 	addi	sp,sp,-44
   95df8:	dcc00415 	stw	r19,16(sp)
   95dfc:	dc000115 	stw	r16,4(sp)
   95e00:	dfc00a15 	stw	ra,40(sp)
   95e04:	df000915 	stw	fp,36(sp)
   95e08:	ddc00815 	stw	r23,32(sp)
   95e0c:	dd800715 	stw	r22,28(sp)
   95e10:	dd400615 	stw	r21,24(sp)
   95e14:	dd000515 	stw	r20,20(sp)
   95e18:	dc800315 	stw	r18,12(sp)
   95e1c:	dc400215 	stw	r17,8(sp)
   95e20:	2027883a 	mov	r19,r4
   95e24:	2821883a 	mov	r16,r5
   95e28:	3800411e 	bne	r7,zero,95f30 <__udivdi3+0x13c>
   95e2c:	3023883a 	mov	r17,r6
   95e30:	2025883a 	mov	r18,r4
   95e34:	2980522e 	bgeu	r5,r6,95f80 <__udivdi3+0x18c>
   95e38:	00bfffd4 	movui	r2,65535
   95e3c:	282d883a 	mov	r22,r5
   95e40:	1180a836 	bltu	r2,r6,960e4 <__udivdi3+0x2f0>
   95e44:	00803fc4 	movi	r2,255
   95e48:	1185803a 	cmpltu	r2,r2,r6
   95e4c:	100490fa 	slli	r2,r2,3
   95e50:	3086d83a 	srl	r3,r6,r2
   95e54:	010002b4 	movhi	r4,10
   95e58:	2131a104 	addi	r4,r4,-14716
   95e5c:	20c7883a 	add	r3,r4,r3
   95e60:	18c00003 	ldbu	r3,0(r3)
   95e64:	1885883a 	add	r2,r3,r2
   95e68:	00c00804 	movi	r3,32
   95e6c:	1887c83a 	sub	r3,r3,r2
   95e70:	18000526 	beq	r3,zero,95e88 <__udivdi3+0x94>
   95e74:	80e0983a 	sll	r16,r16,r3
   95e78:	9884d83a 	srl	r2,r19,r2
   95e7c:	30e2983a 	sll	r17,r6,r3
   95e80:	98e4983a 	sll	r18,r19,r3
   95e84:	142cb03a 	or	r22,r2,r16
   95e88:	882ad43a 	srli	r21,r17,16
   95e8c:	b009883a 	mov	r4,r22
   95e90:	8d3fffcc 	andi	r20,r17,65535
   95e94:	a80b883a 	mov	r5,r21
   95e98:	0088df00 	call	88df0 <__umodsi3>
   95e9c:	b009883a 	mov	r4,r22
   95ea0:	a80b883a 	mov	r5,r21
   95ea4:	1027883a 	mov	r19,r2
   95ea8:	0088d8c0 	call	88d8c <__udivsi3>
   95eac:	102d883a 	mov	r22,r2
   95eb0:	9826943a 	slli	r19,r19,16
   95eb4:	9004d43a 	srli	r2,r18,16
   95eb8:	a5a1383a 	mul	r16,r20,r22
   95ebc:	14c4b03a 	or	r2,r2,r19
   95ec0:	1400052e 	bgeu	r2,r16,95ed8 <__udivdi3+0xe4>
   95ec4:	1445883a 	add	r2,r2,r17
   95ec8:	b0ffffc4 	addi	r3,r22,-1
   95ecc:	14400136 	bltu	r2,r17,95ed4 <__udivdi3+0xe0>
   95ed0:	14012336 	bltu	r2,r16,96360 <__udivdi3+0x56c>
   95ed4:	182d883a 	mov	r22,r3
   95ed8:	1421c83a 	sub	r16,r2,r16
   95edc:	a80b883a 	mov	r5,r21
   95ee0:	8009883a 	mov	r4,r16
   95ee4:	0088df00 	call	88df0 <__umodsi3>
   95ee8:	1027883a 	mov	r19,r2
   95eec:	a80b883a 	mov	r5,r21
   95ef0:	8009883a 	mov	r4,r16
   95ef4:	0088d8c0 	call	88d8c <__udivsi3>
   95ef8:	9826943a 	slli	r19,r19,16
   95efc:	a0a9383a 	mul	r20,r20,r2
   95f00:	94bfffcc 	andi	r18,r18,65535
   95f04:	94e4b03a 	or	r18,r18,r19
   95f08:	9500052e 	bgeu	r18,r20,95f20 <__udivdi3+0x12c>
   95f0c:	8ca5883a 	add	r18,r17,r18
   95f10:	10ffffc4 	addi	r3,r2,-1
   95f14:	9440f136 	bltu	r18,r17,962dc <__udivdi3+0x4e8>
   95f18:	9500f02e 	bgeu	r18,r20,962dc <__udivdi3+0x4e8>
   95f1c:	10bfff84 	addi	r2,r2,-2
   95f20:	b00c943a 	slli	r6,r22,16
   95f24:	0007883a 	mov	r3,zero
   95f28:	3084b03a 	or	r2,r6,r2
   95f2c:	00005906 	br	96094 <__udivdi3+0x2a0>
   95f30:	29c05636 	bltu	r5,r7,9608c <__udivdi3+0x298>
   95f34:	00bfffd4 	movui	r2,65535
   95f38:	11c0622e 	bgeu	r2,r7,960c4 <__udivdi3+0x2d0>
   95f3c:	00804034 	movhi	r2,256
   95f40:	10bfffc4 	addi	r2,r2,-1
   95f44:	11c0ee36 	bltu	r2,r7,96300 <__udivdi3+0x50c>
   95f48:	00800404 	movi	r2,16
   95f4c:	3886d83a 	srl	r3,r7,r2
   95f50:	010002b4 	movhi	r4,10
   95f54:	2131a104 	addi	r4,r4,-14716
   95f58:	20c7883a 	add	r3,r4,r3
   95f5c:	18c00003 	ldbu	r3,0(r3)
   95f60:	05400804 	movi	r21,32
   95f64:	1885883a 	add	r2,r3,r2
   95f68:	a8abc83a 	sub	r21,r21,r2
   95f6c:	a800621e 	bne	r21,zero,960f8 <__udivdi3+0x304>
   95f70:	3c00e936 	bltu	r7,r16,96318 <__udivdi3+0x524>
   95f74:	9985403a 	cmpgeu	r2,r19,r6
   95f78:	0007883a 	mov	r3,zero
   95f7c:	00004506 	br	96094 <__udivdi3+0x2a0>
   95f80:	3000041e 	bne	r6,zero,95f94 <__udivdi3+0x1a0>
   95f84:	000b883a 	mov	r5,zero
   95f88:	01000044 	movi	r4,1
   95f8c:	0088d8c0 	call	88d8c <__udivsi3>
   95f90:	1023883a 	mov	r17,r2
   95f94:	00bfffd4 	movui	r2,65535
   95f98:	14404e2e 	bgeu	r2,r17,960d4 <__udivdi3+0x2e0>
   95f9c:	00804034 	movhi	r2,256
   95fa0:	10bfffc4 	addi	r2,r2,-1
   95fa4:	1440d836 	bltu	r2,r17,96308 <__udivdi3+0x514>
   95fa8:	00800404 	movi	r2,16
   95fac:	8886d83a 	srl	r3,r17,r2
   95fb0:	010002b4 	movhi	r4,10
   95fb4:	2131a104 	addi	r4,r4,-14716
   95fb8:	20c7883a 	add	r3,r4,r3
   95fbc:	18c00003 	ldbu	r3,0(r3)
   95fc0:	1885883a 	add	r2,r3,r2
   95fc4:	00c00804 	movi	r3,32
   95fc8:	1887c83a 	sub	r3,r3,r2
   95fcc:	18008f1e 	bne	r3,zero,9620c <__udivdi3+0x418>
   95fd0:	882ad43a 	srli	r21,r17,16
   95fd4:	8461c83a 	sub	r16,r16,r17
   95fd8:	8d3fffcc 	andi	r20,r17,65535
   95fdc:	00c00044 	movi	r3,1
   95fe0:	8009883a 	mov	r4,r16
   95fe4:	a80b883a 	mov	r5,r21
   95fe8:	d8c00015 	stw	r3,0(sp)
   95fec:	0088df00 	call	88df0 <__umodsi3>
   95ff0:	8009883a 	mov	r4,r16
   95ff4:	a80b883a 	mov	r5,r21
   95ff8:	1027883a 	mov	r19,r2
   95ffc:	0088d8c0 	call	88d8c <__udivsi3>
   96000:	9826943a 	slli	r19,r19,16
   96004:	9008d43a 	srli	r4,r18,16
   96008:	1521383a 	mul	r16,r2,r20
   9600c:	102d883a 	mov	r22,r2
   96010:	24c8b03a 	or	r4,r4,r19
   96014:	d8c00017 	ldw	r3,0(sp)
   96018:	2400052e 	bgeu	r4,r16,96030 <__udivdi3+0x23c>
   9601c:	2449883a 	add	r4,r4,r17
   96020:	b0bfffc4 	addi	r2,r22,-1
   96024:	24400136 	bltu	r4,r17,9602c <__udivdi3+0x238>
   96028:	2400ca36 	bltu	r4,r16,96354 <__udivdi3+0x560>
   9602c:	102d883a 	mov	r22,r2
   96030:	2421c83a 	sub	r16,r4,r16
   96034:	a80b883a 	mov	r5,r21
   96038:	8009883a 	mov	r4,r16
   9603c:	d8c00015 	stw	r3,0(sp)
   96040:	0088df00 	call	88df0 <__umodsi3>
   96044:	1027883a 	mov	r19,r2
   96048:	a80b883a 	mov	r5,r21
   9604c:	8009883a 	mov	r4,r16
   96050:	0088d8c0 	call	88d8c <__udivsi3>
   96054:	9826943a 	slli	r19,r19,16
   96058:	1529383a 	mul	r20,r2,r20
   9605c:	94bfffcc 	andi	r18,r18,65535
   96060:	94e4b03a 	or	r18,r18,r19
   96064:	d8c00017 	ldw	r3,0(sp)
   96068:	9500052e 	bgeu	r18,r20,96080 <__udivdi3+0x28c>
   9606c:	8ca5883a 	add	r18,r17,r18
   96070:	113fffc4 	addi	r4,r2,-1
   96074:	94409736 	bltu	r18,r17,962d4 <__udivdi3+0x4e0>
   96078:	9500962e 	bgeu	r18,r20,962d4 <__udivdi3+0x4e0>
   9607c:	10bfff84 	addi	r2,r2,-2
   96080:	b00c943a 	slli	r6,r22,16
   96084:	3084b03a 	or	r2,r6,r2
   96088:	00000206 	br	96094 <__udivdi3+0x2a0>
   9608c:	0007883a 	mov	r3,zero
   96090:	0005883a 	mov	r2,zero
   96094:	dfc00a17 	ldw	ra,40(sp)
   96098:	df000917 	ldw	fp,36(sp)
   9609c:	ddc00817 	ldw	r23,32(sp)
   960a0:	dd800717 	ldw	r22,28(sp)
   960a4:	dd400617 	ldw	r21,24(sp)
   960a8:	dd000517 	ldw	r20,20(sp)
   960ac:	dcc00417 	ldw	r19,16(sp)
   960b0:	dc800317 	ldw	r18,12(sp)
   960b4:	dc400217 	ldw	r17,8(sp)
   960b8:	dc000117 	ldw	r16,4(sp)
   960bc:	dec00b04 	addi	sp,sp,44
   960c0:	f800283a 	ret
   960c4:	00803fc4 	movi	r2,255
   960c8:	11c5803a 	cmpltu	r2,r2,r7
   960cc:	100490fa 	slli	r2,r2,3
   960d0:	003f9e06 	br	95f4c <__alt_data_end+0xfffc608c>
   960d4:	00803fc4 	movi	r2,255
   960d8:	1445803a 	cmpltu	r2,r2,r17
   960dc:	100490fa 	slli	r2,r2,3
   960e0:	003fb206 	br	95fac <__alt_data_end+0xfffc60ec>
   960e4:	00804034 	movhi	r2,256
   960e8:	10bfffc4 	addi	r2,r2,-1
   960ec:	11808836 	bltu	r2,r6,96310 <__udivdi3+0x51c>
   960f0:	00800404 	movi	r2,16
   960f4:	003f5606 	br	95e50 <__alt_data_end+0xfffc5f90>
   960f8:	30aed83a 	srl	r23,r6,r2
   960fc:	3d4e983a 	sll	r7,r7,r21
   96100:	80acd83a 	srl	r22,r16,r2
   96104:	9884d83a 	srl	r2,r19,r2
   96108:	3deeb03a 	or	r23,r7,r23
   9610c:	b824d43a 	srli	r18,r23,16
   96110:	8560983a 	sll	r16,r16,r21
   96114:	b009883a 	mov	r4,r22
   96118:	900b883a 	mov	r5,r18
   9611c:	3568983a 	sll	r20,r6,r21
   96120:	1420b03a 	or	r16,r2,r16
   96124:	0088df00 	call	88df0 <__umodsi3>
   96128:	b009883a 	mov	r4,r22
   9612c:	900b883a 	mov	r5,r18
   96130:	1023883a 	mov	r17,r2
   96134:	0088d8c0 	call	88d8c <__udivsi3>
   96138:	8808943a 	slli	r4,r17,16
   9613c:	bf3fffcc 	andi	fp,r23,65535
   96140:	8006d43a 	srli	r3,r16,16
   96144:	e0a3383a 	mul	r17,fp,r2
   96148:	100d883a 	mov	r6,r2
   9614c:	1906b03a 	or	r3,r3,r4
   96150:	1c40042e 	bgeu	r3,r17,96164 <__udivdi3+0x370>
   96154:	1dc7883a 	add	r3,r3,r23
   96158:	10bfffc4 	addi	r2,r2,-1
   9615c:	1dc0752e 	bgeu	r3,r23,96334 <__udivdi3+0x540>
   96160:	100d883a 	mov	r6,r2
   96164:	1c63c83a 	sub	r17,r3,r17
   96168:	900b883a 	mov	r5,r18
   9616c:	8809883a 	mov	r4,r17
   96170:	d9800015 	stw	r6,0(sp)
   96174:	0088df00 	call	88df0 <__umodsi3>
   96178:	102d883a 	mov	r22,r2
   9617c:	8809883a 	mov	r4,r17
   96180:	900b883a 	mov	r5,r18
   96184:	0088d8c0 	call	88d8c <__udivsi3>
   96188:	b02c943a 	slli	r22,r22,16
   9618c:	e089383a 	mul	r4,fp,r2
   96190:	843fffcc 	andi	r16,r16,65535
   96194:	85a0b03a 	or	r16,r16,r22
   96198:	d9800017 	ldw	r6,0(sp)
   9619c:	8100042e 	bgeu	r16,r4,961b0 <__udivdi3+0x3bc>
   961a0:	85e1883a 	add	r16,r16,r23
   961a4:	10ffffc4 	addi	r3,r2,-1
   961a8:	85c05e2e 	bgeu	r16,r23,96324 <__udivdi3+0x530>
   961ac:	1805883a 	mov	r2,r3
   961b0:	300c943a 	slli	r6,r6,16
   961b4:	a17fffcc 	andi	r5,r20,65535
   961b8:	a028d43a 	srli	r20,r20,16
   961bc:	3084b03a 	or	r2,r6,r2
   961c0:	10ffffcc 	andi	r3,r2,65535
   961c4:	100cd43a 	srli	r6,r2,16
   961c8:	194f383a 	mul	r7,r3,r5
   961cc:	1d07383a 	mul	r3,r3,r20
   961d0:	314b383a 	mul	r5,r6,r5
   961d4:	3810d43a 	srli	r8,r7,16
   961d8:	8121c83a 	sub	r16,r16,r4
   961dc:	1947883a 	add	r3,r3,r5
   961e0:	40c7883a 	add	r3,r8,r3
   961e4:	350d383a 	mul	r6,r6,r20
   961e8:	1940022e 	bgeu	r3,r5,961f4 <__udivdi3+0x400>
   961ec:	01000074 	movhi	r4,1
   961f0:	310d883a 	add	r6,r6,r4
   961f4:	1828d43a 	srli	r20,r3,16
   961f8:	a18d883a 	add	r6,r20,r6
   961fc:	81803e36 	bltu	r16,r6,962f8 <__udivdi3+0x504>
   96200:	81803826 	beq	r16,r6,962e4 <__udivdi3+0x4f0>
   96204:	0007883a 	mov	r3,zero
   96208:	003fa206 	br	96094 <__alt_data_end+0xfffc61d4>
   9620c:	88e2983a 	sll	r17,r17,r3
   96210:	80a8d83a 	srl	r20,r16,r2
   96214:	80e0983a 	sll	r16,r16,r3
   96218:	882ad43a 	srli	r21,r17,16
   9621c:	9884d83a 	srl	r2,r19,r2
   96220:	a009883a 	mov	r4,r20
   96224:	a80b883a 	mov	r5,r21
   96228:	142eb03a 	or	r23,r2,r16
   9622c:	98e4983a 	sll	r18,r19,r3
   96230:	0088df00 	call	88df0 <__umodsi3>
   96234:	a009883a 	mov	r4,r20
   96238:	a80b883a 	mov	r5,r21
   9623c:	1021883a 	mov	r16,r2
   96240:	0088d8c0 	call	88d8c <__udivsi3>
   96244:	1039883a 	mov	fp,r2
   96248:	8d3fffcc 	andi	r20,r17,65535
   9624c:	8020943a 	slli	r16,r16,16
   96250:	b804d43a 	srli	r2,r23,16
   96254:	a72d383a 	mul	r22,r20,fp
   96258:	1404b03a 	or	r2,r2,r16
   9625c:	1580062e 	bgeu	r2,r22,96278 <__udivdi3+0x484>
   96260:	1445883a 	add	r2,r2,r17
   96264:	e0ffffc4 	addi	r3,fp,-1
   96268:	14403836 	bltu	r2,r17,9634c <__udivdi3+0x558>
   9626c:	1580372e 	bgeu	r2,r22,9634c <__udivdi3+0x558>
   96270:	e73fff84 	addi	fp,fp,-2
   96274:	1445883a 	add	r2,r2,r17
   96278:	15adc83a 	sub	r22,r2,r22
   9627c:	a80b883a 	mov	r5,r21
   96280:	b009883a 	mov	r4,r22
   96284:	0088df00 	call	88df0 <__umodsi3>
   96288:	1027883a 	mov	r19,r2
   9628c:	b009883a 	mov	r4,r22
   96290:	a80b883a 	mov	r5,r21
   96294:	0088d8c0 	call	88d8c <__udivsi3>
   96298:	9826943a 	slli	r19,r19,16
   9629c:	a0a1383a 	mul	r16,r20,r2
   962a0:	b93fffcc 	andi	r4,r23,65535
   962a4:	24c8b03a 	or	r4,r4,r19
   962a8:	2400062e 	bgeu	r4,r16,962c4 <__udivdi3+0x4d0>
   962ac:	2449883a 	add	r4,r4,r17
   962b0:	10ffffc4 	addi	r3,r2,-1
   962b4:	24402336 	bltu	r4,r17,96344 <__udivdi3+0x550>
   962b8:	2400222e 	bgeu	r4,r16,96344 <__udivdi3+0x550>
   962bc:	10bfff84 	addi	r2,r2,-2
   962c0:	2449883a 	add	r4,r4,r17
   962c4:	e038943a 	slli	fp,fp,16
   962c8:	2421c83a 	sub	r16,r4,r16
   962cc:	e086b03a 	or	r3,fp,r2
   962d0:	003f4306 	br	95fe0 <__alt_data_end+0xfffc6120>
   962d4:	2005883a 	mov	r2,r4
   962d8:	003f6906 	br	96080 <__alt_data_end+0xfffc61c0>
   962dc:	1805883a 	mov	r2,r3
   962e0:	003f0f06 	br	95f20 <__alt_data_end+0xfffc6060>
   962e4:	1806943a 	slli	r3,r3,16
   962e8:	9d66983a 	sll	r19,r19,r21
   962ec:	39ffffcc 	andi	r7,r7,65535
   962f0:	19c7883a 	add	r3,r3,r7
   962f4:	98ffc32e 	bgeu	r19,r3,96204 <__alt_data_end+0xfffc6344>
   962f8:	10bfffc4 	addi	r2,r2,-1
   962fc:	003fc106 	br	96204 <__alt_data_end+0xfffc6344>
   96300:	00800604 	movi	r2,24
   96304:	003f1106 	br	95f4c <__alt_data_end+0xfffc608c>
   96308:	00800604 	movi	r2,24
   9630c:	003f2706 	br	95fac <__alt_data_end+0xfffc60ec>
   96310:	00800604 	movi	r2,24
   96314:	003ece06 	br	95e50 <__alt_data_end+0xfffc5f90>
   96318:	0007883a 	mov	r3,zero
   9631c:	00800044 	movi	r2,1
   96320:	003f5c06 	br	96094 <__alt_data_end+0xfffc61d4>
   96324:	813fa12e 	bgeu	r16,r4,961ac <__alt_data_end+0xfffc62ec>
   96328:	10bfff84 	addi	r2,r2,-2
   9632c:	85e1883a 	add	r16,r16,r23
   96330:	003f9f06 	br	961b0 <__alt_data_end+0xfffc62f0>
   96334:	1c7f8a2e 	bgeu	r3,r17,96160 <__alt_data_end+0xfffc62a0>
   96338:	31bfff84 	addi	r6,r6,-2
   9633c:	1dc7883a 	add	r3,r3,r23
   96340:	003f8806 	br	96164 <__alt_data_end+0xfffc62a4>
   96344:	1805883a 	mov	r2,r3
   96348:	003fde06 	br	962c4 <__alt_data_end+0xfffc6404>
   9634c:	1839883a 	mov	fp,r3
   96350:	003fc906 	br	96278 <__alt_data_end+0xfffc63b8>
   96354:	b5bfff84 	addi	r22,r22,-2
   96358:	2449883a 	add	r4,r4,r17
   9635c:	003f3406 	br	96030 <__alt_data_end+0xfffc6170>
   96360:	b5bfff84 	addi	r22,r22,-2
   96364:	1445883a 	add	r2,r2,r17
   96368:	003edb06 	br	95ed8 <__alt_data_end+0xfffc6018>

0009636c <__umoddi3>:
   9636c:	defff404 	addi	sp,sp,-48
   96370:	df000a15 	stw	fp,40(sp)
   96374:	dc400315 	stw	r17,12(sp)
   96378:	dc000215 	stw	r16,8(sp)
   9637c:	dfc00b15 	stw	ra,44(sp)
   96380:	ddc00915 	stw	r23,36(sp)
   96384:	dd800815 	stw	r22,32(sp)
   96388:	dd400715 	stw	r21,28(sp)
   9638c:	dd000615 	stw	r20,24(sp)
   96390:	dcc00515 	stw	r19,20(sp)
   96394:	dc800415 	stw	r18,16(sp)
   96398:	2021883a 	mov	r16,r4
   9639c:	2823883a 	mov	r17,r5
   963a0:	2839883a 	mov	fp,r5
   963a4:	38003c1e 	bne	r7,zero,96498 <__umoddi3+0x12c>
   963a8:	3027883a 	mov	r19,r6
   963ac:	2029883a 	mov	r20,r4
   963b0:	2980512e 	bgeu	r5,r6,964f8 <__umoddi3+0x18c>
   963b4:	00bfffd4 	movui	r2,65535
   963b8:	11809a36 	bltu	r2,r6,96624 <__umoddi3+0x2b8>
   963bc:	01003fc4 	movi	r4,255
   963c0:	2189803a 	cmpltu	r4,r4,r6
   963c4:	200890fa 	slli	r4,r4,3
   963c8:	3104d83a 	srl	r2,r6,r4
   963cc:	00c002b4 	movhi	r3,10
   963d0:	18f1a104 	addi	r3,r3,-14716
   963d4:	1885883a 	add	r2,r3,r2
   963d8:	10c00003 	ldbu	r3,0(r2)
   963dc:	00800804 	movi	r2,32
   963e0:	1909883a 	add	r4,r3,r4
   963e4:	1125c83a 	sub	r18,r2,r4
   963e8:	90000526 	beq	r18,zero,96400 <__umoddi3+0x94>
   963ec:	8ca2983a 	sll	r17,r17,r18
   963f0:	8108d83a 	srl	r4,r16,r4
   963f4:	34a6983a 	sll	r19,r6,r18
   963f8:	84a8983a 	sll	r20,r16,r18
   963fc:	2478b03a 	or	fp,r4,r17
   96400:	982ed43a 	srli	r23,r19,16
   96404:	e009883a 	mov	r4,fp
   96408:	9dbfffcc 	andi	r22,r19,65535
   9640c:	b80b883a 	mov	r5,r23
   96410:	0088df00 	call	88df0 <__umodsi3>
   96414:	e009883a 	mov	r4,fp
   96418:	b80b883a 	mov	r5,r23
   9641c:	102b883a 	mov	r21,r2
   96420:	0088d8c0 	call	88d8c <__udivsi3>
   96424:	a806943a 	slli	r3,r21,16
   96428:	a008d43a 	srli	r4,r20,16
   9642c:	b085383a 	mul	r2,r22,r2
   96430:	20c8b03a 	or	r4,r4,r3
   96434:	2080032e 	bgeu	r4,r2,96444 <__umoddi3+0xd8>
   96438:	24c9883a 	add	r4,r4,r19
   9643c:	24c00136 	bltu	r4,r19,96444 <__umoddi3+0xd8>
   96440:	20811036 	bltu	r4,r2,96884 <__umoddi3+0x518>
   96444:	20abc83a 	sub	r21,r4,r2
   96448:	b80b883a 	mov	r5,r23
   9644c:	a809883a 	mov	r4,r21
   96450:	0088df00 	call	88df0 <__umodsi3>
   96454:	1023883a 	mov	r17,r2
   96458:	b80b883a 	mov	r5,r23
   9645c:	a809883a 	mov	r4,r21
   96460:	0088d8c0 	call	88d8c <__udivsi3>
   96464:	8822943a 	slli	r17,r17,16
   96468:	b085383a 	mul	r2,r22,r2
   9646c:	a0ffffcc 	andi	r3,r20,65535
   96470:	1c46b03a 	or	r3,r3,r17
   96474:	1880042e 	bgeu	r3,r2,96488 <__umoddi3+0x11c>
   96478:	1cc7883a 	add	r3,r3,r19
   9647c:	1cc00236 	bltu	r3,r19,96488 <__umoddi3+0x11c>
   96480:	1880012e 	bgeu	r3,r2,96488 <__umoddi3+0x11c>
   96484:	1cc7883a 	add	r3,r3,r19
   96488:	1885c83a 	sub	r2,r3,r2
   9648c:	1484d83a 	srl	r2,r2,r18
   96490:	0007883a 	mov	r3,zero
   96494:	00004f06 	br	965d4 <__umoddi3+0x268>
   96498:	29c04c36 	bltu	r5,r7,965cc <__umoddi3+0x260>
   9649c:	00bfffd4 	movui	r2,65535
   964a0:	11c0582e 	bgeu	r2,r7,96604 <__umoddi3+0x298>
   964a4:	00804034 	movhi	r2,256
   964a8:	10bfffc4 	addi	r2,r2,-1
   964ac:	11c0e736 	bltu	r2,r7,9684c <__umoddi3+0x4e0>
   964b0:	01000404 	movi	r4,16
   964b4:	3904d83a 	srl	r2,r7,r4
   964b8:	00c002b4 	movhi	r3,10
   964bc:	18f1a104 	addi	r3,r3,-14716
   964c0:	1885883a 	add	r2,r3,r2
   964c4:	14c00003 	ldbu	r19,0(r2)
   964c8:	00c00804 	movi	r3,32
   964cc:	9927883a 	add	r19,r19,r4
   964d0:	1ce9c83a 	sub	r20,r3,r19
   964d4:	a000581e 	bne	r20,zero,96638 <__umoddi3+0x2cc>
   964d8:	3c400136 	bltu	r7,r17,964e0 <__umoddi3+0x174>
   964dc:	8180eb36 	bltu	r16,r6,9688c <__umoddi3+0x520>
   964e0:	8185c83a 	sub	r2,r16,r6
   964e4:	89e3c83a 	sub	r17,r17,r7
   964e8:	8089803a 	cmpltu	r4,r16,r2
   964ec:	8939c83a 	sub	fp,r17,r4
   964f0:	e007883a 	mov	r3,fp
   964f4:	00003706 	br	965d4 <__umoddi3+0x268>
   964f8:	3000041e 	bne	r6,zero,9650c <__umoddi3+0x1a0>
   964fc:	000b883a 	mov	r5,zero
   96500:	01000044 	movi	r4,1
   96504:	0088d8c0 	call	88d8c <__udivsi3>
   96508:	1027883a 	mov	r19,r2
   9650c:	00bfffd4 	movui	r2,65535
   96510:	14c0402e 	bgeu	r2,r19,96614 <__umoddi3+0x2a8>
   96514:	00804034 	movhi	r2,256
   96518:	10bfffc4 	addi	r2,r2,-1
   9651c:	14c0cd36 	bltu	r2,r19,96854 <__umoddi3+0x4e8>
   96520:	00800404 	movi	r2,16
   96524:	9886d83a 	srl	r3,r19,r2
   96528:	010002b4 	movhi	r4,10
   9652c:	2131a104 	addi	r4,r4,-14716
   96530:	20c7883a 	add	r3,r4,r3
   96534:	18c00003 	ldbu	r3,0(r3)
   96538:	1887883a 	add	r3,r3,r2
   9653c:	00800804 	movi	r2,32
   96540:	10e5c83a 	sub	r18,r2,r3
   96544:	9000901e 	bne	r18,zero,96788 <__umoddi3+0x41c>
   96548:	982cd43a 	srli	r22,r19,16
   9654c:	8ce3c83a 	sub	r17,r17,r19
   96550:	9d7fffcc 	andi	r21,r19,65535
   96554:	b00b883a 	mov	r5,r22
   96558:	8809883a 	mov	r4,r17
   9655c:	0088df00 	call	88df0 <__umodsi3>
   96560:	8809883a 	mov	r4,r17
   96564:	b00b883a 	mov	r5,r22
   96568:	1021883a 	mov	r16,r2
   9656c:	0088d8c0 	call	88d8c <__udivsi3>
   96570:	8006943a 	slli	r3,r16,16
   96574:	a008d43a 	srli	r4,r20,16
   96578:	1545383a 	mul	r2,r2,r21
   9657c:	20c8b03a 	or	r4,r4,r3
   96580:	2080042e 	bgeu	r4,r2,96594 <__umoddi3+0x228>
   96584:	24c9883a 	add	r4,r4,r19
   96588:	24c00236 	bltu	r4,r19,96594 <__umoddi3+0x228>
   9658c:	2080012e 	bgeu	r4,r2,96594 <__umoddi3+0x228>
   96590:	24c9883a 	add	r4,r4,r19
   96594:	20a1c83a 	sub	r16,r4,r2
   96598:	b00b883a 	mov	r5,r22
   9659c:	8009883a 	mov	r4,r16
   965a0:	0088df00 	call	88df0 <__umodsi3>
   965a4:	1023883a 	mov	r17,r2
   965a8:	b00b883a 	mov	r5,r22
   965ac:	8009883a 	mov	r4,r16
   965b0:	0088d8c0 	call	88d8c <__udivsi3>
   965b4:	8822943a 	slli	r17,r17,16
   965b8:	1545383a 	mul	r2,r2,r21
   965bc:	a53fffcc 	andi	r20,r20,65535
   965c0:	a446b03a 	or	r3,r20,r17
   965c4:	18bfb02e 	bgeu	r3,r2,96488 <__alt_data_end+0xfffc65c8>
   965c8:	003fab06 	br	96478 <__alt_data_end+0xfffc65b8>
   965cc:	2005883a 	mov	r2,r4
   965d0:	2807883a 	mov	r3,r5
   965d4:	dfc00b17 	ldw	ra,44(sp)
   965d8:	df000a17 	ldw	fp,40(sp)
   965dc:	ddc00917 	ldw	r23,36(sp)
   965e0:	dd800817 	ldw	r22,32(sp)
   965e4:	dd400717 	ldw	r21,28(sp)
   965e8:	dd000617 	ldw	r20,24(sp)
   965ec:	dcc00517 	ldw	r19,20(sp)
   965f0:	dc800417 	ldw	r18,16(sp)
   965f4:	dc400317 	ldw	r17,12(sp)
   965f8:	dc000217 	ldw	r16,8(sp)
   965fc:	dec00c04 	addi	sp,sp,48
   96600:	f800283a 	ret
   96604:	04c03fc4 	movi	r19,255
   96608:	99c9803a 	cmpltu	r4,r19,r7
   9660c:	200890fa 	slli	r4,r4,3
   96610:	003fa806 	br	964b4 <__alt_data_end+0xfffc65f4>
   96614:	00803fc4 	movi	r2,255
   96618:	14c5803a 	cmpltu	r2,r2,r19
   9661c:	100490fa 	slli	r2,r2,3
   96620:	003fc006 	br	96524 <__alt_data_end+0xfffc6664>
   96624:	00804034 	movhi	r2,256
   96628:	10bfffc4 	addi	r2,r2,-1
   9662c:	11808b36 	bltu	r2,r6,9685c <__umoddi3+0x4f0>
   96630:	01000404 	movi	r4,16
   96634:	003f6406 	br	963c8 <__alt_data_end+0xfffc6508>
   96638:	34c4d83a 	srl	r2,r6,r19
   9663c:	3d0e983a 	sll	r7,r7,r20
   96640:	8cf8d83a 	srl	fp,r17,r19
   96644:	8d10983a 	sll	r8,r17,r20
   96648:	38aab03a 	or	r21,r7,r2
   9664c:	a82cd43a 	srli	r22,r21,16
   96650:	84e2d83a 	srl	r17,r16,r19
   96654:	e009883a 	mov	r4,fp
   96658:	b00b883a 	mov	r5,r22
   9665c:	8a22b03a 	or	r17,r17,r8
   96660:	3524983a 	sll	r18,r6,r20
   96664:	0088df00 	call	88df0 <__umodsi3>
   96668:	e009883a 	mov	r4,fp
   9666c:	b00b883a 	mov	r5,r22
   96670:	102f883a 	mov	r23,r2
   96674:	0088d8c0 	call	88d8c <__udivsi3>
   96678:	100d883a 	mov	r6,r2
   9667c:	b808943a 	slli	r4,r23,16
   96680:	aa3fffcc 	andi	r8,r21,65535
   96684:	8804d43a 	srli	r2,r17,16
   96688:	41af383a 	mul	r23,r8,r6
   9668c:	8520983a 	sll	r16,r16,r20
   96690:	1104b03a 	or	r2,r2,r4
   96694:	15c0042e 	bgeu	r2,r23,966a8 <__umoddi3+0x33c>
   96698:	1545883a 	add	r2,r2,r21
   9669c:	30ffffc4 	addi	r3,r6,-1
   966a0:	1540742e 	bgeu	r2,r21,96874 <__umoddi3+0x508>
   966a4:	180d883a 	mov	r6,r3
   966a8:	15efc83a 	sub	r23,r2,r23
   966ac:	b00b883a 	mov	r5,r22
   966b0:	b809883a 	mov	r4,r23
   966b4:	d9800115 	stw	r6,4(sp)
   966b8:	da000015 	stw	r8,0(sp)
   966bc:	0088df00 	call	88df0 <__umodsi3>
   966c0:	b00b883a 	mov	r5,r22
   966c4:	b809883a 	mov	r4,r23
   966c8:	1039883a 	mov	fp,r2
   966cc:	0088d8c0 	call	88d8c <__udivsi3>
   966d0:	da000017 	ldw	r8,0(sp)
   966d4:	e038943a 	slli	fp,fp,16
   966d8:	100b883a 	mov	r5,r2
   966dc:	4089383a 	mul	r4,r8,r2
   966e0:	8a3fffcc 	andi	r8,r17,65535
   966e4:	4710b03a 	or	r8,r8,fp
   966e8:	d9800117 	ldw	r6,4(sp)
   966ec:	4100042e 	bgeu	r8,r4,96700 <__umoddi3+0x394>
   966f0:	4551883a 	add	r8,r8,r21
   966f4:	10bfffc4 	addi	r2,r2,-1
   966f8:	45405a2e 	bgeu	r8,r21,96864 <__umoddi3+0x4f8>
   966fc:	100b883a 	mov	r5,r2
   96700:	300c943a 	slli	r6,r6,16
   96704:	91ffffcc 	andi	r7,r18,65535
   96708:	9004d43a 	srli	r2,r18,16
   9670c:	314cb03a 	or	r6,r6,r5
   96710:	317fffcc 	andi	r5,r6,65535
   96714:	300cd43a 	srli	r6,r6,16
   96718:	29d3383a 	mul	r9,r5,r7
   9671c:	288b383a 	mul	r5,r5,r2
   96720:	31cf383a 	mul	r7,r6,r7
   96724:	4806d43a 	srli	r3,r9,16
   96728:	4111c83a 	sub	r8,r8,r4
   9672c:	29cb883a 	add	r5,r5,r7
   96730:	194b883a 	add	r5,r3,r5
   96734:	3085383a 	mul	r2,r6,r2
   96738:	29c0022e 	bgeu	r5,r7,96744 <__umoddi3+0x3d8>
   9673c:	00c00074 	movhi	r3,1
   96740:	10c5883a 	add	r2,r2,r3
   96744:	2808d43a 	srli	r4,r5,16
   96748:	280a943a 	slli	r5,r5,16
   9674c:	4a7fffcc 	andi	r9,r9,65535
   96750:	2085883a 	add	r2,r4,r2
   96754:	2a4b883a 	add	r5,r5,r9
   96758:	40803636 	bltu	r8,r2,96834 <__umoddi3+0x4c8>
   9675c:	40804d26 	beq	r8,r2,96894 <__umoddi3+0x528>
   96760:	4089c83a 	sub	r4,r8,r2
   96764:	280f883a 	mov	r7,r5
   96768:	81cfc83a 	sub	r7,r16,r7
   9676c:	81c7803a 	cmpltu	r3,r16,r7
   96770:	20c7c83a 	sub	r3,r4,r3
   96774:	1cc4983a 	sll	r2,r3,r19
   96778:	3d0ed83a 	srl	r7,r7,r20
   9677c:	1d06d83a 	srl	r3,r3,r20
   96780:	11c4b03a 	or	r2,r2,r7
   96784:	003f9306 	br	965d4 <__alt_data_end+0xfffc6714>
   96788:	9ca6983a 	sll	r19,r19,r18
   9678c:	88e8d83a 	srl	r20,r17,r3
   96790:	80c4d83a 	srl	r2,r16,r3
   96794:	982cd43a 	srli	r22,r19,16
   96798:	8ca2983a 	sll	r17,r17,r18
   9679c:	a009883a 	mov	r4,r20
   967a0:	b00b883a 	mov	r5,r22
   967a4:	1478b03a 	or	fp,r2,r17
   967a8:	0088df00 	call	88df0 <__umodsi3>
   967ac:	a009883a 	mov	r4,r20
   967b0:	b00b883a 	mov	r5,r22
   967b4:	1023883a 	mov	r17,r2
   967b8:	0088d8c0 	call	88d8c <__udivsi3>
   967bc:	9d7fffcc 	andi	r21,r19,65535
   967c0:	880a943a 	slli	r5,r17,16
   967c4:	e008d43a 	srli	r4,fp,16
   967c8:	a885383a 	mul	r2,r21,r2
   967cc:	84a8983a 	sll	r20,r16,r18
   967d0:	2148b03a 	or	r4,r4,r5
   967d4:	2080042e 	bgeu	r4,r2,967e8 <__umoddi3+0x47c>
   967d8:	24c9883a 	add	r4,r4,r19
   967dc:	24c00236 	bltu	r4,r19,967e8 <__umoddi3+0x47c>
   967e0:	2080012e 	bgeu	r4,r2,967e8 <__umoddi3+0x47c>
   967e4:	24c9883a 	add	r4,r4,r19
   967e8:	20a3c83a 	sub	r17,r4,r2
   967ec:	b00b883a 	mov	r5,r22
   967f0:	8809883a 	mov	r4,r17
   967f4:	0088df00 	call	88df0 <__umodsi3>
   967f8:	102f883a 	mov	r23,r2
   967fc:	8809883a 	mov	r4,r17
   96800:	b00b883a 	mov	r5,r22
   96804:	0088d8c0 	call	88d8c <__udivsi3>
   96808:	b82e943a 	slli	r23,r23,16
   9680c:	a885383a 	mul	r2,r21,r2
   96810:	e13fffcc 	andi	r4,fp,65535
   96814:	25c8b03a 	or	r4,r4,r23
   96818:	2080042e 	bgeu	r4,r2,9682c <__umoddi3+0x4c0>
   9681c:	24c9883a 	add	r4,r4,r19
   96820:	24c00236 	bltu	r4,r19,9682c <__umoddi3+0x4c0>
   96824:	2080012e 	bgeu	r4,r2,9682c <__umoddi3+0x4c0>
   96828:	24c9883a 	add	r4,r4,r19
   9682c:	20a3c83a 	sub	r17,r4,r2
   96830:	003f4806 	br	96554 <__alt_data_end+0xfffc6694>
   96834:	2c8fc83a 	sub	r7,r5,r18
   96838:	1545c83a 	sub	r2,r2,r21
   9683c:	29cb803a 	cmpltu	r5,r5,r7
   96840:	1145c83a 	sub	r2,r2,r5
   96844:	4089c83a 	sub	r4,r8,r2
   96848:	003fc706 	br	96768 <__alt_data_end+0xfffc68a8>
   9684c:	01000604 	movi	r4,24
   96850:	003f1806 	br	964b4 <__alt_data_end+0xfffc65f4>
   96854:	00800604 	movi	r2,24
   96858:	003f3206 	br	96524 <__alt_data_end+0xfffc6664>
   9685c:	01000604 	movi	r4,24
   96860:	003ed906 	br	963c8 <__alt_data_end+0xfffc6508>
   96864:	413fa52e 	bgeu	r8,r4,966fc <__alt_data_end+0xfffc683c>
   96868:	297fff84 	addi	r5,r5,-2
   9686c:	4551883a 	add	r8,r8,r21
   96870:	003fa306 	br	96700 <__alt_data_end+0xfffc6840>
   96874:	15ff8b2e 	bgeu	r2,r23,966a4 <__alt_data_end+0xfffc67e4>
   96878:	31bfff84 	addi	r6,r6,-2
   9687c:	1545883a 	add	r2,r2,r21
   96880:	003f8906 	br	966a8 <__alt_data_end+0xfffc67e8>
   96884:	24c9883a 	add	r4,r4,r19
   96888:	003eee06 	br	96444 <__alt_data_end+0xfffc6584>
   9688c:	8005883a 	mov	r2,r16
   96890:	003f1706 	br	964f0 <__alt_data_end+0xfffc6630>
   96894:	817fe736 	bltu	r16,r5,96834 <__alt_data_end+0xfffc6974>
   96898:	280f883a 	mov	r7,r5
   9689c:	0009883a 	mov	r4,zero
   968a0:	003fb106 	br	96768 <__alt_data_end+0xfffc68a8>

000968a4 <__adddf3>:
   968a4:	02c00434 	movhi	r11,16
   968a8:	5affffc4 	addi	r11,r11,-1
   968ac:	2806d7fa 	srli	r3,r5,31
   968b0:	2ad4703a 	and	r10,r5,r11
   968b4:	3ad2703a 	and	r9,r7,r11
   968b8:	3804d53a 	srli	r2,r7,20
   968bc:	3018d77a 	srli	r12,r6,29
   968c0:	280ad53a 	srli	r5,r5,20
   968c4:	501490fa 	slli	r10,r10,3
   968c8:	2010d77a 	srli	r8,r4,29
   968cc:	481290fa 	slli	r9,r9,3
   968d0:	380ed7fa 	srli	r7,r7,31
   968d4:	defffb04 	addi	sp,sp,-20
   968d8:	dc800215 	stw	r18,8(sp)
   968dc:	dc400115 	stw	r17,4(sp)
   968e0:	dc000015 	stw	r16,0(sp)
   968e4:	dfc00415 	stw	ra,16(sp)
   968e8:	dcc00315 	stw	r19,12(sp)
   968ec:	1c803fcc 	andi	r18,r3,255
   968f0:	2c01ffcc 	andi	r16,r5,2047
   968f4:	5210b03a 	or	r8,r10,r8
   968f8:	202290fa 	slli	r17,r4,3
   968fc:	1081ffcc 	andi	r2,r2,2047
   96900:	4b12b03a 	or	r9,r9,r12
   96904:	300c90fa 	slli	r6,r6,3
   96908:	91c07526 	beq	r18,r7,96ae0 <__adddf3+0x23c>
   9690c:	8087c83a 	sub	r3,r16,r2
   96910:	00c0ab0e 	bge	zero,r3,96bc0 <__adddf3+0x31c>
   96914:	10002a1e 	bne	r2,zero,969c0 <__adddf3+0x11c>
   96918:	4984b03a 	or	r2,r9,r6
   9691c:	1000961e 	bne	r2,zero,96b78 <__adddf3+0x2d4>
   96920:	888001cc 	andi	r2,r17,7
   96924:	10000726 	beq	r2,zero,96944 <__adddf3+0xa0>
   96928:	888003cc 	andi	r2,r17,15
   9692c:	00c00104 	movi	r3,4
   96930:	10c00426 	beq	r2,r3,96944 <__adddf3+0xa0>
   96934:	88c7883a 	add	r3,r17,r3
   96938:	1c63803a 	cmpltu	r17,r3,r17
   9693c:	4451883a 	add	r8,r8,r17
   96940:	1823883a 	mov	r17,r3
   96944:	4080202c 	andhi	r2,r8,128
   96948:	10005926 	beq	r2,zero,96ab0 <__adddf3+0x20c>
   9694c:	84000044 	addi	r16,r16,1
   96950:	0081ffc4 	movi	r2,2047
   96954:	8080ba26 	beq	r16,r2,96c40 <__adddf3+0x39c>
   96958:	00bfe034 	movhi	r2,65408
   9695c:	10bfffc4 	addi	r2,r2,-1
   96960:	4090703a 	and	r8,r8,r2
   96964:	4004977a 	slli	r2,r8,29
   96968:	4010927a 	slli	r8,r8,9
   9696c:	8822d0fa 	srli	r17,r17,3
   96970:	8401ffcc 	andi	r16,r16,2047
   96974:	4010d33a 	srli	r8,r8,12
   96978:	9007883a 	mov	r3,r18
   9697c:	1444b03a 	or	r2,r2,r17
   96980:	8401ffcc 	andi	r16,r16,2047
   96984:	8020953a 	slli	r16,r16,20
   96988:	18c03fcc 	andi	r3,r3,255
   9698c:	01000434 	movhi	r4,16
   96990:	213fffc4 	addi	r4,r4,-1
   96994:	180697fa 	slli	r3,r3,31
   96998:	4110703a 	and	r8,r8,r4
   9699c:	4410b03a 	or	r8,r8,r16
   969a0:	40c6b03a 	or	r3,r8,r3
   969a4:	dfc00417 	ldw	ra,16(sp)
   969a8:	dcc00317 	ldw	r19,12(sp)
   969ac:	dc800217 	ldw	r18,8(sp)
   969b0:	dc400117 	ldw	r17,4(sp)
   969b4:	dc000017 	ldw	r16,0(sp)
   969b8:	dec00504 	addi	sp,sp,20
   969bc:	f800283a 	ret
   969c0:	0081ffc4 	movi	r2,2047
   969c4:	80bfd626 	beq	r16,r2,96920 <__alt_data_end+0xfffc6a60>
   969c8:	4a402034 	orhi	r9,r9,128
   969cc:	00800e04 	movi	r2,56
   969d0:	10c09f16 	blt	r2,r3,96c50 <__adddf3+0x3ac>
   969d4:	008007c4 	movi	r2,31
   969d8:	10c0c216 	blt	r2,r3,96ce4 <__adddf3+0x440>
   969dc:	00800804 	movi	r2,32
   969e0:	10c5c83a 	sub	r2,r2,r3
   969e4:	488a983a 	sll	r5,r9,r2
   969e8:	30c8d83a 	srl	r4,r6,r3
   969ec:	3084983a 	sll	r2,r6,r2
   969f0:	48c6d83a 	srl	r3,r9,r3
   969f4:	290cb03a 	or	r6,r5,r4
   969f8:	1004c03a 	cmpne	r2,r2,zero
   969fc:	308cb03a 	or	r6,r6,r2
   96a00:	898dc83a 	sub	r6,r17,r6
   96a04:	89a3803a 	cmpltu	r17,r17,r6
   96a08:	40d1c83a 	sub	r8,r8,r3
   96a0c:	4451c83a 	sub	r8,r8,r17
   96a10:	3023883a 	mov	r17,r6
   96a14:	4080202c 	andhi	r2,r8,128
   96a18:	10002326 	beq	r2,zero,96aa8 <__adddf3+0x204>
   96a1c:	04c02034 	movhi	r19,128
   96a20:	9cffffc4 	addi	r19,r19,-1
   96a24:	44e6703a 	and	r19,r8,r19
   96a28:	98007626 	beq	r19,zero,96c04 <__adddf3+0x360>
   96a2c:	9809883a 	mov	r4,r19
   96a30:	0098ea80 	call	98ea8 <__clzsi2>
   96a34:	10fffe04 	addi	r3,r2,-8
   96a38:	010007c4 	movi	r4,31
   96a3c:	20c07716 	blt	r4,r3,96c1c <__adddf3+0x378>
   96a40:	00800804 	movi	r2,32
   96a44:	10c5c83a 	sub	r2,r2,r3
   96a48:	8884d83a 	srl	r2,r17,r2
   96a4c:	98d0983a 	sll	r8,r19,r3
   96a50:	88e2983a 	sll	r17,r17,r3
   96a54:	1204b03a 	or	r2,r2,r8
   96a58:	1c007416 	blt	r3,r16,96c2c <__adddf3+0x388>
   96a5c:	1c21c83a 	sub	r16,r3,r16
   96a60:	82000044 	addi	r8,r16,1
   96a64:	00c007c4 	movi	r3,31
   96a68:	1a009116 	blt	r3,r8,96cb0 <__adddf3+0x40c>
   96a6c:	00c00804 	movi	r3,32
   96a70:	1a07c83a 	sub	r3,r3,r8
   96a74:	8a08d83a 	srl	r4,r17,r8
   96a78:	88e2983a 	sll	r17,r17,r3
   96a7c:	10c6983a 	sll	r3,r2,r3
   96a80:	1210d83a 	srl	r8,r2,r8
   96a84:	8804c03a 	cmpne	r2,r17,zero
   96a88:	1906b03a 	or	r3,r3,r4
   96a8c:	18a2b03a 	or	r17,r3,r2
   96a90:	0021883a 	mov	r16,zero
   96a94:	003fa206 	br	96920 <__alt_data_end+0xfffc6a60>
   96a98:	1890b03a 	or	r8,r3,r2
   96a9c:	40017d26 	beq	r8,zero,97094 <__adddf3+0x7f0>
   96aa0:	1011883a 	mov	r8,r2
   96aa4:	1823883a 	mov	r17,r3
   96aa8:	888001cc 	andi	r2,r17,7
   96aac:	103f9e1e 	bne	r2,zero,96928 <__alt_data_end+0xfffc6a68>
   96ab0:	4004977a 	slli	r2,r8,29
   96ab4:	8822d0fa 	srli	r17,r17,3
   96ab8:	4010d0fa 	srli	r8,r8,3
   96abc:	9007883a 	mov	r3,r18
   96ac0:	1444b03a 	or	r2,r2,r17
   96ac4:	0101ffc4 	movi	r4,2047
   96ac8:	81002426 	beq	r16,r4,96b5c <__adddf3+0x2b8>
   96acc:	8120703a 	and	r16,r16,r4
   96ad0:	01000434 	movhi	r4,16
   96ad4:	213fffc4 	addi	r4,r4,-1
   96ad8:	4110703a 	and	r8,r8,r4
   96adc:	003fa806 	br	96980 <__alt_data_end+0xfffc6ac0>
   96ae0:	8089c83a 	sub	r4,r16,r2
   96ae4:	01005e0e 	bge	zero,r4,96c60 <__adddf3+0x3bc>
   96ae8:	10002b26 	beq	r2,zero,96b98 <__adddf3+0x2f4>
   96aec:	0081ffc4 	movi	r2,2047
   96af0:	80bf8b26 	beq	r16,r2,96920 <__alt_data_end+0xfffc6a60>
   96af4:	4a402034 	orhi	r9,r9,128
   96af8:	00800e04 	movi	r2,56
   96afc:	1100a40e 	bge	r2,r4,96d90 <__adddf3+0x4ec>
   96b00:	498cb03a 	or	r6,r9,r6
   96b04:	300ac03a 	cmpne	r5,r6,zero
   96b08:	0013883a 	mov	r9,zero
   96b0c:	2c4b883a 	add	r5,r5,r17
   96b10:	2c63803a 	cmpltu	r17,r5,r17
   96b14:	4a11883a 	add	r8,r9,r8
   96b18:	8a11883a 	add	r8,r17,r8
   96b1c:	2823883a 	mov	r17,r5
   96b20:	4080202c 	andhi	r2,r8,128
   96b24:	103fe026 	beq	r2,zero,96aa8 <__alt_data_end+0xfffc6be8>
   96b28:	84000044 	addi	r16,r16,1
   96b2c:	0081ffc4 	movi	r2,2047
   96b30:	8080d226 	beq	r16,r2,96e7c <__adddf3+0x5d8>
   96b34:	00bfe034 	movhi	r2,65408
   96b38:	10bfffc4 	addi	r2,r2,-1
   96b3c:	4090703a 	and	r8,r8,r2
   96b40:	880ad07a 	srli	r5,r17,1
   96b44:	400897fa 	slli	r4,r8,31
   96b48:	88c0004c 	andi	r3,r17,1
   96b4c:	28e2b03a 	or	r17,r5,r3
   96b50:	4010d07a 	srli	r8,r8,1
   96b54:	2462b03a 	or	r17,r4,r17
   96b58:	003f7106 	br	96920 <__alt_data_end+0xfffc6a60>
   96b5c:	4088b03a 	or	r4,r8,r2
   96b60:	20014526 	beq	r4,zero,97078 <__adddf3+0x7d4>
   96b64:	01000434 	movhi	r4,16
   96b68:	42000234 	orhi	r8,r8,8
   96b6c:	213fffc4 	addi	r4,r4,-1
   96b70:	4110703a 	and	r8,r8,r4
   96b74:	003f8206 	br	96980 <__alt_data_end+0xfffc6ac0>
   96b78:	18ffffc4 	addi	r3,r3,-1
   96b7c:	1800491e 	bne	r3,zero,96ca4 <__adddf3+0x400>
   96b80:	898bc83a 	sub	r5,r17,r6
   96b84:	8963803a 	cmpltu	r17,r17,r5
   96b88:	4251c83a 	sub	r8,r8,r9
   96b8c:	4451c83a 	sub	r8,r8,r17
   96b90:	2823883a 	mov	r17,r5
   96b94:	003f9f06 	br	96a14 <__alt_data_end+0xfffc6b54>
   96b98:	4984b03a 	or	r2,r9,r6
   96b9c:	103f6026 	beq	r2,zero,96920 <__alt_data_end+0xfffc6a60>
   96ba0:	213fffc4 	addi	r4,r4,-1
   96ba4:	2000931e 	bne	r4,zero,96df4 <__adddf3+0x550>
   96ba8:	898d883a 	add	r6,r17,r6
   96bac:	3463803a 	cmpltu	r17,r6,r17
   96bb0:	4251883a 	add	r8,r8,r9
   96bb4:	8a11883a 	add	r8,r17,r8
   96bb8:	3023883a 	mov	r17,r6
   96bbc:	003fd806 	br	96b20 <__alt_data_end+0xfffc6c60>
   96bc0:	1800541e 	bne	r3,zero,96d14 <__adddf3+0x470>
   96bc4:	80800044 	addi	r2,r16,1
   96bc8:	1081ffcc 	andi	r2,r2,2047
   96bcc:	00c00044 	movi	r3,1
   96bd0:	1880a00e 	bge	r3,r2,96e54 <__adddf3+0x5b0>
   96bd4:	8989c83a 	sub	r4,r17,r6
   96bd8:	8905803a 	cmpltu	r2,r17,r4
   96bdc:	4267c83a 	sub	r19,r8,r9
   96be0:	98a7c83a 	sub	r19,r19,r2
   96be4:	9880202c 	andhi	r2,r19,128
   96be8:	10006326 	beq	r2,zero,96d78 <__adddf3+0x4d4>
   96bec:	3463c83a 	sub	r17,r6,r17
   96bf0:	4a07c83a 	sub	r3,r9,r8
   96bf4:	344d803a 	cmpltu	r6,r6,r17
   96bf8:	19a7c83a 	sub	r19,r3,r6
   96bfc:	3825883a 	mov	r18,r7
   96c00:	983f8a1e 	bne	r19,zero,96a2c <__alt_data_end+0xfffc6b6c>
   96c04:	8809883a 	mov	r4,r17
   96c08:	0098ea80 	call	98ea8 <__clzsi2>
   96c0c:	10800804 	addi	r2,r2,32
   96c10:	10fffe04 	addi	r3,r2,-8
   96c14:	010007c4 	movi	r4,31
   96c18:	20ff890e 	bge	r4,r3,96a40 <__alt_data_end+0xfffc6b80>
   96c1c:	10bff604 	addi	r2,r2,-40
   96c20:	8884983a 	sll	r2,r17,r2
   96c24:	0023883a 	mov	r17,zero
   96c28:	1c3f8c0e 	bge	r3,r16,96a5c <__alt_data_end+0xfffc6b9c>
   96c2c:	023fe034 	movhi	r8,65408
   96c30:	423fffc4 	addi	r8,r8,-1
   96c34:	80e1c83a 	sub	r16,r16,r3
   96c38:	1210703a 	and	r8,r2,r8
   96c3c:	003f3806 	br	96920 <__alt_data_end+0xfffc6a60>
   96c40:	9007883a 	mov	r3,r18
   96c44:	0011883a 	mov	r8,zero
   96c48:	0005883a 	mov	r2,zero
   96c4c:	003f4c06 	br	96980 <__alt_data_end+0xfffc6ac0>
   96c50:	498cb03a 	or	r6,r9,r6
   96c54:	300cc03a 	cmpne	r6,r6,zero
   96c58:	0007883a 	mov	r3,zero
   96c5c:	003f6806 	br	96a00 <__alt_data_end+0xfffc6b40>
   96c60:	20009c1e 	bne	r4,zero,96ed4 <__adddf3+0x630>
   96c64:	80800044 	addi	r2,r16,1
   96c68:	1141ffcc 	andi	r5,r2,2047
   96c6c:	01000044 	movi	r4,1
   96c70:	2140670e 	bge	r4,r5,96e10 <__adddf3+0x56c>
   96c74:	0101ffc4 	movi	r4,2047
   96c78:	11007f26 	beq	r2,r4,96e78 <__adddf3+0x5d4>
   96c7c:	898d883a 	add	r6,r17,r6
   96c80:	4247883a 	add	r3,r8,r9
   96c84:	3451803a 	cmpltu	r8,r6,r17
   96c88:	40d1883a 	add	r8,r8,r3
   96c8c:	402297fa 	slli	r17,r8,31
   96c90:	300cd07a 	srli	r6,r6,1
   96c94:	4010d07a 	srli	r8,r8,1
   96c98:	1021883a 	mov	r16,r2
   96c9c:	89a2b03a 	or	r17,r17,r6
   96ca0:	003f1f06 	br	96920 <__alt_data_end+0xfffc6a60>
   96ca4:	0081ffc4 	movi	r2,2047
   96ca8:	80bf481e 	bne	r16,r2,969cc <__alt_data_end+0xfffc6b0c>
   96cac:	003f1c06 	br	96920 <__alt_data_end+0xfffc6a60>
   96cb0:	843ff844 	addi	r16,r16,-31
   96cb4:	01000804 	movi	r4,32
   96cb8:	1406d83a 	srl	r3,r2,r16
   96cbc:	41005026 	beq	r8,r4,96e00 <__adddf3+0x55c>
   96cc0:	01001004 	movi	r4,64
   96cc4:	2211c83a 	sub	r8,r4,r8
   96cc8:	1204983a 	sll	r2,r2,r8
   96ccc:	88a2b03a 	or	r17,r17,r2
   96cd0:	8822c03a 	cmpne	r17,r17,zero
   96cd4:	1c62b03a 	or	r17,r3,r17
   96cd8:	0011883a 	mov	r8,zero
   96cdc:	0021883a 	mov	r16,zero
   96ce0:	003f7106 	br	96aa8 <__alt_data_end+0xfffc6be8>
   96ce4:	193ff804 	addi	r4,r3,-32
   96ce8:	00800804 	movi	r2,32
   96cec:	4908d83a 	srl	r4,r9,r4
   96cf0:	18804526 	beq	r3,r2,96e08 <__adddf3+0x564>
   96cf4:	00801004 	movi	r2,64
   96cf8:	10c5c83a 	sub	r2,r2,r3
   96cfc:	4886983a 	sll	r3,r9,r2
   96d00:	198cb03a 	or	r6,r3,r6
   96d04:	300cc03a 	cmpne	r6,r6,zero
   96d08:	218cb03a 	or	r6,r4,r6
   96d0c:	0007883a 	mov	r3,zero
   96d10:	003f3b06 	br	96a00 <__alt_data_end+0xfffc6b40>
   96d14:	80002a26 	beq	r16,zero,96dc0 <__adddf3+0x51c>
   96d18:	0101ffc4 	movi	r4,2047
   96d1c:	11006826 	beq	r2,r4,96ec0 <__adddf3+0x61c>
   96d20:	00c7c83a 	sub	r3,zero,r3
   96d24:	42002034 	orhi	r8,r8,128
   96d28:	01000e04 	movi	r4,56
   96d2c:	20c07c16 	blt	r4,r3,96f20 <__adddf3+0x67c>
   96d30:	010007c4 	movi	r4,31
   96d34:	20c0da16 	blt	r4,r3,970a0 <__adddf3+0x7fc>
   96d38:	01000804 	movi	r4,32
   96d3c:	20c9c83a 	sub	r4,r4,r3
   96d40:	4114983a 	sll	r10,r8,r4
   96d44:	88cad83a 	srl	r5,r17,r3
   96d48:	8908983a 	sll	r4,r17,r4
   96d4c:	40c6d83a 	srl	r3,r8,r3
   96d50:	5162b03a 	or	r17,r10,r5
   96d54:	2008c03a 	cmpne	r4,r4,zero
   96d58:	8922b03a 	or	r17,r17,r4
   96d5c:	3463c83a 	sub	r17,r6,r17
   96d60:	48c7c83a 	sub	r3,r9,r3
   96d64:	344d803a 	cmpltu	r6,r6,r17
   96d68:	1991c83a 	sub	r8,r3,r6
   96d6c:	1021883a 	mov	r16,r2
   96d70:	3825883a 	mov	r18,r7
   96d74:	003f2706 	br	96a14 <__alt_data_end+0xfffc6b54>
   96d78:	24d0b03a 	or	r8,r4,r19
   96d7c:	40001b1e 	bne	r8,zero,96dec <__adddf3+0x548>
   96d80:	0005883a 	mov	r2,zero
   96d84:	0007883a 	mov	r3,zero
   96d88:	0021883a 	mov	r16,zero
   96d8c:	003f4d06 	br	96ac4 <__alt_data_end+0xfffc6c04>
   96d90:	008007c4 	movi	r2,31
   96d94:	11003c16 	blt	r2,r4,96e88 <__adddf3+0x5e4>
   96d98:	00800804 	movi	r2,32
   96d9c:	1105c83a 	sub	r2,r2,r4
   96da0:	488e983a 	sll	r7,r9,r2
   96da4:	310ad83a 	srl	r5,r6,r4
   96da8:	3084983a 	sll	r2,r6,r2
   96dac:	4912d83a 	srl	r9,r9,r4
   96db0:	394ab03a 	or	r5,r7,r5
   96db4:	1004c03a 	cmpne	r2,r2,zero
   96db8:	288ab03a 	or	r5,r5,r2
   96dbc:	003f5306 	br	96b0c <__alt_data_end+0xfffc6c4c>
   96dc0:	4448b03a 	or	r4,r8,r17
   96dc4:	20003e26 	beq	r4,zero,96ec0 <__adddf3+0x61c>
   96dc8:	00c6303a 	nor	r3,zero,r3
   96dcc:	18003a1e 	bne	r3,zero,96eb8 <__adddf3+0x614>
   96dd0:	3463c83a 	sub	r17,r6,r17
   96dd4:	4a07c83a 	sub	r3,r9,r8
   96dd8:	344d803a 	cmpltu	r6,r6,r17
   96ddc:	1991c83a 	sub	r8,r3,r6
   96de0:	1021883a 	mov	r16,r2
   96de4:	3825883a 	mov	r18,r7
   96de8:	003f0a06 	br	96a14 <__alt_data_end+0xfffc6b54>
   96dec:	2023883a 	mov	r17,r4
   96df0:	003f0d06 	br	96a28 <__alt_data_end+0xfffc6b68>
   96df4:	0081ffc4 	movi	r2,2047
   96df8:	80bf3f1e 	bne	r16,r2,96af8 <__alt_data_end+0xfffc6c38>
   96dfc:	003ec806 	br	96920 <__alt_data_end+0xfffc6a60>
   96e00:	0005883a 	mov	r2,zero
   96e04:	003fb106 	br	96ccc <__alt_data_end+0xfffc6e0c>
   96e08:	0007883a 	mov	r3,zero
   96e0c:	003fbc06 	br	96d00 <__alt_data_end+0xfffc6e40>
   96e10:	4444b03a 	or	r2,r8,r17
   96e14:	8000871e 	bne	r16,zero,97034 <__adddf3+0x790>
   96e18:	1000ba26 	beq	r2,zero,97104 <__adddf3+0x860>
   96e1c:	4984b03a 	or	r2,r9,r6
   96e20:	103ebf26 	beq	r2,zero,96920 <__alt_data_end+0xfffc6a60>
   96e24:	8985883a 	add	r2,r17,r6
   96e28:	4247883a 	add	r3,r8,r9
   96e2c:	1451803a 	cmpltu	r8,r2,r17
   96e30:	40d1883a 	add	r8,r8,r3
   96e34:	40c0202c 	andhi	r3,r8,128
   96e38:	1023883a 	mov	r17,r2
   96e3c:	183f1a26 	beq	r3,zero,96aa8 <__alt_data_end+0xfffc6be8>
   96e40:	00bfe034 	movhi	r2,65408
   96e44:	10bfffc4 	addi	r2,r2,-1
   96e48:	2021883a 	mov	r16,r4
   96e4c:	4090703a 	and	r8,r8,r2
   96e50:	003eb306 	br	96920 <__alt_data_end+0xfffc6a60>
   96e54:	4444b03a 	or	r2,r8,r17
   96e58:	8000291e 	bne	r16,zero,96f00 <__adddf3+0x65c>
   96e5c:	10004b1e 	bne	r2,zero,96f8c <__adddf3+0x6e8>
   96e60:	4990b03a 	or	r8,r9,r6
   96e64:	40008b26 	beq	r8,zero,97094 <__adddf3+0x7f0>
   96e68:	4811883a 	mov	r8,r9
   96e6c:	3023883a 	mov	r17,r6
   96e70:	3825883a 	mov	r18,r7
   96e74:	003eaa06 	br	96920 <__alt_data_end+0xfffc6a60>
   96e78:	1021883a 	mov	r16,r2
   96e7c:	0011883a 	mov	r8,zero
   96e80:	0005883a 	mov	r2,zero
   96e84:	003f0f06 	br	96ac4 <__alt_data_end+0xfffc6c04>
   96e88:	217ff804 	addi	r5,r4,-32
   96e8c:	00800804 	movi	r2,32
   96e90:	494ad83a 	srl	r5,r9,r5
   96e94:	20807d26 	beq	r4,r2,9708c <__adddf3+0x7e8>
   96e98:	00801004 	movi	r2,64
   96e9c:	1109c83a 	sub	r4,r2,r4
   96ea0:	4912983a 	sll	r9,r9,r4
   96ea4:	498cb03a 	or	r6,r9,r6
   96ea8:	300cc03a 	cmpne	r6,r6,zero
   96eac:	298ab03a 	or	r5,r5,r6
   96eb0:	0013883a 	mov	r9,zero
   96eb4:	003f1506 	br	96b0c <__alt_data_end+0xfffc6c4c>
   96eb8:	0101ffc4 	movi	r4,2047
   96ebc:	113f9a1e 	bne	r2,r4,96d28 <__alt_data_end+0xfffc6e68>
   96ec0:	4811883a 	mov	r8,r9
   96ec4:	3023883a 	mov	r17,r6
   96ec8:	1021883a 	mov	r16,r2
   96ecc:	3825883a 	mov	r18,r7
   96ed0:	003e9306 	br	96920 <__alt_data_end+0xfffc6a60>
   96ed4:	8000161e 	bne	r16,zero,96f30 <__adddf3+0x68c>
   96ed8:	444ab03a 	or	r5,r8,r17
   96edc:	28005126 	beq	r5,zero,97024 <__adddf3+0x780>
   96ee0:	0108303a 	nor	r4,zero,r4
   96ee4:	20004d1e 	bne	r4,zero,9701c <__adddf3+0x778>
   96ee8:	89a3883a 	add	r17,r17,r6
   96eec:	4253883a 	add	r9,r8,r9
   96ef0:	898d803a 	cmpltu	r6,r17,r6
   96ef4:	3251883a 	add	r8,r6,r9
   96ef8:	1021883a 	mov	r16,r2
   96efc:	003f0806 	br	96b20 <__alt_data_end+0xfffc6c60>
   96f00:	1000301e 	bne	r2,zero,96fc4 <__adddf3+0x720>
   96f04:	4984b03a 	or	r2,r9,r6
   96f08:	10007126 	beq	r2,zero,970d0 <__adddf3+0x82c>
   96f0c:	4811883a 	mov	r8,r9
   96f10:	3023883a 	mov	r17,r6
   96f14:	3825883a 	mov	r18,r7
   96f18:	0401ffc4 	movi	r16,2047
   96f1c:	003e8006 	br	96920 <__alt_data_end+0xfffc6a60>
   96f20:	4462b03a 	or	r17,r8,r17
   96f24:	8822c03a 	cmpne	r17,r17,zero
   96f28:	0007883a 	mov	r3,zero
   96f2c:	003f8b06 	br	96d5c <__alt_data_end+0xfffc6e9c>
   96f30:	0141ffc4 	movi	r5,2047
   96f34:	11403b26 	beq	r2,r5,97024 <__adddf3+0x780>
   96f38:	0109c83a 	sub	r4,zero,r4
   96f3c:	42002034 	orhi	r8,r8,128
   96f40:	01400e04 	movi	r5,56
   96f44:	29006716 	blt	r5,r4,970e4 <__adddf3+0x840>
   96f48:	014007c4 	movi	r5,31
   96f4c:	29007016 	blt	r5,r4,97110 <__adddf3+0x86c>
   96f50:	01400804 	movi	r5,32
   96f54:	290bc83a 	sub	r5,r5,r4
   96f58:	4154983a 	sll	r10,r8,r5
   96f5c:	890ed83a 	srl	r7,r17,r4
   96f60:	894a983a 	sll	r5,r17,r5
   96f64:	4108d83a 	srl	r4,r8,r4
   96f68:	51e2b03a 	or	r17,r10,r7
   96f6c:	280ac03a 	cmpne	r5,r5,zero
   96f70:	8962b03a 	or	r17,r17,r5
   96f74:	89a3883a 	add	r17,r17,r6
   96f78:	2253883a 	add	r9,r4,r9
   96f7c:	898d803a 	cmpltu	r6,r17,r6
   96f80:	3251883a 	add	r8,r6,r9
   96f84:	1021883a 	mov	r16,r2
   96f88:	003ee506 	br	96b20 <__alt_data_end+0xfffc6c60>
   96f8c:	4984b03a 	or	r2,r9,r6
   96f90:	103e6326 	beq	r2,zero,96920 <__alt_data_end+0xfffc6a60>
   96f94:	8987c83a 	sub	r3,r17,r6
   96f98:	88c9803a 	cmpltu	r4,r17,r3
   96f9c:	4245c83a 	sub	r2,r8,r9
   96fa0:	1105c83a 	sub	r2,r2,r4
   96fa4:	1100202c 	andhi	r4,r2,128
   96fa8:	203ebb26 	beq	r4,zero,96a98 <__alt_data_end+0xfffc6bd8>
   96fac:	3463c83a 	sub	r17,r6,r17
   96fb0:	4a07c83a 	sub	r3,r9,r8
   96fb4:	344d803a 	cmpltu	r6,r6,r17
   96fb8:	1991c83a 	sub	r8,r3,r6
   96fbc:	3825883a 	mov	r18,r7
   96fc0:	003e5706 	br	96920 <__alt_data_end+0xfffc6a60>
   96fc4:	4984b03a 	or	r2,r9,r6
   96fc8:	10002e26 	beq	r2,zero,97084 <__adddf3+0x7e0>
   96fcc:	4004d0fa 	srli	r2,r8,3
   96fd0:	8822d0fa 	srli	r17,r17,3
   96fd4:	4010977a 	slli	r8,r8,29
   96fd8:	10c0022c 	andhi	r3,r2,8
   96fdc:	4462b03a 	or	r17,r8,r17
   96fe0:	18000826 	beq	r3,zero,97004 <__adddf3+0x760>
   96fe4:	4808d0fa 	srli	r4,r9,3
   96fe8:	20c0022c 	andhi	r3,r4,8
   96fec:	1800051e 	bne	r3,zero,97004 <__adddf3+0x760>
   96ff0:	300cd0fa 	srli	r6,r6,3
   96ff4:	4806977a 	slli	r3,r9,29
   96ff8:	2005883a 	mov	r2,r4
   96ffc:	3825883a 	mov	r18,r7
   97000:	19a2b03a 	or	r17,r3,r6
   97004:	8810d77a 	srli	r8,r17,29
   97008:	100490fa 	slli	r2,r2,3
   9700c:	882290fa 	slli	r17,r17,3
   97010:	0401ffc4 	movi	r16,2047
   97014:	4090b03a 	or	r8,r8,r2
   97018:	003e4106 	br	96920 <__alt_data_end+0xfffc6a60>
   9701c:	0141ffc4 	movi	r5,2047
   97020:	117fc71e 	bne	r2,r5,96f40 <__alt_data_end+0xfffc7080>
   97024:	4811883a 	mov	r8,r9
   97028:	3023883a 	mov	r17,r6
   9702c:	1021883a 	mov	r16,r2
   97030:	003e3b06 	br	96920 <__alt_data_end+0xfffc6a60>
   97034:	10002f26 	beq	r2,zero,970f4 <__adddf3+0x850>
   97038:	4984b03a 	or	r2,r9,r6
   9703c:	10001126 	beq	r2,zero,97084 <__adddf3+0x7e0>
   97040:	4004d0fa 	srli	r2,r8,3
   97044:	8822d0fa 	srli	r17,r17,3
   97048:	4010977a 	slli	r8,r8,29
   9704c:	10c0022c 	andhi	r3,r2,8
   97050:	4462b03a 	or	r17,r8,r17
   97054:	183feb26 	beq	r3,zero,97004 <__alt_data_end+0xfffc7144>
   97058:	4808d0fa 	srli	r4,r9,3
   9705c:	20c0022c 	andhi	r3,r4,8
   97060:	183fe81e 	bne	r3,zero,97004 <__alt_data_end+0xfffc7144>
   97064:	300cd0fa 	srli	r6,r6,3
   97068:	4806977a 	slli	r3,r9,29
   9706c:	2005883a 	mov	r2,r4
   97070:	19a2b03a 	or	r17,r3,r6
   97074:	003fe306 	br	97004 <__alt_data_end+0xfffc7144>
   97078:	0011883a 	mov	r8,zero
   9707c:	0005883a 	mov	r2,zero
   97080:	003e3f06 	br	96980 <__alt_data_end+0xfffc6ac0>
   97084:	0401ffc4 	movi	r16,2047
   97088:	003e2506 	br	96920 <__alt_data_end+0xfffc6a60>
   9708c:	0013883a 	mov	r9,zero
   97090:	003f8406 	br	96ea4 <__alt_data_end+0xfffc6fe4>
   97094:	0005883a 	mov	r2,zero
   97098:	0007883a 	mov	r3,zero
   9709c:	003e8906 	br	96ac4 <__alt_data_end+0xfffc6c04>
   970a0:	197ff804 	addi	r5,r3,-32
   970a4:	01000804 	movi	r4,32
   970a8:	414ad83a 	srl	r5,r8,r5
   970ac:	19002426 	beq	r3,r4,97140 <__adddf3+0x89c>
   970b0:	01001004 	movi	r4,64
   970b4:	20c7c83a 	sub	r3,r4,r3
   970b8:	40c6983a 	sll	r3,r8,r3
   970bc:	1c46b03a 	or	r3,r3,r17
   970c0:	1806c03a 	cmpne	r3,r3,zero
   970c4:	28e2b03a 	or	r17,r5,r3
   970c8:	0007883a 	mov	r3,zero
   970cc:	003f2306 	br	96d5c <__alt_data_end+0xfffc6e9c>
   970d0:	0007883a 	mov	r3,zero
   970d4:	5811883a 	mov	r8,r11
   970d8:	00bfffc4 	movi	r2,-1
   970dc:	0401ffc4 	movi	r16,2047
   970e0:	003e7806 	br	96ac4 <__alt_data_end+0xfffc6c04>
   970e4:	4462b03a 	or	r17,r8,r17
   970e8:	8822c03a 	cmpne	r17,r17,zero
   970ec:	0009883a 	mov	r4,zero
   970f0:	003fa006 	br	96f74 <__alt_data_end+0xfffc70b4>
   970f4:	4811883a 	mov	r8,r9
   970f8:	3023883a 	mov	r17,r6
   970fc:	0401ffc4 	movi	r16,2047
   97100:	003e0706 	br	96920 <__alt_data_end+0xfffc6a60>
   97104:	4811883a 	mov	r8,r9
   97108:	3023883a 	mov	r17,r6
   9710c:	003e0406 	br	96920 <__alt_data_end+0xfffc6a60>
   97110:	21fff804 	addi	r7,r4,-32
   97114:	01400804 	movi	r5,32
   97118:	41ced83a 	srl	r7,r8,r7
   9711c:	21400a26 	beq	r4,r5,97148 <__adddf3+0x8a4>
   97120:	01401004 	movi	r5,64
   97124:	2909c83a 	sub	r4,r5,r4
   97128:	4108983a 	sll	r4,r8,r4
   9712c:	2448b03a 	or	r4,r4,r17
   97130:	2008c03a 	cmpne	r4,r4,zero
   97134:	3922b03a 	or	r17,r7,r4
   97138:	0009883a 	mov	r4,zero
   9713c:	003f8d06 	br	96f74 <__alt_data_end+0xfffc70b4>
   97140:	0007883a 	mov	r3,zero
   97144:	003fdd06 	br	970bc <__alt_data_end+0xfffc71fc>
   97148:	0009883a 	mov	r4,zero
   9714c:	003ff706 	br	9712c <__alt_data_end+0xfffc726c>

00097150 <__divdf3>:
   97150:	defff204 	addi	sp,sp,-56
   97154:	dd400915 	stw	r21,36(sp)
   97158:	282ad53a 	srli	r21,r5,20
   9715c:	dd000815 	stw	r20,32(sp)
   97160:	2828d7fa 	srli	r20,r5,31
   97164:	dc000415 	stw	r16,16(sp)
   97168:	04000434 	movhi	r16,16
   9716c:	df000c15 	stw	fp,48(sp)
   97170:	843fffc4 	addi	r16,r16,-1
   97174:	dfc00d15 	stw	ra,52(sp)
   97178:	ddc00b15 	stw	r23,44(sp)
   9717c:	dd800a15 	stw	r22,40(sp)
   97180:	dcc00715 	stw	r19,28(sp)
   97184:	dc800615 	stw	r18,24(sp)
   97188:	dc400515 	stw	r17,20(sp)
   9718c:	ad41ffcc 	andi	r21,r21,2047
   97190:	2c20703a 	and	r16,r5,r16
   97194:	a7003fcc 	andi	fp,r20,255
   97198:	a8006126 	beq	r21,zero,97320 <__divdf3+0x1d0>
   9719c:	0081ffc4 	movi	r2,2047
   971a0:	2025883a 	mov	r18,r4
   971a4:	a8803726 	beq	r21,r2,97284 <__divdf3+0x134>
   971a8:	80800434 	orhi	r2,r16,16
   971ac:	100490fa 	slli	r2,r2,3
   971b0:	2020d77a 	srli	r16,r4,29
   971b4:	202490fa 	slli	r18,r4,3
   971b8:	ad7f0044 	addi	r21,r21,-1023
   971bc:	80a0b03a 	or	r16,r16,r2
   971c0:	0027883a 	mov	r19,zero
   971c4:	0013883a 	mov	r9,zero
   971c8:	3804d53a 	srli	r2,r7,20
   971cc:	382cd7fa 	srli	r22,r7,31
   971d0:	04400434 	movhi	r17,16
   971d4:	8c7fffc4 	addi	r17,r17,-1
   971d8:	1081ffcc 	andi	r2,r2,2047
   971dc:	3011883a 	mov	r8,r6
   971e0:	3c62703a 	and	r17,r7,r17
   971e4:	b5c03fcc 	andi	r23,r22,255
   971e8:	10006c26 	beq	r2,zero,9739c <__divdf3+0x24c>
   971ec:	00c1ffc4 	movi	r3,2047
   971f0:	10c06426 	beq	r2,r3,97384 <__divdf3+0x234>
   971f4:	88c00434 	orhi	r3,r17,16
   971f8:	180690fa 	slli	r3,r3,3
   971fc:	3022d77a 	srli	r17,r6,29
   97200:	301090fa 	slli	r8,r6,3
   97204:	10bf0044 	addi	r2,r2,-1023
   97208:	88e2b03a 	or	r17,r17,r3
   9720c:	000f883a 	mov	r7,zero
   97210:	a58cf03a 	xor	r6,r20,r22
   97214:	3cc8b03a 	or	r4,r7,r19
   97218:	a8abc83a 	sub	r21,r21,r2
   9721c:	008003c4 	movi	r2,15
   97220:	3007883a 	mov	r3,r6
   97224:	34c03fcc 	andi	r19,r6,255
   97228:	11009036 	bltu	r2,r4,9746c <__divdf3+0x31c>
   9722c:	200890ba 	slli	r4,r4,2
   97230:	00800274 	movhi	r2,9
   97234:	109c9104 	addi	r2,r2,29252
   97238:	2089883a 	add	r4,r4,r2
   9723c:	20800017 	ldw	r2,0(r4)
   97240:	1000683a 	jmp	r2
   97244:	0009746c 	andhi	zero,zero,9681
   97248:	000972bc 	xorhi	zero,zero,9674
   9724c:	0009745c 	xori	zero,zero,9681
   97250:	000972b0 	cmpltui	zero,zero,9674
   97254:	0009745c 	xori	zero,zero,9681
   97258:	00097430 	cmpltui	zero,zero,9680
   9725c:	0009745c 	xori	zero,zero,9681
   97260:	000972b0 	cmpltui	zero,zero,9674
   97264:	000972bc 	xorhi	zero,zero,9674
   97268:	000972bc 	xorhi	zero,zero,9674
   9726c:	00097430 	cmpltui	zero,zero,9680
   97270:	000972b0 	cmpltui	zero,zero,9674
   97274:	000972a0 	cmpeqi	zero,zero,9674
   97278:	000972a0 	cmpeqi	zero,zero,9674
   9727c:	000972a0 	cmpeqi	zero,zero,9674
   97280:	00097750 	cmplti	zero,zero,9693
   97284:	2404b03a 	or	r2,r4,r16
   97288:	1000661e 	bne	r2,zero,97424 <__divdf3+0x2d4>
   9728c:	04c00204 	movi	r19,8
   97290:	0021883a 	mov	r16,zero
   97294:	0025883a 	mov	r18,zero
   97298:	02400084 	movi	r9,2
   9729c:	003fca06 	br	971c8 <__alt_data_end+0xfffc7308>
   972a0:	8023883a 	mov	r17,r16
   972a4:	9011883a 	mov	r8,r18
   972a8:	e02f883a 	mov	r23,fp
   972ac:	480f883a 	mov	r7,r9
   972b0:	00800084 	movi	r2,2
   972b4:	3881311e 	bne	r7,r2,9777c <__divdf3+0x62c>
   972b8:	b827883a 	mov	r19,r23
   972bc:	98c0004c 	andi	r3,r19,1
   972c0:	0081ffc4 	movi	r2,2047
   972c4:	000b883a 	mov	r5,zero
   972c8:	0025883a 	mov	r18,zero
   972cc:	1004953a 	slli	r2,r2,20
   972d0:	18c03fcc 	andi	r3,r3,255
   972d4:	04400434 	movhi	r17,16
   972d8:	8c7fffc4 	addi	r17,r17,-1
   972dc:	180697fa 	slli	r3,r3,31
   972e0:	2c4a703a 	and	r5,r5,r17
   972e4:	288ab03a 	or	r5,r5,r2
   972e8:	28c6b03a 	or	r3,r5,r3
   972ec:	9005883a 	mov	r2,r18
   972f0:	dfc00d17 	ldw	ra,52(sp)
   972f4:	df000c17 	ldw	fp,48(sp)
   972f8:	ddc00b17 	ldw	r23,44(sp)
   972fc:	dd800a17 	ldw	r22,40(sp)
   97300:	dd400917 	ldw	r21,36(sp)
   97304:	dd000817 	ldw	r20,32(sp)
   97308:	dcc00717 	ldw	r19,28(sp)
   9730c:	dc800617 	ldw	r18,24(sp)
   97310:	dc400517 	ldw	r17,20(sp)
   97314:	dc000417 	ldw	r16,16(sp)
   97318:	dec00e04 	addi	sp,sp,56
   9731c:	f800283a 	ret
   97320:	2404b03a 	or	r2,r4,r16
   97324:	2027883a 	mov	r19,r4
   97328:	10003926 	beq	r2,zero,97410 <__divdf3+0x2c0>
   9732c:	80012e26 	beq	r16,zero,977e8 <__divdf3+0x698>
   97330:	8009883a 	mov	r4,r16
   97334:	d9800315 	stw	r6,12(sp)
   97338:	d9c00215 	stw	r7,8(sp)
   9733c:	0098ea80 	call	98ea8 <__clzsi2>
   97340:	d9800317 	ldw	r6,12(sp)
   97344:	d9c00217 	ldw	r7,8(sp)
   97348:	113ffd44 	addi	r4,r2,-11
   9734c:	00c00704 	movi	r3,28
   97350:	19012116 	blt	r3,r4,977d8 <__divdf3+0x688>
   97354:	00c00744 	movi	r3,29
   97358:	147ffe04 	addi	r17,r2,-8
   9735c:	1907c83a 	sub	r3,r3,r4
   97360:	8460983a 	sll	r16,r16,r17
   97364:	98c6d83a 	srl	r3,r19,r3
   97368:	9c64983a 	sll	r18,r19,r17
   9736c:	1c20b03a 	or	r16,r3,r16
   97370:	1080fcc4 	addi	r2,r2,1011
   97374:	00abc83a 	sub	r21,zero,r2
   97378:	0027883a 	mov	r19,zero
   9737c:	0013883a 	mov	r9,zero
   97380:	003f9106 	br	971c8 <__alt_data_end+0xfffc7308>
   97384:	3446b03a 	or	r3,r6,r17
   97388:	18001f1e 	bne	r3,zero,97408 <__divdf3+0x2b8>
   9738c:	0023883a 	mov	r17,zero
   97390:	0011883a 	mov	r8,zero
   97394:	01c00084 	movi	r7,2
   97398:	003f9d06 	br	97210 <__alt_data_end+0xfffc7350>
   9739c:	3446b03a 	or	r3,r6,r17
   973a0:	18001526 	beq	r3,zero,973f8 <__divdf3+0x2a8>
   973a4:	88011b26 	beq	r17,zero,97814 <__divdf3+0x6c4>
   973a8:	8809883a 	mov	r4,r17
   973ac:	d9800315 	stw	r6,12(sp)
   973b0:	da400115 	stw	r9,4(sp)
   973b4:	0098ea80 	call	98ea8 <__clzsi2>
   973b8:	d9800317 	ldw	r6,12(sp)
   973bc:	da400117 	ldw	r9,4(sp)
   973c0:	113ffd44 	addi	r4,r2,-11
   973c4:	00c00704 	movi	r3,28
   973c8:	19010e16 	blt	r3,r4,97804 <__divdf3+0x6b4>
   973cc:	00c00744 	movi	r3,29
   973d0:	123ffe04 	addi	r8,r2,-8
   973d4:	1907c83a 	sub	r3,r3,r4
   973d8:	8a22983a 	sll	r17,r17,r8
   973dc:	30c6d83a 	srl	r3,r6,r3
   973e0:	3210983a 	sll	r8,r6,r8
   973e4:	1c62b03a 	or	r17,r3,r17
   973e8:	1080fcc4 	addi	r2,r2,1011
   973ec:	0085c83a 	sub	r2,zero,r2
   973f0:	000f883a 	mov	r7,zero
   973f4:	003f8606 	br	97210 <__alt_data_end+0xfffc7350>
   973f8:	0023883a 	mov	r17,zero
   973fc:	0011883a 	mov	r8,zero
   97400:	01c00044 	movi	r7,1
   97404:	003f8206 	br	97210 <__alt_data_end+0xfffc7350>
   97408:	01c000c4 	movi	r7,3
   9740c:	003f8006 	br	97210 <__alt_data_end+0xfffc7350>
   97410:	04c00104 	movi	r19,4
   97414:	0021883a 	mov	r16,zero
   97418:	0025883a 	mov	r18,zero
   9741c:	02400044 	movi	r9,1
   97420:	003f6906 	br	971c8 <__alt_data_end+0xfffc7308>
   97424:	04c00304 	movi	r19,12
   97428:	024000c4 	movi	r9,3
   9742c:	003f6606 	br	971c8 <__alt_data_end+0xfffc7308>
   97430:	01400434 	movhi	r5,16
   97434:	0007883a 	mov	r3,zero
   97438:	297fffc4 	addi	r5,r5,-1
   9743c:	04bfffc4 	movi	r18,-1
   97440:	0081ffc4 	movi	r2,2047
   97444:	003fa106 	br	972cc <__alt_data_end+0xfffc740c>
   97448:	00c00044 	movi	r3,1
   9744c:	1887c83a 	sub	r3,r3,r2
   97450:	01000e04 	movi	r4,56
   97454:	20c1210e 	bge	r4,r3,978dc <__divdf3+0x78c>
   97458:	98c0004c 	andi	r3,r19,1
   9745c:	0005883a 	mov	r2,zero
   97460:	000b883a 	mov	r5,zero
   97464:	0025883a 	mov	r18,zero
   97468:	003f9806 	br	972cc <__alt_data_end+0xfffc740c>
   9746c:	8c00fd36 	bltu	r17,r16,97864 <__divdf3+0x714>
   97470:	8440fb26 	beq	r16,r17,97860 <__divdf3+0x710>
   97474:	8007883a 	mov	r3,r16
   97478:	ad7fffc4 	addi	r21,r21,-1
   9747c:	0021883a 	mov	r16,zero
   97480:	4004d63a 	srli	r2,r8,24
   97484:	8822923a 	slli	r17,r17,8
   97488:	1809883a 	mov	r4,r3
   9748c:	402c923a 	slli	r22,r8,8
   97490:	88b8b03a 	or	fp,r17,r2
   97494:	e028d43a 	srli	r20,fp,16
   97498:	d8c00015 	stw	r3,0(sp)
   9749c:	e5ffffcc 	andi	r23,fp,65535
   974a0:	a00b883a 	mov	r5,r20
   974a4:	0088d8c0 	call	88d8c <__udivsi3>
   974a8:	d8c00017 	ldw	r3,0(sp)
   974ac:	a00b883a 	mov	r5,r20
   974b0:	d8800315 	stw	r2,12(sp)
   974b4:	1809883a 	mov	r4,r3
   974b8:	0088df00 	call	88df0 <__umodsi3>
   974bc:	d9800317 	ldw	r6,12(sp)
   974c0:	1006943a 	slli	r3,r2,16
   974c4:	9004d43a 	srli	r2,r18,16
   974c8:	b9a3383a 	mul	r17,r23,r6
   974cc:	10c4b03a 	or	r2,r2,r3
   974d0:	1440062e 	bgeu	r2,r17,974ec <__divdf3+0x39c>
   974d4:	1705883a 	add	r2,r2,fp
   974d8:	30ffffc4 	addi	r3,r6,-1
   974dc:	1700ee36 	bltu	r2,fp,97898 <__divdf3+0x748>
   974e0:	1440ed2e 	bgeu	r2,r17,97898 <__divdf3+0x748>
   974e4:	31bfff84 	addi	r6,r6,-2
   974e8:	1705883a 	add	r2,r2,fp
   974ec:	1463c83a 	sub	r17,r2,r17
   974f0:	a00b883a 	mov	r5,r20
   974f4:	8809883a 	mov	r4,r17
   974f8:	d9800315 	stw	r6,12(sp)
   974fc:	0088d8c0 	call	88d8c <__udivsi3>
   97500:	a00b883a 	mov	r5,r20
   97504:	8809883a 	mov	r4,r17
   97508:	d8800215 	stw	r2,8(sp)
   9750c:	0088df00 	call	88df0 <__umodsi3>
   97510:	d9c00217 	ldw	r7,8(sp)
   97514:	1004943a 	slli	r2,r2,16
   97518:	94bfffcc 	andi	r18,r18,65535
   9751c:	b9d1383a 	mul	r8,r23,r7
   97520:	90a4b03a 	or	r18,r18,r2
   97524:	d9800317 	ldw	r6,12(sp)
   97528:	9200062e 	bgeu	r18,r8,97544 <__divdf3+0x3f4>
   9752c:	9725883a 	add	r18,r18,fp
   97530:	38bfffc4 	addi	r2,r7,-1
   97534:	9700d636 	bltu	r18,fp,97890 <__divdf3+0x740>
   97538:	9200d52e 	bgeu	r18,r8,97890 <__divdf3+0x740>
   9753c:	39ffff84 	addi	r7,r7,-2
   97540:	9725883a 	add	r18,r18,fp
   97544:	3004943a 	slli	r2,r6,16
   97548:	b012d43a 	srli	r9,r22,16
   9754c:	b1bfffcc 	andi	r6,r22,65535
   97550:	11e2b03a 	or	r17,r2,r7
   97554:	8806d43a 	srli	r3,r17,16
   97558:	893fffcc 	andi	r4,r17,65535
   9755c:	218b383a 	mul	r5,r4,r6
   97560:	30c5383a 	mul	r2,r6,r3
   97564:	2249383a 	mul	r4,r4,r9
   97568:	280ed43a 	srli	r7,r5,16
   9756c:	9225c83a 	sub	r18,r18,r8
   97570:	2089883a 	add	r4,r4,r2
   97574:	3909883a 	add	r4,r7,r4
   97578:	1a47383a 	mul	r3,r3,r9
   9757c:	2080022e 	bgeu	r4,r2,97588 <__divdf3+0x438>
   97580:	00800074 	movhi	r2,1
   97584:	1887883a 	add	r3,r3,r2
   97588:	2004d43a 	srli	r2,r4,16
   9758c:	2008943a 	slli	r4,r4,16
   97590:	297fffcc 	andi	r5,r5,65535
   97594:	10c7883a 	add	r3,r2,r3
   97598:	2149883a 	add	r4,r4,r5
   9759c:	90c0a536 	bltu	r18,r3,97834 <__divdf3+0x6e4>
   975a0:	90c0bf26 	beq	r18,r3,978a0 <__divdf3+0x750>
   975a4:	90c7c83a 	sub	r3,r18,r3
   975a8:	810fc83a 	sub	r7,r16,r4
   975ac:	81e5803a 	cmpltu	r18,r16,r7
   975b0:	1ca5c83a 	sub	r18,r3,r18
   975b4:	e480c126 	beq	fp,r18,978bc <__divdf3+0x76c>
   975b8:	a00b883a 	mov	r5,r20
   975bc:	9009883a 	mov	r4,r18
   975c0:	d9800315 	stw	r6,12(sp)
   975c4:	d9c00215 	stw	r7,8(sp)
   975c8:	da400115 	stw	r9,4(sp)
   975cc:	0088d8c0 	call	88d8c <__udivsi3>
   975d0:	a00b883a 	mov	r5,r20
   975d4:	9009883a 	mov	r4,r18
   975d8:	d8800015 	stw	r2,0(sp)
   975dc:	0088df00 	call	88df0 <__umodsi3>
   975e0:	d9c00217 	ldw	r7,8(sp)
   975e4:	da000017 	ldw	r8,0(sp)
   975e8:	1006943a 	slli	r3,r2,16
   975ec:	3804d43a 	srli	r2,r7,16
   975f0:	ba21383a 	mul	r16,r23,r8
   975f4:	d9800317 	ldw	r6,12(sp)
   975f8:	10c4b03a 	or	r2,r2,r3
   975fc:	da400117 	ldw	r9,4(sp)
   97600:	1400062e 	bgeu	r2,r16,9761c <__divdf3+0x4cc>
   97604:	1705883a 	add	r2,r2,fp
   97608:	40ffffc4 	addi	r3,r8,-1
   9760c:	1700ad36 	bltu	r2,fp,978c4 <__divdf3+0x774>
   97610:	1400ac2e 	bgeu	r2,r16,978c4 <__divdf3+0x774>
   97614:	423fff84 	addi	r8,r8,-2
   97618:	1705883a 	add	r2,r2,fp
   9761c:	1421c83a 	sub	r16,r2,r16
   97620:	a00b883a 	mov	r5,r20
   97624:	8009883a 	mov	r4,r16
   97628:	d9800315 	stw	r6,12(sp)
   9762c:	d9c00215 	stw	r7,8(sp)
   97630:	da000015 	stw	r8,0(sp)
   97634:	da400115 	stw	r9,4(sp)
   97638:	0088d8c0 	call	88d8c <__udivsi3>
   9763c:	8009883a 	mov	r4,r16
   97640:	a00b883a 	mov	r5,r20
   97644:	1025883a 	mov	r18,r2
   97648:	0088df00 	call	88df0 <__umodsi3>
   9764c:	d9c00217 	ldw	r7,8(sp)
   97650:	1004943a 	slli	r2,r2,16
   97654:	bcaf383a 	mul	r23,r23,r18
   97658:	393fffcc 	andi	r4,r7,65535
   9765c:	2088b03a 	or	r4,r4,r2
   97660:	d9800317 	ldw	r6,12(sp)
   97664:	da000017 	ldw	r8,0(sp)
   97668:	da400117 	ldw	r9,4(sp)
   9766c:	25c0062e 	bgeu	r4,r23,97688 <__divdf3+0x538>
   97670:	2709883a 	add	r4,r4,fp
   97674:	90bfffc4 	addi	r2,r18,-1
   97678:	27009436 	bltu	r4,fp,978cc <__divdf3+0x77c>
   9767c:	25c0932e 	bgeu	r4,r23,978cc <__divdf3+0x77c>
   97680:	94bfff84 	addi	r18,r18,-2
   97684:	2709883a 	add	r4,r4,fp
   97688:	4004943a 	slli	r2,r8,16
   9768c:	25efc83a 	sub	r23,r4,r23
   97690:	1490b03a 	or	r8,r2,r18
   97694:	4008d43a 	srli	r4,r8,16
   97698:	40ffffcc 	andi	r3,r8,65535
   9769c:	30c5383a 	mul	r2,r6,r3
   976a0:	1a47383a 	mul	r3,r3,r9
   976a4:	310d383a 	mul	r6,r6,r4
   976a8:	100ad43a 	srli	r5,r2,16
   976ac:	4913383a 	mul	r9,r9,r4
   976b0:	1987883a 	add	r3,r3,r6
   976b4:	28c7883a 	add	r3,r5,r3
   976b8:	1980022e 	bgeu	r3,r6,976c4 <__divdf3+0x574>
   976bc:	01000074 	movhi	r4,1
   976c0:	4913883a 	add	r9,r9,r4
   976c4:	1808d43a 	srli	r4,r3,16
   976c8:	1806943a 	slli	r3,r3,16
   976cc:	10bfffcc 	andi	r2,r2,65535
   976d0:	2253883a 	add	r9,r4,r9
   976d4:	1887883a 	add	r3,r3,r2
   976d8:	ba403836 	bltu	r23,r9,977bc <__divdf3+0x66c>
   976dc:	ba403626 	beq	r23,r9,977b8 <__divdf3+0x668>
   976e0:	42000054 	ori	r8,r8,1
   976e4:	a880ffc4 	addi	r2,r21,1023
   976e8:	00bf570e 	bge	zero,r2,97448 <__alt_data_end+0xfffc7588>
   976ec:	40c001cc 	andi	r3,r8,7
   976f0:	18000726 	beq	r3,zero,97710 <__divdf3+0x5c0>
   976f4:	40c003cc 	andi	r3,r8,15
   976f8:	01000104 	movi	r4,4
   976fc:	19000426 	beq	r3,r4,97710 <__divdf3+0x5c0>
   97700:	4107883a 	add	r3,r8,r4
   97704:	1a11803a 	cmpltu	r8,r3,r8
   97708:	8a23883a 	add	r17,r17,r8
   9770c:	1811883a 	mov	r8,r3
   97710:	88c0402c 	andhi	r3,r17,256
   97714:	18000426 	beq	r3,zero,97728 <__divdf3+0x5d8>
   97718:	00ffc034 	movhi	r3,65280
   9771c:	18ffffc4 	addi	r3,r3,-1
   97720:	a8810004 	addi	r2,r21,1024
   97724:	88e2703a 	and	r17,r17,r3
   97728:	00c1ff84 	movi	r3,2046
   9772c:	18bee316 	blt	r3,r2,972bc <__alt_data_end+0xfffc73fc>
   97730:	8824977a 	slli	r18,r17,29
   97734:	4010d0fa 	srli	r8,r8,3
   97738:	8822927a 	slli	r17,r17,9
   9773c:	1081ffcc 	andi	r2,r2,2047
   97740:	9224b03a 	or	r18,r18,r8
   97744:	880ad33a 	srli	r5,r17,12
   97748:	98c0004c 	andi	r3,r19,1
   9774c:	003edf06 	br	972cc <__alt_data_end+0xfffc740c>
   97750:	8080022c 	andhi	r2,r16,8
   97754:	10001226 	beq	r2,zero,977a0 <__divdf3+0x650>
   97758:	8880022c 	andhi	r2,r17,8
   9775c:	1000101e 	bne	r2,zero,977a0 <__divdf3+0x650>
   97760:	00800434 	movhi	r2,16
   97764:	89400234 	orhi	r5,r17,8
   97768:	10bfffc4 	addi	r2,r2,-1
   9776c:	b007883a 	mov	r3,r22
   97770:	288a703a 	and	r5,r5,r2
   97774:	4025883a 	mov	r18,r8
   97778:	003f3106 	br	97440 <__alt_data_end+0xfffc7580>
   9777c:	008000c4 	movi	r2,3
   97780:	3880a626 	beq	r7,r2,97a1c <__divdf3+0x8cc>
   97784:	00800044 	movi	r2,1
   97788:	3880521e 	bne	r7,r2,978d4 <__divdf3+0x784>
   9778c:	b807883a 	mov	r3,r23
   97790:	0005883a 	mov	r2,zero
   97794:	000b883a 	mov	r5,zero
   97798:	0025883a 	mov	r18,zero
   9779c:	003ecb06 	br	972cc <__alt_data_end+0xfffc740c>
   977a0:	00800434 	movhi	r2,16
   977a4:	81400234 	orhi	r5,r16,8
   977a8:	10bfffc4 	addi	r2,r2,-1
   977ac:	a007883a 	mov	r3,r20
   977b0:	288a703a 	and	r5,r5,r2
   977b4:	003f2206 	br	97440 <__alt_data_end+0xfffc7580>
   977b8:	183fca26 	beq	r3,zero,976e4 <__alt_data_end+0xfffc7824>
   977bc:	e5ef883a 	add	r23,fp,r23
   977c0:	40bfffc4 	addi	r2,r8,-1
   977c4:	bf00392e 	bgeu	r23,fp,978ac <__divdf3+0x75c>
   977c8:	1011883a 	mov	r8,r2
   977cc:	ba7fc41e 	bne	r23,r9,976e0 <__alt_data_end+0xfffc7820>
   977d0:	b0ffc31e 	bne	r22,r3,976e0 <__alt_data_end+0xfffc7820>
   977d4:	003fc306 	br	976e4 <__alt_data_end+0xfffc7824>
   977d8:	143ff604 	addi	r16,r2,-40
   977dc:	9c20983a 	sll	r16,r19,r16
   977e0:	0025883a 	mov	r18,zero
   977e4:	003ee206 	br	97370 <__alt_data_end+0xfffc74b0>
   977e8:	d9800315 	stw	r6,12(sp)
   977ec:	d9c00215 	stw	r7,8(sp)
   977f0:	0098ea80 	call	98ea8 <__clzsi2>
   977f4:	10800804 	addi	r2,r2,32
   977f8:	d9c00217 	ldw	r7,8(sp)
   977fc:	d9800317 	ldw	r6,12(sp)
   97800:	003ed106 	br	97348 <__alt_data_end+0xfffc7488>
   97804:	147ff604 	addi	r17,r2,-40
   97808:	3462983a 	sll	r17,r6,r17
   9780c:	0011883a 	mov	r8,zero
   97810:	003ef506 	br	973e8 <__alt_data_end+0xfffc7528>
   97814:	3009883a 	mov	r4,r6
   97818:	d9800315 	stw	r6,12(sp)
   9781c:	da400115 	stw	r9,4(sp)
   97820:	0098ea80 	call	98ea8 <__clzsi2>
   97824:	10800804 	addi	r2,r2,32
   97828:	da400117 	ldw	r9,4(sp)
   9782c:	d9800317 	ldw	r6,12(sp)
   97830:	003ee306 	br	973c0 <__alt_data_end+0xfffc7500>
   97834:	85a1883a 	add	r16,r16,r22
   97838:	8585803a 	cmpltu	r2,r16,r22
   9783c:	1705883a 	add	r2,r2,fp
   97840:	14a5883a 	add	r18,r2,r18
   97844:	88bfffc4 	addi	r2,r17,-1
   97848:	e4800c2e 	bgeu	fp,r18,9787c <__divdf3+0x72c>
   9784c:	90c03e36 	bltu	r18,r3,97948 <__divdf3+0x7f8>
   97850:	1c806926 	beq	r3,r18,979f8 <__divdf3+0x8a8>
   97854:	90c7c83a 	sub	r3,r18,r3
   97858:	1023883a 	mov	r17,r2
   9785c:	003f5206 	br	975a8 <__alt_data_end+0xfffc76e8>
   97860:	923f0436 	bltu	r18,r8,97474 <__alt_data_end+0xfffc75b4>
   97864:	800897fa 	slli	r4,r16,31
   97868:	9004d07a 	srli	r2,r18,1
   9786c:	8006d07a 	srli	r3,r16,1
   97870:	902097fa 	slli	r16,r18,31
   97874:	20a4b03a 	or	r18,r4,r2
   97878:	003f0106 	br	97480 <__alt_data_end+0xfffc75c0>
   9787c:	e4bff51e 	bne	fp,r18,97854 <__alt_data_end+0xfffc7994>
   97880:	85bff22e 	bgeu	r16,r22,9784c <__alt_data_end+0xfffc798c>
   97884:	e0c7c83a 	sub	r3,fp,r3
   97888:	1023883a 	mov	r17,r2
   9788c:	003f4606 	br	975a8 <__alt_data_end+0xfffc76e8>
   97890:	100f883a 	mov	r7,r2
   97894:	003f2b06 	br	97544 <__alt_data_end+0xfffc7684>
   97898:	180d883a 	mov	r6,r3
   9789c:	003f1306 	br	974ec <__alt_data_end+0xfffc762c>
   978a0:	813fe436 	bltu	r16,r4,97834 <__alt_data_end+0xfffc7974>
   978a4:	0007883a 	mov	r3,zero
   978a8:	003f3f06 	br	975a8 <__alt_data_end+0xfffc76e8>
   978ac:	ba402c36 	bltu	r23,r9,97960 <__divdf3+0x810>
   978b0:	4dc05426 	beq	r9,r23,97a04 <__divdf3+0x8b4>
   978b4:	1011883a 	mov	r8,r2
   978b8:	003f8906 	br	976e0 <__alt_data_end+0xfffc7820>
   978bc:	023fffc4 	movi	r8,-1
   978c0:	003f8806 	br	976e4 <__alt_data_end+0xfffc7824>
   978c4:	1811883a 	mov	r8,r3
   978c8:	003f5406 	br	9761c <__alt_data_end+0xfffc775c>
   978cc:	1025883a 	mov	r18,r2
   978d0:	003f6d06 	br	97688 <__alt_data_end+0xfffc77c8>
   978d4:	b827883a 	mov	r19,r23
   978d8:	003f8206 	br	976e4 <__alt_data_end+0xfffc7824>
   978dc:	010007c4 	movi	r4,31
   978e0:	20c02616 	blt	r4,r3,9797c <__divdf3+0x82c>
   978e4:	00800804 	movi	r2,32
   978e8:	10c5c83a 	sub	r2,r2,r3
   978ec:	888a983a 	sll	r5,r17,r2
   978f0:	40c8d83a 	srl	r4,r8,r3
   978f4:	4084983a 	sll	r2,r8,r2
   978f8:	88e2d83a 	srl	r17,r17,r3
   978fc:	2906b03a 	or	r3,r5,r4
   97900:	1004c03a 	cmpne	r2,r2,zero
   97904:	1886b03a 	or	r3,r3,r2
   97908:	188001cc 	andi	r2,r3,7
   9790c:	10000726 	beq	r2,zero,9792c <__divdf3+0x7dc>
   97910:	188003cc 	andi	r2,r3,15
   97914:	01000104 	movi	r4,4
   97918:	11000426 	beq	r2,r4,9792c <__divdf3+0x7dc>
   9791c:	1805883a 	mov	r2,r3
   97920:	10c00104 	addi	r3,r2,4
   97924:	1885803a 	cmpltu	r2,r3,r2
   97928:	88a3883a 	add	r17,r17,r2
   9792c:	8880202c 	andhi	r2,r17,128
   97930:	10002726 	beq	r2,zero,979d0 <__divdf3+0x880>
   97934:	98c0004c 	andi	r3,r19,1
   97938:	00800044 	movi	r2,1
   9793c:	000b883a 	mov	r5,zero
   97940:	0025883a 	mov	r18,zero
   97944:	003e6106 	br	972cc <__alt_data_end+0xfffc740c>
   97948:	85a1883a 	add	r16,r16,r22
   9794c:	8585803a 	cmpltu	r2,r16,r22
   97950:	1705883a 	add	r2,r2,fp
   97954:	14a5883a 	add	r18,r2,r18
   97958:	8c7fff84 	addi	r17,r17,-2
   9795c:	003f1106 	br	975a4 <__alt_data_end+0xfffc76e4>
   97960:	b589883a 	add	r4,r22,r22
   97964:	25ad803a 	cmpltu	r22,r4,r22
   97968:	b739883a 	add	fp,r22,fp
   9796c:	40bfff84 	addi	r2,r8,-2
   97970:	bf2f883a 	add	r23,r23,fp
   97974:	202d883a 	mov	r22,r4
   97978:	003f9306 	br	977c8 <__alt_data_end+0xfffc7908>
   9797c:	013ff844 	movi	r4,-31
   97980:	2085c83a 	sub	r2,r4,r2
   97984:	8888d83a 	srl	r4,r17,r2
   97988:	00800804 	movi	r2,32
   9798c:	18802126 	beq	r3,r2,97a14 <__divdf3+0x8c4>
   97990:	00801004 	movi	r2,64
   97994:	10c5c83a 	sub	r2,r2,r3
   97998:	8884983a 	sll	r2,r17,r2
   9799c:	1204b03a 	or	r2,r2,r8
   979a0:	1004c03a 	cmpne	r2,r2,zero
   979a4:	2084b03a 	or	r2,r4,r2
   979a8:	144001cc 	andi	r17,r2,7
   979ac:	88000d1e 	bne	r17,zero,979e4 <__divdf3+0x894>
   979b0:	000b883a 	mov	r5,zero
   979b4:	1024d0fa 	srli	r18,r2,3
   979b8:	98c0004c 	andi	r3,r19,1
   979bc:	0005883a 	mov	r2,zero
   979c0:	9464b03a 	or	r18,r18,r17
   979c4:	003e4106 	br	972cc <__alt_data_end+0xfffc740c>
   979c8:	1007883a 	mov	r3,r2
   979cc:	0023883a 	mov	r17,zero
   979d0:	880a927a 	slli	r5,r17,9
   979d4:	1805883a 	mov	r2,r3
   979d8:	8822977a 	slli	r17,r17,29
   979dc:	280ad33a 	srli	r5,r5,12
   979e0:	003ff406 	br	979b4 <__alt_data_end+0xfffc7af4>
   979e4:	10c003cc 	andi	r3,r2,15
   979e8:	01000104 	movi	r4,4
   979ec:	193ff626 	beq	r3,r4,979c8 <__alt_data_end+0xfffc7b08>
   979f0:	0023883a 	mov	r17,zero
   979f4:	003fca06 	br	97920 <__alt_data_end+0xfffc7a60>
   979f8:	813fd336 	bltu	r16,r4,97948 <__alt_data_end+0xfffc7a88>
   979fc:	1023883a 	mov	r17,r2
   97a00:	003fa806 	br	978a4 <__alt_data_end+0xfffc79e4>
   97a04:	b0ffd636 	bltu	r22,r3,97960 <__alt_data_end+0xfffc7aa0>
   97a08:	1011883a 	mov	r8,r2
   97a0c:	b0ff341e 	bne	r22,r3,976e0 <__alt_data_end+0xfffc7820>
   97a10:	003f3406 	br	976e4 <__alt_data_end+0xfffc7824>
   97a14:	0005883a 	mov	r2,zero
   97a18:	003fe006 	br	9799c <__alt_data_end+0xfffc7adc>
   97a1c:	00800434 	movhi	r2,16
   97a20:	89400234 	orhi	r5,r17,8
   97a24:	10bfffc4 	addi	r2,r2,-1
   97a28:	b807883a 	mov	r3,r23
   97a2c:	288a703a 	and	r5,r5,r2
   97a30:	4025883a 	mov	r18,r8
   97a34:	003e8206 	br	97440 <__alt_data_end+0xfffc7580>

00097a38 <__eqdf2>:
   97a38:	2804d53a 	srli	r2,r5,20
   97a3c:	3806d53a 	srli	r3,r7,20
   97a40:	02000434 	movhi	r8,16
   97a44:	423fffc4 	addi	r8,r8,-1
   97a48:	1081ffcc 	andi	r2,r2,2047
   97a4c:	0281ffc4 	movi	r10,2047
   97a50:	2a12703a 	and	r9,r5,r8
   97a54:	18c1ffcc 	andi	r3,r3,2047
   97a58:	3a10703a 	and	r8,r7,r8
   97a5c:	280ad7fa 	srli	r5,r5,31
   97a60:	380ed7fa 	srli	r7,r7,31
   97a64:	12801026 	beq	r2,r10,97aa8 <__eqdf2+0x70>
   97a68:	0281ffc4 	movi	r10,2047
   97a6c:	1a800a26 	beq	r3,r10,97a98 <__eqdf2+0x60>
   97a70:	10c00226 	beq	r2,r3,97a7c <__eqdf2+0x44>
   97a74:	00800044 	movi	r2,1
   97a78:	f800283a 	ret
   97a7c:	4a3ffd1e 	bne	r9,r8,97a74 <__alt_data_end+0xfffc7bb4>
   97a80:	21bffc1e 	bne	r4,r6,97a74 <__alt_data_end+0xfffc7bb4>
   97a84:	29c00c26 	beq	r5,r7,97ab8 <__eqdf2+0x80>
   97a88:	103ffa1e 	bne	r2,zero,97a74 <__alt_data_end+0xfffc7bb4>
   97a8c:	2244b03a 	or	r2,r4,r9
   97a90:	1004c03a 	cmpne	r2,r2,zero
   97a94:	f800283a 	ret
   97a98:	3214b03a 	or	r10,r6,r8
   97a9c:	503ff426 	beq	r10,zero,97a70 <__alt_data_end+0xfffc7bb0>
   97aa0:	00800044 	movi	r2,1
   97aa4:	f800283a 	ret
   97aa8:	2254b03a 	or	r10,r4,r9
   97aac:	503fee26 	beq	r10,zero,97a68 <__alt_data_end+0xfffc7ba8>
   97ab0:	00800044 	movi	r2,1
   97ab4:	f800283a 	ret
   97ab8:	0005883a 	mov	r2,zero
   97abc:	f800283a 	ret

00097ac0 <__gedf2>:
   97ac0:	2804d53a 	srli	r2,r5,20
   97ac4:	3806d53a 	srli	r3,r7,20
   97ac8:	02000434 	movhi	r8,16
   97acc:	423fffc4 	addi	r8,r8,-1
   97ad0:	1081ffcc 	andi	r2,r2,2047
   97ad4:	0241ffc4 	movi	r9,2047
   97ad8:	2a14703a 	and	r10,r5,r8
   97adc:	18c1ffcc 	andi	r3,r3,2047
   97ae0:	3a10703a 	and	r8,r7,r8
   97ae4:	280ad7fa 	srli	r5,r5,31
   97ae8:	380ed7fa 	srli	r7,r7,31
   97aec:	12401d26 	beq	r2,r9,97b64 <__gedf2+0xa4>
   97af0:	0241ffc4 	movi	r9,2047
   97af4:	1a401226 	beq	r3,r9,97b40 <__gedf2+0x80>
   97af8:	1000081e 	bne	r2,zero,97b1c <__gedf2+0x5c>
   97afc:	2296b03a 	or	r11,r4,r10
   97b00:	5813003a 	cmpeq	r9,r11,zero
   97b04:	1800091e 	bne	r3,zero,97b2c <__gedf2+0x6c>
   97b08:	3218b03a 	or	r12,r6,r8
   97b0c:	6000071e 	bne	r12,zero,97b2c <__gedf2+0x6c>
   97b10:	0005883a 	mov	r2,zero
   97b14:	5800101e 	bne	r11,zero,97b58 <__gedf2+0x98>
   97b18:	f800283a 	ret
   97b1c:	18000c1e 	bne	r3,zero,97b50 <__gedf2+0x90>
   97b20:	3212b03a 	or	r9,r6,r8
   97b24:	48000c26 	beq	r9,zero,97b58 <__gedf2+0x98>
   97b28:	0013883a 	mov	r9,zero
   97b2c:	39c03fcc 	andi	r7,r7,255
   97b30:	48000826 	beq	r9,zero,97b54 <__gedf2+0x94>
   97b34:	38000926 	beq	r7,zero,97b5c <__gedf2+0x9c>
   97b38:	00800044 	movi	r2,1
   97b3c:	f800283a 	ret
   97b40:	3212b03a 	or	r9,r6,r8
   97b44:	483fec26 	beq	r9,zero,97af8 <__alt_data_end+0xfffc7c38>
   97b48:	00bfff84 	movi	r2,-2
   97b4c:	f800283a 	ret
   97b50:	39c03fcc 	andi	r7,r7,255
   97b54:	29c00626 	beq	r5,r7,97b70 <__gedf2+0xb0>
   97b58:	283ff726 	beq	r5,zero,97b38 <__alt_data_end+0xfffc7c78>
   97b5c:	00bfffc4 	movi	r2,-1
   97b60:	f800283a 	ret
   97b64:	2292b03a 	or	r9,r4,r10
   97b68:	483fe126 	beq	r9,zero,97af0 <__alt_data_end+0xfffc7c30>
   97b6c:	003ff606 	br	97b48 <__alt_data_end+0xfffc7c88>
   97b70:	18bff916 	blt	r3,r2,97b58 <__alt_data_end+0xfffc7c98>
   97b74:	10c00316 	blt	r2,r3,97b84 <__gedf2+0xc4>
   97b78:	42bff736 	bltu	r8,r10,97b58 <__alt_data_end+0xfffc7c98>
   97b7c:	52000326 	beq	r10,r8,97b8c <__gedf2+0xcc>
   97b80:	5200042e 	bgeu	r10,r8,97b94 <__gedf2+0xd4>
   97b84:	283fec1e 	bne	r5,zero,97b38 <__alt_data_end+0xfffc7c78>
   97b88:	003ff406 	br	97b5c <__alt_data_end+0xfffc7c9c>
   97b8c:	313ff236 	bltu	r6,r4,97b58 <__alt_data_end+0xfffc7c98>
   97b90:	21bffc36 	bltu	r4,r6,97b84 <__alt_data_end+0xfffc7cc4>
   97b94:	0005883a 	mov	r2,zero
   97b98:	f800283a 	ret

00097b9c <__ledf2>:
   97b9c:	2804d53a 	srli	r2,r5,20
   97ba0:	3810d53a 	srli	r8,r7,20
   97ba4:	00c00434 	movhi	r3,16
   97ba8:	18ffffc4 	addi	r3,r3,-1
   97bac:	1081ffcc 	andi	r2,r2,2047
   97bb0:	0241ffc4 	movi	r9,2047
   97bb4:	28d4703a 	and	r10,r5,r3
   97bb8:	4201ffcc 	andi	r8,r8,2047
   97bbc:	38c6703a 	and	r3,r7,r3
   97bc0:	280ad7fa 	srli	r5,r5,31
   97bc4:	380ed7fa 	srli	r7,r7,31
   97bc8:	12401f26 	beq	r2,r9,97c48 <__ledf2+0xac>
   97bcc:	0241ffc4 	movi	r9,2047
   97bd0:	42401426 	beq	r8,r9,97c24 <__ledf2+0x88>
   97bd4:	1000091e 	bne	r2,zero,97bfc <__ledf2+0x60>
   97bd8:	2296b03a 	or	r11,r4,r10
   97bdc:	5813003a 	cmpeq	r9,r11,zero
   97be0:	29403fcc 	andi	r5,r5,255
   97be4:	40000a1e 	bne	r8,zero,97c10 <__ledf2+0x74>
   97be8:	30d8b03a 	or	r12,r6,r3
   97bec:	6000081e 	bne	r12,zero,97c10 <__ledf2+0x74>
   97bf0:	0005883a 	mov	r2,zero
   97bf4:	5800111e 	bne	r11,zero,97c3c <__ledf2+0xa0>
   97bf8:	f800283a 	ret
   97bfc:	29403fcc 	andi	r5,r5,255
   97c00:	40000c1e 	bne	r8,zero,97c34 <__ledf2+0x98>
   97c04:	30d2b03a 	or	r9,r6,r3
   97c08:	48000c26 	beq	r9,zero,97c3c <__ledf2+0xa0>
   97c0c:	0013883a 	mov	r9,zero
   97c10:	39c03fcc 	andi	r7,r7,255
   97c14:	48000826 	beq	r9,zero,97c38 <__ledf2+0x9c>
   97c18:	38001126 	beq	r7,zero,97c60 <__ledf2+0xc4>
   97c1c:	00800044 	movi	r2,1
   97c20:	f800283a 	ret
   97c24:	30d2b03a 	or	r9,r6,r3
   97c28:	483fea26 	beq	r9,zero,97bd4 <__alt_data_end+0xfffc7d14>
   97c2c:	00800084 	movi	r2,2
   97c30:	f800283a 	ret
   97c34:	39c03fcc 	andi	r7,r7,255
   97c38:	39400726 	beq	r7,r5,97c58 <__ledf2+0xbc>
   97c3c:	2800081e 	bne	r5,zero,97c60 <__ledf2+0xc4>
   97c40:	00800044 	movi	r2,1
   97c44:	f800283a 	ret
   97c48:	2292b03a 	or	r9,r4,r10
   97c4c:	483fdf26 	beq	r9,zero,97bcc <__alt_data_end+0xfffc7d0c>
   97c50:	00800084 	movi	r2,2
   97c54:	f800283a 	ret
   97c58:	4080030e 	bge	r8,r2,97c68 <__ledf2+0xcc>
   97c5c:	383fef26 	beq	r7,zero,97c1c <__alt_data_end+0xfffc7d5c>
   97c60:	00bfffc4 	movi	r2,-1
   97c64:	f800283a 	ret
   97c68:	123feb16 	blt	r2,r8,97c18 <__alt_data_end+0xfffc7d58>
   97c6c:	1abff336 	bltu	r3,r10,97c3c <__alt_data_end+0xfffc7d7c>
   97c70:	50c00326 	beq	r10,r3,97c80 <__ledf2+0xe4>
   97c74:	50c0042e 	bgeu	r10,r3,97c88 <__ledf2+0xec>
   97c78:	283fe81e 	bne	r5,zero,97c1c <__alt_data_end+0xfffc7d5c>
   97c7c:	003ff806 	br	97c60 <__alt_data_end+0xfffc7da0>
   97c80:	313fee36 	bltu	r6,r4,97c3c <__alt_data_end+0xfffc7d7c>
   97c84:	21bffc36 	bltu	r4,r6,97c78 <__alt_data_end+0xfffc7db8>
   97c88:	0005883a 	mov	r2,zero
   97c8c:	f800283a 	ret

00097c90 <__muldf3>:
   97c90:	defff304 	addi	sp,sp,-52
   97c94:	2804d53a 	srli	r2,r5,20
   97c98:	dd800915 	stw	r22,36(sp)
   97c9c:	282cd7fa 	srli	r22,r5,31
   97ca0:	dc000315 	stw	r16,12(sp)
   97ca4:	04000434 	movhi	r16,16
   97ca8:	dd400815 	stw	r21,32(sp)
   97cac:	dc800515 	stw	r18,20(sp)
   97cb0:	843fffc4 	addi	r16,r16,-1
   97cb4:	dfc00c15 	stw	ra,48(sp)
   97cb8:	df000b15 	stw	fp,44(sp)
   97cbc:	ddc00a15 	stw	r23,40(sp)
   97cc0:	dd000715 	stw	r20,28(sp)
   97cc4:	dcc00615 	stw	r19,24(sp)
   97cc8:	dc400415 	stw	r17,16(sp)
   97ccc:	1481ffcc 	andi	r18,r2,2047
   97cd0:	2c20703a 	and	r16,r5,r16
   97cd4:	b02b883a 	mov	r21,r22
   97cd8:	b2403fcc 	andi	r9,r22,255
   97cdc:	90006026 	beq	r18,zero,97e60 <__muldf3+0x1d0>
   97ce0:	0081ffc4 	movi	r2,2047
   97ce4:	2029883a 	mov	r20,r4
   97ce8:	90803626 	beq	r18,r2,97dc4 <__muldf3+0x134>
   97cec:	80800434 	orhi	r2,r16,16
   97cf0:	100490fa 	slli	r2,r2,3
   97cf4:	2020d77a 	srli	r16,r4,29
   97cf8:	202890fa 	slli	r20,r4,3
   97cfc:	94bf0044 	addi	r18,r18,-1023
   97d00:	80a0b03a 	or	r16,r16,r2
   97d04:	0027883a 	mov	r19,zero
   97d08:	0039883a 	mov	fp,zero
   97d0c:	3804d53a 	srli	r2,r7,20
   97d10:	382ed7fa 	srli	r23,r7,31
   97d14:	04400434 	movhi	r17,16
   97d18:	8c7fffc4 	addi	r17,r17,-1
   97d1c:	1081ffcc 	andi	r2,r2,2047
   97d20:	3011883a 	mov	r8,r6
   97d24:	3c62703a 	and	r17,r7,r17
   97d28:	ba803fcc 	andi	r10,r23,255
   97d2c:	10006d26 	beq	r2,zero,97ee4 <__muldf3+0x254>
   97d30:	00c1ffc4 	movi	r3,2047
   97d34:	10c06526 	beq	r2,r3,97ecc <__muldf3+0x23c>
   97d38:	88c00434 	orhi	r3,r17,16
   97d3c:	180690fa 	slli	r3,r3,3
   97d40:	3022d77a 	srli	r17,r6,29
   97d44:	301090fa 	slli	r8,r6,3
   97d48:	10bf0044 	addi	r2,r2,-1023
   97d4c:	88e2b03a 	or	r17,r17,r3
   97d50:	000b883a 	mov	r5,zero
   97d54:	9085883a 	add	r2,r18,r2
   97d58:	2cc8b03a 	or	r4,r5,r19
   97d5c:	00c003c4 	movi	r3,15
   97d60:	bdacf03a 	xor	r22,r23,r22
   97d64:	12c00044 	addi	r11,r2,1
   97d68:	19009936 	bltu	r3,r4,97fd0 <__muldf3+0x340>
   97d6c:	200890ba 	slli	r4,r4,2
   97d70:	00c00274 	movhi	r3,9
   97d74:	18df6104 	addi	r3,r3,32132
   97d78:	20c9883a 	add	r4,r4,r3
   97d7c:	20c00017 	ldw	r3,0(r4)
   97d80:	1800683a 	jmp	r3
   97d84:	00097fd0 	cmplti	zero,zero,9727
   97d88:	00097de4 	muli	zero,zero,9719
   97d8c:	00097de4 	muli	zero,zero,9719
   97d90:	00097de0 	cmpeqi	zero,zero,9719
   97d94:	00097fac 	andhi	zero,zero,9726
   97d98:	00097fac 	andhi	zero,zero,9726
   97d9c:	00097f94 	movui	zero,9726
   97da0:	00097de0 	cmpeqi	zero,zero,9719
   97da4:	00097fac 	andhi	zero,zero,9726
   97da8:	00097f94 	movui	zero,9726
   97dac:	00097fac 	andhi	zero,zero,9726
   97db0:	00097de0 	cmpeqi	zero,zero,9719
   97db4:	00097fbc 	xorhi	zero,zero,9726
   97db8:	00097fbc 	xorhi	zero,zero,9726
   97dbc:	00097fbc 	xorhi	zero,zero,9726
   97dc0:	000981d8 	cmpnei	zero,zero,9735
   97dc4:	2404b03a 	or	r2,r4,r16
   97dc8:	10006f1e 	bne	r2,zero,97f88 <__muldf3+0x2f8>
   97dcc:	04c00204 	movi	r19,8
   97dd0:	0021883a 	mov	r16,zero
   97dd4:	0029883a 	mov	r20,zero
   97dd8:	07000084 	movi	fp,2
   97ddc:	003fcb06 	br	97d0c <__alt_data_end+0xfffc7e4c>
   97de0:	502d883a 	mov	r22,r10
   97de4:	00800084 	movi	r2,2
   97de8:	28805726 	beq	r5,r2,97f48 <__muldf3+0x2b8>
   97dec:	008000c4 	movi	r2,3
   97df0:	28816626 	beq	r5,r2,9838c <__muldf3+0x6fc>
   97df4:	00800044 	movi	r2,1
   97df8:	2881411e 	bne	r5,r2,98300 <__muldf3+0x670>
   97dfc:	b02b883a 	mov	r21,r22
   97e00:	0005883a 	mov	r2,zero
   97e04:	000b883a 	mov	r5,zero
   97e08:	0029883a 	mov	r20,zero
   97e0c:	1004953a 	slli	r2,r2,20
   97e10:	a8c03fcc 	andi	r3,r21,255
   97e14:	04400434 	movhi	r17,16
   97e18:	8c7fffc4 	addi	r17,r17,-1
   97e1c:	180697fa 	slli	r3,r3,31
   97e20:	2c4a703a 	and	r5,r5,r17
   97e24:	288ab03a 	or	r5,r5,r2
   97e28:	28c6b03a 	or	r3,r5,r3
   97e2c:	a005883a 	mov	r2,r20
   97e30:	dfc00c17 	ldw	ra,48(sp)
   97e34:	df000b17 	ldw	fp,44(sp)
   97e38:	ddc00a17 	ldw	r23,40(sp)
   97e3c:	dd800917 	ldw	r22,36(sp)
   97e40:	dd400817 	ldw	r21,32(sp)
   97e44:	dd000717 	ldw	r20,28(sp)
   97e48:	dcc00617 	ldw	r19,24(sp)
   97e4c:	dc800517 	ldw	r18,20(sp)
   97e50:	dc400417 	ldw	r17,16(sp)
   97e54:	dc000317 	ldw	r16,12(sp)
   97e58:	dec00d04 	addi	sp,sp,52
   97e5c:	f800283a 	ret
   97e60:	2404b03a 	or	r2,r4,r16
   97e64:	2027883a 	mov	r19,r4
   97e68:	10004226 	beq	r2,zero,97f74 <__muldf3+0x2e4>
   97e6c:	8000fc26 	beq	r16,zero,98260 <__muldf3+0x5d0>
   97e70:	8009883a 	mov	r4,r16
   97e74:	d9800215 	stw	r6,8(sp)
   97e78:	d9c00015 	stw	r7,0(sp)
   97e7c:	da400115 	stw	r9,4(sp)
   97e80:	0098ea80 	call	98ea8 <__clzsi2>
   97e84:	d9800217 	ldw	r6,8(sp)
   97e88:	d9c00017 	ldw	r7,0(sp)
   97e8c:	da400117 	ldw	r9,4(sp)
   97e90:	113ffd44 	addi	r4,r2,-11
   97e94:	00c00704 	movi	r3,28
   97e98:	1900ed16 	blt	r3,r4,98250 <__muldf3+0x5c0>
   97e9c:	00c00744 	movi	r3,29
   97ea0:	147ffe04 	addi	r17,r2,-8
   97ea4:	1907c83a 	sub	r3,r3,r4
   97ea8:	8460983a 	sll	r16,r16,r17
   97eac:	98c6d83a 	srl	r3,r19,r3
   97eb0:	9c68983a 	sll	r20,r19,r17
   97eb4:	1c20b03a 	or	r16,r3,r16
   97eb8:	1080fcc4 	addi	r2,r2,1011
   97ebc:	00a5c83a 	sub	r18,zero,r2
   97ec0:	0027883a 	mov	r19,zero
   97ec4:	0039883a 	mov	fp,zero
   97ec8:	003f9006 	br	97d0c <__alt_data_end+0xfffc7e4c>
   97ecc:	3446b03a 	or	r3,r6,r17
   97ed0:	1800261e 	bne	r3,zero,97f6c <__muldf3+0x2dc>
   97ed4:	0023883a 	mov	r17,zero
   97ed8:	0011883a 	mov	r8,zero
   97edc:	01400084 	movi	r5,2
   97ee0:	003f9c06 	br	97d54 <__alt_data_end+0xfffc7e94>
   97ee4:	3446b03a 	or	r3,r6,r17
   97ee8:	18001c26 	beq	r3,zero,97f5c <__muldf3+0x2cc>
   97eec:	8800ce26 	beq	r17,zero,98228 <__muldf3+0x598>
   97ef0:	8809883a 	mov	r4,r17
   97ef4:	d9800215 	stw	r6,8(sp)
   97ef8:	da400115 	stw	r9,4(sp)
   97efc:	da800015 	stw	r10,0(sp)
   97f00:	0098ea80 	call	98ea8 <__clzsi2>
   97f04:	d9800217 	ldw	r6,8(sp)
   97f08:	da400117 	ldw	r9,4(sp)
   97f0c:	da800017 	ldw	r10,0(sp)
   97f10:	113ffd44 	addi	r4,r2,-11
   97f14:	00c00704 	movi	r3,28
   97f18:	1900bf16 	blt	r3,r4,98218 <__muldf3+0x588>
   97f1c:	00c00744 	movi	r3,29
   97f20:	123ffe04 	addi	r8,r2,-8
   97f24:	1907c83a 	sub	r3,r3,r4
   97f28:	8a22983a 	sll	r17,r17,r8
   97f2c:	30c6d83a 	srl	r3,r6,r3
   97f30:	3210983a 	sll	r8,r6,r8
   97f34:	1c62b03a 	or	r17,r3,r17
   97f38:	1080fcc4 	addi	r2,r2,1011
   97f3c:	0085c83a 	sub	r2,zero,r2
   97f40:	000b883a 	mov	r5,zero
   97f44:	003f8306 	br	97d54 <__alt_data_end+0xfffc7e94>
   97f48:	b02b883a 	mov	r21,r22
   97f4c:	0081ffc4 	movi	r2,2047
   97f50:	000b883a 	mov	r5,zero
   97f54:	0029883a 	mov	r20,zero
   97f58:	003fac06 	br	97e0c <__alt_data_end+0xfffc7f4c>
   97f5c:	0023883a 	mov	r17,zero
   97f60:	0011883a 	mov	r8,zero
   97f64:	01400044 	movi	r5,1
   97f68:	003f7a06 	br	97d54 <__alt_data_end+0xfffc7e94>
   97f6c:	014000c4 	movi	r5,3
   97f70:	003f7806 	br	97d54 <__alt_data_end+0xfffc7e94>
   97f74:	04c00104 	movi	r19,4
   97f78:	0021883a 	mov	r16,zero
   97f7c:	0029883a 	mov	r20,zero
   97f80:	07000044 	movi	fp,1
   97f84:	003f6106 	br	97d0c <__alt_data_end+0xfffc7e4c>
   97f88:	04c00304 	movi	r19,12
   97f8c:	070000c4 	movi	fp,3
   97f90:	003f5e06 	br	97d0c <__alt_data_end+0xfffc7e4c>
   97f94:	01400434 	movhi	r5,16
   97f98:	002b883a 	mov	r21,zero
   97f9c:	297fffc4 	addi	r5,r5,-1
   97fa0:	053fffc4 	movi	r20,-1
   97fa4:	0081ffc4 	movi	r2,2047
   97fa8:	003f9806 	br	97e0c <__alt_data_end+0xfffc7f4c>
   97fac:	8023883a 	mov	r17,r16
   97fb0:	a011883a 	mov	r8,r20
   97fb4:	e00b883a 	mov	r5,fp
   97fb8:	003f8a06 	br	97de4 <__alt_data_end+0xfffc7f24>
   97fbc:	8023883a 	mov	r17,r16
   97fc0:	a011883a 	mov	r8,r20
   97fc4:	482d883a 	mov	r22,r9
   97fc8:	e00b883a 	mov	r5,fp
   97fcc:	003f8506 	br	97de4 <__alt_data_end+0xfffc7f24>
   97fd0:	a00ad43a 	srli	r5,r20,16
   97fd4:	401ad43a 	srli	r13,r8,16
   97fd8:	a53fffcc 	andi	r20,r20,65535
   97fdc:	423fffcc 	andi	r8,r8,65535
   97fe0:	4519383a 	mul	r12,r8,r20
   97fe4:	4147383a 	mul	r3,r8,r5
   97fe8:	6d09383a 	mul	r4,r13,r20
   97fec:	600cd43a 	srli	r6,r12,16
   97ff0:	2b5d383a 	mul	r14,r5,r13
   97ff4:	20c9883a 	add	r4,r4,r3
   97ff8:	310d883a 	add	r6,r6,r4
   97ffc:	30c0022e 	bgeu	r6,r3,98008 <__muldf3+0x378>
   98000:	00c00074 	movhi	r3,1
   98004:	70dd883a 	add	r14,r14,r3
   98008:	8826d43a 	srli	r19,r17,16
   9800c:	8bffffcc 	andi	r15,r17,65535
   98010:	7d23383a 	mul	r17,r15,r20
   98014:	7949383a 	mul	r4,r15,r5
   98018:	9d29383a 	mul	r20,r19,r20
   9801c:	8814d43a 	srli	r10,r17,16
   98020:	3012943a 	slli	r9,r6,16
   98024:	a129883a 	add	r20,r20,r4
   98028:	633fffcc 	andi	r12,r12,65535
   9802c:	5515883a 	add	r10,r10,r20
   98030:	3006d43a 	srli	r3,r6,16
   98034:	4b13883a 	add	r9,r9,r12
   98038:	2ccb383a 	mul	r5,r5,r19
   9803c:	5100022e 	bgeu	r10,r4,98048 <__muldf3+0x3b8>
   98040:	01000074 	movhi	r4,1
   98044:	290b883a 	add	r5,r5,r4
   98048:	802ad43a 	srli	r21,r16,16
   9804c:	843fffcc 	andi	r16,r16,65535
   98050:	440d383a 	mul	r6,r8,r16
   98054:	4565383a 	mul	r18,r8,r21
   98058:	8349383a 	mul	r4,r16,r13
   9805c:	500e943a 	slli	r7,r10,16
   98060:	3010d43a 	srli	r8,r6,16
   98064:	5028d43a 	srli	r20,r10,16
   98068:	2489883a 	add	r4,r4,r18
   9806c:	8abfffcc 	andi	r10,r17,65535
   98070:	3a95883a 	add	r10,r7,r10
   98074:	4119883a 	add	r12,r8,r4
   98078:	a169883a 	add	r20,r20,r5
   9807c:	1a87883a 	add	r3,r3,r10
   98080:	6d5b383a 	mul	r13,r13,r21
   98084:	6480022e 	bgeu	r12,r18,98090 <__muldf3+0x400>
   98088:	01000074 	movhi	r4,1
   9808c:	691b883a 	add	r13,r13,r4
   98090:	7c25383a 	mul	r18,r15,r16
   98094:	7d4b383a 	mul	r5,r15,r21
   98098:	84cf383a 	mul	r7,r16,r19
   9809c:	901ed43a 	srli	r15,r18,16
   980a0:	6008d43a 	srli	r4,r12,16
   980a4:	6010943a 	slli	r8,r12,16
   980a8:	394f883a 	add	r7,r7,r5
   980ac:	333fffcc 	andi	r12,r6,65535
   980b0:	79df883a 	add	r15,r15,r7
   980b4:	235b883a 	add	r13,r4,r13
   980b8:	9d63383a 	mul	r17,r19,r21
   980bc:	4309883a 	add	r4,r8,r12
   980c0:	7940022e 	bgeu	r15,r5,980cc <__muldf3+0x43c>
   980c4:	01400074 	movhi	r5,1
   980c8:	8963883a 	add	r17,r17,r5
   980cc:	780a943a 	slli	r5,r15,16
   980d0:	91bfffcc 	andi	r6,r18,65535
   980d4:	70c7883a 	add	r3,r14,r3
   980d8:	298d883a 	add	r6,r5,r6
   980dc:	1a8f803a 	cmpltu	r7,r3,r10
   980e0:	350b883a 	add	r5,r6,r20
   980e4:	20c7883a 	add	r3,r4,r3
   980e8:	3955883a 	add	r10,r7,r5
   980ec:	1909803a 	cmpltu	r4,r3,r4
   980f0:	6a91883a 	add	r8,r13,r10
   980f4:	780cd43a 	srli	r6,r15,16
   980f8:	2219883a 	add	r12,r4,r8
   980fc:	2d0b803a 	cmpltu	r5,r5,r20
   98100:	51cf803a 	cmpltu	r7,r10,r7
   98104:	29ceb03a 	or	r7,r5,r7
   98108:	4351803a 	cmpltu	r8,r8,r13
   9810c:	610b803a 	cmpltu	r5,r12,r4
   98110:	4148b03a 	or	r4,r8,r5
   98114:	398f883a 	add	r7,r7,r6
   98118:	3909883a 	add	r4,r7,r4
   9811c:	1810927a 	slli	r8,r3,9
   98120:	2449883a 	add	r4,r4,r17
   98124:	2008927a 	slli	r4,r4,9
   98128:	6022d5fa 	srli	r17,r12,23
   9812c:	1806d5fa 	srli	r3,r3,23
   98130:	4252b03a 	or	r9,r8,r9
   98134:	600a927a 	slli	r5,r12,9
   98138:	4810c03a 	cmpne	r8,r9,zero
   9813c:	2462b03a 	or	r17,r4,r17
   98140:	40c6b03a 	or	r3,r8,r3
   98144:	8900402c 	andhi	r4,r17,256
   98148:	1950b03a 	or	r8,r3,r5
   9814c:	20000726 	beq	r4,zero,9816c <__muldf3+0x4dc>
   98150:	4006d07a 	srli	r3,r8,1
   98154:	880497fa 	slli	r2,r17,31
   98158:	4200004c 	andi	r8,r8,1
   9815c:	8822d07a 	srli	r17,r17,1
   98160:	1a10b03a 	or	r8,r3,r8
   98164:	1210b03a 	or	r8,r2,r8
   98168:	5805883a 	mov	r2,r11
   9816c:	1140ffc4 	addi	r5,r2,1023
   98170:	0140440e 	bge	zero,r5,98284 <__muldf3+0x5f4>
   98174:	40c001cc 	andi	r3,r8,7
   98178:	18000726 	beq	r3,zero,98198 <__muldf3+0x508>
   9817c:	40c003cc 	andi	r3,r8,15
   98180:	01000104 	movi	r4,4
   98184:	19000426 	beq	r3,r4,98198 <__muldf3+0x508>
   98188:	4107883a 	add	r3,r8,r4
   9818c:	1a11803a 	cmpltu	r8,r3,r8
   98190:	8a23883a 	add	r17,r17,r8
   98194:	1811883a 	mov	r8,r3
   98198:	88c0402c 	andhi	r3,r17,256
   9819c:	18000426 	beq	r3,zero,981b0 <__muldf3+0x520>
   981a0:	11410004 	addi	r5,r2,1024
   981a4:	00bfc034 	movhi	r2,65280
   981a8:	10bfffc4 	addi	r2,r2,-1
   981ac:	88a2703a 	and	r17,r17,r2
   981b0:	0081ff84 	movi	r2,2046
   981b4:	117f6416 	blt	r2,r5,97f48 <__alt_data_end+0xfffc8088>
   981b8:	8828977a 	slli	r20,r17,29
   981bc:	4010d0fa 	srli	r8,r8,3
   981c0:	8822927a 	slli	r17,r17,9
   981c4:	2881ffcc 	andi	r2,r5,2047
   981c8:	a228b03a 	or	r20,r20,r8
   981cc:	880ad33a 	srli	r5,r17,12
   981d0:	b02b883a 	mov	r21,r22
   981d4:	003f0d06 	br	97e0c <__alt_data_end+0xfffc7f4c>
   981d8:	8080022c 	andhi	r2,r16,8
   981dc:	10000926 	beq	r2,zero,98204 <__muldf3+0x574>
   981e0:	8880022c 	andhi	r2,r17,8
   981e4:	1000071e 	bne	r2,zero,98204 <__muldf3+0x574>
   981e8:	00800434 	movhi	r2,16
   981ec:	89400234 	orhi	r5,r17,8
   981f0:	10bfffc4 	addi	r2,r2,-1
   981f4:	b82b883a 	mov	r21,r23
   981f8:	288a703a 	and	r5,r5,r2
   981fc:	4029883a 	mov	r20,r8
   98200:	003f6806 	br	97fa4 <__alt_data_end+0xfffc80e4>
   98204:	00800434 	movhi	r2,16
   98208:	81400234 	orhi	r5,r16,8
   9820c:	10bfffc4 	addi	r2,r2,-1
   98210:	288a703a 	and	r5,r5,r2
   98214:	003f6306 	br	97fa4 <__alt_data_end+0xfffc80e4>
   98218:	147ff604 	addi	r17,r2,-40
   9821c:	3462983a 	sll	r17,r6,r17
   98220:	0011883a 	mov	r8,zero
   98224:	003f4406 	br	97f38 <__alt_data_end+0xfffc8078>
   98228:	3009883a 	mov	r4,r6
   9822c:	d9800215 	stw	r6,8(sp)
   98230:	da400115 	stw	r9,4(sp)
   98234:	da800015 	stw	r10,0(sp)
   98238:	0098ea80 	call	98ea8 <__clzsi2>
   9823c:	10800804 	addi	r2,r2,32
   98240:	da800017 	ldw	r10,0(sp)
   98244:	da400117 	ldw	r9,4(sp)
   98248:	d9800217 	ldw	r6,8(sp)
   9824c:	003f3006 	br	97f10 <__alt_data_end+0xfffc8050>
   98250:	143ff604 	addi	r16,r2,-40
   98254:	9c20983a 	sll	r16,r19,r16
   98258:	0029883a 	mov	r20,zero
   9825c:	003f1606 	br	97eb8 <__alt_data_end+0xfffc7ff8>
   98260:	d9800215 	stw	r6,8(sp)
   98264:	d9c00015 	stw	r7,0(sp)
   98268:	da400115 	stw	r9,4(sp)
   9826c:	0098ea80 	call	98ea8 <__clzsi2>
   98270:	10800804 	addi	r2,r2,32
   98274:	da400117 	ldw	r9,4(sp)
   98278:	d9c00017 	ldw	r7,0(sp)
   9827c:	d9800217 	ldw	r6,8(sp)
   98280:	003f0306 	br	97e90 <__alt_data_end+0xfffc7fd0>
   98284:	00c00044 	movi	r3,1
   98288:	1947c83a 	sub	r3,r3,r5
   9828c:	00800e04 	movi	r2,56
   98290:	10feda16 	blt	r2,r3,97dfc <__alt_data_end+0xfffc7f3c>
   98294:	008007c4 	movi	r2,31
   98298:	10c01b16 	blt	r2,r3,98308 <__muldf3+0x678>
   9829c:	00800804 	movi	r2,32
   982a0:	10c5c83a 	sub	r2,r2,r3
   982a4:	888a983a 	sll	r5,r17,r2
   982a8:	40c8d83a 	srl	r4,r8,r3
   982ac:	4084983a 	sll	r2,r8,r2
   982b0:	88e2d83a 	srl	r17,r17,r3
   982b4:	2906b03a 	or	r3,r5,r4
   982b8:	1004c03a 	cmpne	r2,r2,zero
   982bc:	1886b03a 	or	r3,r3,r2
   982c0:	188001cc 	andi	r2,r3,7
   982c4:	10000726 	beq	r2,zero,982e4 <__muldf3+0x654>
   982c8:	188003cc 	andi	r2,r3,15
   982cc:	01000104 	movi	r4,4
   982d0:	11000426 	beq	r2,r4,982e4 <__muldf3+0x654>
   982d4:	1805883a 	mov	r2,r3
   982d8:	10c00104 	addi	r3,r2,4
   982dc:	1885803a 	cmpltu	r2,r3,r2
   982e0:	88a3883a 	add	r17,r17,r2
   982e4:	8880202c 	andhi	r2,r17,128
   982e8:	10001c26 	beq	r2,zero,9835c <__muldf3+0x6cc>
   982ec:	b02b883a 	mov	r21,r22
   982f0:	00800044 	movi	r2,1
   982f4:	000b883a 	mov	r5,zero
   982f8:	0029883a 	mov	r20,zero
   982fc:	003ec306 	br	97e0c <__alt_data_end+0xfffc7f4c>
   98300:	5805883a 	mov	r2,r11
   98304:	003f9906 	br	9816c <__alt_data_end+0xfffc82ac>
   98308:	00bff844 	movi	r2,-31
   9830c:	1145c83a 	sub	r2,r2,r5
   98310:	8888d83a 	srl	r4,r17,r2
   98314:	00800804 	movi	r2,32
   98318:	18801a26 	beq	r3,r2,98384 <__muldf3+0x6f4>
   9831c:	00801004 	movi	r2,64
   98320:	10c5c83a 	sub	r2,r2,r3
   98324:	8884983a 	sll	r2,r17,r2
   98328:	1204b03a 	or	r2,r2,r8
   9832c:	1004c03a 	cmpne	r2,r2,zero
   98330:	2084b03a 	or	r2,r4,r2
   98334:	144001cc 	andi	r17,r2,7
   98338:	88000d1e 	bne	r17,zero,98370 <__muldf3+0x6e0>
   9833c:	000b883a 	mov	r5,zero
   98340:	1028d0fa 	srli	r20,r2,3
   98344:	b02b883a 	mov	r21,r22
   98348:	0005883a 	mov	r2,zero
   9834c:	a468b03a 	or	r20,r20,r17
   98350:	003eae06 	br	97e0c <__alt_data_end+0xfffc7f4c>
   98354:	1007883a 	mov	r3,r2
   98358:	0023883a 	mov	r17,zero
   9835c:	880a927a 	slli	r5,r17,9
   98360:	1805883a 	mov	r2,r3
   98364:	8822977a 	slli	r17,r17,29
   98368:	280ad33a 	srli	r5,r5,12
   9836c:	003ff406 	br	98340 <__alt_data_end+0xfffc8480>
   98370:	10c003cc 	andi	r3,r2,15
   98374:	01000104 	movi	r4,4
   98378:	193ff626 	beq	r3,r4,98354 <__alt_data_end+0xfffc8494>
   9837c:	0023883a 	mov	r17,zero
   98380:	003fd506 	br	982d8 <__alt_data_end+0xfffc8418>
   98384:	0005883a 	mov	r2,zero
   98388:	003fe706 	br	98328 <__alt_data_end+0xfffc8468>
   9838c:	00800434 	movhi	r2,16
   98390:	89400234 	orhi	r5,r17,8
   98394:	10bfffc4 	addi	r2,r2,-1
   98398:	b02b883a 	mov	r21,r22
   9839c:	288a703a 	and	r5,r5,r2
   983a0:	4029883a 	mov	r20,r8
   983a4:	003eff06 	br	97fa4 <__alt_data_end+0xfffc80e4>

000983a8 <__subdf3>:
   983a8:	02000434 	movhi	r8,16
   983ac:	423fffc4 	addi	r8,r8,-1
   983b0:	defffb04 	addi	sp,sp,-20
   983b4:	2a14703a 	and	r10,r5,r8
   983b8:	3812d53a 	srli	r9,r7,20
   983bc:	3a10703a 	and	r8,r7,r8
   983c0:	2006d77a 	srli	r3,r4,29
   983c4:	3004d77a 	srli	r2,r6,29
   983c8:	dc000015 	stw	r16,0(sp)
   983cc:	501490fa 	slli	r10,r10,3
   983d0:	2820d53a 	srli	r16,r5,20
   983d4:	401090fa 	slli	r8,r8,3
   983d8:	dc800215 	stw	r18,8(sp)
   983dc:	dc400115 	stw	r17,4(sp)
   983e0:	dfc00415 	stw	ra,16(sp)
   983e4:	202290fa 	slli	r17,r4,3
   983e8:	dcc00315 	stw	r19,12(sp)
   983ec:	4a41ffcc 	andi	r9,r9,2047
   983f0:	0101ffc4 	movi	r4,2047
   983f4:	2824d7fa 	srli	r18,r5,31
   983f8:	8401ffcc 	andi	r16,r16,2047
   983fc:	50c6b03a 	or	r3,r10,r3
   98400:	380ed7fa 	srli	r7,r7,31
   98404:	408ab03a 	or	r5,r8,r2
   98408:	300c90fa 	slli	r6,r6,3
   9840c:	49009626 	beq	r9,r4,98668 <__subdf3+0x2c0>
   98410:	39c0005c 	xori	r7,r7,1
   98414:	8245c83a 	sub	r2,r16,r9
   98418:	3c807426 	beq	r7,r18,985ec <__subdf3+0x244>
   9841c:	0080af0e 	bge	zero,r2,986dc <__subdf3+0x334>
   98420:	48002a1e 	bne	r9,zero,984cc <__subdf3+0x124>
   98424:	2988b03a 	or	r4,r5,r6
   98428:	20009a1e 	bne	r4,zero,98694 <__subdf3+0x2ec>
   9842c:	888001cc 	andi	r2,r17,7
   98430:	10000726 	beq	r2,zero,98450 <__subdf3+0xa8>
   98434:	888003cc 	andi	r2,r17,15
   98438:	01000104 	movi	r4,4
   9843c:	11000426 	beq	r2,r4,98450 <__subdf3+0xa8>
   98440:	890b883a 	add	r5,r17,r4
   98444:	2c63803a 	cmpltu	r17,r5,r17
   98448:	1c47883a 	add	r3,r3,r17
   9844c:	2823883a 	mov	r17,r5
   98450:	1880202c 	andhi	r2,r3,128
   98454:	10005926 	beq	r2,zero,985bc <__subdf3+0x214>
   98458:	84000044 	addi	r16,r16,1
   9845c:	0081ffc4 	movi	r2,2047
   98460:	8080be26 	beq	r16,r2,9875c <__subdf3+0x3b4>
   98464:	017fe034 	movhi	r5,65408
   98468:	297fffc4 	addi	r5,r5,-1
   9846c:	1946703a 	and	r3,r3,r5
   98470:	1804977a 	slli	r2,r3,29
   98474:	1806927a 	slli	r3,r3,9
   98478:	8822d0fa 	srli	r17,r17,3
   9847c:	8401ffcc 	andi	r16,r16,2047
   98480:	180ad33a 	srli	r5,r3,12
   98484:	9100004c 	andi	r4,r18,1
   98488:	1444b03a 	or	r2,r2,r17
   9848c:	80c1ffcc 	andi	r3,r16,2047
   98490:	1820953a 	slli	r16,r3,20
   98494:	20c03fcc 	andi	r3,r4,255
   98498:	180897fa 	slli	r4,r3,31
   9849c:	00c00434 	movhi	r3,16
   984a0:	18ffffc4 	addi	r3,r3,-1
   984a4:	28c6703a 	and	r3,r5,r3
   984a8:	1c06b03a 	or	r3,r3,r16
   984ac:	1906b03a 	or	r3,r3,r4
   984b0:	dfc00417 	ldw	ra,16(sp)
   984b4:	dcc00317 	ldw	r19,12(sp)
   984b8:	dc800217 	ldw	r18,8(sp)
   984bc:	dc400117 	ldw	r17,4(sp)
   984c0:	dc000017 	ldw	r16,0(sp)
   984c4:	dec00504 	addi	sp,sp,20
   984c8:	f800283a 	ret
   984cc:	0101ffc4 	movi	r4,2047
   984d0:	813fd626 	beq	r16,r4,9842c <__alt_data_end+0xfffc856c>
   984d4:	29402034 	orhi	r5,r5,128
   984d8:	01000e04 	movi	r4,56
   984dc:	2080a316 	blt	r4,r2,9876c <__subdf3+0x3c4>
   984e0:	010007c4 	movi	r4,31
   984e4:	2080c616 	blt	r4,r2,98800 <__subdf3+0x458>
   984e8:	01000804 	movi	r4,32
   984ec:	2089c83a 	sub	r4,r4,r2
   984f0:	2910983a 	sll	r8,r5,r4
   984f4:	308ed83a 	srl	r7,r6,r2
   984f8:	3108983a 	sll	r4,r6,r4
   984fc:	2884d83a 	srl	r2,r5,r2
   98500:	41ccb03a 	or	r6,r8,r7
   98504:	2008c03a 	cmpne	r4,r4,zero
   98508:	310cb03a 	or	r6,r6,r4
   9850c:	898dc83a 	sub	r6,r17,r6
   98510:	89a3803a 	cmpltu	r17,r17,r6
   98514:	1887c83a 	sub	r3,r3,r2
   98518:	1c47c83a 	sub	r3,r3,r17
   9851c:	3023883a 	mov	r17,r6
   98520:	1880202c 	andhi	r2,r3,128
   98524:	10002326 	beq	r2,zero,985b4 <__subdf3+0x20c>
   98528:	04c02034 	movhi	r19,128
   9852c:	9cffffc4 	addi	r19,r19,-1
   98530:	1ce6703a 	and	r19,r3,r19
   98534:	98007a26 	beq	r19,zero,98720 <__subdf3+0x378>
   98538:	9809883a 	mov	r4,r19
   9853c:	0098ea80 	call	98ea8 <__clzsi2>
   98540:	113ffe04 	addi	r4,r2,-8
   98544:	00c007c4 	movi	r3,31
   98548:	19007b16 	blt	r3,r4,98738 <__subdf3+0x390>
   9854c:	00800804 	movi	r2,32
   98550:	1105c83a 	sub	r2,r2,r4
   98554:	8884d83a 	srl	r2,r17,r2
   98558:	9906983a 	sll	r3,r19,r4
   9855c:	8922983a 	sll	r17,r17,r4
   98560:	10c4b03a 	or	r2,r2,r3
   98564:	24007816 	blt	r4,r16,98748 <__subdf3+0x3a0>
   98568:	2421c83a 	sub	r16,r4,r16
   9856c:	80c00044 	addi	r3,r16,1
   98570:	010007c4 	movi	r4,31
   98574:	20c09516 	blt	r4,r3,987cc <__subdf3+0x424>
   98578:	01400804 	movi	r5,32
   9857c:	28cbc83a 	sub	r5,r5,r3
   98580:	88c8d83a 	srl	r4,r17,r3
   98584:	8962983a 	sll	r17,r17,r5
   98588:	114a983a 	sll	r5,r2,r5
   9858c:	10c6d83a 	srl	r3,r2,r3
   98590:	8804c03a 	cmpne	r2,r17,zero
   98594:	290ab03a 	or	r5,r5,r4
   98598:	28a2b03a 	or	r17,r5,r2
   9859c:	0021883a 	mov	r16,zero
   985a0:	003fa206 	br	9842c <__alt_data_end+0xfffc856c>
   985a4:	2090b03a 	or	r8,r4,r2
   985a8:	40018e26 	beq	r8,zero,98be4 <__subdf3+0x83c>
   985ac:	1007883a 	mov	r3,r2
   985b0:	2023883a 	mov	r17,r4
   985b4:	888001cc 	andi	r2,r17,7
   985b8:	103f9e1e 	bne	r2,zero,98434 <__alt_data_end+0xfffc8574>
   985bc:	1804977a 	slli	r2,r3,29
   985c0:	8822d0fa 	srli	r17,r17,3
   985c4:	1810d0fa 	srli	r8,r3,3
   985c8:	9100004c 	andi	r4,r18,1
   985cc:	1444b03a 	or	r2,r2,r17
   985d0:	00c1ffc4 	movi	r3,2047
   985d4:	80c02826 	beq	r16,r3,98678 <__subdf3+0x2d0>
   985d8:	01400434 	movhi	r5,16
   985dc:	297fffc4 	addi	r5,r5,-1
   985e0:	80e0703a 	and	r16,r16,r3
   985e4:	414a703a 	and	r5,r8,r5
   985e8:	003fa806 	br	9848c <__alt_data_end+0xfffc85cc>
   985ec:	0080630e 	bge	zero,r2,9877c <__subdf3+0x3d4>
   985f0:	48003026 	beq	r9,zero,986b4 <__subdf3+0x30c>
   985f4:	0101ffc4 	movi	r4,2047
   985f8:	813f8c26 	beq	r16,r4,9842c <__alt_data_end+0xfffc856c>
   985fc:	29402034 	orhi	r5,r5,128
   98600:	01000e04 	movi	r4,56
   98604:	2080a90e 	bge	r4,r2,988ac <__subdf3+0x504>
   98608:	298cb03a 	or	r6,r5,r6
   9860c:	3012c03a 	cmpne	r9,r6,zero
   98610:	0005883a 	mov	r2,zero
   98614:	4c53883a 	add	r9,r9,r17
   98618:	4c63803a 	cmpltu	r17,r9,r17
   9861c:	10c7883a 	add	r3,r2,r3
   98620:	88c7883a 	add	r3,r17,r3
   98624:	4823883a 	mov	r17,r9
   98628:	1880202c 	andhi	r2,r3,128
   9862c:	1000d026 	beq	r2,zero,98970 <__subdf3+0x5c8>
   98630:	84000044 	addi	r16,r16,1
   98634:	0081ffc4 	movi	r2,2047
   98638:	8080fe26 	beq	r16,r2,98a34 <__subdf3+0x68c>
   9863c:	00bfe034 	movhi	r2,65408
   98640:	10bfffc4 	addi	r2,r2,-1
   98644:	1886703a 	and	r3,r3,r2
   98648:	880ad07a 	srli	r5,r17,1
   9864c:	180497fa 	slli	r2,r3,31
   98650:	8900004c 	andi	r4,r17,1
   98654:	2922b03a 	or	r17,r5,r4
   98658:	1806d07a 	srli	r3,r3,1
   9865c:	1462b03a 	or	r17,r2,r17
   98660:	3825883a 	mov	r18,r7
   98664:	003f7106 	br	9842c <__alt_data_end+0xfffc856c>
   98668:	2984b03a 	or	r2,r5,r6
   9866c:	103f6826 	beq	r2,zero,98410 <__alt_data_end+0xfffc8550>
   98670:	39c03fcc 	andi	r7,r7,255
   98674:	003f6706 	br	98414 <__alt_data_end+0xfffc8554>
   98678:	4086b03a 	or	r3,r8,r2
   9867c:	18015226 	beq	r3,zero,98bc8 <__subdf3+0x820>
   98680:	00c00434 	movhi	r3,16
   98684:	41400234 	orhi	r5,r8,8
   98688:	18ffffc4 	addi	r3,r3,-1
   9868c:	28ca703a 	and	r5,r5,r3
   98690:	003f7e06 	br	9848c <__alt_data_end+0xfffc85cc>
   98694:	10bfffc4 	addi	r2,r2,-1
   98698:	1000491e 	bne	r2,zero,987c0 <__subdf3+0x418>
   9869c:	898fc83a 	sub	r7,r17,r6
   986a0:	89e3803a 	cmpltu	r17,r17,r7
   986a4:	1947c83a 	sub	r3,r3,r5
   986a8:	1c47c83a 	sub	r3,r3,r17
   986ac:	3823883a 	mov	r17,r7
   986b0:	003f9b06 	br	98520 <__alt_data_end+0xfffc8660>
   986b4:	2988b03a 	or	r4,r5,r6
   986b8:	203f5c26 	beq	r4,zero,9842c <__alt_data_end+0xfffc856c>
   986bc:	10bfffc4 	addi	r2,r2,-1
   986c0:	1000931e 	bne	r2,zero,98910 <__subdf3+0x568>
   986c4:	898d883a 	add	r6,r17,r6
   986c8:	3463803a 	cmpltu	r17,r6,r17
   986cc:	1947883a 	add	r3,r3,r5
   986d0:	88c7883a 	add	r3,r17,r3
   986d4:	3023883a 	mov	r17,r6
   986d8:	003fd306 	br	98628 <__alt_data_end+0xfffc8768>
   986dc:	1000541e 	bne	r2,zero,98830 <__subdf3+0x488>
   986e0:	80800044 	addi	r2,r16,1
   986e4:	1081ffcc 	andi	r2,r2,2047
   986e8:	01000044 	movi	r4,1
   986ec:	2080a20e 	bge	r4,r2,98978 <__subdf3+0x5d0>
   986f0:	8989c83a 	sub	r4,r17,r6
   986f4:	8905803a 	cmpltu	r2,r17,r4
   986f8:	1967c83a 	sub	r19,r3,r5
   986fc:	98a7c83a 	sub	r19,r19,r2
   98700:	9880202c 	andhi	r2,r19,128
   98704:	10006326 	beq	r2,zero,98894 <__subdf3+0x4ec>
   98708:	3463c83a 	sub	r17,r6,r17
   9870c:	28c7c83a 	sub	r3,r5,r3
   98710:	344d803a 	cmpltu	r6,r6,r17
   98714:	19a7c83a 	sub	r19,r3,r6
   98718:	3825883a 	mov	r18,r7
   9871c:	983f861e 	bne	r19,zero,98538 <__alt_data_end+0xfffc8678>
   98720:	8809883a 	mov	r4,r17
   98724:	0098ea80 	call	98ea8 <__clzsi2>
   98728:	10800804 	addi	r2,r2,32
   9872c:	113ffe04 	addi	r4,r2,-8
   98730:	00c007c4 	movi	r3,31
   98734:	193f850e 	bge	r3,r4,9854c <__alt_data_end+0xfffc868c>
   98738:	10bff604 	addi	r2,r2,-40
   9873c:	8884983a 	sll	r2,r17,r2
   98740:	0023883a 	mov	r17,zero
   98744:	243f880e 	bge	r4,r16,98568 <__alt_data_end+0xfffc86a8>
   98748:	00ffe034 	movhi	r3,65408
   9874c:	18ffffc4 	addi	r3,r3,-1
   98750:	8121c83a 	sub	r16,r16,r4
   98754:	10c6703a 	and	r3,r2,r3
   98758:	003f3406 	br	9842c <__alt_data_end+0xfffc856c>
   9875c:	9100004c 	andi	r4,r18,1
   98760:	000b883a 	mov	r5,zero
   98764:	0005883a 	mov	r2,zero
   98768:	003f4806 	br	9848c <__alt_data_end+0xfffc85cc>
   9876c:	298cb03a 	or	r6,r5,r6
   98770:	300cc03a 	cmpne	r6,r6,zero
   98774:	0005883a 	mov	r2,zero
   98778:	003f6406 	br	9850c <__alt_data_end+0xfffc864c>
   9877c:	10009a1e 	bne	r2,zero,989e8 <__subdf3+0x640>
   98780:	82400044 	addi	r9,r16,1
   98784:	4881ffcc 	andi	r2,r9,2047
   98788:	02800044 	movi	r10,1
   9878c:	5080670e 	bge	r10,r2,9892c <__subdf3+0x584>
   98790:	0081ffc4 	movi	r2,2047
   98794:	4880af26 	beq	r9,r2,98a54 <__subdf3+0x6ac>
   98798:	898d883a 	add	r6,r17,r6
   9879c:	1945883a 	add	r2,r3,r5
   987a0:	3447803a 	cmpltu	r3,r6,r17
   987a4:	1887883a 	add	r3,r3,r2
   987a8:	182297fa 	slli	r17,r3,31
   987ac:	300cd07a 	srli	r6,r6,1
   987b0:	1806d07a 	srli	r3,r3,1
   987b4:	4821883a 	mov	r16,r9
   987b8:	89a2b03a 	or	r17,r17,r6
   987bc:	003f1b06 	br	9842c <__alt_data_end+0xfffc856c>
   987c0:	0101ffc4 	movi	r4,2047
   987c4:	813f441e 	bne	r16,r4,984d8 <__alt_data_end+0xfffc8618>
   987c8:	003f1806 	br	9842c <__alt_data_end+0xfffc856c>
   987cc:	843ff844 	addi	r16,r16,-31
   987d0:	01400804 	movi	r5,32
   987d4:	1408d83a 	srl	r4,r2,r16
   987d8:	19405026 	beq	r3,r5,9891c <__subdf3+0x574>
   987dc:	01401004 	movi	r5,64
   987e0:	28c7c83a 	sub	r3,r5,r3
   987e4:	10c4983a 	sll	r2,r2,r3
   987e8:	88a2b03a 	or	r17,r17,r2
   987ec:	8822c03a 	cmpne	r17,r17,zero
   987f0:	2462b03a 	or	r17,r4,r17
   987f4:	0007883a 	mov	r3,zero
   987f8:	0021883a 	mov	r16,zero
   987fc:	003f6d06 	br	985b4 <__alt_data_end+0xfffc86f4>
   98800:	11fff804 	addi	r7,r2,-32
   98804:	01000804 	movi	r4,32
   98808:	29ced83a 	srl	r7,r5,r7
   9880c:	11004526 	beq	r2,r4,98924 <__subdf3+0x57c>
   98810:	01001004 	movi	r4,64
   98814:	2089c83a 	sub	r4,r4,r2
   98818:	2904983a 	sll	r2,r5,r4
   9881c:	118cb03a 	or	r6,r2,r6
   98820:	300cc03a 	cmpne	r6,r6,zero
   98824:	398cb03a 	or	r6,r7,r6
   98828:	0005883a 	mov	r2,zero
   9882c:	003f3706 	br	9850c <__alt_data_end+0xfffc864c>
   98830:	80002a26 	beq	r16,zero,988dc <__subdf3+0x534>
   98834:	0101ffc4 	movi	r4,2047
   98838:	49006626 	beq	r9,r4,989d4 <__subdf3+0x62c>
   9883c:	0085c83a 	sub	r2,zero,r2
   98840:	18c02034 	orhi	r3,r3,128
   98844:	01000e04 	movi	r4,56
   98848:	20807e16 	blt	r4,r2,98a44 <__subdf3+0x69c>
   9884c:	010007c4 	movi	r4,31
   98850:	2080e716 	blt	r4,r2,98bf0 <__subdf3+0x848>
   98854:	01000804 	movi	r4,32
   98858:	2089c83a 	sub	r4,r4,r2
   9885c:	1914983a 	sll	r10,r3,r4
   98860:	8890d83a 	srl	r8,r17,r2
   98864:	8908983a 	sll	r4,r17,r4
   98868:	1884d83a 	srl	r2,r3,r2
   9886c:	5222b03a 	or	r17,r10,r8
   98870:	2006c03a 	cmpne	r3,r4,zero
   98874:	88e2b03a 	or	r17,r17,r3
   98878:	3463c83a 	sub	r17,r6,r17
   9887c:	2885c83a 	sub	r2,r5,r2
   98880:	344d803a 	cmpltu	r6,r6,r17
   98884:	1187c83a 	sub	r3,r2,r6
   98888:	4821883a 	mov	r16,r9
   9888c:	3825883a 	mov	r18,r7
   98890:	003f2306 	br	98520 <__alt_data_end+0xfffc8660>
   98894:	24d0b03a 	or	r8,r4,r19
   98898:	40001b1e 	bne	r8,zero,98908 <__subdf3+0x560>
   9889c:	0005883a 	mov	r2,zero
   988a0:	0009883a 	mov	r4,zero
   988a4:	0021883a 	mov	r16,zero
   988a8:	003f4906 	br	985d0 <__alt_data_end+0xfffc8710>
   988ac:	010007c4 	movi	r4,31
   988b0:	20803a16 	blt	r4,r2,9899c <__subdf3+0x5f4>
   988b4:	01000804 	movi	r4,32
   988b8:	2089c83a 	sub	r4,r4,r2
   988bc:	2912983a 	sll	r9,r5,r4
   988c0:	3090d83a 	srl	r8,r6,r2
   988c4:	3108983a 	sll	r4,r6,r4
   988c8:	2884d83a 	srl	r2,r5,r2
   988cc:	4a12b03a 	or	r9,r9,r8
   988d0:	2008c03a 	cmpne	r4,r4,zero
   988d4:	4912b03a 	or	r9,r9,r4
   988d8:	003f4e06 	br	98614 <__alt_data_end+0xfffc8754>
   988dc:	1c48b03a 	or	r4,r3,r17
   988e0:	20003c26 	beq	r4,zero,989d4 <__subdf3+0x62c>
   988e4:	0084303a 	nor	r2,zero,r2
   988e8:	1000381e 	bne	r2,zero,989cc <__subdf3+0x624>
   988ec:	3463c83a 	sub	r17,r6,r17
   988f0:	28c5c83a 	sub	r2,r5,r3
   988f4:	344d803a 	cmpltu	r6,r6,r17
   988f8:	1187c83a 	sub	r3,r2,r6
   988fc:	4821883a 	mov	r16,r9
   98900:	3825883a 	mov	r18,r7
   98904:	003f0606 	br	98520 <__alt_data_end+0xfffc8660>
   98908:	2023883a 	mov	r17,r4
   9890c:	003f0906 	br	98534 <__alt_data_end+0xfffc8674>
   98910:	0101ffc4 	movi	r4,2047
   98914:	813f3a1e 	bne	r16,r4,98600 <__alt_data_end+0xfffc8740>
   98918:	003ec406 	br	9842c <__alt_data_end+0xfffc856c>
   9891c:	0005883a 	mov	r2,zero
   98920:	003fb106 	br	987e8 <__alt_data_end+0xfffc8928>
   98924:	0005883a 	mov	r2,zero
   98928:	003fbc06 	br	9881c <__alt_data_end+0xfffc895c>
   9892c:	1c44b03a 	or	r2,r3,r17
   98930:	80008e1e 	bne	r16,zero,98b6c <__subdf3+0x7c4>
   98934:	1000c826 	beq	r2,zero,98c58 <__subdf3+0x8b0>
   98938:	2984b03a 	or	r2,r5,r6
   9893c:	103ebb26 	beq	r2,zero,9842c <__alt_data_end+0xfffc856c>
   98940:	8989883a 	add	r4,r17,r6
   98944:	1945883a 	add	r2,r3,r5
   98948:	2447803a 	cmpltu	r3,r4,r17
   9894c:	1887883a 	add	r3,r3,r2
   98950:	1880202c 	andhi	r2,r3,128
   98954:	2023883a 	mov	r17,r4
   98958:	103f1626 	beq	r2,zero,985b4 <__alt_data_end+0xfffc86f4>
   9895c:	00bfe034 	movhi	r2,65408
   98960:	10bfffc4 	addi	r2,r2,-1
   98964:	5021883a 	mov	r16,r10
   98968:	1886703a 	and	r3,r3,r2
   9896c:	003eaf06 	br	9842c <__alt_data_end+0xfffc856c>
   98970:	3825883a 	mov	r18,r7
   98974:	003f0f06 	br	985b4 <__alt_data_end+0xfffc86f4>
   98978:	1c44b03a 	or	r2,r3,r17
   9897c:	8000251e 	bne	r16,zero,98a14 <__subdf3+0x66c>
   98980:	1000661e 	bne	r2,zero,98b1c <__subdf3+0x774>
   98984:	2990b03a 	or	r8,r5,r6
   98988:	40009626 	beq	r8,zero,98be4 <__subdf3+0x83c>
   9898c:	2807883a 	mov	r3,r5
   98990:	3023883a 	mov	r17,r6
   98994:	3825883a 	mov	r18,r7
   98998:	003ea406 	br	9842c <__alt_data_end+0xfffc856c>
   9899c:	127ff804 	addi	r9,r2,-32
   989a0:	01000804 	movi	r4,32
   989a4:	2a52d83a 	srl	r9,r5,r9
   989a8:	11008c26 	beq	r2,r4,98bdc <__subdf3+0x834>
   989ac:	01001004 	movi	r4,64
   989b0:	2085c83a 	sub	r2,r4,r2
   989b4:	2884983a 	sll	r2,r5,r2
   989b8:	118cb03a 	or	r6,r2,r6
   989bc:	300cc03a 	cmpne	r6,r6,zero
   989c0:	4992b03a 	or	r9,r9,r6
   989c4:	0005883a 	mov	r2,zero
   989c8:	003f1206 	br	98614 <__alt_data_end+0xfffc8754>
   989cc:	0101ffc4 	movi	r4,2047
   989d0:	493f9c1e 	bne	r9,r4,98844 <__alt_data_end+0xfffc8984>
   989d4:	2807883a 	mov	r3,r5
   989d8:	3023883a 	mov	r17,r6
   989dc:	4821883a 	mov	r16,r9
   989e0:	3825883a 	mov	r18,r7
   989e4:	003e9106 	br	9842c <__alt_data_end+0xfffc856c>
   989e8:	80001f1e 	bne	r16,zero,98a68 <__subdf3+0x6c0>
   989ec:	1c48b03a 	or	r4,r3,r17
   989f0:	20005a26 	beq	r4,zero,98b5c <__subdf3+0x7b4>
   989f4:	0084303a 	nor	r2,zero,r2
   989f8:	1000561e 	bne	r2,zero,98b54 <__subdf3+0x7ac>
   989fc:	89a3883a 	add	r17,r17,r6
   98a00:	1945883a 	add	r2,r3,r5
   98a04:	898d803a 	cmpltu	r6,r17,r6
   98a08:	3087883a 	add	r3,r6,r2
   98a0c:	4821883a 	mov	r16,r9
   98a10:	003f0506 	br	98628 <__alt_data_end+0xfffc8768>
   98a14:	10002b1e 	bne	r2,zero,98ac4 <__subdf3+0x71c>
   98a18:	2984b03a 	or	r2,r5,r6
   98a1c:	10008026 	beq	r2,zero,98c20 <__subdf3+0x878>
   98a20:	2807883a 	mov	r3,r5
   98a24:	3023883a 	mov	r17,r6
   98a28:	3825883a 	mov	r18,r7
   98a2c:	0401ffc4 	movi	r16,2047
   98a30:	003e7e06 	br	9842c <__alt_data_end+0xfffc856c>
   98a34:	3809883a 	mov	r4,r7
   98a38:	0011883a 	mov	r8,zero
   98a3c:	0005883a 	mov	r2,zero
   98a40:	003ee306 	br	985d0 <__alt_data_end+0xfffc8710>
   98a44:	1c62b03a 	or	r17,r3,r17
   98a48:	8822c03a 	cmpne	r17,r17,zero
   98a4c:	0005883a 	mov	r2,zero
   98a50:	003f8906 	br	98878 <__alt_data_end+0xfffc89b8>
   98a54:	3809883a 	mov	r4,r7
   98a58:	4821883a 	mov	r16,r9
   98a5c:	0011883a 	mov	r8,zero
   98a60:	0005883a 	mov	r2,zero
   98a64:	003eda06 	br	985d0 <__alt_data_end+0xfffc8710>
   98a68:	0101ffc4 	movi	r4,2047
   98a6c:	49003b26 	beq	r9,r4,98b5c <__subdf3+0x7b4>
   98a70:	0085c83a 	sub	r2,zero,r2
   98a74:	18c02034 	orhi	r3,r3,128
   98a78:	01000e04 	movi	r4,56
   98a7c:	20806e16 	blt	r4,r2,98c38 <__subdf3+0x890>
   98a80:	010007c4 	movi	r4,31
   98a84:	20807716 	blt	r4,r2,98c64 <__subdf3+0x8bc>
   98a88:	01000804 	movi	r4,32
   98a8c:	2089c83a 	sub	r4,r4,r2
   98a90:	1914983a 	sll	r10,r3,r4
   98a94:	8890d83a 	srl	r8,r17,r2
   98a98:	8908983a 	sll	r4,r17,r4
   98a9c:	1884d83a 	srl	r2,r3,r2
   98aa0:	5222b03a 	or	r17,r10,r8
   98aa4:	2006c03a 	cmpne	r3,r4,zero
   98aa8:	88e2b03a 	or	r17,r17,r3
   98aac:	89a3883a 	add	r17,r17,r6
   98ab0:	1145883a 	add	r2,r2,r5
   98ab4:	898d803a 	cmpltu	r6,r17,r6
   98ab8:	3087883a 	add	r3,r6,r2
   98abc:	4821883a 	mov	r16,r9
   98ac0:	003ed906 	br	98628 <__alt_data_end+0xfffc8768>
   98ac4:	2984b03a 	or	r2,r5,r6
   98ac8:	10004226 	beq	r2,zero,98bd4 <__subdf3+0x82c>
   98acc:	1808d0fa 	srli	r4,r3,3
   98ad0:	8822d0fa 	srli	r17,r17,3
   98ad4:	1806977a 	slli	r3,r3,29
   98ad8:	2080022c 	andhi	r2,r4,8
   98adc:	1c62b03a 	or	r17,r3,r17
   98ae0:	10000826 	beq	r2,zero,98b04 <__subdf3+0x75c>
   98ae4:	2812d0fa 	srli	r9,r5,3
   98ae8:	4880022c 	andhi	r2,r9,8
   98aec:	1000051e 	bne	r2,zero,98b04 <__subdf3+0x75c>
   98af0:	300cd0fa 	srli	r6,r6,3
   98af4:	2804977a 	slli	r2,r5,29
   98af8:	4809883a 	mov	r4,r9
   98afc:	3825883a 	mov	r18,r7
   98b00:	11a2b03a 	or	r17,r2,r6
   98b04:	8806d77a 	srli	r3,r17,29
   98b08:	200890fa 	slli	r4,r4,3
   98b0c:	882290fa 	slli	r17,r17,3
   98b10:	0401ffc4 	movi	r16,2047
   98b14:	1906b03a 	or	r3,r3,r4
   98b18:	003e4406 	br	9842c <__alt_data_end+0xfffc856c>
   98b1c:	2984b03a 	or	r2,r5,r6
   98b20:	103e4226 	beq	r2,zero,9842c <__alt_data_end+0xfffc856c>
   98b24:	8989c83a 	sub	r4,r17,r6
   98b28:	8911803a 	cmpltu	r8,r17,r4
   98b2c:	1945c83a 	sub	r2,r3,r5
   98b30:	1205c83a 	sub	r2,r2,r8
   98b34:	1200202c 	andhi	r8,r2,128
   98b38:	403e9a26 	beq	r8,zero,985a4 <__alt_data_end+0xfffc86e4>
   98b3c:	3463c83a 	sub	r17,r6,r17
   98b40:	28c5c83a 	sub	r2,r5,r3
   98b44:	344d803a 	cmpltu	r6,r6,r17
   98b48:	1187c83a 	sub	r3,r2,r6
   98b4c:	3825883a 	mov	r18,r7
   98b50:	003e3606 	br	9842c <__alt_data_end+0xfffc856c>
   98b54:	0101ffc4 	movi	r4,2047
   98b58:	493fc71e 	bne	r9,r4,98a78 <__alt_data_end+0xfffc8bb8>
   98b5c:	2807883a 	mov	r3,r5
   98b60:	3023883a 	mov	r17,r6
   98b64:	4821883a 	mov	r16,r9
   98b68:	003e3006 	br	9842c <__alt_data_end+0xfffc856c>
   98b6c:	10003626 	beq	r2,zero,98c48 <__subdf3+0x8a0>
   98b70:	2984b03a 	or	r2,r5,r6
   98b74:	10001726 	beq	r2,zero,98bd4 <__subdf3+0x82c>
   98b78:	1808d0fa 	srli	r4,r3,3
   98b7c:	8822d0fa 	srli	r17,r17,3
   98b80:	1806977a 	slli	r3,r3,29
   98b84:	2080022c 	andhi	r2,r4,8
   98b88:	1c62b03a 	or	r17,r3,r17
   98b8c:	10000726 	beq	r2,zero,98bac <__subdf3+0x804>
   98b90:	2812d0fa 	srli	r9,r5,3
   98b94:	4880022c 	andhi	r2,r9,8
   98b98:	1000041e 	bne	r2,zero,98bac <__subdf3+0x804>
   98b9c:	300cd0fa 	srli	r6,r6,3
   98ba0:	2804977a 	slli	r2,r5,29
   98ba4:	4809883a 	mov	r4,r9
   98ba8:	11a2b03a 	or	r17,r2,r6
   98bac:	8806d77a 	srli	r3,r17,29
   98bb0:	200890fa 	slli	r4,r4,3
   98bb4:	882290fa 	slli	r17,r17,3
   98bb8:	3825883a 	mov	r18,r7
   98bbc:	1906b03a 	or	r3,r3,r4
   98bc0:	0401ffc4 	movi	r16,2047
   98bc4:	003e1906 	br	9842c <__alt_data_end+0xfffc856c>
   98bc8:	000b883a 	mov	r5,zero
   98bcc:	0005883a 	mov	r2,zero
   98bd0:	003e2e06 	br	9848c <__alt_data_end+0xfffc85cc>
   98bd4:	0401ffc4 	movi	r16,2047
   98bd8:	003e1406 	br	9842c <__alt_data_end+0xfffc856c>
   98bdc:	0005883a 	mov	r2,zero
   98be0:	003f7506 	br	989b8 <__alt_data_end+0xfffc8af8>
   98be4:	0005883a 	mov	r2,zero
   98be8:	0009883a 	mov	r4,zero
   98bec:	003e7806 	br	985d0 <__alt_data_end+0xfffc8710>
   98bf0:	123ff804 	addi	r8,r2,-32
   98bf4:	01000804 	movi	r4,32
   98bf8:	1a10d83a 	srl	r8,r3,r8
   98bfc:	11002526 	beq	r2,r4,98c94 <__subdf3+0x8ec>
   98c00:	01001004 	movi	r4,64
   98c04:	2085c83a 	sub	r2,r4,r2
   98c08:	1884983a 	sll	r2,r3,r2
   98c0c:	1444b03a 	or	r2,r2,r17
   98c10:	1004c03a 	cmpne	r2,r2,zero
   98c14:	40a2b03a 	or	r17,r8,r2
   98c18:	0005883a 	mov	r2,zero
   98c1c:	003f1606 	br	98878 <__alt_data_end+0xfffc89b8>
   98c20:	02000434 	movhi	r8,16
   98c24:	0009883a 	mov	r4,zero
   98c28:	423fffc4 	addi	r8,r8,-1
   98c2c:	00bfffc4 	movi	r2,-1
   98c30:	0401ffc4 	movi	r16,2047
   98c34:	003e6606 	br	985d0 <__alt_data_end+0xfffc8710>
   98c38:	1c62b03a 	or	r17,r3,r17
   98c3c:	8822c03a 	cmpne	r17,r17,zero
   98c40:	0005883a 	mov	r2,zero
   98c44:	003f9906 	br	98aac <__alt_data_end+0xfffc8bec>
   98c48:	2807883a 	mov	r3,r5
   98c4c:	3023883a 	mov	r17,r6
   98c50:	0401ffc4 	movi	r16,2047
   98c54:	003df506 	br	9842c <__alt_data_end+0xfffc856c>
   98c58:	2807883a 	mov	r3,r5
   98c5c:	3023883a 	mov	r17,r6
   98c60:	003df206 	br	9842c <__alt_data_end+0xfffc856c>
   98c64:	123ff804 	addi	r8,r2,-32
   98c68:	01000804 	movi	r4,32
   98c6c:	1a10d83a 	srl	r8,r3,r8
   98c70:	11000a26 	beq	r2,r4,98c9c <__subdf3+0x8f4>
   98c74:	01001004 	movi	r4,64
   98c78:	2085c83a 	sub	r2,r4,r2
   98c7c:	1884983a 	sll	r2,r3,r2
   98c80:	1444b03a 	or	r2,r2,r17
   98c84:	1004c03a 	cmpne	r2,r2,zero
   98c88:	40a2b03a 	or	r17,r8,r2
   98c8c:	0005883a 	mov	r2,zero
   98c90:	003f8606 	br	98aac <__alt_data_end+0xfffc8bec>
   98c94:	0005883a 	mov	r2,zero
   98c98:	003fdc06 	br	98c0c <__alt_data_end+0xfffc8d4c>
   98c9c:	0005883a 	mov	r2,zero
   98ca0:	003ff706 	br	98c80 <__alt_data_end+0xfffc8dc0>

00098ca4 <__fixdfsi>:
   98ca4:	280cd53a 	srli	r6,r5,20
   98ca8:	00c00434 	movhi	r3,16
   98cac:	18ffffc4 	addi	r3,r3,-1
   98cb0:	3181ffcc 	andi	r6,r6,2047
   98cb4:	01c0ff84 	movi	r7,1022
   98cb8:	28c6703a 	and	r3,r5,r3
   98cbc:	280ad7fa 	srli	r5,r5,31
   98cc0:	3980120e 	bge	r7,r6,98d0c <__fixdfsi+0x68>
   98cc4:	00810744 	movi	r2,1053
   98cc8:	11800c16 	blt	r2,r6,98cfc <__fixdfsi+0x58>
   98ccc:	00810cc4 	movi	r2,1075
   98cd0:	1185c83a 	sub	r2,r2,r6
   98cd4:	01c007c4 	movi	r7,31
   98cd8:	18c00434 	orhi	r3,r3,16
   98cdc:	38800d16 	blt	r7,r2,98d14 <__fixdfsi+0x70>
   98ce0:	31befb44 	addi	r6,r6,-1043
   98ce4:	2084d83a 	srl	r2,r4,r2
   98ce8:	1986983a 	sll	r3,r3,r6
   98cec:	1884b03a 	or	r2,r3,r2
   98cf0:	28000726 	beq	r5,zero,98d10 <__fixdfsi+0x6c>
   98cf4:	0085c83a 	sub	r2,zero,r2
   98cf8:	f800283a 	ret
   98cfc:	00a00034 	movhi	r2,32768
   98d00:	10bfffc4 	addi	r2,r2,-1
   98d04:	2885883a 	add	r2,r5,r2
   98d08:	f800283a 	ret
   98d0c:	0005883a 	mov	r2,zero
   98d10:	f800283a 	ret
   98d14:	008104c4 	movi	r2,1043
   98d18:	1185c83a 	sub	r2,r2,r6
   98d1c:	1884d83a 	srl	r2,r3,r2
   98d20:	003ff306 	br	98cf0 <__alt_data_end+0xfffc8e30>

00098d24 <__floatsidf>:
   98d24:	defffd04 	addi	sp,sp,-12
   98d28:	dfc00215 	stw	ra,8(sp)
   98d2c:	dc400115 	stw	r17,4(sp)
   98d30:	dc000015 	stw	r16,0(sp)
   98d34:	20002b26 	beq	r4,zero,98de4 <__floatsidf+0xc0>
   98d38:	2023883a 	mov	r17,r4
   98d3c:	2020d7fa 	srli	r16,r4,31
   98d40:	20002d16 	blt	r4,zero,98df8 <__floatsidf+0xd4>
   98d44:	8809883a 	mov	r4,r17
   98d48:	0098ea80 	call	98ea8 <__clzsi2>
   98d4c:	01410784 	movi	r5,1054
   98d50:	288bc83a 	sub	r5,r5,r2
   98d54:	01010cc4 	movi	r4,1075
   98d58:	2149c83a 	sub	r4,r4,r5
   98d5c:	00c007c4 	movi	r3,31
   98d60:	1900160e 	bge	r3,r4,98dbc <__floatsidf+0x98>
   98d64:	00c104c4 	movi	r3,1043
   98d68:	1947c83a 	sub	r3,r3,r5
   98d6c:	88c6983a 	sll	r3,r17,r3
   98d70:	00800434 	movhi	r2,16
   98d74:	10bfffc4 	addi	r2,r2,-1
   98d78:	1886703a 	and	r3,r3,r2
   98d7c:	2941ffcc 	andi	r5,r5,2047
   98d80:	800d883a 	mov	r6,r16
   98d84:	0005883a 	mov	r2,zero
   98d88:	280a953a 	slli	r5,r5,20
   98d8c:	31803fcc 	andi	r6,r6,255
   98d90:	01000434 	movhi	r4,16
   98d94:	300c97fa 	slli	r6,r6,31
   98d98:	213fffc4 	addi	r4,r4,-1
   98d9c:	1906703a 	and	r3,r3,r4
   98da0:	1946b03a 	or	r3,r3,r5
   98da4:	1986b03a 	or	r3,r3,r6
   98da8:	dfc00217 	ldw	ra,8(sp)
   98dac:	dc400117 	ldw	r17,4(sp)
   98db0:	dc000017 	ldw	r16,0(sp)
   98db4:	dec00304 	addi	sp,sp,12
   98db8:	f800283a 	ret
   98dbc:	00c002c4 	movi	r3,11
   98dc0:	1887c83a 	sub	r3,r3,r2
   98dc4:	88c6d83a 	srl	r3,r17,r3
   98dc8:	8904983a 	sll	r2,r17,r4
   98dcc:	01000434 	movhi	r4,16
   98dd0:	213fffc4 	addi	r4,r4,-1
   98dd4:	2941ffcc 	andi	r5,r5,2047
   98dd8:	1906703a 	and	r3,r3,r4
   98ddc:	800d883a 	mov	r6,r16
   98de0:	003fe906 	br	98d88 <__alt_data_end+0xfffc8ec8>
   98de4:	000d883a 	mov	r6,zero
   98de8:	000b883a 	mov	r5,zero
   98dec:	0007883a 	mov	r3,zero
   98df0:	0005883a 	mov	r2,zero
   98df4:	003fe406 	br	98d88 <__alt_data_end+0xfffc8ec8>
   98df8:	0123c83a 	sub	r17,zero,r4
   98dfc:	003fd106 	br	98d44 <__alt_data_end+0xfffc8e84>

00098e00 <__floatunsidf>:
   98e00:	defffe04 	addi	sp,sp,-8
   98e04:	dc000015 	stw	r16,0(sp)
   98e08:	dfc00115 	stw	ra,4(sp)
   98e0c:	2021883a 	mov	r16,r4
   98e10:	20002226 	beq	r4,zero,98e9c <__floatunsidf+0x9c>
   98e14:	0098ea80 	call	98ea8 <__clzsi2>
   98e18:	01010784 	movi	r4,1054
   98e1c:	2089c83a 	sub	r4,r4,r2
   98e20:	01810cc4 	movi	r6,1075
   98e24:	310dc83a 	sub	r6,r6,r4
   98e28:	00c007c4 	movi	r3,31
   98e2c:	1980120e 	bge	r3,r6,98e78 <__floatunsidf+0x78>
   98e30:	00c104c4 	movi	r3,1043
   98e34:	1907c83a 	sub	r3,r3,r4
   98e38:	80ca983a 	sll	r5,r16,r3
   98e3c:	00800434 	movhi	r2,16
   98e40:	10bfffc4 	addi	r2,r2,-1
   98e44:	2101ffcc 	andi	r4,r4,2047
   98e48:	0021883a 	mov	r16,zero
   98e4c:	288a703a 	and	r5,r5,r2
   98e50:	2008953a 	slli	r4,r4,20
   98e54:	00c00434 	movhi	r3,16
   98e58:	18ffffc4 	addi	r3,r3,-1
   98e5c:	28c6703a 	and	r3,r5,r3
   98e60:	8005883a 	mov	r2,r16
   98e64:	1906b03a 	or	r3,r3,r4
   98e68:	dfc00117 	ldw	ra,4(sp)
   98e6c:	dc000017 	ldw	r16,0(sp)
   98e70:	dec00204 	addi	sp,sp,8
   98e74:	f800283a 	ret
   98e78:	00c002c4 	movi	r3,11
   98e7c:	188bc83a 	sub	r5,r3,r2
   98e80:	814ad83a 	srl	r5,r16,r5
   98e84:	00c00434 	movhi	r3,16
   98e88:	18ffffc4 	addi	r3,r3,-1
   98e8c:	81a0983a 	sll	r16,r16,r6
   98e90:	2101ffcc 	andi	r4,r4,2047
   98e94:	28ca703a 	and	r5,r5,r3
   98e98:	003fed06 	br	98e50 <__alt_data_end+0xfffc8f90>
   98e9c:	0009883a 	mov	r4,zero
   98ea0:	000b883a 	mov	r5,zero
   98ea4:	003fea06 	br	98e50 <__alt_data_end+0xfffc8f90>

00098ea8 <__clzsi2>:
   98ea8:	00bfffd4 	movui	r2,65535
   98eac:	11000536 	bltu	r2,r4,98ec4 <__clzsi2+0x1c>
   98eb0:	00803fc4 	movi	r2,255
   98eb4:	11000f36 	bltu	r2,r4,98ef4 <__clzsi2+0x4c>
   98eb8:	00800804 	movi	r2,32
   98ebc:	0007883a 	mov	r3,zero
   98ec0:	00000506 	br	98ed8 <__clzsi2+0x30>
   98ec4:	00804034 	movhi	r2,256
   98ec8:	10bfffc4 	addi	r2,r2,-1
   98ecc:	11000c2e 	bgeu	r2,r4,98f00 <__clzsi2+0x58>
   98ed0:	00800204 	movi	r2,8
   98ed4:	00c00604 	movi	r3,24
   98ed8:	20c8d83a 	srl	r4,r4,r3
   98edc:	00c002b4 	movhi	r3,10
   98ee0:	18f1a104 	addi	r3,r3,-14716
   98ee4:	1909883a 	add	r4,r3,r4
   98ee8:	20c00003 	ldbu	r3,0(r4)
   98eec:	10c5c83a 	sub	r2,r2,r3
   98ef0:	f800283a 	ret
   98ef4:	00800604 	movi	r2,24
   98ef8:	00c00204 	movi	r3,8
   98efc:	003ff606 	br	98ed8 <__alt_data_end+0xfffc9018>
   98f00:	00800404 	movi	r2,16
   98f04:	1007883a 	mov	r3,r2
   98f08:	003ff306 	br	98ed8 <__alt_data_end+0xfffc9018>

00098f0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   98f0c:	defffe04 	addi	sp,sp,-8
   98f10:	dfc00115 	stw	ra,4(sp)
   98f14:	df000015 	stw	fp,0(sp)
   98f18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   98f1c:	d0a00f17 	ldw	r2,-32708(gp)
   98f20:	10000326 	beq	r2,zero,98f30 <alt_get_errno+0x24>
   98f24:	d0a00f17 	ldw	r2,-32708(gp)
   98f28:	103ee83a 	callr	r2
   98f2c:	00000106 	br	98f34 <alt_get_errno+0x28>
   98f30:	d0a9ab04 	addi	r2,gp,-22868
}
   98f34:	e037883a 	mov	sp,fp
   98f38:	dfc00117 	ldw	ra,4(sp)
   98f3c:	df000017 	ldw	fp,0(sp)
   98f40:	dec00204 	addi	sp,sp,8
   98f44:	f800283a 	ret

00098f48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   98f48:	defffb04 	addi	sp,sp,-20
   98f4c:	dfc00415 	stw	ra,16(sp)
   98f50:	df000315 	stw	fp,12(sp)
   98f54:	df000304 	addi	fp,sp,12
   98f58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   98f5c:	e0bfff17 	ldw	r2,-4(fp)
   98f60:	10000616 	blt	r2,zero,98f7c <close+0x34>
   98f64:	e0bfff17 	ldw	r2,-4(fp)
   98f68:	10c00324 	muli	r3,r2,12
   98f6c:	008002b4 	movhi	r2,10
   98f70:	10b6df04 	addi	r2,r2,-9348
   98f74:	1885883a 	add	r2,r3,r2
   98f78:	00000106 	br	98f80 <close+0x38>
   98f7c:	0005883a 	mov	r2,zero
   98f80:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   98f84:	e0bffd17 	ldw	r2,-12(fp)
   98f88:	10001926 	beq	r2,zero,98ff0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   98f8c:	e0bffd17 	ldw	r2,-12(fp)
   98f90:	10800017 	ldw	r2,0(r2)
   98f94:	10800417 	ldw	r2,16(r2)
   98f98:	10000626 	beq	r2,zero,98fb4 <close+0x6c>
   98f9c:	e0bffd17 	ldw	r2,-12(fp)
   98fa0:	10800017 	ldw	r2,0(r2)
   98fa4:	10800417 	ldw	r2,16(r2)
   98fa8:	e13ffd17 	ldw	r4,-12(fp)
   98fac:	103ee83a 	callr	r2
   98fb0:	00000106 	br	98fb8 <close+0x70>
   98fb4:	0005883a 	mov	r2,zero
   98fb8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   98fbc:	e13fff17 	ldw	r4,-4(fp)
   98fc0:	00996080 	call	99608 <alt_release_fd>
    if (rval < 0)
   98fc4:	e0bffe17 	ldw	r2,-8(fp)
   98fc8:	1000070e 	bge	r2,zero,98fe8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   98fcc:	0098f0c0 	call	98f0c <alt_get_errno>
   98fd0:	1007883a 	mov	r3,r2
   98fd4:	e0bffe17 	ldw	r2,-8(fp)
   98fd8:	0085c83a 	sub	r2,zero,r2
   98fdc:	18800015 	stw	r2,0(r3)
      return -1;
   98fe0:	00bfffc4 	movi	r2,-1
   98fe4:	00000706 	br	99004 <close+0xbc>
    }
    return 0;
   98fe8:	0005883a 	mov	r2,zero
   98fec:	00000506 	br	99004 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   98ff0:	0098f0c0 	call	98f0c <alt_get_errno>
   98ff4:	1007883a 	mov	r3,r2
   98ff8:	00801444 	movi	r2,81
   98ffc:	18800015 	stw	r2,0(r3)
    return -1;
   99000:	00bfffc4 	movi	r2,-1
  }
}
   99004:	e037883a 	mov	sp,fp
   99008:	dfc00117 	ldw	ra,4(sp)
   9900c:	df000017 	ldw	fp,0(sp)
   99010:	dec00204 	addi	sp,sp,8
   99014:	f800283a 	ret

00099018 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   99018:	defffc04 	addi	sp,sp,-16
   9901c:	df000315 	stw	fp,12(sp)
   99020:	df000304 	addi	fp,sp,12
   99024:	e13ffd15 	stw	r4,-12(fp)
   99028:	e17ffe15 	stw	r5,-8(fp)
   9902c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   99030:	e0bfff17 	ldw	r2,-4(fp)
}
   99034:	e037883a 	mov	sp,fp
   99038:	df000017 	ldw	fp,0(sp)
   9903c:	dec00104 	addi	sp,sp,4
   99040:	f800283a 	ret

00099044 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   99044:	defffe04 	addi	sp,sp,-8
   99048:	dfc00115 	stw	ra,4(sp)
   9904c:	df000015 	stw	fp,0(sp)
   99050:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   99054:	d0a00f17 	ldw	r2,-32708(gp)
   99058:	10000326 	beq	r2,zero,99068 <alt_get_errno+0x24>
   9905c:	d0a00f17 	ldw	r2,-32708(gp)
   99060:	103ee83a 	callr	r2
   99064:	00000106 	br	9906c <alt_get_errno+0x28>
   99068:	d0a9ab04 	addi	r2,gp,-22868
}
   9906c:	e037883a 	mov	sp,fp
   99070:	dfc00117 	ldw	ra,4(sp)
   99074:	df000017 	ldw	fp,0(sp)
   99078:	dec00204 	addi	sp,sp,8
   9907c:	f800283a 	ret

00099080 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   99080:	defffb04 	addi	sp,sp,-20
   99084:	dfc00415 	stw	ra,16(sp)
   99088:	df000315 	stw	fp,12(sp)
   9908c:	df000304 	addi	fp,sp,12
   99090:	e13ffe15 	stw	r4,-8(fp)
   99094:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   99098:	e0bffe17 	ldw	r2,-8(fp)
   9909c:	10000616 	blt	r2,zero,990b8 <fstat+0x38>
   990a0:	e0bffe17 	ldw	r2,-8(fp)
   990a4:	10c00324 	muli	r3,r2,12
   990a8:	008002b4 	movhi	r2,10
   990ac:	10b6df04 	addi	r2,r2,-9348
   990b0:	1885883a 	add	r2,r3,r2
   990b4:	00000106 	br	990bc <fstat+0x3c>
   990b8:	0005883a 	mov	r2,zero
   990bc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   990c0:	e0bffd17 	ldw	r2,-12(fp)
   990c4:	10001026 	beq	r2,zero,99108 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   990c8:	e0bffd17 	ldw	r2,-12(fp)
   990cc:	10800017 	ldw	r2,0(r2)
   990d0:	10800817 	ldw	r2,32(r2)
   990d4:	10000726 	beq	r2,zero,990f4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   990d8:	e0bffd17 	ldw	r2,-12(fp)
   990dc:	10800017 	ldw	r2,0(r2)
   990e0:	10800817 	ldw	r2,32(r2)
   990e4:	e17fff17 	ldw	r5,-4(fp)
   990e8:	e13ffd17 	ldw	r4,-12(fp)
   990ec:	103ee83a 	callr	r2
   990f0:	00000a06 	br	9911c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   990f4:	e0bfff17 	ldw	r2,-4(fp)
   990f8:	00c80004 	movi	r3,8192
   990fc:	10c00115 	stw	r3,4(r2)
      return 0;
   99100:	0005883a 	mov	r2,zero
   99104:	00000506 	br	9911c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   99108:	00990440 	call	99044 <alt_get_errno>
   9910c:	1007883a 	mov	r3,r2
   99110:	00801444 	movi	r2,81
   99114:	18800015 	stw	r2,0(r3)
    return -1;
   99118:	00bfffc4 	movi	r2,-1
  }
}
   9911c:	e037883a 	mov	sp,fp
   99120:	dfc00117 	ldw	ra,4(sp)
   99124:	df000017 	ldw	fp,0(sp)
   99128:	dec00204 	addi	sp,sp,8
   9912c:	f800283a 	ret

00099130 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   99130:	defffe04 	addi	sp,sp,-8
   99134:	dfc00115 	stw	ra,4(sp)
   99138:	df000015 	stw	fp,0(sp)
   9913c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   99140:	d0a00f17 	ldw	r2,-32708(gp)
   99144:	10000326 	beq	r2,zero,99154 <alt_get_errno+0x24>
   99148:	d0a00f17 	ldw	r2,-32708(gp)
   9914c:	103ee83a 	callr	r2
   99150:	00000106 	br	99158 <alt_get_errno+0x28>
   99154:	d0a9ab04 	addi	r2,gp,-22868
}
   99158:	e037883a 	mov	sp,fp
   9915c:	dfc00117 	ldw	ra,4(sp)
   99160:	df000017 	ldw	fp,0(sp)
   99164:	dec00204 	addi	sp,sp,8
   99168:	f800283a 	ret

0009916c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   9916c:	deffed04 	addi	sp,sp,-76
   99170:	dfc01215 	stw	ra,72(sp)
   99174:	df001115 	stw	fp,68(sp)
   99178:	df001104 	addi	fp,sp,68
   9917c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   99180:	e0bfff17 	ldw	r2,-4(fp)
   99184:	10000616 	blt	r2,zero,991a0 <isatty+0x34>
   99188:	e0bfff17 	ldw	r2,-4(fp)
   9918c:	10c00324 	muli	r3,r2,12
   99190:	008002b4 	movhi	r2,10
   99194:	10b6df04 	addi	r2,r2,-9348
   99198:	1885883a 	add	r2,r3,r2
   9919c:	00000106 	br	991a4 <isatty+0x38>
   991a0:	0005883a 	mov	r2,zero
   991a4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   991a8:	e0bfef17 	ldw	r2,-68(fp)
   991ac:	10000e26 	beq	r2,zero,991e8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   991b0:	e0bfef17 	ldw	r2,-68(fp)
   991b4:	10800017 	ldw	r2,0(r2)
   991b8:	10800817 	ldw	r2,32(r2)
   991bc:	1000021e 	bne	r2,zero,991c8 <isatty+0x5c>
    {
      return 1;
   991c0:	00800044 	movi	r2,1
   991c4:	00000d06 	br	991fc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   991c8:	e0bff004 	addi	r2,fp,-64
   991cc:	100b883a 	mov	r5,r2
   991d0:	e13fff17 	ldw	r4,-4(fp)
   991d4:	00990800 	call	99080 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   991d8:	e0bff117 	ldw	r2,-60(fp)
   991dc:	10880020 	cmpeqi	r2,r2,8192
   991e0:	10803fcc 	andi	r2,r2,255
   991e4:	00000506 	br	991fc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   991e8:	00991300 	call	99130 <alt_get_errno>
   991ec:	1007883a 	mov	r3,r2
   991f0:	00801444 	movi	r2,81
   991f4:	18800015 	stw	r2,0(r3)
    return 0;
   991f8:	0005883a 	mov	r2,zero
  }
}
   991fc:	e037883a 	mov	sp,fp
   99200:	dfc00117 	ldw	ra,4(sp)
   99204:	df000017 	ldw	fp,0(sp)
   99208:	dec00204 	addi	sp,sp,8
   9920c:	f800283a 	ret

00099210 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   99210:	defffc04 	addi	sp,sp,-16
   99214:	df000315 	stw	fp,12(sp)
   99218:	df000304 	addi	fp,sp,12
   9921c:	e13ffd15 	stw	r4,-12(fp)
   99220:	e17ffe15 	stw	r5,-8(fp)
   99224:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   99228:	e0fffe17 	ldw	r3,-8(fp)
   9922c:	e0bffd17 	ldw	r2,-12(fp)
   99230:	18800c26 	beq	r3,r2,99264 <alt_load_section+0x54>
  {
    while( to != end )
   99234:	00000806 	br	99258 <alt_load_section+0x48>
    {
      *to++ = *from++;
   99238:	e0bffe17 	ldw	r2,-8(fp)
   9923c:	10c00104 	addi	r3,r2,4
   99240:	e0fffe15 	stw	r3,-8(fp)
   99244:	e0fffd17 	ldw	r3,-12(fp)
   99248:	19000104 	addi	r4,r3,4
   9924c:	e13ffd15 	stw	r4,-12(fp)
   99250:	18c00017 	ldw	r3,0(r3)
   99254:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   99258:	e0fffe17 	ldw	r3,-8(fp)
   9925c:	e0bfff17 	ldw	r2,-4(fp)
   99260:	18bff51e 	bne	r3,r2,99238 <__alt_data_end+0xfffc9378>
    {
      *to++ = *from++;
    }
  }
}
   99264:	0001883a 	nop
   99268:	e037883a 	mov	sp,fp
   9926c:	df000017 	ldw	fp,0(sp)
   99270:	dec00104 	addi	sp,sp,4
   99274:	f800283a 	ret

00099278 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   99278:	defffe04 	addi	sp,sp,-8
   9927c:	dfc00115 	stw	ra,4(sp)
   99280:	df000015 	stw	fp,0(sp)
   99284:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   99288:	018002b4 	movhi	r6,10
   9928c:	31bb6b04 	addi	r6,r6,-4692
   99290:	014002b4 	movhi	r5,10
   99294:	2971ec04 	addi	r5,r5,-14416
   99298:	010002b4 	movhi	r4,10
   9929c:	213b6b04 	addi	r4,r4,-4692
   992a0:	00992100 	call	99210 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   992a4:	01800234 	movhi	r6,8
   992a8:	31809104 	addi	r6,r6,580
   992ac:	01400234 	movhi	r5,8
   992b0:	29400804 	addi	r5,r5,32
   992b4:	01000234 	movhi	r4,8
   992b8:	21000804 	addi	r4,r4,32
   992bc:	00992100 	call	99210 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   992c0:	018002b4 	movhi	r6,10
   992c4:	31b1ec04 	addi	r6,r6,-14416
   992c8:	014002b4 	movhi	r5,10
   992cc:	296e0804 	addi	r5,r5,-18400
   992d0:	010002b4 	movhi	r4,10
   992d4:	212e0804 	addi	r4,r4,-18400
   992d8:	00992100 	call	99210 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   992dc:	009a8d80 	call	9a8d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   992e0:	009aa980 	call	9aa98 <alt_icache_flush_all>
}
   992e4:	0001883a 	nop
   992e8:	e037883a 	mov	sp,fp
   992ec:	dfc00117 	ldw	ra,4(sp)
   992f0:	df000017 	ldw	fp,0(sp)
   992f4:	dec00204 	addi	sp,sp,8
   992f8:	f800283a 	ret

000992fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   992fc:	defffe04 	addi	sp,sp,-8
   99300:	dfc00115 	stw	ra,4(sp)
   99304:	df000015 	stw	fp,0(sp)
   99308:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9930c:	d0a00f17 	ldw	r2,-32708(gp)
   99310:	10000326 	beq	r2,zero,99320 <alt_get_errno+0x24>
   99314:	d0a00f17 	ldw	r2,-32708(gp)
   99318:	103ee83a 	callr	r2
   9931c:	00000106 	br	99324 <alt_get_errno+0x28>
   99320:	d0a9ab04 	addi	r2,gp,-22868
}
   99324:	e037883a 	mov	sp,fp
   99328:	dfc00117 	ldw	ra,4(sp)
   9932c:	df000017 	ldw	fp,0(sp)
   99330:	dec00204 	addi	sp,sp,8
   99334:	f800283a 	ret

00099338 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   99338:	defff904 	addi	sp,sp,-28
   9933c:	dfc00615 	stw	ra,24(sp)
   99340:	df000515 	stw	fp,20(sp)
   99344:	df000504 	addi	fp,sp,20
   99348:	e13ffd15 	stw	r4,-12(fp)
   9934c:	e17ffe15 	stw	r5,-8(fp)
   99350:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   99354:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   99358:	e0bffd17 	ldw	r2,-12(fp)
   9935c:	10000616 	blt	r2,zero,99378 <lseek+0x40>
   99360:	e0bffd17 	ldw	r2,-12(fp)
   99364:	10c00324 	muli	r3,r2,12
   99368:	008002b4 	movhi	r2,10
   9936c:	10b6df04 	addi	r2,r2,-9348
   99370:	1885883a 	add	r2,r3,r2
   99374:	00000106 	br	9937c <lseek+0x44>
   99378:	0005883a 	mov	r2,zero
   9937c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   99380:	e0bffc17 	ldw	r2,-16(fp)
   99384:	10001026 	beq	r2,zero,993c8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   99388:	e0bffc17 	ldw	r2,-16(fp)
   9938c:	10800017 	ldw	r2,0(r2)
   99390:	10800717 	ldw	r2,28(r2)
   99394:	10000926 	beq	r2,zero,993bc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   99398:	e0bffc17 	ldw	r2,-16(fp)
   9939c:	10800017 	ldw	r2,0(r2)
   993a0:	10800717 	ldw	r2,28(r2)
   993a4:	e1bfff17 	ldw	r6,-4(fp)
   993a8:	e17ffe17 	ldw	r5,-8(fp)
   993ac:	e13ffc17 	ldw	r4,-16(fp)
   993b0:	103ee83a 	callr	r2
   993b4:	e0bffb15 	stw	r2,-20(fp)
   993b8:	00000506 	br	993d0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   993bc:	00bfde84 	movi	r2,-134
   993c0:	e0bffb15 	stw	r2,-20(fp)
   993c4:	00000206 	br	993d0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   993c8:	00bfebc4 	movi	r2,-81
   993cc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   993d0:	e0bffb17 	ldw	r2,-20(fp)
   993d4:	1000070e 	bge	r2,zero,993f4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   993d8:	00992fc0 	call	992fc <alt_get_errno>
   993dc:	1007883a 	mov	r3,r2
   993e0:	e0bffb17 	ldw	r2,-20(fp)
   993e4:	0085c83a 	sub	r2,zero,r2
   993e8:	18800015 	stw	r2,0(r3)
    rc = -1;
   993ec:	00bfffc4 	movi	r2,-1
   993f0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   993f4:	e0bffb17 	ldw	r2,-20(fp)
}
   993f8:	e037883a 	mov	sp,fp
   993fc:	dfc00117 	ldw	ra,4(sp)
   99400:	df000017 	ldw	fp,0(sp)
   99404:	dec00204 	addi	sp,sp,8
   99408:	f800283a 	ret

0009940c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   9940c:	defffd04 	addi	sp,sp,-12
   99410:	dfc00215 	stw	ra,8(sp)
   99414:	df000115 	stw	fp,4(sp)
   99418:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   9941c:	0009883a 	mov	r4,zero
   99420:	0099a580 	call	99a58 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   99424:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   99428:	0099a900 	call	99a90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   9942c:	018002b4 	movhi	r6,10
   99430:	31b1e404 	addi	r6,r6,-14448
   99434:	014002b4 	movhi	r5,10
   99438:	2971e404 	addi	r5,r5,-14448
   9943c:	010002b4 	movhi	r4,10
   99440:	2131e404 	addi	r4,r4,-14448
   99444:	009ae300 	call	9ae30 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   99448:	009a9d80 	call	9a9d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   9944c:	010002b4 	movhi	r4,10
   99450:	212a8e04 	addi	r4,r4,-21960
   99454:	009b48c0 	call	9b48c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   99458:	d0a9ac17 	ldw	r2,-22864(gp)
   9945c:	d0e9ad17 	ldw	r3,-22860(gp)
   99460:	d129ae17 	ldw	r4,-22856(gp)
   99464:	200d883a 	mov	r6,r4
   99468:	180b883a 	mov	r5,r3
   9946c:	1009883a 	mov	r4,r2
   99470:	00882480 	call	88248 <main>
   99474:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   99478:	01000044 	movi	r4,1
   9947c:	0098f480 	call	98f48 <close>
  exit (result);
   99480:	e13fff17 	ldw	r4,-4(fp)
   99484:	009b4a00 	call	9b4a0 <exit>

00099488 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   99488:	defffe04 	addi	sp,sp,-8
   9948c:	df000115 	stw	fp,4(sp)
   99490:	df000104 	addi	fp,sp,4
   99494:	e13fff15 	stw	r4,-4(fp)
}
   99498:	0001883a 	nop
   9949c:	e037883a 	mov	sp,fp
   994a0:	df000017 	ldw	fp,0(sp)
   994a4:	dec00104 	addi	sp,sp,4
   994a8:	f800283a 	ret

000994ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   994ac:	defffe04 	addi	sp,sp,-8
   994b0:	df000115 	stw	fp,4(sp)
   994b4:	df000104 	addi	fp,sp,4
   994b8:	e13fff15 	stw	r4,-4(fp)
}
   994bc:	0001883a 	nop
   994c0:	e037883a 	mov	sp,fp
   994c4:	df000017 	ldw	fp,0(sp)
   994c8:	dec00104 	addi	sp,sp,4
   994cc:	f800283a 	ret

000994d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   994d0:	defffe04 	addi	sp,sp,-8
   994d4:	dfc00115 	stw	ra,4(sp)
   994d8:	df000015 	stw	fp,0(sp)
   994dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   994e0:	d0a00f17 	ldw	r2,-32708(gp)
   994e4:	10000326 	beq	r2,zero,994f4 <alt_get_errno+0x24>
   994e8:	d0a00f17 	ldw	r2,-32708(gp)
   994ec:	103ee83a 	callr	r2
   994f0:	00000106 	br	994f8 <alt_get_errno+0x28>
   994f4:	d0a9ab04 	addi	r2,gp,-22868
}
   994f8:	e037883a 	mov	sp,fp
   994fc:	dfc00117 	ldw	ra,4(sp)
   99500:	df000017 	ldw	fp,0(sp)
   99504:	dec00204 	addi	sp,sp,8
   99508:	f800283a 	ret

0009950c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   9950c:	defff904 	addi	sp,sp,-28
   99510:	dfc00615 	stw	ra,24(sp)
   99514:	df000515 	stw	fp,20(sp)
   99518:	df000504 	addi	fp,sp,20
   9951c:	e13ffd15 	stw	r4,-12(fp)
   99520:	e17ffe15 	stw	r5,-8(fp)
   99524:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   99528:	e0bffd17 	ldw	r2,-12(fp)
   9952c:	10000616 	blt	r2,zero,99548 <read+0x3c>
   99530:	e0bffd17 	ldw	r2,-12(fp)
   99534:	10c00324 	muli	r3,r2,12
   99538:	008002b4 	movhi	r2,10
   9953c:	10b6df04 	addi	r2,r2,-9348
   99540:	1885883a 	add	r2,r3,r2
   99544:	00000106 	br	9954c <read+0x40>
   99548:	0005883a 	mov	r2,zero
   9954c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   99550:	e0bffb17 	ldw	r2,-20(fp)
   99554:	10002226 	beq	r2,zero,995e0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   99558:	e0bffb17 	ldw	r2,-20(fp)
   9955c:	10800217 	ldw	r2,8(r2)
   99560:	108000cc 	andi	r2,r2,3
   99564:	10800060 	cmpeqi	r2,r2,1
   99568:	1000181e 	bne	r2,zero,995cc <read+0xc0>
        (fd->dev->read))
   9956c:	e0bffb17 	ldw	r2,-20(fp)
   99570:	10800017 	ldw	r2,0(r2)
   99574:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   99578:	10001426 	beq	r2,zero,995cc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   9957c:	e0bffb17 	ldw	r2,-20(fp)
   99580:	10800017 	ldw	r2,0(r2)
   99584:	10800517 	ldw	r2,20(r2)
   99588:	e0ffff17 	ldw	r3,-4(fp)
   9958c:	180d883a 	mov	r6,r3
   99590:	e17ffe17 	ldw	r5,-8(fp)
   99594:	e13ffb17 	ldw	r4,-20(fp)
   99598:	103ee83a 	callr	r2
   9959c:	e0bffc15 	stw	r2,-16(fp)
   995a0:	e0bffc17 	ldw	r2,-16(fp)
   995a4:	1000070e 	bge	r2,zero,995c4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   995a8:	00994d00 	call	994d0 <alt_get_errno>
   995ac:	1007883a 	mov	r3,r2
   995b0:	e0bffc17 	ldw	r2,-16(fp)
   995b4:	0085c83a 	sub	r2,zero,r2
   995b8:	18800015 	stw	r2,0(r3)
          return -1;
   995bc:	00bfffc4 	movi	r2,-1
   995c0:	00000c06 	br	995f4 <read+0xe8>
        }
        return rval;
   995c4:	e0bffc17 	ldw	r2,-16(fp)
   995c8:	00000a06 	br	995f4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   995cc:	00994d00 	call	994d0 <alt_get_errno>
   995d0:	1007883a 	mov	r3,r2
   995d4:	00800344 	movi	r2,13
   995d8:	18800015 	stw	r2,0(r3)
   995dc:	00000406 	br	995f0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   995e0:	00994d00 	call	994d0 <alt_get_errno>
   995e4:	1007883a 	mov	r3,r2
   995e8:	00801444 	movi	r2,81
   995ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
   995f0:	00bfffc4 	movi	r2,-1
}
   995f4:	e037883a 	mov	sp,fp
   995f8:	dfc00117 	ldw	ra,4(sp)
   995fc:	df000017 	ldw	fp,0(sp)
   99600:	dec00204 	addi	sp,sp,8
   99604:	f800283a 	ret

00099608 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   99608:	defffe04 	addi	sp,sp,-8
   9960c:	df000115 	stw	fp,4(sp)
   99610:	df000104 	addi	fp,sp,4
   99614:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   99618:	e0bfff17 	ldw	r2,-4(fp)
   9961c:	108000d0 	cmplti	r2,r2,3
   99620:	10000d1e 	bne	r2,zero,99658 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   99624:	008002b4 	movhi	r2,10
   99628:	10b6df04 	addi	r2,r2,-9348
   9962c:	e0ffff17 	ldw	r3,-4(fp)
   99630:	18c00324 	muli	r3,r3,12
   99634:	10c5883a 	add	r2,r2,r3
   99638:	10800204 	addi	r2,r2,8
   9963c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   99640:	008002b4 	movhi	r2,10
   99644:	10b6df04 	addi	r2,r2,-9348
   99648:	e0ffff17 	ldw	r3,-4(fp)
   9964c:	18c00324 	muli	r3,r3,12
   99650:	10c5883a 	add	r2,r2,r3
   99654:	10000015 	stw	zero,0(r2)
  }
}
   99658:	0001883a 	nop
   9965c:	e037883a 	mov	sp,fp
   99660:	df000017 	ldw	fp,0(sp)
   99664:	dec00104 	addi	sp,sp,4
   99668:	f800283a 	ret

0009966c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   9966c:	defff904 	addi	sp,sp,-28
   99670:	df000615 	stw	fp,24(sp)
   99674:	df000604 	addi	fp,sp,24
   99678:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9967c:	0005303a 	rdctl	r2,status
   99680:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   99684:	e0fffe17 	ldw	r3,-8(fp)
   99688:	00bfff84 	movi	r2,-2
   9968c:	1884703a 	and	r2,r3,r2
   99690:	1001703a 	wrctl	status,r2
  
  return context;
   99694:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   99698:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   9969c:	d0a01017 	ldw	r2,-32704(gp)
   996a0:	10c000c4 	addi	r3,r2,3
   996a4:	00bfff04 	movi	r2,-4
   996a8:	1884703a 	and	r2,r3,r2
   996ac:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   996b0:	d0e01017 	ldw	r3,-32704(gp)
   996b4:	e0bfff17 	ldw	r2,-4(fp)
   996b8:	1887883a 	add	r3,r3,r2
   996bc:	00800374 	movhi	r2,13
   996c0:	10bfb004 	addi	r2,r2,-320
   996c4:	10c0062e 	bgeu	r2,r3,996e0 <sbrk+0x74>
   996c8:	e0bffb17 	ldw	r2,-20(fp)
   996cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   996d0:	e0bffa17 	ldw	r2,-24(fp)
   996d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   996d8:	00bfffc4 	movi	r2,-1
   996dc:	00000b06 	br	9970c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   996e0:	d0a01017 	ldw	r2,-32704(gp)
   996e4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   996e8:	d0e01017 	ldw	r3,-32704(gp)
   996ec:	e0bfff17 	ldw	r2,-4(fp)
   996f0:	1885883a 	add	r2,r3,r2
   996f4:	d0a01015 	stw	r2,-32704(gp)
   996f8:	e0bffb17 	ldw	r2,-20(fp)
   996fc:	e0bffc15 	stw	r2,-16(fp)
   99700:	e0bffc17 	ldw	r2,-16(fp)
   99704:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   99708:	e0bffd17 	ldw	r2,-12(fp)
} 
   9970c:	e037883a 	mov	sp,fp
   99710:	df000017 	ldw	fp,0(sp)
   99714:	dec00104 	addi	sp,sp,4
   99718:	f800283a 	ret

0009971c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   9971c:	defffa04 	addi	sp,sp,-24
   99720:	df000515 	stw	fp,20(sp)
   99724:	df000504 	addi	fp,sp,20
   99728:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9972c:	0005303a 	rdctl	r2,status
   99730:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   99734:	e0fffc17 	ldw	r3,-16(fp)
   99738:	00bfff84 	movi	r2,-2
   9973c:	1884703a 	and	r2,r3,r2
   99740:	1001703a 	wrctl	status,r2
  
  return context;
   99744:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   99748:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   9974c:	e0bfff17 	ldw	r2,-4(fp)
   99750:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   99754:	e0bffd17 	ldw	r2,-12(fp)
   99758:	10800017 	ldw	r2,0(r2)
   9975c:	e0fffd17 	ldw	r3,-12(fp)
   99760:	18c00117 	ldw	r3,4(r3)
   99764:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   99768:	e0bffd17 	ldw	r2,-12(fp)
   9976c:	10800117 	ldw	r2,4(r2)
   99770:	e0fffd17 	ldw	r3,-12(fp)
   99774:	18c00017 	ldw	r3,0(r3)
   99778:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   9977c:	e0bffd17 	ldw	r2,-12(fp)
   99780:	e0fffd17 	ldw	r3,-12(fp)
   99784:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   99788:	e0bffd17 	ldw	r2,-12(fp)
   9978c:	e0fffd17 	ldw	r3,-12(fp)
   99790:	10c00015 	stw	r3,0(r2)
   99794:	e0bffb17 	ldw	r2,-20(fp)
   99798:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9979c:	e0bffe17 	ldw	r2,-8(fp)
   997a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   997a4:	0001883a 	nop
   997a8:	e037883a 	mov	sp,fp
   997ac:	df000017 	ldw	fp,0(sp)
   997b0:	dec00104 	addi	sp,sp,4
   997b4:	f800283a 	ret

000997b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   997b8:	defffb04 	addi	sp,sp,-20
   997bc:	dfc00415 	stw	ra,16(sp)
   997c0:	df000315 	stw	fp,12(sp)
   997c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   997c8:	d0a01117 	ldw	r2,-32700(gp)
   997cc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   997d0:	d0a9b017 	ldw	r2,-22848(gp)
   997d4:	10800044 	addi	r2,r2,1
   997d8:	d0a9b015 	stw	r2,-22848(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   997dc:	00002e06 	br	99898 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   997e0:	e0bffd17 	ldw	r2,-12(fp)
   997e4:	10800017 	ldw	r2,0(r2)
   997e8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   997ec:	e0bffd17 	ldw	r2,-12(fp)
   997f0:	10800403 	ldbu	r2,16(r2)
   997f4:	10803fcc 	andi	r2,r2,255
   997f8:	10000426 	beq	r2,zero,9980c <alt_tick+0x54>
   997fc:	d0a9b017 	ldw	r2,-22848(gp)
   99800:	1000021e 	bne	r2,zero,9980c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   99804:	e0bffd17 	ldw	r2,-12(fp)
   99808:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   9980c:	e0bffd17 	ldw	r2,-12(fp)
   99810:	10800217 	ldw	r2,8(r2)
   99814:	d0e9b017 	ldw	r3,-22848(gp)
   99818:	18801d36 	bltu	r3,r2,99890 <alt_tick+0xd8>
   9981c:	e0bffd17 	ldw	r2,-12(fp)
   99820:	10800403 	ldbu	r2,16(r2)
   99824:	10803fcc 	andi	r2,r2,255
   99828:	1000191e 	bne	r2,zero,99890 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   9982c:	e0bffd17 	ldw	r2,-12(fp)
   99830:	10800317 	ldw	r2,12(r2)
   99834:	e0fffd17 	ldw	r3,-12(fp)
   99838:	18c00517 	ldw	r3,20(r3)
   9983c:	1809883a 	mov	r4,r3
   99840:	103ee83a 	callr	r2
   99844:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   99848:	e0bfff17 	ldw	r2,-4(fp)
   9984c:	1000031e 	bne	r2,zero,9985c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   99850:	e13ffd17 	ldw	r4,-12(fp)
   99854:	009971c0 	call	9971c <alt_alarm_stop>
   99858:	00000d06 	br	99890 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   9985c:	e0bffd17 	ldw	r2,-12(fp)
   99860:	10c00217 	ldw	r3,8(r2)
   99864:	e0bfff17 	ldw	r2,-4(fp)
   99868:	1887883a 	add	r3,r3,r2
   9986c:	e0bffd17 	ldw	r2,-12(fp)
   99870:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   99874:	e0bffd17 	ldw	r2,-12(fp)
   99878:	10c00217 	ldw	r3,8(r2)
   9987c:	d0a9b017 	ldw	r2,-22848(gp)
   99880:	1880032e 	bgeu	r3,r2,99890 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   99884:	e0bffd17 	ldw	r2,-12(fp)
   99888:	00c00044 	movi	r3,1
   9988c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   99890:	e0bffe17 	ldw	r2,-8(fp)
   99894:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   99898:	e0fffd17 	ldw	r3,-12(fp)
   9989c:	d0a01104 	addi	r2,gp,-32700
   998a0:	18bfcf1e 	bne	r3,r2,997e0 <__alt_data_end+0xfffc9920>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   998a4:	0001883a 	nop
}
   998a8:	0001883a 	nop
   998ac:	e037883a 	mov	sp,fp
   998b0:	dfc00117 	ldw	ra,4(sp)
   998b4:	df000017 	ldw	fp,0(sp)
   998b8:	dec00204 	addi	sp,sp,8
   998bc:	f800283a 	ret

000998c0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   998c0:	defffd04 	addi	sp,sp,-12
   998c4:	dfc00215 	stw	ra,8(sp)
   998c8:	df000115 	stw	fp,4(sp)
   998cc:	df000104 	addi	fp,sp,4
   998d0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   998d4:	e13fff17 	ldw	r4,-4(fp)
   998d8:	009a7800 	call	9a780 <alt_busy_sleep>
}
   998dc:	e037883a 	mov	sp,fp
   998e0:	dfc00117 	ldw	ra,4(sp)
   998e4:	df000017 	ldw	fp,0(sp)
   998e8:	dec00204 	addi	sp,sp,8
   998ec:	f800283a 	ret

000998f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   998f0:	defffe04 	addi	sp,sp,-8
   998f4:	dfc00115 	stw	ra,4(sp)
   998f8:	df000015 	stw	fp,0(sp)
   998fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   99900:	d0a00f17 	ldw	r2,-32708(gp)
   99904:	10000326 	beq	r2,zero,99914 <alt_get_errno+0x24>
   99908:	d0a00f17 	ldw	r2,-32708(gp)
   9990c:	103ee83a 	callr	r2
   99910:	00000106 	br	99918 <alt_get_errno+0x28>
   99914:	d0a9ab04 	addi	r2,gp,-22868
}
   99918:	e037883a 	mov	sp,fp
   9991c:	dfc00117 	ldw	ra,4(sp)
   99920:	df000017 	ldw	fp,0(sp)
   99924:	dec00204 	addi	sp,sp,8
   99928:	f800283a 	ret

0009992c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   9992c:	defff904 	addi	sp,sp,-28
   99930:	dfc00615 	stw	ra,24(sp)
   99934:	df000515 	stw	fp,20(sp)
   99938:	df000504 	addi	fp,sp,20
   9993c:	e13ffd15 	stw	r4,-12(fp)
   99940:	e17ffe15 	stw	r5,-8(fp)
   99944:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   99948:	e0bffd17 	ldw	r2,-12(fp)
   9994c:	10000616 	blt	r2,zero,99968 <write+0x3c>
   99950:	e0bffd17 	ldw	r2,-12(fp)
   99954:	10c00324 	muli	r3,r2,12
   99958:	008002b4 	movhi	r2,10
   9995c:	10b6df04 	addi	r2,r2,-9348
   99960:	1885883a 	add	r2,r3,r2
   99964:	00000106 	br	9996c <write+0x40>
   99968:	0005883a 	mov	r2,zero
   9996c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   99970:	e0bffb17 	ldw	r2,-20(fp)
   99974:	10002126 	beq	r2,zero,999fc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   99978:	e0bffb17 	ldw	r2,-20(fp)
   9997c:	10800217 	ldw	r2,8(r2)
   99980:	108000cc 	andi	r2,r2,3
   99984:	10001826 	beq	r2,zero,999e8 <write+0xbc>
   99988:	e0bffb17 	ldw	r2,-20(fp)
   9998c:	10800017 	ldw	r2,0(r2)
   99990:	10800617 	ldw	r2,24(r2)
   99994:	10001426 	beq	r2,zero,999e8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   99998:	e0bffb17 	ldw	r2,-20(fp)
   9999c:	10800017 	ldw	r2,0(r2)
   999a0:	10800617 	ldw	r2,24(r2)
   999a4:	e0ffff17 	ldw	r3,-4(fp)
   999a8:	180d883a 	mov	r6,r3
   999ac:	e17ffe17 	ldw	r5,-8(fp)
   999b0:	e13ffb17 	ldw	r4,-20(fp)
   999b4:	103ee83a 	callr	r2
   999b8:	e0bffc15 	stw	r2,-16(fp)
   999bc:	e0bffc17 	ldw	r2,-16(fp)
   999c0:	1000070e 	bge	r2,zero,999e0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   999c4:	00998f00 	call	998f0 <alt_get_errno>
   999c8:	1007883a 	mov	r3,r2
   999cc:	e0bffc17 	ldw	r2,-16(fp)
   999d0:	0085c83a 	sub	r2,zero,r2
   999d4:	18800015 	stw	r2,0(r3)
        return -1;
   999d8:	00bfffc4 	movi	r2,-1
   999dc:	00000c06 	br	99a10 <write+0xe4>
      }
      return rval;
   999e0:	e0bffc17 	ldw	r2,-16(fp)
   999e4:	00000a06 	br	99a10 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   999e8:	00998f00 	call	998f0 <alt_get_errno>
   999ec:	1007883a 	mov	r3,r2
   999f0:	00800344 	movi	r2,13
   999f4:	18800015 	stw	r2,0(r3)
   999f8:	00000406 	br	99a0c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   999fc:	00998f00 	call	998f0 <alt_get_errno>
   99a00:	1007883a 	mov	r3,r2
   99a04:	00801444 	movi	r2,81
   99a08:	18800015 	stw	r2,0(r3)
  }
  return -1;
   99a0c:	00bfffc4 	movi	r2,-1
}
   99a10:	e037883a 	mov	sp,fp
   99a14:	dfc00117 	ldw	ra,4(sp)
   99a18:	df000017 	ldw	fp,0(sp)
   99a1c:	dec00204 	addi	sp,sp,8
   99a20:	f800283a 	ret

00099a24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   99a24:	defffd04 	addi	sp,sp,-12
   99a28:	dfc00215 	stw	ra,8(sp)
   99a2c:	df000115 	stw	fp,4(sp)
   99a30:	df000104 	addi	fp,sp,4
   99a34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   99a38:	d1600c04 	addi	r5,gp,-32720
   99a3c:	e13fff17 	ldw	r4,-4(fp)
   99a40:	009a9340 	call	9a934 <alt_dev_llist_insert>
}
   99a44:	e037883a 	mov	sp,fp
   99a48:	dfc00117 	ldw	ra,4(sp)
   99a4c:	df000017 	ldw	fp,0(sp)
   99a50:	dec00204 	addi	sp,sp,8
   99a54:	f800283a 	ret

00099a58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   99a58:	defffd04 	addi	sp,sp,-12
   99a5c:	dfc00215 	stw	ra,8(sp)
   99a60:	df000115 	stw	fp,4(sp)
   99a64:	df000104 	addi	fp,sp,4
   99a68:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   99a6c:	009b1000 	call	9b100 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   99a70:	00800044 	movi	r2,1
   99a74:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   99a78:	0001883a 	nop
   99a7c:	e037883a 	mov	sp,fp
   99a80:	dfc00117 	ldw	ra,4(sp)
   99a84:	df000017 	ldw	fp,0(sp)
   99a88:	dec00204 	addi	sp,sp,8
   99a8c:	f800283a 	ret

00099a90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   99a90:	defffe04 	addi	sp,sp,-8
   99a94:	dfc00115 	stw	ra,4(sp)
   99a98:	df000015 	stw	fp,0(sp)
   99a9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   99aa0:	01c0fa04 	movi	r7,1000
   99aa4:	01800044 	movi	r6,1
   99aa8:	000b883a 	mov	r5,zero
   99aac:	01000434 	movhi	r4,16
   99ab0:	21040004 	addi	r4,r4,4096
   99ab4:	009a5d80 	call	9a5d8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   99ab8:	01800404 	movi	r6,16
   99abc:	000b883a 	mov	r5,zero
   99ac0:	010002b4 	movhi	r4,10
   99ac4:	21374904 	addi	r4,r4,-8924
   99ac8:	0099c5c0 	call	99c5c <altera_avalon_jtag_uart_init>
   99acc:	010002b4 	movhi	r4,10
   99ad0:	21373f04 	addi	r4,r4,-8964
   99ad4:	0099a240 	call	99a24 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   99ad8:	0001883a 	nop
    I2C_OPENCORES_INIT ( I2C_OPENCORES_0, i2c_opencores_0);
   99adc:	0001883a 	nop
}
   99ae0:	0001883a 	nop
   99ae4:	e037883a 	mov	sp,fp
   99ae8:	dfc00117 	ldw	ra,4(sp)
   99aec:	df000017 	ldw	fp,0(sp)
   99af0:	dec00204 	addi	sp,sp,8
   99af4:	f800283a 	ret

00099af8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   99af8:	defffa04 	addi	sp,sp,-24
   99afc:	dfc00515 	stw	ra,20(sp)
   99b00:	df000415 	stw	fp,16(sp)
   99b04:	df000404 	addi	fp,sp,16
   99b08:	e13ffd15 	stw	r4,-12(fp)
   99b0c:	e17ffe15 	stw	r5,-8(fp)
   99b10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   99b14:	e0bffd17 	ldw	r2,-12(fp)
   99b18:	10800017 	ldw	r2,0(r2)
   99b1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   99b20:	e0bffc17 	ldw	r2,-16(fp)
   99b24:	10c00a04 	addi	r3,r2,40
   99b28:	e0bffd17 	ldw	r2,-12(fp)
   99b2c:	10800217 	ldw	r2,8(r2)
   99b30:	100f883a 	mov	r7,r2
   99b34:	e1bfff17 	ldw	r6,-4(fp)
   99b38:	e17ffe17 	ldw	r5,-8(fp)
   99b3c:	1809883a 	mov	r4,r3
   99b40:	009a1200 	call	9a120 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   99b44:	e037883a 	mov	sp,fp
   99b48:	dfc00117 	ldw	ra,4(sp)
   99b4c:	df000017 	ldw	fp,0(sp)
   99b50:	dec00204 	addi	sp,sp,8
   99b54:	f800283a 	ret

00099b58 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   99b58:	defffa04 	addi	sp,sp,-24
   99b5c:	dfc00515 	stw	ra,20(sp)
   99b60:	df000415 	stw	fp,16(sp)
   99b64:	df000404 	addi	fp,sp,16
   99b68:	e13ffd15 	stw	r4,-12(fp)
   99b6c:	e17ffe15 	stw	r5,-8(fp)
   99b70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   99b74:	e0bffd17 	ldw	r2,-12(fp)
   99b78:	10800017 	ldw	r2,0(r2)
   99b7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   99b80:	e0bffc17 	ldw	r2,-16(fp)
   99b84:	10c00a04 	addi	r3,r2,40
   99b88:	e0bffd17 	ldw	r2,-12(fp)
   99b8c:	10800217 	ldw	r2,8(r2)
   99b90:	100f883a 	mov	r7,r2
   99b94:	e1bfff17 	ldw	r6,-4(fp)
   99b98:	e17ffe17 	ldw	r5,-8(fp)
   99b9c:	1809883a 	mov	r4,r3
   99ba0:	009a33c0 	call	9a33c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   99ba4:	e037883a 	mov	sp,fp
   99ba8:	dfc00117 	ldw	ra,4(sp)
   99bac:	df000017 	ldw	fp,0(sp)
   99bb0:	dec00204 	addi	sp,sp,8
   99bb4:	f800283a 	ret

00099bb8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   99bb8:	defffc04 	addi	sp,sp,-16
   99bbc:	dfc00315 	stw	ra,12(sp)
   99bc0:	df000215 	stw	fp,8(sp)
   99bc4:	df000204 	addi	fp,sp,8
   99bc8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   99bcc:	e0bfff17 	ldw	r2,-4(fp)
   99bd0:	10800017 	ldw	r2,0(r2)
   99bd4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   99bd8:	e0bffe17 	ldw	r2,-8(fp)
   99bdc:	10c00a04 	addi	r3,r2,40
   99be0:	e0bfff17 	ldw	r2,-4(fp)
   99be4:	10800217 	ldw	r2,8(r2)
   99be8:	100b883a 	mov	r5,r2
   99bec:	1809883a 	mov	r4,r3
   99bf0:	0099fc80 	call	99fc8 <altera_avalon_jtag_uart_close>
}
   99bf4:	e037883a 	mov	sp,fp
   99bf8:	dfc00117 	ldw	ra,4(sp)
   99bfc:	df000017 	ldw	fp,0(sp)
   99c00:	dec00204 	addi	sp,sp,8
   99c04:	f800283a 	ret

00099c08 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   99c08:	defffa04 	addi	sp,sp,-24
   99c0c:	dfc00515 	stw	ra,20(sp)
   99c10:	df000415 	stw	fp,16(sp)
   99c14:	df000404 	addi	fp,sp,16
   99c18:	e13ffd15 	stw	r4,-12(fp)
   99c1c:	e17ffe15 	stw	r5,-8(fp)
   99c20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   99c24:	e0bffd17 	ldw	r2,-12(fp)
   99c28:	10800017 	ldw	r2,0(r2)
   99c2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   99c30:	e0bffc17 	ldw	r2,-16(fp)
   99c34:	10800a04 	addi	r2,r2,40
   99c38:	e1bfff17 	ldw	r6,-4(fp)
   99c3c:	e17ffe17 	ldw	r5,-8(fp)
   99c40:	1009883a 	mov	r4,r2
   99c44:	009a0300 	call	9a030 <altera_avalon_jtag_uart_ioctl>
}
   99c48:	e037883a 	mov	sp,fp
   99c4c:	dfc00117 	ldw	ra,4(sp)
   99c50:	df000017 	ldw	fp,0(sp)
   99c54:	dec00204 	addi	sp,sp,8
   99c58:	f800283a 	ret

00099c5c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   99c5c:	defffa04 	addi	sp,sp,-24
   99c60:	dfc00515 	stw	ra,20(sp)
   99c64:	df000415 	stw	fp,16(sp)
   99c68:	df000404 	addi	fp,sp,16
   99c6c:	e13ffd15 	stw	r4,-12(fp)
   99c70:	e17ffe15 	stw	r5,-8(fp)
   99c74:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   99c78:	e0bffd17 	ldw	r2,-12(fp)
   99c7c:	00c00044 	movi	r3,1
   99c80:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   99c84:	e0bffd17 	ldw	r2,-12(fp)
   99c88:	10800017 	ldw	r2,0(r2)
   99c8c:	10800104 	addi	r2,r2,4
   99c90:	1007883a 	mov	r3,r2
   99c94:	e0bffd17 	ldw	r2,-12(fp)
   99c98:	10800817 	ldw	r2,32(r2)
   99c9c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   99ca0:	e0bffe17 	ldw	r2,-8(fp)
   99ca4:	e0ffff17 	ldw	r3,-4(fp)
   99ca8:	d8000015 	stw	zero,0(sp)
   99cac:	e1fffd17 	ldw	r7,-12(fp)
   99cb0:	018002b4 	movhi	r6,10
   99cb4:	31a74704 	addi	r6,r6,-25316
   99cb8:	180b883a 	mov	r5,r3
   99cbc:	1009883a 	mov	r4,r2
   99cc0:	009aacc0 	call	9aacc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   99cc4:	e0bffd17 	ldw	r2,-12(fp)
   99cc8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   99ccc:	e0bffd17 	ldw	r2,-12(fp)
   99cd0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   99cd4:	d0e9af17 	ldw	r3,-22852(gp)
   99cd8:	e1fffd17 	ldw	r7,-12(fp)
   99cdc:	018002b4 	movhi	r6,10
   99ce0:	31a7ca04 	addi	r6,r6,-24792
   99ce4:	180b883a 	mov	r5,r3
   99ce8:	1009883a 	mov	r4,r2
   99cec:	009a6540 	call	9a654 <alt_alarm_start>
   99cf0:	1000040e 	bge	r2,zero,99d04 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   99cf4:	e0fffd17 	ldw	r3,-12(fp)
   99cf8:	00a00034 	movhi	r2,32768
   99cfc:	10bfffc4 	addi	r2,r2,-1
   99d00:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   99d04:	0001883a 	nop
   99d08:	e037883a 	mov	sp,fp
   99d0c:	dfc00117 	ldw	ra,4(sp)
   99d10:	df000017 	ldw	fp,0(sp)
   99d14:	dec00204 	addi	sp,sp,8
   99d18:	f800283a 	ret

00099d1c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   99d1c:	defff804 	addi	sp,sp,-32
   99d20:	df000715 	stw	fp,28(sp)
   99d24:	df000704 	addi	fp,sp,28
   99d28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   99d2c:	e0bfff17 	ldw	r2,-4(fp)
   99d30:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   99d34:	e0bffb17 	ldw	r2,-20(fp)
   99d38:	10800017 	ldw	r2,0(r2)
   99d3c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   99d40:	e0bffc17 	ldw	r2,-16(fp)
   99d44:	10800104 	addi	r2,r2,4
   99d48:	10800037 	ldwio	r2,0(r2)
   99d4c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   99d50:	e0bffd17 	ldw	r2,-12(fp)
   99d54:	1080c00c 	andi	r2,r2,768
   99d58:	10006d26 	beq	r2,zero,99f10 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   99d5c:	e0bffd17 	ldw	r2,-12(fp)
   99d60:	1080400c 	andi	r2,r2,256
   99d64:	10003526 	beq	r2,zero,99e3c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   99d68:	00800074 	movhi	r2,1
   99d6c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   99d70:	e0bffb17 	ldw	r2,-20(fp)
   99d74:	10800a17 	ldw	r2,40(r2)
   99d78:	10800044 	addi	r2,r2,1
   99d7c:	1081ffcc 	andi	r2,r2,2047
   99d80:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   99d84:	e0bffb17 	ldw	r2,-20(fp)
   99d88:	10c00b17 	ldw	r3,44(r2)
   99d8c:	e0bffe17 	ldw	r2,-8(fp)
   99d90:	18801526 	beq	r3,r2,99de8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   99d94:	e0bffc17 	ldw	r2,-16(fp)
   99d98:	10800037 	ldwio	r2,0(r2)
   99d9c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   99da0:	e0bff917 	ldw	r2,-28(fp)
   99da4:	10a0000c 	andi	r2,r2,32768
   99da8:	10001126 	beq	r2,zero,99df0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   99dac:	e0bffb17 	ldw	r2,-20(fp)
   99db0:	10800a17 	ldw	r2,40(r2)
   99db4:	e0fff917 	ldw	r3,-28(fp)
   99db8:	1809883a 	mov	r4,r3
   99dbc:	e0fffb17 	ldw	r3,-20(fp)
   99dc0:	1885883a 	add	r2,r3,r2
   99dc4:	10800e04 	addi	r2,r2,56
   99dc8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   99dcc:	e0bffb17 	ldw	r2,-20(fp)
   99dd0:	10800a17 	ldw	r2,40(r2)
   99dd4:	10800044 	addi	r2,r2,1
   99dd8:	10c1ffcc 	andi	r3,r2,2047
   99ddc:	e0bffb17 	ldw	r2,-20(fp)
   99de0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   99de4:	003fe206 	br	99d70 <__alt_data_end+0xfffc9eb0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   99de8:	0001883a 	nop
   99dec:	00000106 	br	99df4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   99df0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   99df4:	e0bff917 	ldw	r2,-28(fp)
   99df8:	10bfffec 	andhi	r2,r2,65535
   99dfc:	10000f26 	beq	r2,zero,99e3c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   99e00:	e0bffb17 	ldw	r2,-20(fp)
   99e04:	10c00817 	ldw	r3,32(r2)
   99e08:	00bfff84 	movi	r2,-2
   99e0c:	1886703a 	and	r3,r3,r2
   99e10:	e0bffb17 	ldw	r2,-20(fp)
   99e14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   99e18:	e0bffc17 	ldw	r2,-16(fp)
   99e1c:	10800104 	addi	r2,r2,4
   99e20:	1007883a 	mov	r3,r2
   99e24:	e0bffb17 	ldw	r2,-20(fp)
   99e28:	10800817 	ldw	r2,32(r2)
   99e2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   99e30:	e0bffc17 	ldw	r2,-16(fp)
   99e34:	10800104 	addi	r2,r2,4
   99e38:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   99e3c:	e0bffd17 	ldw	r2,-12(fp)
   99e40:	1080800c 	andi	r2,r2,512
   99e44:	103fbe26 	beq	r2,zero,99d40 <__alt_data_end+0xfffc9e80>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   99e48:	e0bffd17 	ldw	r2,-12(fp)
   99e4c:	1004d43a 	srli	r2,r2,16
   99e50:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   99e54:	00001406 	br	99ea8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   99e58:	e0bffc17 	ldw	r2,-16(fp)
   99e5c:	e0fffb17 	ldw	r3,-20(fp)
   99e60:	18c00d17 	ldw	r3,52(r3)
   99e64:	e13ffb17 	ldw	r4,-20(fp)
   99e68:	20c7883a 	add	r3,r4,r3
   99e6c:	18c20e04 	addi	r3,r3,2104
   99e70:	18c00003 	ldbu	r3,0(r3)
   99e74:	18c03fcc 	andi	r3,r3,255
   99e78:	18c0201c 	xori	r3,r3,128
   99e7c:	18ffe004 	addi	r3,r3,-128
   99e80:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   99e84:	e0bffb17 	ldw	r2,-20(fp)
   99e88:	10800d17 	ldw	r2,52(r2)
   99e8c:	10800044 	addi	r2,r2,1
   99e90:	10c1ffcc 	andi	r3,r2,2047
   99e94:	e0bffb17 	ldw	r2,-20(fp)
   99e98:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   99e9c:	e0bffa17 	ldw	r2,-24(fp)
   99ea0:	10bfffc4 	addi	r2,r2,-1
   99ea4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   99ea8:	e0bffa17 	ldw	r2,-24(fp)
   99eac:	10000526 	beq	r2,zero,99ec4 <altera_avalon_jtag_uart_irq+0x1a8>
   99eb0:	e0bffb17 	ldw	r2,-20(fp)
   99eb4:	10c00d17 	ldw	r3,52(r2)
   99eb8:	e0bffb17 	ldw	r2,-20(fp)
   99ebc:	10800c17 	ldw	r2,48(r2)
   99ec0:	18bfe51e 	bne	r3,r2,99e58 <__alt_data_end+0xfffc9f98>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   99ec4:	e0bffa17 	ldw	r2,-24(fp)
   99ec8:	103f9d26 	beq	r2,zero,99d40 <__alt_data_end+0xfffc9e80>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   99ecc:	e0bffb17 	ldw	r2,-20(fp)
   99ed0:	10c00817 	ldw	r3,32(r2)
   99ed4:	00bfff44 	movi	r2,-3
   99ed8:	1886703a 	and	r3,r3,r2
   99edc:	e0bffb17 	ldw	r2,-20(fp)
   99ee0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   99ee4:	e0bffb17 	ldw	r2,-20(fp)
   99ee8:	10800017 	ldw	r2,0(r2)
   99eec:	10800104 	addi	r2,r2,4
   99ef0:	1007883a 	mov	r3,r2
   99ef4:	e0bffb17 	ldw	r2,-20(fp)
   99ef8:	10800817 	ldw	r2,32(r2)
   99efc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   99f00:	e0bffc17 	ldw	r2,-16(fp)
   99f04:	10800104 	addi	r2,r2,4
   99f08:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   99f0c:	003f8c06 	br	99d40 <__alt_data_end+0xfffc9e80>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   99f10:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   99f14:	0001883a 	nop
   99f18:	e037883a 	mov	sp,fp
   99f1c:	df000017 	ldw	fp,0(sp)
   99f20:	dec00104 	addi	sp,sp,4
   99f24:	f800283a 	ret

00099f28 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   99f28:	defff804 	addi	sp,sp,-32
   99f2c:	df000715 	stw	fp,28(sp)
   99f30:	df000704 	addi	fp,sp,28
   99f34:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   99f38:	e0bffb17 	ldw	r2,-20(fp)
   99f3c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   99f40:	e0bff917 	ldw	r2,-28(fp)
   99f44:	10800017 	ldw	r2,0(r2)
   99f48:	10800104 	addi	r2,r2,4
   99f4c:	10800037 	ldwio	r2,0(r2)
   99f50:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   99f54:	e0bffa17 	ldw	r2,-24(fp)
   99f58:	1081000c 	andi	r2,r2,1024
   99f5c:	10000b26 	beq	r2,zero,99f8c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   99f60:	e0bff917 	ldw	r2,-28(fp)
   99f64:	10800017 	ldw	r2,0(r2)
   99f68:	10800104 	addi	r2,r2,4
   99f6c:	1007883a 	mov	r3,r2
   99f70:	e0bff917 	ldw	r2,-28(fp)
   99f74:	10800817 	ldw	r2,32(r2)
   99f78:	10810014 	ori	r2,r2,1024
   99f7c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   99f80:	e0bff917 	ldw	r2,-28(fp)
   99f84:	10000915 	stw	zero,36(r2)
   99f88:	00000a06 	br	99fb4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   99f8c:	e0bff917 	ldw	r2,-28(fp)
   99f90:	10c00917 	ldw	r3,36(r2)
   99f94:	00a00034 	movhi	r2,32768
   99f98:	10bfff04 	addi	r2,r2,-4
   99f9c:	10c00536 	bltu	r2,r3,99fb4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   99fa0:	e0bff917 	ldw	r2,-28(fp)
   99fa4:	10800917 	ldw	r2,36(r2)
   99fa8:	10c00044 	addi	r3,r2,1
   99fac:	e0bff917 	ldw	r2,-28(fp)
   99fb0:	10c00915 	stw	r3,36(r2)
   99fb4:	d0a9af17 	ldw	r2,-22852(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   99fb8:	e037883a 	mov	sp,fp
   99fbc:	df000017 	ldw	fp,0(sp)
   99fc0:	dec00104 	addi	sp,sp,4
   99fc4:	f800283a 	ret

00099fc8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   99fc8:	defffd04 	addi	sp,sp,-12
   99fcc:	df000215 	stw	fp,8(sp)
   99fd0:	df000204 	addi	fp,sp,8
   99fd4:	e13ffe15 	stw	r4,-8(fp)
   99fd8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   99fdc:	00000506 	br	99ff4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   99fe0:	e0bfff17 	ldw	r2,-4(fp)
   99fe4:	1090000c 	andi	r2,r2,16384
   99fe8:	10000226 	beq	r2,zero,99ff4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   99fec:	00bffd44 	movi	r2,-11
   99ff0:	00000b06 	br	9a020 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   99ff4:	e0bffe17 	ldw	r2,-8(fp)
   99ff8:	10c00d17 	ldw	r3,52(r2)
   99ffc:	e0bffe17 	ldw	r2,-8(fp)
   9a000:	10800c17 	ldw	r2,48(r2)
   9a004:	18800526 	beq	r3,r2,9a01c <altera_avalon_jtag_uart_close+0x54>
   9a008:	e0bffe17 	ldw	r2,-8(fp)
   9a00c:	10c00917 	ldw	r3,36(r2)
   9a010:	e0bffe17 	ldw	r2,-8(fp)
   9a014:	10800117 	ldw	r2,4(r2)
   9a018:	18bff136 	bltu	r3,r2,99fe0 <__alt_data_end+0xfffca120>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   9a01c:	0005883a 	mov	r2,zero
}
   9a020:	e037883a 	mov	sp,fp
   9a024:	df000017 	ldw	fp,0(sp)
   9a028:	dec00104 	addi	sp,sp,4
   9a02c:	f800283a 	ret

0009a030 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   9a030:	defffa04 	addi	sp,sp,-24
   9a034:	df000515 	stw	fp,20(sp)
   9a038:	df000504 	addi	fp,sp,20
   9a03c:	e13ffd15 	stw	r4,-12(fp)
   9a040:	e17ffe15 	stw	r5,-8(fp)
   9a044:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   9a048:	00bff9c4 	movi	r2,-25
   9a04c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   9a050:	e0bffe17 	ldw	r2,-8(fp)
   9a054:	10da8060 	cmpeqi	r3,r2,27137
   9a058:	1800031e 	bne	r3,zero,9a068 <altera_avalon_jtag_uart_ioctl+0x38>
   9a05c:	109a80a0 	cmpeqi	r2,r2,27138
   9a060:	1000181e 	bne	r2,zero,9a0c4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   9a064:	00002906 	br	9a10c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   9a068:	e0bffd17 	ldw	r2,-12(fp)
   9a06c:	10c00117 	ldw	r3,4(r2)
   9a070:	00a00034 	movhi	r2,32768
   9a074:	10bfffc4 	addi	r2,r2,-1
   9a078:	18802126 	beq	r3,r2,9a100 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   9a07c:	e0bfff17 	ldw	r2,-4(fp)
   9a080:	10800017 	ldw	r2,0(r2)
   9a084:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   9a088:	e0bffc17 	ldw	r2,-16(fp)
   9a08c:	10800090 	cmplti	r2,r2,2
   9a090:	1000061e 	bne	r2,zero,9a0ac <altera_avalon_jtag_uart_ioctl+0x7c>
   9a094:	e0fffc17 	ldw	r3,-16(fp)
   9a098:	00a00034 	movhi	r2,32768
   9a09c:	10bfffc4 	addi	r2,r2,-1
   9a0a0:	18800226 	beq	r3,r2,9a0ac <altera_avalon_jtag_uart_ioctl+0x7c>
   9a0a4:	e0bffc17 	ldw	r2,-16(fp)
   9a0a8:	00000206 	br	9a0b4 <altera_avalon_jtag_uart_ioctl+0x84>
   9a0ac:	00a00034 	movhi	r2,32768
   9a0b0:	10bfff84 	addi	r2,r2,-2
   9a0b4:	e0fffd17 	ldw	r3,-12(fp)
   9a0b8:	18800115 	stw	r2,4(r3)
      rc = 0;
   9a0bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   9a0c0:	00000f06 	br	9a100 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   9a0c4:	e0bffd17 	ldw	r2,-12(fp)
   9a0c8:	10c00117 	ldw	r3,4(r2)
   9a0cc:	00a00034 	movhi	r2,32768
   9a0d0:	10bfffc4 	addi	r2,r2,-1
   9a0d4:	18800c26 	beq	r3,r2,9a108 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   9a0d8:	e0bffd17 	ldw	r2,-12(fp)
   9a0dc:	10c00917 	ldw	r3,36(r2)
   9a0e0:	e0bffd17 	ldw	r2,-12(fp)
   9a0e4:	10800117 	ldw	r2,4(r2)
   9a0e8:	1885803a 	cmpltu	r2,r3,r2
   9a0ec:	10c03fcc 	andi	r3,r2,255
   9a0f0:	e0bfff17 	ldw	r2,-4(fp)
   9a0f4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   9a0f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   9a0fc:	00000206 	br	9a108 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   9a100:	0001883a 	nop
   9a104:	00000106 	br	9a10c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   9a108:	0001883a 	nop

  default:
    break;
  }

  return rc;
   9a10c:	e0bffb17 	ldw	r2,-20(fp)
}
   9a110:	e037883a 	mov	sp,fp
   9a114:	df000017 	ldw	fp,0(sp)
   9a118:	dec00104 	addi	sp,sp,4
   9a11c:	f800283a 	ret

0009a120 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   9a120:	defff304 	addi	sp,sp,-52
   9a124:	dfc00c15 	stw	ra,48(sp)
   9a128:	df000b15 	stw	fp,44(sp)
   9a12c:	df000b04 	addi	fp,sp,44
   9a130:	e13ffc15 	stw	r4,-16(fp)
   9a134:	e17ffd15 	stw	r5,-12(fp)
   9a138:	e1bffe15 	stw	r6,-8(fp)
   9a13c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   9a140:	e0bffd17 	ldw	r2,-12(fp)
   9a144:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   9a148:	00004706 	br	9a268 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   9a14c:	e0bffc17 	ldw	r2,-16(fp)
   9a150:	10800a17 	ldw	r2,40(r2)
   9a154:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   9a158:	e0bffc17 	ldw	r2,-16(fp)
   9a15c:	10800b17 	ldw	r2,44(r2)
   9a160:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   9a164:	e0fff717 	ldw	r3,-36(fp)
   9a168:	e0bff817 	ldw	r2,-32(fp)
   9a16c:	18800536 	bltu	r3,r2,9a184 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   9a170:	e0fff717 	ldw	r3,-36(fp)
   9a174:	e0bff817 	ldw	r2,-32(fp)
   9a178:	1885c83a 	sub	r2,r3,r2
   9a17c:	e0bff615 	stw	r2,-40(fp)
   9a180:	00000406 	br	9a194 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   9a184:	00c20004 	movi	r3,2048
   9a188:	e0bff817 	ldw	r2,-32(fp)
   9a18c:	1885c83a 	sub	r2,r3,r2
   9a190:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   9a194:	e0bff617 	ldw	r2,-40(fp)
   9a198:	10001e26 	beq	r2,zero,9a214 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   9a19c:	e0fffe17 	ldw	r3,-8(fp)
   9a1a0:	e0bff617 	ldw	r2,-40(fp)
   9a1a4:	1880022e 	bgeu	r3,r2,9a1b0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   9a1a8:	e0bffe17 	ldw	r2,-8(fp)
   9a1ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   9a1b0:	e0bffc17 	ldw	r2,-16(fp)
   9a1b4:	10c00e04 	addi	r3,r2,56
   9a1b8:	e0bff817 	ldw	r2,-32(fp)
   9a1bc:	1885883a 	add	r2,r3,r2
   9a1c0:	e1bff617 	ldw	r6,-40(fp)
   9a1c4:	100b883a 	mov	r5,r2
   9a1c8:	e13ff517 	ldw	r4,-44(fp)
   9a1cc:	0088e480 	call	88e48 <memcpy>
      ptr   += n;
   9a1d0:	e0fff517 	ldw	r3,-44(fp)
   9a1d4:	e0bff617 	ldw	r2,-40(fp)
   9a1d8:	1885883a 	add	r2,r3,r2
   9a1dc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   9a1e0:	e0fffe17 	ldw	r3,-8(fp)
   9a1e4:	e0bff617 	ldw	r2,-40(fp)
   9a1e8:	1885c83a 	sub	r2,r3,r2
   9a1ec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9a1f0:	e0fff817 	ldw	r3,-32(fp)
   9a1f4:	e0bff617 	ldw	r2,-40(fp)
   9a1f8:	1885883a 	add	r2,r3,r2
   9a1fc:	10c1ffcc 	andi	r3,r2,2047
   9a200:	e0bffc17 	ldw	r2,-16(fp)
   9a204:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   9a208:	e0bffe17 	ldw	r2,-8(fp)
   9a20c:	00bfcf16 	blt	zero,r2,9a14c <__alt_data_end+0xfffca28c>
   9a210:	00000106 	br	9a218 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   9a214:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   9a218:	e0fff517 	ldw	r3,-44(fp)
   9a21c:	e0bffd17 	ldw	r2,-12(fp)
   9a220:	1880141e 	bne	r3,r2,9a274 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   9a224:	e0bfff17 	ldw	r2,-4(fp)
   9a228:	1090000c 	andi	r2,r2,16384
   9a22c:	1000131e 	bne	r2,zero,9a27c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   9a230:	0001883a 	nop
   9a234:	e0bffc17 	ldw	r2,-16(fp)
   9a238:	10c00a17 	ldw	r3,40(r2)
   9a23c:	e0bff717 	ldw	r2,-36(fp)
   9a240:	1880051e 	bne	r3,r2,9a258 <altera_avalon_jtag_uart_read+0x138>
   9a244:	e0bffc17 	ldw	r2,-16(fp)
   9a248:	10c00917 	ldw	r3,36(r2)
   9a24c:	e0bffc17 	ldw	r2,-16(fp)
   9a250:	10800117 	ldw	r2,4(r2)
   9a254:	18bff736 	bltu	r3,r2,9a234 <__alt_data_end+0xfffca374>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   9a258:	e0bffc17 	ldw	r2,-16(fp)
   9a25c:	10c00a17 	ldw	r3,40(r2)
   9a260:	e0bff717 	ldw	r2,-36(fp)
   9a264:	18800726 	beq	r3,r2,9a284 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   9a268:	e0bffe17 	ldw	r2,-8(fp)
   9a26c:	00bfb716 	blt	zero,r2,9a14c <__alt_data_end+0xfffca28c>
   9a270:	00000506 	br	9a288 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   9a274:	0001883a 	nop
   9a278:	00000306 	br	9a288 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   9a27c:	0001883a 	nop
   9a280:	00000106 	br	9a288 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   9a284:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   9a288:	e0fff517 	ldw	r3,-44(fp)
   9a28c:	e0bffd17 	ldw	r2,-12(fp)
   9a290:	18801826 	beq	r3,r2,9a2f4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9a294:	0005303a 	rdctl	r2,status
   9a298:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9a29c:	e0fffb17 	ldw	r3,-20(fp)
   9a2a0:	00bfff84 	movi	r2,-2
   9a2a4:	1884703a 	and	r2,r3,r2
   9a2a8:	1001703a 	wrctl	status,r2
  
  return context;
   9a2ac:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   9a2b0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9a2b4:	e0bffc17 	ldw	r2,-16(fp)
   9a2b8:	10800817 	ldw	r2,32(r2)
   9a2bc:	10c00054 	ori	r3,r2,1
   9a2c0:	e0bffc17 	ldw	r2,-16(fp)
   9a2c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9a2c8:	e0bffc17 	ldw	r2,-16(fp)
   9a2cc:	10800017 	ldw	r2,0(r2)
   9a2d0:	10800104 	addi	r2,r2,4
   9a2d4:	1007883a 	mov	r3,r2
   9a2d8:	e0bffc17 	ldw	r2,-16(fp)
   9a2dc:	10800817 	ldw	r2,32(r2)
   9a2e0:	18800035 	stwio	r2,0(r3)
   9a2e4:	e0bffa17 	ldw	r2,-24(fp)
   9a2e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9a2ec:	e0bff917 	ldw	r2,-28(fp)
   9a2f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   9a2f4:	e0fff517 	ldw	r3,-44(fp)
   9a2f8:	e0bffd17 	ldw	r2,-12(fp)
   9a2fc:	18800426 	beq	r3,r2,9a310 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   9a300:	e0fff517 	ldw	r3,-44(fp)
   9a304:	e0bffd17 	ldw	r2,-12(fp)
   9a308:	1885c83a 	sub	r2,r3,r2
   9a30c:	00000606 	br	9a328 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   9a310:	e0bfff17 	ldw	r2,-4(fp)
   9a314:	1090000c 	andi	r2,r2,16384
   9a318:	10000226 	beq	r2,zero,9a324 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   9a31c:	00bffd44 	movi	r2,-11
   9a320:	00000106 	br	9a328 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   9a324:	00bffec4 	movi	r2,-5
}
   9a328:	e037883a 	mov	sp,fp
   9a32c:	dfc00117 	ldw	ra,4(sp)
   9a330:	df000017 	ldw	fp,0(sp)
   9a334:	dec00204 	addi	sp,sp,8
   9a338:	f800283a 	ret

0009a33c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   9a33c:	defff304 	addi	sp,sp,-52
   9a340:	dfc00c15 	stw	ra,48(sp)
   9a344:	df000b15 	stw	fp,44(sp)
   9a348:	df000b04 	addi	fp,sp,44
   9a34c:	e13ffc15 	stw	r4,-16(fp)
   9a350:	e17ffd15 	stw	r5,-12(fp)
   9a354:	e1bffe15 	stw	r6,-8(fp)
   9a358:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   9a35c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   9a360:	e0bffd17 	ldw	r2,-12(fp)
   9a364:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   9a368:	00003706 	br	9a448 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   9a36c:	e0bffc17 	ldw	r2,-16(fp)
   9a370:	10800c17 	ldw	r2,48(r2)
   9a374:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   9a378:	e0bffc17 	ldw	r2,-16(fp)
   9a37c:	10800d17 	ldw	r2,52(r2)
   9a380:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   9a384:	e0fff917 	ldw	r3,-28(fp)
   9a388:	e0bff517 	ldw	r2,-44(fp)
   9a38c:	1880062e 	bgeu	r3,r2,9a3a8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   9a390:	e0fff517 	ldw	r3,-44(fp)
   9a394:	e0bff917 	ldw	r2,-28(fp)
   9a398:	1885c83a 	sub	r2,r3,r2
   9a39c:	10bfffc4 	addi	r2,r2,-1
   9a3a0:	e0bff615 	stw	r2,-40(fp)
   9a3a4:	00000b06 	br	9a3d4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   9a3a8:	e0bff517 	ldw	r2,-44(fp)
   9a3ac:	10000526 	beq	r2,zero,9a3c4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   9a3b0:	00c20004 	movi	r3,2048
   9a3b4:	e0bff917 	ldw	r2,-28(fp)
   9a3b8:	1885c83a 	sub	r2,r3,r2
   9a3bc:	e0bff615 	stw	r2,-40(fp)
   9a3c0:	00000406 	br	9a3d4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   9a3c4:	00c1ffc4 	movi	r3,2047
   9a3c8:	e0bff917 	ldw	r2,-28(fp)
   9a3cc:	1885c83a 	sub	r2,r3,r2
   9a3d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   9a3d4:	e0bff617 	ldw	r2,-40(fp)
   9a3d8:	10001e26 	beq	r2,zero,9a454 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   9a3dc:	e0fffe17 	ldw	r3,-8(fp)
   9a3e0:	e0bff617 	ldw	r2,-40(fp)
   9a3e4:	1880022e 	bgeu	r3,r2,9a3f0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   9a3e8:	e0bffe17 	ldw	r2,-8(fp)
   9a3ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   9a3f0:	e0bffc17 	ldw	r2,-16(fp)
   9a3f4:	10c20e04 	addi	r3,r2,2104
   9a3f8:	e0bff917 	ldw	r2,-28(fp)
   9a3fc:	1885883a 	add	r2,r3,r2
   9a400:	e1bff617 	ldw	r6,-40(fp)
   9a404:	e17ffd17 	ldw	r5,-12(fp)
   9a408:	1009883a 	mov	r4,r2
   9a40c:	0088e480 	call	88e48 <memcpy>
      ptr   += n;
   9a410:	e0fffd17 	ldw	r3,-12(fp)
   9a414:	e0bff617 	ldw	r2,-40(fp)
   9a418:	1885883a 	add	r2,r3,r2
   9a41c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   9a420:	e0fffe17 	ldw	r3,-8(fp)
   9a424:	e0bff617 	ldw	r2,-40(fp)
   9a428:	1885c83a 	sub	r2,r3,r2
   9a42c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9a430:	e0fff917 	ldw	r3,-28(fp)
   9a434:	e0bff617 	ldw	r2,-40(fp)
   9a438:	1885883a 	add	r2,r3,r2
   9a43c:	10c1ffcc 	andi	r3,r2,2047
   9a440:	e0bffc17 	ldw	r2,-16(fp)
   9a444:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   9a448:	e0bffe17 	ldw	r2,-8(fp)
   9a44c:	00bfc716 	blt	zero,r2,9a36c <__alt_data_end+0xfffca4ac>
   9a450:	00000106 	br	9a458 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   9a454:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9a458:	0005303a 	rdctl	r2,status
   9a45c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9a460:	e0fffb17 	ldw	r3,-20(fp)
   9a464:	00bfff84 	movi	r2,-2
   9a468:	1884703a 	and	r2,r3,r2
   9a46c:	1001703a 	wrctl	status,r2
  
  return context;
   9a470:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   9a474:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   9a478:	e0bffc17 	ldw	r2,-16(fp)
   9a47c:	10800817 	ldw	r2,32(r2)
   9a480:	10c00094 	ori	r3,r2,2
   9a484:	e0bffc17 	ldw	r2,-16(fp)
   9a488:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9a48c:	e0bffc17 	ldw	r2,-16(fp)
   9a490:	10800017 	ldw	r2,0(r2)
   9a494:	10800104 	addi	r2,r2,4
   9a498:	1007883a 	mov	r3,r2
   9a49c:	e0bffc17 	ldw	r2,-16(fp)
   9a4a0:	10800817 	ldw	r2,32(r2)
   9a4a4:	18800035 	stwio	r2,0(r3)
   9a4a8:	e0bffa17 	ldw	r2,-24(fp)
   9a4ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9a4b0:	e0bff817 	ldw	r2,-32(fp)
   9a4b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   9a4b8:	e0bffe17 	ldw	r2,-8(fp)
   9a4bc:	0080100e 	bge	zero,r2,9a500 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   9a4c0:	e0bfff17 	ldw	r2,-4(fp)
   9a4c4:	1090000c 	andi	r2,r2,16384
   9a4c8:	1000101e 	bne	r2,zero,9a50c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   9a4cc:	0001883a 	nop
   9a4d0:	e0bffc17 	ldw	r2,-16(fp)
   9a4d4:	10c00d17 	ldw	r3,52(r2)
   9a4d8:	e0bff517 	ldw	r2,-44(fp)
   9a4dc:	1880051e 	bne	r3,r2,9a4f4 <altera_avalon_jtag_uart_write+0x1b8>
   9a4e0:	e0bffc17 	ldw	r2,-16(fp)
   9a4e4:	10c00917 	ldw	r3,36(r2)
   9a4e8:	e0bffc17 	ldw	r2,-16(fp)
   9a4ec:	10800117 	ldw	r2,4(r2)
   9a4f0:	18bff736 	bltu	r3,r2,9a4d0 <__alt_data_end+0xfffca610>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   9a4f4:	e0bffc17 	ldw	r2,-16(fp)
   9a4f8:	10800917 	ldw	r2,36(r2)
   9a4fc:	1000051e 	bne	r2,zero,9a514 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   9a500:	e0bffe17 	ldw	r2,-8(fp)
   9a504:	00bfd016 	blt	zero,r2,9a448 <__alt_data_end+0xfffca588>
   9a508:	00000306 	br	9a518 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   9a50c:	0001883a 	nop
   9a510:	00000106 	br	9a518 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   9a514:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   9a518:	e0fffd17 	ldw	r3,-12(fp)
   9a51c:	e0bff717 	ldw	r2,-36(fp)
   9a520:	18800426 	beq	r3,r2,9a534 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   9a524:	e0fffd17 	ldw	r3,-12(fp)
   9a528:	e0bff717 	ldw	r2,-36(fp)
   9a52c:	1885c83a 	sub	r2,r3,r2
   9a530:	00000606 	br	9a54c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   9a534:	e0bfff17 	ldw	r2,-4(fp)
   9a538:	1090000c 	andi	r2,r2,16384
   9a53c:	10000226 	beq	r2,zero,9a548 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   9a540:	00bffd44 	movi	r2,-11
   9a544:	00000106 	br	9a54c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   9a548:	00bffec4 	movi	r2,-5
}
   9a54c:	e037883a 	mov	sp,fp
   9a550:	dfc00117 	ldw	ra,4(sp)
   9a554:	df000017 	ldw	fp,0(sp)
   9a558:	dec00204 	addi	sp,sp,8
   9a55c:	f800283a 	ret

0009a560 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   9a560:	defffa04 	addi	sp,sp,-24
   9a564:	dfc00515 	stw	ra,20(sp)
   9a568:	df000415 	stw	fp,16(sp)
   9a56c:	df000404 	addi	fp,sp,16
   9a570:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   9a574:	0007883a 	mov	r3,zero
   9a578:	e0bfff17 	ldw	r2,-4(fp)
   9a57c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   9a580:	e0bfff17 	ldw	r2,-4(fp)
   9a584:	10800104 	addi	r2,r2,4
   9a588:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9a58c:	0005303a 	rdctl	r2,status
   9a590:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9a594:	e0fffd17 	ldw	r3,-12(fp)
   9a598:	00bfff84 	movi	r2,-2
   9a59c:	1884703a 	and	r2,r3,r2
   9a5a0:	1001703a 	wrctl	status,r2
  
  return context;
   9a5a4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   9a5a8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   9a5ac:	00997b80 	call	997b8 <alt_tick>
   9a5b0:	e0bffc17 	ldw	r2,-16(fp)
   9a5b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9a5b8:	e0bffe17 	ldw	r2,-8(fp)
   9a5bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   9a5c0:	0001883a 	nop
   9a5c4:	e037883a 	mov	sp,fp
   9a5c8:	dfc00117 	ldw	ra,4(sp)
   9a5cc:	df000017 	ldw	fp,0(sp)
   9a5d0:	dec00204 	addi	sp,sp,8
   9a5d4:	f800283a 	ret

0009a5d8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   9a5d8:	defff804 	addi	sp,sp,-32
   9a5dc:	dfc00715 	stw	ra,28(sp)
   9a5e0:	df000615 	stw	fp,24(sp)
   9a5e4:	df000604 	addi	fp,sp,24
   9a5e8:	e13ffc15 	stw	r4,-16(fp)
   9a5ec:	e17ffd15 	stw	r5,-12(fp)
   9a5f0:	e1bffe15 	stw	r6,-8(fp)
   9a5f4:	e1ffff15 	stw	r7,-4(fp)
   9a5f8:	e0bfff17 	ldw	r2,-4(fp)
   9a5fc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   9a600:	d0a9af17 	ldw	r2,-22852(gp)
   9a604:	1000021e 	bne	r2,zero,9a610 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   9a608:	e0bffb17 	ldw	r2,-20(fp)
   9a60c:	d0a9af15 	stw	r2,-22852(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   9a610:	e0bffc17 	ldw	r2,-16(fp)
   9a614:	10800104 	addi	r2,r2,4
   9a618:	00c001c4 	movi	r3,7
   9a61c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   9a620:	d8000015 	stw	zero,0(sp)
   9a624:	e1fffc17 	ldw	r7,-16(fp)
   9a628:	018002b4 	movhi	r6,10
   9a62c:	31a95804 	addi	r6,r6,-23200
   9a630:	e17ffe17 	ldw	r5,-8(fp)
   9a634:	e13ffd17 	ldw	r4,-12(fp)
   9a638:	009aacc0 	call	9aacc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   9a63c:	0001883a 	nop
   9a640:	e037883a 	mov	sp,fp
   9a644:	dfc00117 	ldw	ra,4(sp)
   9a648:	df000017 	ldw	fp,0(sp)
   9a64c:	dec00204 	addi	sp,sp,8
   9a650:	f800283a 	ret

0009a654 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   9a654:	defff504 	addi	sp,sp,-44
   9a658:	df000a15 	stw	fp,40(sp)
   9a65c:	df000a04 	addi	fp,sp,40
   9a660:	e13ffc15 	stw	r4,-16(fp)
   9a664:	e17ffd15 	stw	r5,-12(fp)
   9a668:	e1bffe15 	stw	r6,-8(fp)
   9a66c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   9a670:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   9a674:	d0a9af17 	ldw	r2,-22852(gp)
  
  if (alt_ticks_per_second ())
   9a678:	10003c26 	beq	r2,zero,9a76c <alt_alarm_start+0x118>
  {
    if (alarm)
   9a67c:	e0bffc17 	ldw	r2,-16(fp)
   9a680:	10003826 	beq	r2,zero,9a764 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   9a684:	e0bffc17 	ldw	r2,-16(fp)
   9a688:	e0fffe17 	ldw	r3,-8(fp)
   9a68c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   9a690:	e0bffc17 	ldw	r2,-16(fp)
   9a694:	e0ffff17 	ldw	r3,-4(fp)
   9a698:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9a69c:	0005303a 	rdctl	r2,status
   9a6a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9a6a4:	e0fff917 	ldw	r3,-28(fp)
   9a6a8:	00bfff84 	movi	r2,-2
   9a6ac:	1884703a 	and	r2,r3,r2
   9a6b0:	1001703a 	wrctl	status,r2
  
  return context;
   9a6b4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   9a6b8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   9a6bc:	d0a9b017 	ldw	r2,-22848(gp)
      
      current_nticks = alt_nticks();
   9a6c0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   9a6c4:	e0fffd17 	ldw	r3,-12(fp)
   9a6c8:	e0bff617 	ldw	r2,-40(fp)
   9a6cc:	1885883a 	add	r2,r3,r2
   9a6d0:	10c00044 	addi	r3,r2,1
   9a6d4:	e0bffc17 	ldw	r2,-16(fp)
   9a6d8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   9a6dc:	e0bffc17 	ldw	r2,-16(fp)
   9a6e0:	10c00217 	ldw	r3,8(r2)
   9a6e4:	e0bff617 	ldw	r2,-40(fp)
   9a6e8:	1880042e 	bgeu	r3,r2,9a6fc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   9a6ec:	e0bffc17 	ldw	r2,-16(fp)
   9a6f0:	00c00044 	movi	r3,1
   9a6f4:	10c00405 	stb	r3,16(r2)
   9a6f8:	00000206 	br	9a704 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   9a6fc:	e0bffc17 	ldw	r2,-16(fp)
   9a700:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   9a704:	e0bffc17 	ldw	r2,-16(fp)
   9a708:	d0e01104 	addi	r3,gp,-32700
   9a70c:	e0fffa15 	stw	r3,-24(fp)
   9a710:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   9a714:	e0bffb17 	ldw	r2,-20(fp)
   9a718:	e0fffa17 	ldw	r3,-24(fp)
   9a71c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   9a720:	e0bffa17 	ldw	r2,-24(fp)
   9a724:	10c00017 	ldw	r3,0(r2)
   9a728:	e0bffb17 	ldw	r2,-20(fp)
   9a72c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   9a730:	e0bffa17 	ldw	r2,-24(fp)
   9a734:	10800017 	ldw	r2,0(r2)
   9a738:	e0fffb17 	ldw	r3,-20(fp)
   9a73c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   9a740:	e0bffa17 	ldw	r2,-24(fp)
   9a744:	e0fffb17 	ldw	r3,-20(fp)
   9a748:	10c00015 	stw	r3,0(r2)
   9a74c:	e0bff817 	ldw	r2,-32(fp)
   9a750:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9a754:	e0bff717 	ldw	r2,-36(fp)
   9a758:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   9a75c:	0005883a 	mov	r2,zero
   9a760:	00000306 	br	9a770 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   9a764:	00bffa84 	movi	r2,-22
   9a768:	00000106 	br	9a770 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   9a76c:	00bfde84 	movi	r2,-134
  }
}
   9a770:	e037883a 	mov	sp,fp
   9a774:	df000017 	ldw	fp,0(sp)
   9a778:	dec00104 	addi	sp,sp,4
   9a77c:	f800283a 	ret

0009a780 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   9a780:	defffa04 	addi	sp,sp,-24
   9a784:	dfc00515 	stw	ra,20(sp)
   9a788:	df000415 	stw	fp,16(sp)
   9a78c:	df000404 	addi	fp,sp,16
   9a790:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   9a794:	008000c4 	movi	r2,3
   9a798:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   9a79c:	e0fffd17 	ldw	r3,-12(fp)
   9a7a0:	008003f4 	movhi	r2,15
   9a7a4:	10909004 	addi	r2,r2,16960
   9a7a8:	1885383a 	mul	r2,r3,r2
   9a7ac:	100b883a 	mov	r5,r2
   9a7b0:	0100bef4 	movhi	r4,763
   9a7b4:	213c2004 	addi	r4,r4,-3968
   9a7b8:	0088d8c0 	call	88d8c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   9a7bc:	100b883a 	mov	r5,r2
   9a7c0:	01200034 	movhi	r4,32768
   9a7c4:	213fffc4 	addi	r4,r4,-1
   9a7c8:	0088d8c0 	call	88d8c <__udivsi3>
   9a7cc:	100b883a 	mov	r5,r2
   9a7d0:	e13fff17 	ldw	r4,-4(fp)
   9a7d4:	0088d8c0 	call	88d8c <__udivsi3>
   9a7d8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   9a7dc:	e0bffe17 	ldw	r2,-8(fp)
   9a7e0:	10002a26 	beq	r2,zero,9a88c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   9a7e4:	e03ffc15 	stw	zero,-16(fp)
   9a7e8:	00001706 	br	9a848 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   9a7ec:	00a00034 	movhi	r2,32768
   9a7f0:	10bfffc4 	addi	r2,r2,-1
   9a7f4:	10bfffc4 	addi	r2,r2,-1
   9a7f8:	103ffe1e 	bne	r2,zero,9a7f4 <__alt_data_end+0xfffca934>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   9a7fc:	e0fffd17 	ldw	r3,-12(fp)
   9a800:	008003f4 	movhi	r2,15
   9a804:	10909004 	addi	r2,r2,16960
   9a808:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   9a80c:	100b883a 	mov	r5,r2
   9a810:	0100bef4 	movhi	r4,763
   9a814:	213c2004 	addi	r4,r4,-3968
   9a818:	0088d8c0 	call	88d8c <__udivsi3>
   9a81c:	100b883a 	mov	r5,r2
   9a820:	01200034 	movhi	r4,32768
   9a824:	213fffc4 	addi	r4,r4,-1
   9a828:	0088d8c0 	call	88d8c <__udivsi3>
   9a82c:	1007883a 	mov	r3,r2
   9a830:	e0bfff17 	ldw	r2,-4(fp)
   9a834:	10c5c83a 	sub	r2,r2,r3
   9a838:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   9a83c:	e0bffc17 	ldw	r2,-16(fp)
   9a840:	10800044 	addi	r2,r2,1
   9a844:	e0bffc15 	stw	r2,-16(fp)
   9a848:	e0fffc17 	ldw	r3,-16(fp)
   9a84c:	e0bffe17 	ldw	r2,-8(fp)
   9a850:	18bfe616 	blt	r3,r2,9a7ec <__alt_data_end+0xfffca92c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   9a854:	e0fffd17 	ldw	r3,-12(fp)
   9a858:	008003f4 	movhi	r2,15
   9a85c:	10909004 	addi	r2,r2,16960
   9a860:	1885383a 	mul	r2,r3,r2
   9a864:	100b883a 	mov	r5,r2
   9a868:	0100bef4 	movhi	r4,763
   9a86c:	213c2004 	addi	r4,r4,-3968
   9a870:	0088d8c0 	call	88d8c <__udivsi3>
   9a874:	1007883a 	mov	r3,r2
   9a878:	e0bfff17 	ldw	r2,-4(fp)
   9a87c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   9a880:	10bfffc4 	addi	r2,r2,-1
   9a884:	103ffe1e 	bne	r2,zero,9a880 <__alt_data_end+0xfffca9c0>
   9a888:	00000d06 	br	9a8c0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   9a88c:	e0fffd17 	ldw	r3,-12(fp)
   9a890:	008003f4 	movhi	r2,15
   9a894:	10909004 	addi	r2,r2,16960
   9a898:	1885383a 	mul	r2,r3,r2
   9a89c:	100b883a 	mov	r5,r2
   9a8a0:	0100bef4 	movhi	r4,763
   9a8a4:	213c2004 	addi	r4,r4,-3968
   9a8a8:	0088d8c0 	call	88d8c <__udivsi3>
   9a8ac:	1007883a 	mov	r3,r2
   9a8b0:	e0bfff17 	ldw	r2,-4(fp)
   9a8b4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   9a8b8:	10bfffc4 	addi	r2,r2,-1
   9a8bc:	00bffe16 	blt	zero,r2,9a8b8 <__alt_data_end+0xfffca9f8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   9a8c0:	0005883a 	mov	r2,zero
}
   9a8c4:	e037883a 	mov	sp,fp
   9a8c8:	dfc00117 	ldw	ra,4(sp)
   9a8cc:	df000017 	ldw	fp,0(sp)
   9a8d0:	dec00204 	addi	sp,sp,8
   9a8d4:	f800283a 	ret

0009a8d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   9a8d8:	deffff04 	addi	sp,sp,-4
   9a8dc:	df000015 	stw	fp,0(sp)
   9a8e0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   9a8e4:	0001883a 	nop
   9a8e8:	e037883a 	mov	sp,fp
   9a8ec:	df000017 	ldw	fp,0(sp)
   9a8f0:	dec00104 	addi	sp,sp,4
   9a8f4:	f800283a 	ret

0009a8f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9a8f8:	defffe04 	addi	sp,sp,-8
   9a8fc:	dfc00115 	stw	ra,4(sp)
   9a900:	df000015 	stw	fp,0(sp)
   9a904:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9a908:	d0a00f17 	ldw	r2,-32708(gp)
   9a90c:	10000326 	beq	r2,zero,9a91c <alt_get_errno+0x24>
   9a910:	d0a00f17 	ldw	r2,-32708(gp)
   9a914:	103ee83a 	callr	r2
   9a918:	00000106 	br	9a920 <alt_get_errno+0x28>
   9a91c:	d0a9ab04 	addi	r2,gp,-22868
}
   9a920:	e037883a 	mov	sp,fp
   9a924:	dfc00117 	ldw	ra,4(sp)
   9a928:	df000017 	ldw	fp,0(sp)
   9a92c:	dec00204 	addi	sp,sp,8
   9a930:	f800283a 	ret

0009a934 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   9a934:	defffa04 	addi	sp,sp,-24
   9a938:	dfc00515 	stw	ra,20(sp)
   9a93c:	df000415 	stw	fp,16(sp)
   9a940:	df000404 	addi	fp,sp,16
   9a944:	e13ffe15 	stw	r4,-8(fp)
   9a948:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   9a94c:	e0bffe17 	ldw	r2,-8(fp)
   9a950:	10000326 	beq	r2,zero,9a960 <alt_dev_llist_insert+0x2c>
   9a954:	e0bffe17 	ldw	r2,-8(fp)
   9a958:	10800217 	ldw	r2,8(r2)
   9a95c:	1000061e 	bne	r2,zero,9a978 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   9a960:	009a8f80 	call	9a8f8 <alt_get_errno>
   9a964:	1007883a 	mov	r3,r2
   9a968:	00800584 	movi	r2,22
   9a96c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   9a970:	00bffa84 	movi	r2,-22
   9a974:	00001306 	br	9a9c4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   9a978:	e0bffe17 	ldw	r2,-8(fp)
   9a97c:	e0ffff17 	ldw	r3,-4(fp)
   9a980:	e0fffc15 	stw	r3,-16(fp)
   9a984:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   9a988:	e0bffd17 	ldw	r2,-12(fp)
   9a98c:	e0fffc17 	ldw	r3,-16(fp)
   9a990:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   9a994:	e0bffc17 	ldw	r2,-16(fp)
   9a998:	10c00017 	ldw	r3,0(r2)
   9a99c:	e0bffd17 	ldw	r2,-12(fp)
   9a9a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   9a9a4:	e0bffc17 	ldw	r2,-16(fp)
   9a9a8:	10800017 	ldw	r2,0(r2)
   9a9ac:	e0fffd17 	ldw	r3,-12(fp)
   9a9b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   9a9b4:	e0bffc17 	ldw	r2,-16(fp)
   9a9b8:	e0fffd17 	ldw	r3,-12(fp)
   9a9bc:	10c00015 	stw	r3,0(r2)

  return 0;  
   9a9c0:	0005883a 	mov	r2,zero
}
   9a9c4:	e037883a 	mov	sp,fp
   9a9c8:	dfc00117 	ldw	ra,4(sp)
   9a9cc:	df000017 	ldw	fp,0(sp)
   9a9d0:	dec00204 	addi	sp,sp,8
   9a9d4:	f800283a 	ret

0009a9d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   9a9d8:	defffd04 	addi	sp,sp,-12
   9a9dc:	dfc00215 	stw	ra,8(sp)
   9a9e0:	df000115 	stw	fp,4(sp)
   9a9e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   9a9e8:	008002b4 	movhi	r2,10
   9a9ec:	10ae0704 	addi	r2,r2,-18404
   9a9f0:	e0bfff15 	stw	r2,-4(fp)
   9a9f4:	00000606 	br	9aa10 <_do_ctors+0x38>
        (*ctor) (); 
   9a9f8:	e0bfff17 	ldw	r2,-4(fp)
   9a9fc:	10800017 	ldw	r2,0(r2)
   9aa00:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   9aa04:	e0bfff17 	ldw	r2,-4(fp)
   9aa08:	10bfff04 	addi	r2,r2,-4
   9aa0c:	e0bfff15 	stw	r2,-4(fp)
   9aa10:	e0ffff17 	ldw	r3,-4(fp)
   9aa14:	008002b4 	movhi	r2,10
   9aa18:	10ae0804 	addi	r2,r2,-18400
   9aa1c:	18bff62e 	bgeu	r3,r2,9a9f8 <__alt_data_end+0xfffcab38>
        (*ctor) (); 
}
   9aa20:	0001883a 	nop
   9aa24:	e037883a 	mov	sp,fp
   9aa28:	dfc00117 	ldw	ra,4(sp)
   9aa2c:	df000017 	ldw	fp,0(sp)
   9aa30:	dec00204 	addi	sp,sp,8
   9aa34:	f800283a 	ret

0009aa38 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   9aa38:	defffd04 	addi	sp,sp,-12
   9aa3c:	dfc00215 	stw	ra,8(sp)
   9aa40:	df000115 	stw	fp,4(sp)
   9aa44:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   9aa48:	008002b4 	movhi	r2,10
   9aa4c:	10ae0704 	addi	r2,r2,-18404
   9aa50:	e0bfff15 	stw	r2,-4(fp)
   9aa54:	00000606 	br	9aa70 <_do_dtors+0x38>
        (*dtor) (); 
   9aa58:	e0bfff17 	ldw	r2,-4(fp)
   9aa5c:	10800017 	ldw	r2,0(r2)
   9aa60:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   9aa64:	e0bfff17 	ldw	r2,-4(fp)
   9aa68:	10bfff04 	addi	r2,r2,-4
   9aa6c:	e0bfff15 	stw	r2,-4(fp)
   9aa70:	e0ffff17 	ldw	r3,-4(fp)
   9aa74:	008002b4 	movhi	r2,10
   9aa78:	10ae0804 	addi	r2,r2,-18400
   9aa7c:	18bff62e 	bgeu	r3,r2,9aa58 <__alt_data_end+0xfffcab98>
        (*dtor) (); 
}
   9aa80:	0001883a 	nop
   9aa84:	e037883a 	mov	sp,fp
   9aa88:	dfc00117 	ldw	ra,4(sp)
   9aa8c:	df000017 	ldw	fp,0(sp)
   9aa90:	dec00204 	addi	sp,sp,8
   9aa94:	f800283a 	ret

0009aa98 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   9aa98:	defffe04 	addi	sp,sp,-8
   9aa9c:	dfc00115 	stw	ra,4(sp)
   9aaa0:	df000015 	stw	fp,0(sp)
   9aaa4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   9aaa8:	01480004 	movi	r5,8192
   9aaac:	0009883a 	mov	r4,zero
   9aab0:	009b3600 	call	9b360 <alt_icache_flush>
#endif
}
   9aab4:	0001883a 	nop
   9aab8:	e037883a 	mov	sp,fp
   9aabc:	dfc00117 	ldw	ra,4(sp)
   9aac0:	df000017 	ldw	fp,0(sp)
   9aac4:	dec00204 	addi	sp,sp,8
   9aac8:	f800283a 	ret

0009aacc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   9aacc:	defff904 	addi	sp,sp,-28
   9aad0:	dfc00615 	stw	ra,24(sp)
   9aad4:	df000515 	stw	fp,20(sp)
   9aad8:	df000504 	addi	fp,sp,20
   9aadc:	e13ffc15 	stw	r4,-16(fp)
   9aae0:	e17ffd15 	stw	r5,-12(fp)
   9aae4:	e1bffe15 	stw	r6,-8(fp)
   9aae8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   9aaec:	e0800217 	ldw	r2,8(fp)
   9aaf0:	d8800015 	stw	r2,0(sp)
   9aaf4:	e1ffff17 	ldw	r7,-4(fp)
   9aaf8:	e1bffe17 	ldw	r6,-8(fp)
   9aafc:	e17ffd17 	ldw	r5,-12(fp)
   9ab00:	e13ffc17 	ldw	r4,-16(fp)
   9ab04:	009ac7c0 	call	9ac7c <alt_iic_isr_register>
}  
   9ab08:	e037883a 	mov	sp,fp
   9ab0c:	dfc00117 	ldw	ra,4(sp)
   9ab10:	df000017 	ldw	fp,0(sp)
   9ab14:	dec00204 	addi	sp,sp,8
   9ab18:	f800283a 	ret

0009ab1c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   9ab1c:	defff904 	addi	sp,sp,-28
   9ab20:	df000615 	stw	fp,24(sp)
   9ab24:	df000604 	addi	fp,sp,24
   9ab28:	e13ffe15 	stw	r4,-8(fp)
   9ab2c:	e17fff15 	stw	r5,-4(fp)
   9ab30:	e0bfff17 	ldw	r2,-4(fp)
   9ab34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9ab38:	0005303a 	rdctl	r2,status
   9ab3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9ab40:	e0fffb17 	ldw	r3,-20(fp)
   9ab44:	00bfff84 	movi	r2,-2
   9ab48:	1884703a 	and	r2,r3,r2
   9ab4c:	1001703a 	wrctl	status,r2
  
  return context;
   9ab50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   9ab54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   9ab58:	00c00044 	movi	r3,1
   9ab5c:	e0bffa17 	ldw	r2,-24(fp)
   9ab60:	1884983a 	sll	r2,r3,r2
   9ab64:	1007883a 	mov	r3,r2
   9ab68:	d0a9b117 	ldw	r2,-22844(gp)
   9ab6c:	1884b03a 	or	r2,r3,r2
   9ab70:	d0a9b115 	stw	r2,-22844(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   9ab74:	d0a9b117 	ldw	r2,-22844(gp)
   9ab78:	100170fa 	wrctl	ienable,r2
   9ab7c:	e0bffc17 	ldw	r2,-16(fp)
   9ab80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9ab84:	e0bffd17 	ldw	r2,-12(fp)
   9ab88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   9ab8c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   9ab90:	0001883a 	nop
}
   9ab94:	e037883a 	mov	sp,fp
   9ab98:	df000017 	ldw	fp,0(sp)
   9ab9c:	dec00104 	addi	sp,sp,4
   9aba0:	f800283a 	ret

0009aba4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   9aba4:	defff904 	addi	sp,sp,-28
   9aba8:	df000615 	stw	fp,24(sp)
   9abac:	df000604 	addi	fp,sp,24
   9abb0:	e13ffe15 	stw	r4,-8(fp)
   9abb4:	e17fff15 	stw	r5,-4(fp)
   9abb8:	e0bfff17 	ldw	r2,-4(fp)
   9abbc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9abc0:	0005303a 	rdctl	r2,status
   9abc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9abc8:	e0fffb17 	ldw	r3,-20(fp)
   9abcc:	00bfff84 	movi	r2,-2
   9abd0:	1884703a 	and	r2,r3,r2
   9abd4:	1001703a 	wrctl	status,r2
  
  return context;
   9abd8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   9abdc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   9abe0:	00c00044 	movi	r3,1
   9abe4:	e0bffa17 	ldw	r2,-24(fp)
   9abe8:	1884983a 	sll	r2,r3,r2
   9abec:	0084303a 	nor	r2,zero,r2
   9abf0:	1007883a 	mov	r3,r2
   9abf4:	d0a9b117 	ldw	r2,-22844(gp)
   9abf8:	1884703a 	and	r2,r3,r2
   9abfc:	d0a9b115 	stw	r2,-22844(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   9ac00:	d0a9b117 	ldw	r2,-22844(gp)
   9ac04:	100170fa 	wrctl	ienable,r2
   9ac08:	e0bffc17 	ldw	r2,-16(fp)
   9ac0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9ac10:	e0bffd17 	ldw	r2,-12(fp)
   9ac14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   9ac18:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   9ac1c:	0001883a 	nop
}
   9ac20:	e037883a 	mov	sp,fp
   9ac24:	df000017 	ldw	fp,0(sp)
   9ac28:	dec00104 	addi	sp,sp,4
   9ac2c:	f800283a 	ret

0009ac30 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   9ac30:	defffc04 	addi	sp,sp,-16
   9ac34:	df000315 	stw	fp,12(sp)
   9ac38:	df000304 	addi	fp,sp,12
   9ac3c:	e13ffe15 	stw	r4,-8(fp)
   9ac40:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   9ac44:	000530fa 	rdctl	r2,ienable
   9ac48:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   9ac4c:	00c00044 	movi	r3,1
   9ac50:	e0bfff17 	ldw	r2,-4(fp)
   9ac54:	1884983a 	sll	r2,r3,r2
   9ac58:	1007883a 	mov	r3,r2
   9ac5c:	e0bffd17 	ldw	r2,-12(fp)
   9ac60:	1884703a 	and	r2,r3,r2
   9ac64:	1004c03a 	cmpne	r2,r2,zero
   9ac68:	10803fcc 	andi	r2,r2,255
}
   9ac6c:	e037883a 	mov	sp,fp
   9ac70:	df000017 	ldw	fp,0(sp)
   9ac74:	dec00104 	addi	sp,sp,4
   9ac78:	f800283a 	ret

0009ac7c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   9ac7c:	defff504 	addi	sp,sp,-44
   9ac80:	dfc00a15 	stw	ra,40(sp)
   9ac84:	df000915 	stw	fp,36(sp)
   9ac88:	df000904 	addi	fp,sp,36
   9ac8c:	e13ffc15 	stw	r4,-16(fp)
   9ac90:	e17ffd15 	stw	r5,-12(fp)
   9ac94:	e1bffe15 	stw	r6,-8(fp)
   9ac98:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   9ac9c:	00bffa84 	movi	r2,-22
   9aca0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   9aca4:	e0bffd17 	ldw	r2,-12(fp)
   9aca8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   9acac:	e0bff817 	ldw	r2,-32(fp)
   9acb0:	10800808 	cmpgei	r2,r2,32
   9acb4:	1000271e 	bne	r2,zero,9ad54 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9acb8:	0005303a 	rdctl	r2,status
   9acbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9acc0:	e0fffb17 	ldw	r3,-20(fp)
   9acc4:	00bfff84 	movi	r2,-2
   9acc8:	1884703a 	and	r2,r3,r2
   9accc:	1001703a 	wrctl	status,r2
  
  return context;
   9acd0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   9acd4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   9acd8:	008002b4 	movhi	r2,10
   9acdc:	1085f504 	addi	r2,r2,6100
   9ace0:	e0fff817 	ldw	r3,-32(fp)
   9ace4:	180690fa 	slli	r3,r3,3
   9ace8:	10c5883a 	add	r2,r2,r3
   9acec:	e0fffe17 	ldw	r3,-8(fp)
   9acf0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   9acf4:	008002b4 	movhi	r2,10
   9acf8:	1085f504 	addi	r2,r2,6100
   9acfc:	e0fff817 	ldw	r3,-32(fp)
   9ad00:	180690fa 	slli	r3,r3,3
   9ad04:	10c5883a 	add	r2,r2,r3
   9ad08:	10800104 	addi	r2,r2,4
   9ad0c:	e0ffff17 	ldw	r3,-4(fp)
   9ad10:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   9ad14:	e0bffe17 	ldw	r2,-8(fp)
   9ad18:	10000526 	beq	r2,zero,9ad30 <alt_iic_isr_register+0xb4>
   9ad1c:	e0bff817 	ldw	r2,-32(fp)
   9ad20:	100b883a 	mov	r5,r2
   9ad24:	e13ffc17 	ldw	r4,-16(fp)
   9ad28:	009ab1c0 	call	9ab1c <alt_ic_irq_enable>
   9ad2c:	00000406 	br	9ad40 <alt_iic_isr_register+0xc4>
   9ad30:	e0bff817 	ldw	r2,-32(fp)
   9ad34:	100b883a 	mov	r5,r2
   9ad38:	e13ffc17 	ldw	r4,-16(fp)
   9ad3c:	009aba40 	call	9aba4 <alt_ic_irq_disable>
   9ad40:	e0bff715 	stw	r2,-36(fp)
   9ad44:	e0bffa17 	ldw	r2,-24(fp)
   9ad48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9ad4c:	e0bff917 	ldw	r2,-28(fp)
   9ad50:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   9ad54:	e0bff717 	ldw	r2,-36(fp)
}
   9ad58:	e037883a 	mov	sp,fp
   9ad5c:	dfc00117 	ldw	ra,4(sp)
   9ad60:	df000017 	ldw	fp,0(sp)
   9ad64:	dec00204 	addi	sp,sp,8
   9ad68:	f800283a 	ret

0009ad6c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   9ad6c:	defff904 	addi	sp,sp,-28
   9ad70:	dfc00615 	stw	ra,24(sp)
   9ad74:	df000515 	stw	fp,20(sp)
   9ad78:	df000504 	addi	fp,sp,20
   9ad7c:	e13ffc15 	stw	r4,-16(fp)
   9ad80:	e17ffd15 	stw	r5,-12(fp)
   9ad84:	e1bffe15 	stw	r6,-8(fp)
   9ad88:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   9ad8c:	e1bfff17 	ldw	r6,-4(fp)
   9ad90:	e17ffe17 	ldw	r5,-8(fp)
   9ad94:	e13ffd17 	ldw	r4,-12(fp)
   9ad98:	009afac0 	call	9afac <open>
   9ad9c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   9ada0:	e0bffb17 	ldw	r2,-20(fp)
   9ada4:	10001c16 	blt	r2,zero,9ae18 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   9ada8:	008002b4 	movhi	r2,10
   9adac:	10b6df04 	addi	r2,r2,-9348
   9adb0:	e0fffb17 	ldw	r3,-20(fp)
   9adb4:	18c00324 	muli	r3,r3,12
   9adb8:	10c5883a 	add	r2,r2,r3
   9adbc:	10c00017 	ldw	r3,0(r2)
   9adc0:	e0bffc17 	ldw	r2,-16(fp)
   9adc4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   9adc8:	008002b4 	movhi	r2,10
   9adcc:	10b6df04 	addi	r2,r2,-9348
   9add0:	e0fffb17 	ldw	r3,-20(fp)
   9add4:	18c00324 	muli	r3,r3,12
   9add8:	10c5883a 	add	r2,r2,r3
   9addc:	10800104 	addi	r2,r2,4
   9ade0:	10c00017 	ldw	r3,0(r2)
   9ade4:	e0bffc17 	ldw	r2,-16(fp)
   9ade8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   9adec:	008002b4 	movhi	r2,10
   9adf0:	10b6df04 	addi	r2,r2,-9348
   9adf4:	e0fffb17 	ldw	r3,-20(fp)
   9adf8:	18c00324 	muli	r3,r3,12
   9adfc:	10c5883a 	add	r2,r2,r3
   9ae00:	10800204 	addi	r2,r2,8
   9ae04:	10c00017 	ldw	r3,0(r2)
   9ae08:	e0bffc17 	ldw	r2,-16(fp)
   9ae0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   9ae10:	e13ffb17 	ldw	r4,-20(fp)
   9ae14:	00996080 	call	99608 <alt_release_fd>
  }
} 
   9ae18:	0001883a 	nop
   9ae1c:	e037883a 	mov	sp,fp
   9ae20:	dfc00117 	ldw	ra,4(sp)
   9ae24:	df000017 	ldw	fp,0(sp)
   9ae28:	dec00204 	addi	sp,sp,8
   9ae2c:	f800283a 	ret

0009ae30 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   9ae30:	defffb04 	addi	sp,sp,-20
   9ae34:	dfc00415 	stw	ra,16(sp)
   9ae38:	df000315 	stw	fp,12(sp)
   9ae3c:	df000304 	addi	fp,sp,12
   9ae40:	e13ffd15 	stw	r4,-12(fp)
   9ae44:	e17ffe15 	stw	r5,-8(fp)
   9ae48:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   9ae4c:	01c07fc4 	movi	r7,511
   9ae50:	01800044 	movi	r6,1
   9ae54:	e17ffd17 	ldw	r5,-12(fp)
   9ae58:	010002b4 	movhi	r4,10
   9ae5c:	2136e204 	addi	r4,r4,-9336
   9ae60:	009ad6c0 	call	9ad6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   9ae64:	01c07fc4 	movi	r7,511
   9ae68:	000d883a 	mov	r6,zero
   9ae6c:	e17ffe17 	ldw	r5,-8(fp)
   9ae70:	010002b4 	movhi	r4,10
   9ae74:	2136df04 	addi	r4,r4,-9348
   9ae78:	009ad6c0 	call	9ad6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   9ae7c:	01c07fc4 	movi	r7,511
   9ae80:	01800044 	movi	r6,1
   9ae84:	e17fff17 	ldw	r5,-4(fp)
   9ae88:	010002b4 	movhi	r4,10
   9ae8c:	2136e504 	addi	r4,r4,-9324
   9ae90:	009ad6c0 	call	9ad6c <alt_open_fd>
}  
   9ae94:	0001883a 	nop
   9ae98:	e037883a 	mov	sp,fp
   9ae9c:	dfc00117 	ldw	ra,4(sp)
   9aea0:	df000017 	ldw	fp,0(sp)
   9aea4:	dec00204 	addi	sp,sp,8
   9aea8:	f800283a 	ret

0009aeac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9aeac:	defffe04 	addi	sp,sp,-8
   9aeb0:	dfc00115 	stw	ra,4(sp)
   9aeb4:	df000015 	stw	fp,0(sp)
   9aeb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9aebc:	d0a00f17 	ldw	r2,-32708(gp)
   9aec0:	10000326 	beq	r2,zero,9aed0 <alt_get_errno+0x24>
   9aec4:	d0a00f17 	ldw	r2,-32708(gp)
   9aec8:	103ee83a 	callr	r2
   9aecc:	00000106 	br	9aed4 <alt_get_errno+0x28>
   9aed0:	d0a9ab04 	addi	r2,gp,-22868
}
   9aed4:	e037883a 	mov	sp,fp
   9aed8:	dfc00117 	ldw	ra,4(sp)
   9aedc:	df000017 	ldw	fp,0(sp)
   9aee0:	dec00204 	addi	sp,sp,8
   9aee4:	f800283a 	ret

0009aee8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   9aee8:	defffd04 	addi	sp,sp,-12
   9aeec:	df000215 	stw	fp,8(sp)
   9aef0:	df000204 	addi	fp,sp,8
   9aef4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   9aef8:	e0bfff17 	ldw	r2,-4(fp)
   9aefc:	10800217 	ldw	r2,8(r2)
   9af00:	10d00034 	orhi	r3,r2,16384
   9af04:	e0bfff17 	ldw	r2,-4(fp)
   9af08:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9af0c:	e03ffe15 	stw	zero,-8(fp)
   9af10:	00001d06 	br	9af88 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   9af14:	008002b4 	movhi	r2,10
   9af18:	10b6df04 	addi	r2,r2,-9348
   9af1c:	e0fffe17 	ldw	r3,-8(fp)
   9af20:	18c00324 	muli	r3,r3,12
   9af24:	10c5883a 	add	r2,r2,r3
   9af28:	10c00017 	ldw	r3,0(r2)
   9af2c:	e0bfff17 	ldw	r2,-4(fp)
   9af30:	10800017 	ldw	r2,0(r2)
   9af34:	1880111e 	bne	r3,r2,9af7c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   9af38:	008002b4 	movhi	r2,10
   9af3c:	10b6df04 	addi	r2,r2,-9348
   9af40:	e0fffe17 	ldw	r3,-8(fp)
   9af44:	18c00324 	muli	r3,r3,12
   9af48:	10c5883a 	add	r2,r2,r3
   9af4c:	10800204 	addi	r2,r2,8
   9af50:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   9af54:	1000090e 	bge	r2,zero,9af7c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   9af58:	e0bffe17 	ldw	r2,-8(fp)
   9af5c:	10c00324 	muli	r3,r2,12
   9af60:	008002b4 	movhi	r2,10
   9af64:	10b6df04 	addi	r2,r2,-9348
   9af68:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   9af6c:	e0bfff17 	ldw	r2,-4(fp)
   9af70:	18800226 	beq	r3,r2,9af7c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   9af74:	00bffcc4 	movi	r2,-13
   9af78:	00000806 	br	9af9c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9af7c:	e0bffe17 	ldw	r2,-8(fp)
   9af80:	10800044 	addi	r2,r2,1
   9af84:	e0bffe15 	stw	r2,-8(fp)
   9af88:	d0a00e17 	ldw	r2,-32712(gp)
   9af8c:	1007883a 	mov	r3,r2
   9af90:	e0bffe17 	ldw	r2,-8(fp)
   9af94:	18bfdf2e 	bgeu	r3,r2,9af14 <__alt_data_end+0xfffcb054>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   9af98:	0005883a 	mov	r2,zero
}
   9af9c:	e037883a 	mov	sp,fp
   9afa0:	df000017 	ldw	fp,0(sp)
   9afa4:	dec00104 	addi	sp,sp,4
   9afa8:	f800283a 	ret

0009afac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   9afac:	defff604 	addi	sp,sp,-40
   9afb0:	dfc00915 	stw	ra,36(sp)
   9afb4:	df000815 	stw	fp,32(sp)
   9afb8:	df000804 	addi	fp,sp,32
   9afbc:	e13ffd15 	stw	r4,-12(fp)
   9afc0:	e17ffe15 	stw	r5,-8(fp)
   9afc4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   9afc8:	00bfffc4 	movi	r2,-1
   9afcc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   9afd0:	00bffb44 	movi	r2,-19
   9afd4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   9afd8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   9afdc:	d1600c04 	addi	r5,gp,-32720
   9afe0:	e13ffd17 	ldw	r4,-12(fp)
   9afe4:	009b1240 	call	9b124 <alt_find_dev>
   9afe8:	e0bff815 	stw	r2,-32(fp)
   9afec:	e0bff817 	ldw	r2,-32(fp)
   9aff0:	1000051e 	bne	r2,zero,9b008 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   9aff4:	e13ffd17 	ldw	r4,-12(fp)
   9aff8:	009b1b40 	call	9b1b4 <alt_find_file>
   9affc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   9b000:	00800044 	movi	r2,1
   9b004:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   9b008:	e0bff817 	ldw	r2,-32(fp)
   9b00c:	10002926 	beq	r2,zero,9b0b4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   9b010:	e13ff817 	ldw	r4,-32(fp)
   9b014:	009b2bc0 	call	9b2bc <alt_get_fd>
   9b018:	e0bff915 	stw	r2,-28(fp)
   9b01c:	e0bff917 	ldw	r2,-28(fp)
   9b020:	1000030e 	bge	r2,zero,9b030 <open+0x84>
    {
      status = index;
   9b024:	e0bff917 	ldw	r2,-28(fp)
   9b028:	e0bffa15 	stw	r2,-24(fp)
   9b02c:	00002306 	br	9b0bc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   9b030:	e0bff917 	ldw	r2,-28(fp)
   9b034:	10c00324 	muli	r3,r2,12
   9b038:	008002b4 	movhi	r2,10
   9b03c:	10b6df04 	addi	r2,r2,-9348
   9b040:	1885883a 	add	r2,r3,r2
   9b044:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   9b048:	e0fffe17 	ldw	r3,-8(fp)
   9b04c:	00900034 	movhi	r2,16384
   9b050:	10bfffc4 	addi	r2,r2,-1
   9b054:	1886703a 	and	r3,r3,r2
   9b058:	e0bffc17 	ldw	r2,-16(fp)
   9b05c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   9b060:	e0bffb17 	ldw	r2,-20(fp)
   9b064:	1000051e 	bne	r2,zero,9b07c <open+0xd0>
   9b068:	e13ffc17 	ldw	r4,-16(fp)
   9b06c:	009aee80 	call	9aee8 <alt_file_locked>
   9b070:	e0bffa15 	stw	r2,-24(fp)
   9b074:	e0bffa17 	ldw	r2,-24(fp)
   9b078:	10001016 	blt	r2,zero,9b0bc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   9b07c:	e0bff817 	ldw	r2,-32(fp)
   9b080:	10800317 	ldw	r2,12(r2)
   9b084:	10000826 	beq	r2,zero,9b0a8 <open+0xfc>
   9b088:	e0bff817 	ldw	r2,-32(fp)
   9b08c:	10800317 	ldw	r2,12(r2)
   9b090:	e1ffff17 	ldw	r7,-4(fp)
   9b094:	e1bffe17 	ldw	r6,-8(fp)
   9b098:	e17ffd17 	ldw	r5,-12(fp)
   9b09c:	e13ffc17 	ldw	r4,-16(fp)
   9b0a0:	103ee83a 	callr	r2
   9b0a4:	00000106 	br	9b0ac <open+0x100>
   9b0a8:	0005883a 	mov	r2,zero
   9b0ac:	e0bffa15 	stw	r2,-24(fp)
   9b0b0:	00000206 	br	9b0bc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   9b0b4:	00bffb44 	movi	r2,-19
   9b0b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   9b0bc:	e0bffa17 	ldw	r2,-24(fp)
   9b0c0:	1000090e 	bge	r2,zero,9b0e8 <open+0x13c>
  {
    alt_release_fd (index);  
   9b0c4:	e13ff917 	ldw	r4,-28(fp)
   9b0c8:	00996080 	call	99608 <alt_release_fd>
    ALT_ERRNO = -status;
   9b0cc:	009aeac0 	call	9aeac <alt_get_errno>
   9b0d0:	1007883a 	mov	r3,r2
   9b0d4:	e0bffa17 	ldw	r2,-24(fp)
   9b0d8:	0085c83a 	sub	r2,zero,r2
   9b0dc:	18800015 	stw	r2,0(r3)
    return -1;
   9b0e0:	00bfffc4 	movi	r2,-1
   9b0e4:	00000106 	br	9b0ec <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   9b0e8:	e0bff917 	ldw	r2,-28(fp)
}
   9b0ec:	e037883a 	mov	sp,fp
   9b0f0:	dfc00117 	ldw	ra,4(sp)
   9b0f4:	df000017 	ldw	fp,0(sp)
   9b0f8:	dec00204 	addi	sp,sp,8
   9b0fc:	f800283a 	ret

0009b100 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   9b100:	deffff04 	addi	sp,sp,-4
   9b104:	df000015 	stw	fp,0(sp)
   9b108:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   9b10c:	000170fa 	wrctl	ienable,zero
}
   9b110:	0001883a 	nop
   9b114:	e037883a 	mov	sp,fp
   9b118:	df000017 	ldw	fp,0(sp)
   9b11c:	dec00104 	addi	sp,sp,4
   9b120:	f800283a 	ret

0009b124 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   9b124:	defffa04 	addi	sp,sp,-24
   9b128:	dfc00515 	stw	ra,20(sp)
   9b12c:	df000415 	stw	fp,16(sp)
   9b130:	df000404 	addi	fp,sp,16
   9b134:	e13ffe15 	stw	r4,-8(fp)
   9b138:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   9b13c:	e0bfff17 	ldw	r2,-4(fp)
   9b140:	10800017 	ldw	r2,0(r2)
   9b144:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   9b148:	e13ffe17 	ldw	r4,-8(fp)
   9b14c:	00891b40 	call	891b4 <strlen>
   9b150:	10800044 	addi	r2,r2,1
   9b154:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   9b158:	00000d06 	br	9b190 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   9b15c:	e0bffc17 	ldw	r2,-16(fp)
   9b160:	10800217 	ldw	r2,8(r2)
   9b164:	e0fffd17 	ldw	r3,-12(fp)
   9b168:	180d883a 	mov	r6,r3
   9b16c:	e17ffe17 	ldw	r5,-8(fp)
   9b170:	1009883a 	mov	r4,r2
   9b174:	009b4d80 	call	9b4d8 <memcmp>
   9b178:	1000021e 	bne	r2,zero,9b184 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   9b17c:	e0bffc17 	ldw	r2,-16(fp)
   9b180:	00000706 	br	9b1a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   9b184:	e0bffc17 	ldw	r2,-16(fp)
   9b188:	10800017 	ldw	r2,0(r2)
   9b18c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   9b190:	e0fffc17 	ldw	r3,-16(fp)
   9b194:	e0bfff17 	ldw	r2,-4(fp)
   9b198:	18bff01e 	bne	r3,r2,9b15c <__alt_data_end+0xfffcb29c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   9b19c:	0005883a 	mov	r2,zero
}
   9b1a0:	e037883a 	mov	sp,fp
   9b1a4:	dfc00117 	ldw	ra,4(sp)
   9b1a8:	df000017 	ldw	fp,0(sp)
   9b1ac:	dec00204 	addi	sp,sp,8
   9b1b0:	f800283a 	ret

0009b1b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   9b1b4:	defffb04 	addi	sp,sp,-20
   9b1b8:	dfc00415 	stw	ra,16(sp)
   9b1bc:	df000315 	stw	fp,12(sp)
   9b1c0:	df000304 	addi	fp,sp,12
   9b1c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   9b1c8:	d0a00a17 	ldw	r2,-32728(gp)
   9b1cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9b1d0:	00003106 	br	9b298 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   9b1d4:	e0bffd17 	ldw	r2,-12(fp)
   9b1d8:	10800217 	ldw	r2,8(r2)
   9b1dc:	1009883a 	mov	r4,r2
   9b1e0:	00891b40 	call	891b4 <strlen>
   9b1e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   9b1e8:	e0bffd17 	ldw	r2,-12(fp)
   9b1ec:	10c00217 	ldw	r3,8(r2)
   9b1f0:	e0bffe17 	ldw	r2,-8(fp)
   9b1f4:	10bfffc4 	addi	r2,r2,-1
   9b1f8:	1885883a 	add	r2,r3,r2
   9b1fc:	10800003 	ldbu	r2,0(r2)
   9b200:	10803fcc 	andi	r2,r2,255
   9b204:	1080201c 	xori	r2,r2,128
   9b208:	10bfe004 	addi	r2,r2,-128
   9b20c:	10800bd8 	cmpnei	r2,r2,47
   9b210:	1000031e 	bne	r2,zero,9b220 <alt_find_file+0x6c>
    {
      len -= 1;
   9b214:	e0bffe17 	ldw	r2,-8(fp)
   9b218:	10bfffc4 	addi	r2,r2,-1
   9b21c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   9b220:	e0bffe17 	ldw	r2,-8(fp)
   9b224:	e0ffff17 	ldw	r3,-4(fp)
   9b228:	1885883a 	add	r2,r3,r2
   9b22c:	10800003 	ldbu	r2,0(r2)
   9b230:	10803fcc 	andi	r2,r2,255
   9b234:	1080201c 	xori	r2,r2,128
   9b238:	10bfe004 	addi	r2,r2,-128
   9b23c:	10800be0 	cmpeqi	r2,r2,47
   9b240:	1000081e 	bne	r2,zero,9b264 <alt_find_file+0xb0>
   9b244:	e0bffe17 	ldw	r2,-8(fp)
   9b248:	e0ffff17 	ldw	r3,-4(fp)
   9b24c:	1885883a 	add	r2,r3,r2
   9b250:	10800003 	ldbu	r2,0(r2)
   9b254:	10803fcc 	andi	r2,r2,255
   9b258:	1080201c 	xori	r2,r2,128
   9b25c:	10bfe004 	addi	r2,r2,-128
   9b260:	10000a1e 	bne	r2,zero,9b28c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   9b264:	e0bffd17 	ldw	r2,-12(fp)
   9b268:	10800217 	ldw	r2,8(r2)
   9b26c:	e0fffe17 	ldw	r3,-8(fp)
   9b270:	180d883a 	mov	r6,r3
   9b274:	e17fff17 	ldw	r5,-4(fp)
   9b278:	1009883a 	mov	r4,r2
   9b27c:	009b4d80 	call	9b4d8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   9b280:	1000021e 	bne	r2,zero,9b28c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   9b284:	e0bffd17 	ldw	r2,-12(fp)
   9b288:	00000706 	br	9b2a8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   9b28c:	e0bffd17 	ldw	r2,-12(fp)
   9b290:	10800017 	ldw	r2,0(r2)
   9b294:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9b298:	e0fffd17 	ldw	r3,-12(fp)
   9b29c:	d0a00a04 	addi	r2,gp,-32728
   9b2a0:	18bfcc1e 	bne	r3,r2,9b1d4 <__alt_data_end+0xfffcb314>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   9b2a4:	0005883a 	mov	r2,zero
}
   9b2a8:	e037883a 	mov	sp,fp
   9b2ac:	dfc00117 	ldw	ra,4(sp)
   9b2b0:	df000017 	ldw	fp,0(sp)
   9b2b4:	dec00204 	addi	sp,sp,8
   9b2b8:	f800283a 	ret

0009b2bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   9b2bc:	defffc04 	addi	sp,sp,-16
   9b2c0:	df000315 	stw	fp,12(sp)
   9b2c4:	df000304 	addi	fp,sp,12
   9b2c8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   9b2cc:	00bffa04 	movi	r2,-24
   9b2d0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   9b2d4:	e03ffd15 	stw	zero,-12(fp)
   9b2d8:	00001906 	br	9b340 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   9b2dc:	008002b4 	movhi	r2,10
   9b2e0:	10b6df04 	addi	r2,r2,-9348
   9b2e4:	e0fffd17 	ldw	r3,-12(fp)
   9b2e8:	18c00324 	muli	r3,r3,12
   9b2ec:	10c5883a 	add	r2,r2,r3
   9b2f0:	10800017 	ldw	r2,0(r2)
   9b2f4:	10000f1e 	bne	r2,zero,9b334 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   9b2f8:	008002b4 	movhi	r2,10
   9b2fc:	10b6df04 	addi	r2,r2,-9348
   9b300:	e0fffd17 	ldw	r3,-12(fp)
   9b304:	18c00324 	muli	r3,r3,12
   9b308:	10c5883a 	add	r2,r2,r3
   9b30c:	e0ffff17 	ldw	r3,-4(fp)
   9b310:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   9b314:	d0e00e17 	ldw	r3,-32712(gp)
   9b318:	e0bffd17 	ldw	r2,-12(fp)
   9b31c:	1880020e 	bge	r3,r2,9b328 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   9b320:	e0bffd17 	ldw	r2,-12(fp)
   9b324:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
   9b328:	e0bffd17 	ldw	r2,-12(fp)
   9b32c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   9b330:	00000606 	br	9b34c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   9b334:	e0bffd17 	ldw	r2,-12(fp)
   9b338:	10800044 	addi	r2,r2,1
   9b33c:	e0bffd15 	stw	r2,-12(fp)
   9b340:	e0bffd17 	ldw	r2,-12(fp)
   9b344:	10800810 	cmplti	r2,r2,32
   9b348:	103fe41e 	bne	r2,zero,9b2dc <__alt_data_end+0xfffcb41c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   9b34c:	e0bffe17 	ldw	r2,-8(fp)
}
   9b350:	e037883a 	mov	sp,fp
   9b354:	df000017 	ldw	fp,0(sp)
   9b358:	dec00104 	addi	sp,sp,4
   9b35c:	f800283a 	ret

0009b360 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   9b360:	defffb04 	addi	sp,sp,-20
   9b364:	df000415 	stw	fp,16(sp)
   9b368:	df000404 	addi	fp,sp,16
   9b36c:	e13ffe15 	stw	r4,-8(fp)
   9b370:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   9b374:	e0bfff17 	ldw	r2,-4(fp)
   9b378:	10880070 	cmpltui	r2,r2,8193
   9b37c:	1000021e 	bne	r2,zero,9b388 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   9b380:	00880004 	movi	r2,8192
   9b384:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   9b388:	e0fffe17 	ldw	r3,-8(fp)
   9b38c:	e0bfff17 	ldw	r2,-4(fp)
   9b390:	1885883a 	add	r2,r3,r2
   9b394:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   9b398:	e0bffe17 	ldw	r2,-8(fp)
   9b39c:	e0bffc15 	stw	r2,-16(fp)
   9b3a0:	00000506 	br	9b3b8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   9b3a4:	e0bffc17 	ldw	r2,-16(fp)
   9b3a8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   9b3ac:	e0bffc17 	ldw	r2,-16(fp)
   9b3b0:	10800804 	addi	r2,r2,32
   9b3b4:	e0bffc15 	stw	r2,-16(fp)
   9b3b8:	e0fffc17 	ldw	r3,-16(fp)
   9b3bc:	e0bffd17 	ldw	r2,-12(fp)
   9b3c0:	18bff836 	bltu	r3,r2,9b3a4 <__alt_data_end+0xfffcb4e4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   9b3c4:	e0bffe17 	ldw	r2,-8(fp)
   9b3c8:	108007cc 	andi	r2,r2,31
   9b3cc:	10000226 	beq	r2,zero,9b3d8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   9b3d0:	e0bffc17 	ldw	r2,-16(fp)
   9b3d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   9b3d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   9b3dc:	0001883a 	nop
   9b3e0:	e037883a 	mov	sp,fp
   9b3e4:	df000017 	ldw	fp,0(sp)
   9b3e8:	dec00104 	addi	sp,sp,4
   9b3ec:	f800283a 	ret

0009b3f0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   9b3f0:	defffe04 	addi	sp,sp,-8
   9b3f4:	df000115 	stw	fp,4(sp)
   9b3f8:	df000104 	addi	fp,sp,4
   9b3fc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   9b400:	e0bfff17 	ldw	r2,-4(fp)
   9b404:	10bffe84 	addi	r2,r2,-6
   9b408:	10c00428 	cmpgeui	r3,r2,16
   9b40c:	18001a1e 	bne	r3,zero,9b478 <alt_exception_cause_generated_bad_addr+0x88>
   9b410:	100690ba 	slli	r3,r2,2
   9b414:	008002b4 	movhi	r2,10
   9b418:	10ad0a04 	addi	r2,r2,-19416
   9b41c:	1885883a 	add	r2,r3,r2
   9b420:	10800017 	ldw	r2,0(r2)
   9b424:	1000683a 	jmp	r2
   9b428:	0009b468 	cmpgeui	zero,zero,9937
   9b42c:	0009b468 	cmpgeui	zero,zero,9937
   9b430:	0009b478 	rdprs	zero,zero,9937
   9b434:	0009b478 	rdprs	zero,zero,9937
   9b438:	0009b478 	rdprs	zero,zero,9937
   9b43c:	0009b468 	cmpgeui	zero,zero,9937
   9b440:	0009b470 	cmpltui	zero,zero,9937
   9b444:	0009b478 	rdprs	zero,zero,9937
   9b448:	0009b468 	cmpgeui	zero,zero,9937
   9b44c:	0009b468 	cmpgeui	zero,zero,9937
   9b450:	0009b478 	rdprs	zero,zero,9937
   9b454:	0009b468 	cmpgeui	zero,zero,9937
   9b458:	0009b470 	cmpltui	zero,zero,9937
   9b45c:	0009b478 	rdprs	zero,zero,9937
   9b460:	0009b478 	rdprs	zero,zero,9937
   9b464:	0009b468 	cmpgeui	zero,zero,9937
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   9b468:	00800044 	movi	r2,1
   9b46c:	00000306 	br	9b47c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   9b470:	0005883a 	mov	r2,zero
   9b474:	00000106 	br	9b47c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   9b478:	0005883a 	mov	r2,zero
  }
}
   9b47c:	e037883a 	mov	sp,fp
   9b480:	df000017 	ldw	fp,0(sp)
   9b484:	dec00104 	addi	sp,sp,4
   9b488:	f800283a 	ret

0009b48c <atexit>:
   9b48c:	200b883a 	mov	r5,r4
   9b490:	000f883a 	mov	r7,zero
   9b494:	000d883a 	mov	r6,zero
   9b498:	0009883a 	mov	r4,zero
   9b49c:	009b5541 	jmpi	9b554 <__register_exitproc>

0009b4a0 <exit>:
   9b4a0:	defffe04 	addi	sp,sp,-8
   9b4a4:	000b883a 	mov	r5,zero
   9b4a8:	dc000015 	stw	r16,0(sp)
   9b4ac:	dfc00115 	stw	ra,4(sp)
   9b4b0:	2021883a 	mov	r16,r4
   9b4b4:	009b66c0 	call	9b66c <__call_exitprocs>
   9b4b8:	008002b4 	movhi	r2,10
   9b4bc:	10bb5b04 	addi	r2,r2,-4756
   9b4c0:	11000017 	ldw	r4,0(r2)
   9b4c4:	20800f17 	ldw	r2,60(r4)
   9b4c8:	10000126 	beq	r2,zero,9b4d0 <exit+0x30>
   9b4cc:	103ee83a 	callr	r2
   9b4d0:	8009883a 	mov	r4,r16
   9b4d4:	009b7ec0 	call	9b7ec <_exit>

0009b4d8 <memcmp>:
   9b4d8:	01c000c4 	movi	r7,3
   9b4dc:	3980192e 	bgeu	r7,r6,9b544 <memcmp+0x6c>
   9b4e0:	2144b03a 	or	r2,r4,r5
   9b4e4:	11c4703a 	and	r2,r2,r7
   9b4e8:	10000f26 	beq	r2,zero,9b528 <memcmp+0x50>
   9b4ec:	20800003 	ldbu	r2,0(r4)
   9b4f0:	28c00003 	ldbu	r3,0(r5)
   9b4f4:	10c0151e 	bne	r2,r3,9b54c <memcmp+0x74>
   9b4f8:	31bfff84 	addi	r6,r6,-2
   9b4fc:	01ffffc4 	movi	r7,-1
   9b500:	00000406 	br	9b514 <memcmp+0x3c>
   9b504:	20800003 	ldbu	r2,0(r4)
   9b508:	28c00003 	ldbu	r3,0(r5)
   9b50c:	31bfffc4 	addi	r6,r6,-1
   9b510:	10c00e1e 	bne	r2,r3,9b54c <memcmp+0x74>
   9b514:	21000044 	addi	r4,r4,1
   9b518:	29400044 	addi	r5,r5,1
   9b51c:	31fff91e 	bne	r6,r7,9b504 <__alt_data_end+0xfffcb644>
   9b520:	0005883a 	mov	r2,zero
   9b524:	f800283a 	ret
   9b528:	20c00017 	ldw	r3,0(r4)
   9b52c:	28800017 	ldw	r2,0(r5)
   9b530:	18bfee1e 	bne	r3,r2,9b4ec <__alt_data_end+0xfffcb62c>
   9b534:	31bfff04 	addi	r6,r6,-4
   9b538:	21000104 	addi	r4,r4,4
   9b53c:	29400104 	addi	r5,r5,4
   9b540:	39bff936 	bltu	r7,r6,9b528 <__alt_data_end+0xfffcb668>
   9b544:	303fe91e 	bne	r6,zero,9b4ec <__alt_data_end+0xfffcb62c>
   9b548:	003ff506 	br	9b520 <__alt_data_end+0xfffcb660>
   9b54c:	10c5c83a 	sub	r2,r2,r3
   9b550:	f800283a 	ret

0009b554 <__register_exitproc>:
   9b554:	defffa04 	addi	sp,sp,-24
   9b558:	dc000315 	stw	r16,12(sp)
   9b55c:	040002b4 	movhi	r16,10
   9b560:	843b5b04 	addi	r16,r16,-4756
   9b564:	80c00017 	ldw	r3,0(r16)
   9b568:	dc400415 	stw	r17,16(sp)
   9b56c:	dfc00515 	stw	ra,20(sp)
   9b570:	18805217 	ldw	r2,328(r3)
   9b574:	2023883a 	mov	r17,r4
   9b578:	10003726 	beq	r2,zero,9b658 <__register_exitproc+0x104>
   9b57c:	10c00117 	ldw	r3,4(r2)
   9b580:	010007c4 	movi	r4,31
   9b584:	20c00e16 	blt	r4,r3,9b5c0 <__register_exitproc+0x6c>
   9b588:	1a000044 	addi	r8,r3,1
   9b58c:	8800221e 	bne	r17,zero,9b618 <__register_exitproc+0xc4>
   9b590:	18c00084 	addi	r3,r3,2
   9b594:	18c7883a 	add	r3,r3,r3
   9b598:	18c7883a 	add	r3,r3,r3
   9b59c:	12000115 	stw	r8,4(r2)
   9b5a0:	10c7883a 	add	r3,r2,r3
   9b5a4:	19400015 	stw	r5,0(r3)
   9b5a8:	0005883a 	mov	r2,zero
   9b5ac:	dfc00517 	ldw	ra,20(sp)
   9b5b0:	dc400417 	ldw	r17,16(sp)
   9b5b4:	dc000317 	ldw	r16,12(sp)
   9b5b8:	dec00604 	addi	sp,sp,24
   9b5bc:	f800283a 	ret
   9b5c0:	00800034 	movhi	r2,0
   9b5c4:	10800004 	addi	r2,r2,0
   9b5c8:	10002626 	beq	r2,zero,9b664 <__register_exitproc+0x110>
   9b5cc:	01006404 	movi	r4,400
   9b5d0:	d9400015 	stw	r5,0(sp)
   9b5d4:	d9800115 	stw	r6,4(sp)
   9b5d8:	d9c00215 	stw	r7,8(sp)
   9b5dc:	00000000 	call	0 <__reset-0x80000>
   9b5e0:	d9400017 	ldw	r5,0(sp)
   9b5e4:	d9800117 	ldw	r6,4(sp)
   9b5e8:	d9c00217 	ldw	r7,8(sp)
   9b5ec:	10001d26 	beq	r2,zero,9b664 <__register_exitproc+0x110>
   9b5f0:	81000017 	ldw	r4,0(r16)
   9b5f4:	10000115 	stw	zero,4(r2)
   9b5f8:	02000044 	movi	r8,1
   9b5fc:	22405217 	ldw	r9,328(r4)
   9b600:	0007883a 	mov	r3,zero
   9b604:	12400015 	stw	r9,0(r2)
   9b608:	20805215 	stw	r2,328(r4)
   9b60c:	10006215 	stw	zero,392(r2)
   9b610:	10006315 	stw	zero,396(r2)
   9b614:	883fde26 	beq	r17,zero,9b590 <__alt_data_end+0xfffcb6d0>
   9b618:	18c9883a 	add	r4,r3,r3
   9b61c:	2109883a 	add	r4,r4,r4
   9b620:	1109883a 	add	r4,r2,r4
   9b624:	21802215 	stw	r6,136(r4)
   9b628:	01800044 	movi	r6,1
   9b62c:	12406217 	ldw	r9,392(r2)
   9b630:	30cc983a 	sll	r6,r6,r3
   9b634:	4992b03a 	or	r9,r9,r6
   9b638:	12406215 	stw	r9,392(r2)
   9b63c:	21c04215 	stw	r7,264(r4)
   9b640:	01000084 	movi	r4,2
   9b644:	893fd21e 	bne	r17,r4,9b590 <__alt_data_end+0xfffcb6d0>
   9b648:	11006317 	ldw	r4,396(r2)
   9b64c:	218cb03a 	or	r6,r4,r6
   9b650:	11806315 	stw	r6,396(r2)
   9b654:	003fce06 	br	9b590 <__alt_data_end+0xfffcb6d0>
   9b658:	18805304 	addi	r2,r3,332
   9b65c:	18805215 	stw	r2,328(r3)
   9b660:	003fc606 	br	9b57c <__alt_data_end+0xfffcb6bc>
   9b664:	00bfffc4 	movi	r2,-1
   9b668:	003fd006 	br	9b5ac <__alt_data_end+0xfffcb6ec>

0009b66c <__call_exitprocs>:
   9b66c:	defff504 	addi	sp,sp,-44
   9b670:	df000915 	stw	fp,36(sp)
   9b674:	dd400615 	stw	r21,24(sp)
   9b678:	dc800315 	stw	r18,12(sp)
   9b67c:	dfc00a15 	stw	ra,40(sp)
   9b680:	ddc00815 	stw	r23,32(sp)
   9b684:	dd800715 	stw	r22,28(sp)
   9b688:	dd000515 	stw	r20,20(sp)
   9b68c:	dcc00415 	stw	r19,16(sp)
   9b690:	dc400215 	stw	r17,8(sp)
   9b694:	dc000115 	stw	r16,4(sp)
   9b698:	d9000015 	stw	r4,0(sp)
   9b69c:	2839883a 	mov	fp,r5
   9b6a0:	04800044 	movi	r18,1
   9b6a4:	057fffc4 	movi	r21,-1
   9b6a8:	008002b4 	movhi	r2,10
   9b6ac:	10bb5b04 	addi	r2,r2,-4756
   9b6b0:	12000017 	ldw	r8,0(r2)
   9b6b4:	45005217 	ldw	r20,328(r8)
   9b6b8:	44c05204 	addi	r19,r8,328
   9b6bc:	a0001c26 	beq	r20,zero,9b730 <__call_exitprocs+0xc4>
   9b6c0:	a0800117 	ldw	r2,4(r20)
   9b6c4:	15ffffc4 	addi	r23,r2,-1
   9b6c8:	b8000d16 	blt	r23,zero,9b700 <__call_exitprocs+0x94>
   9b6cc:	14000044 	addi	r16,r2,1
   9b6d0:	8421883a 	add	r16,r16,r16
   9b6d4:	8421883a 	add	r16,r16,r16
   9b6d8:	84402004 	addi	r17,r16,128
   9b6dc:	a463883a 	add	r17,r20,r17
   9b6e0:	a421883a 	add	r16,r20,r16
   9b6e4:	e0001e26 	beq	fp,zero,9b760 <__call_exitprocs+0xf4>
   9b6e8:	80804017 	ldw	r2,256(r16)
   9b6ec:	e0801c26 	beq	fp,r2,9b760 <__call_exitprocs+0xf4>
   9b6f0:	bdffffc4 	addi	r23,r23,-1
   9b6f4:	843fff04 	addi	r16,r16,-4
   9b6f8:	8c7fff04 	addi	r17,r17,-4
   9b6fc:	bd7ff91e 	bne	r23,r21,9b6e4 <__alt_data_end+0xfffcb824>
   9b700:	00800034 	movhi	r2,0
   9b704:	10800004 	addi	r2,r2,0
   9b708:	10000926 	beq	r2,zero,9b730 <__call_exitprocs+0xc4>
   9b70c:	a0800117 	ldw	r2,4(r20)
   9b710:	1000301e 	bne	r2,zero,9b7d4 <__call_exitprocs+0x168>
   9b714:	a0800017 	ldw	r2,0(r20)
   9b718:	10003226 	beq	r2,zero,9b7e4 <__call_exitprocs+0x178>
   9b71c:	a009883a 	mov	r4,r20
   9b720:	98800015 	stw	r2,0(r19)
   9b724:	00000000 	call	0 <__reset-0x80000>
   9b728:	9d000017 	ldw	r20,0(r19)
   9b72c:	a03fe41e 	bne	r20,zero,9b6c0 <__alt_data_end+0xfffcb800>
   9b730:	dfc00a17 	ldw	ra,40(sp)
   9b734:	df000917 	ldw	fp,36(sp)
   9b738:	ddc00817 	ldw	r23,32(sp)
   9b73c:	dd800717 	ldw	r22,28(sp)
   9b740:	dd400617 	ldw	r21,24(sp)
   9b744:	dd000517 	ldw	r20,20(sp)
   9b748:	dcc00417 	ldw	r19,16(sp)
   9b74c:	dc800317 	ldw	r18,12(sp)
   9b750:	dc400217 	ldw	r17,8(sp)
   9b754:	dc000117 	ldw	r16,4(sp)
   9b758:	dec00b04 	addi	sp,sp,44
   9b75c:	f800283a 	ret
   9b760:	a0800117 	ldw	r2,4(r20)
   9b764:	80c00017 	ldw	r3,0(r16)
   9b768:	10bfffc4 	addi	r2,r2,-1
   9b76c:	15c01426 	beq	r2,r23,9b7c0 <__call_exitprocs+0x154>
   9b770:	80000015 	stw	zero,0(r16)
   9b774:	183fde26 	beq	r3,zero,9b6f0 <__alt_data_end+0xfffcb830>
   9b778:	95c8983a 	sll	r4,r18,r23
   9b77c:	a0806217 	ldw	r2,392(r20)
   9b780:	a5800117 	ldw	r22,4(r20)
   9b784:	2084703a 	and	r2,r4,r2
   9b788:	10000b26 	beq	r2,zero,9b7b8 <__call_exitprocs+0x14c>
   9b78c:	a0806317 	ldw	r2,396(r20)
   9b790:	2088703a 	and	r4,r4,r2
   9b794:	20000c1e 	bne	r4,zero,9b7c8 <__call_exitprocs+0x15c>
   9b798:	89400017 	ldw	r5,0(r17)
   9b79c:	d9000017 	ldw	r4,0(sp)
   9b7a0:	183ee83a 	callr	r3
   9b7a4:	a0800117 	ldw	r2,4(r20)
   9b7a8:	15bfbf1e 	bne	r2,r22,9b6a8 <__alt_data_end+0xfffcb7e8>
   9b7ac:	98800017 	ldw	r2,0(r19)
   9b7b0:	153fcf26 	beq	r2,r20,9b6f0 <__alt_data_end+0xfffcb830>
   9b7b4:	003fbc06 	br	9b6a8 <__alt_data_end+0xfffcb7e8>
   9b7b8:	183ee83a 	callr	r3
   9b7bc:	003ff906 	br	9b7a4 <__alt_data_end+0xfffcb8e4>
   9b7c0:	a5c00115 	stw	r23,4(r20)
   9b7c4:	003feb06 	br	9b774 <__alt_data_end+0xfffcb8b4>
   9b7c8:	89000017 	ldw	r4,0(r17)
   9b7cc:	183ee83a 	callr	r3
   9b7d0:	003ff406 	br	9b7a4 <__alt_data_end+0xfffcb8e4>
   9b7d4:	a0800017 	ldw	r2,0(r20)
   9b7d8:	a027883a 	mov	r19,r20
   9b7dc:	1029883a 	mov	r20,r2
   9b7e0:	003fb606 	br	9b6bc <__alt_data_end+0xfffcb7fc>
   9b7e4:	0005883a 	mov	r2,zero
   9b7e8:	003ffb06 	br	9b7d8 <__alt_data_end+0xfffcb918>

0009b7ec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   9b7ec:	defffd04 	addi	sp,sp,-12
   9b7f0:	df000215 	stw	fp,8(sp)
   9b7f4:	df000204 	addi	fp,sp,8
   9b7f8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   9b7fc:	0001883a 	nop
   9b800:	e0bfff17 	ldw	r2,-4(fp)
   9b804:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   9b808:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   9b80c:	10000226 	beq	r2,zero,9b818 <_exit+0x2c>
    ALT_SIM_FAIL();
   9b810:	002af070 	cmpltui	zero,zero,43969
   9b814:	00000106 	br	9b81c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   9b818:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   9b81c:	003fff06 	br	9b81c <__alt_data_end+0xfffcb95c>
